/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
    // The deferred used on DOM ready
    readyList,

    // A central reference to the root jQuery(document)
    rootjQuery,

    // Support: IE<10
    // For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
    core_strundefined = typeof undefined,

    // Use the correct document accordingly with window argument (sandbox)
    location = window.location,
    document = window.document,
    docElem = document.documentElement,

    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,

    // Map over the $ in case of overwrite
    _$ = window.$,

    // [[Class]] -> type pairs
    class2type = {},

    // List of deleted data cache ids, so we can reuse them
    core_deletedIds = [],

    core_version = "1.10.2",

    // Save a reference to some core methods
    core_concat = core_deletedIds.concat,
    core_push = core_deletedIds.push,
    core_slice = core_deletedIds.slice,
    core_indexOf = core_deletedIds.indexOf,
    core_toString = class2type.toString,
    core_hasOwn = class2type.hasOwnProperty,
    core_trim = core_version.trim,

    // Define a local copy of jQuery
    jQuery = function( selector, context ) {
        // The jQuery object is actually just the init constructor 'enhanced'
        return new jQuery.fn.init( selector, context, rootjQuery );
    },

    // Used for matching numbers
    core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

    // Used for splitting on whitespace
    core_rnotwhite = /\S+/g,

    // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

    // Match a standalone tag
    rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

    // JSON RegExp
    rvalidchars = /^[\],:{}\s]*$/,
    rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
    rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
    rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/,
    rdashAlpha = /-([\da-z])/gi,

    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function( all, letter ) {
        return letter.toUpperCase();
    },

    // The ready event handler
    completed = function( event ) {

        // readyState === "complete" is good enough for us to call the dom ready in oldIE
        if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
            detach();
            jQuery.ready();
        }
    },
    // Clean-up method for dom ready events
    detach = function() {
        if ( document.addEventListener ) {
            document.removeEventListener( "DOMContentLoaded", completed, false );
            window.removeEventListener( "load", completed, false );

        } else {
            document.detachEvent( "onreadystatechange", completed );
            window.detachEvent( "onload", completed );
        }
    };

jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: core_version,

    constructor: jQuery,
    init: function( selector, context, rootjQuery ) {
        var match, elem;

        // HANDLE: $(""), $(null), $(undefined), $(false)
        if ( !selector ) {
            return this;
        }

        // Handle HTML strings
        if ( typeof selector === "string" ) {
            if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
                // Assume that strings that start and end with <> are HTML and skip the regex check
                match = [ null, selector, null ];

            } else {
                match = rquickExpr.exec( selector );
            }

            // Match html or make sure no context is specified for #id
            if ( match && (match[1] || !context) ) {

                // HANDLE: $(html) -> $(array)
                if ( match[1] ) {
                    context = context instanceof jQuery ? context[0] : context;

                    // scripts is true for back-compat
                    jQuery.merge( this, jQuery.parseHTML(
                        match[1],
                        context && context.nodeType ? context.ownerDocument || context : document,
                        true
                    ) );

                    // HANDLE: $(html, props)
                    if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                        for ( match in context ) {
                            // Properties of context are called as methods if possible
                            if ( jQuery.isFunction( this[ match ] ) ) {
                                this[ match ]( context[ match ] );

                            // ...and otherwise set as attributes
                            } else {
                                this.attr( match, context[ match ] );
                            }
                        }
                    }

                    return this;

                // HANDLE: $(#id)
                } else {
                    elem = document.getElementById( match[2] );

                    // Check parentNode to catch when Blackberry 4.6 returns
                    // nodes that are no longer in the document #6963
                    if ( elem && elem.parentNode ) {
                        // Handle the case where IE and Opera return items
                        // by name instead of ID
                        if ( elem.id !== match[2] ) {
                            return rootjQuery.find( selector );
                        }

                        // Otherwise, we inject the element directly into the jQuery object
                        this.length = 1;
                        this[0] = elem;
                    }

                    this.context = document;
                    this.selector = selector;
                    return this;
                }

            // HANDLE: $(expr, $(...))
            } else if ( !context || context.jquery ) {
                return ( context || rootjQuery ).find( selector );

            // HANDLE: $(expr, context)
            // (which is just equivalent to: $(context).find(expr)
            } else {
                return this.constructor( context ).find( selector );
            }

        // HANDLE: $(DOMElement)
        } else if ( selector.nodeType ) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;

        // HANDLE: $(function)
        // Shortcut for document ready
        } else if ( jQuery.isFunction( selector ) ) {
            return rootjQuery.ready( selector );
        }

        if ( selector.selector !== undefined ) {
            this.selector = selector.selector;
            this.context = selector.context;
        }

        return jQuery.makeArray( selector, this );
    },

    // Start with an empty selector
    selector: "",

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function() {
        return core_slice.call( this );
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function( num ) {
        return num == null ?

            // Return a 'clean' array
            this.toArray() :

            // Return just the object
            ( num < 0 ? this[ this.length + num ] : this[ num ] );
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function( elems ) {

        // Build a new jQuery matched element set
        var ret = jQuery.merge( this.constructor(), elems );

        // Add the old object onto the stack (as a reference)
        ret.prevObject = this;
        ret.context = this.context;

        // Return the newly-formed element set
        return ret;
    },

    // Execute a callback for every element in the matched set.
    // (You can seed the arguments with an array of args, but this is
    // only used internally.)
    each: function( callback, args ) {
        return jQuery.each( this, callback, args );
    },

    ready: function( fn ) {
        // Add the callback
        jQuery.ready.promise().done( fn );

        return this;
    },

    slice: function() {
        return this.pushStack( core_slice.apply( this, arguments ) );
    },

    first: function() {
        return this.eq( 0 );
    },

    last: function() {
        return this.eq( -1 );
    },

    eq: function( i ) {
        var len = this.length,
            j = +i + ( i < 0 ? len : 0 );
        return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
    },

    map: function( callback ) {
        return this.pushStack( jQuery.map(this, function( elem, i ) {
            return callback.call( elem, i, elem );
        }));
    },

    end: function() {
        return this.prevObject || this.constructor(null);
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: core_push,
    sort: [].sort,
    splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
    var src, copyIsArray, copy, name, options, clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false;

    // Handle a deep copy situation
    if ( typeof target === "boolean" ) {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
        target = {};
    }

    // extend jQuery itself if only one argument is passed
    if ( length === i ) {
        target = this;
        --i;
    }

    for ( ; i < length; i++ ) {
        // Only deal with non-null/undefined values
        if ( (options = arguments[ i ]) != null ) {
            // Extend the base object
            for ( name in options ) {
                src = target[ name ];
                copy = options[ name ];

                // Prevent never-ending loop
                if ( target === copy ) {
                    continue;
                }

                // Recurse if we're merging plain objects or arrays
                if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                    if ( copyIsArray ) {
                        copyIsArray = false;
                        clone = src && jQuery.isArray(src) ? src : [];

                    } else {
                        clone = src && jQuery.isPlainObject(src) ? src : {};
                    }

                    // Never move original objects, clone them
                    target[ name ] = jQuery.extend( deep, clone, copy );

                // Don't bring in undefined values
                } else if ( copy !== undefined ) {
                    target[ name ] = copy;
                }
            }
        }
    }

    // Return the modified object
    return target;
};

jQuery.extend({
    // Unique for each copy of jQuery on the page
    // Non-digits removed to match rinlinejQuery
    expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

    noConflict: function( deep ) {
        if ( window.$ === jQuery ) {
            window.$ = _$;
        }

        if ( deep && window.jQuery === jQuery ) {
            window.jQuery = _jQuery;
        }

        return jQuery;
    },

    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,

    // Hold (or release) the ready event
    holdReady: function( hold ) {
        if ( hold ) {
            jQuery.readyWait++;
        } else {
            jQuery.ready( true );
        }
    },

    // Handle when the DOM is ready
    ready: function( wait ) {

        // Abort if there are pending holds or we're already ready
        if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
            return;
        }

        // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
        if ( !document.body ) {
            return setTimeout( jQuery.ready );
        }

        // Remember that the DOM is ready
        jQuery.isReady = true;

        // If a normal DOM Ready event fired, decrement, and wait if need be
        if ( wait !== true && --jQuery.readyWait > 0 ) {
            return;
        }

        // If there are functions bound, to execute
        readyList.resolveWith( document, [ jQuery ] );

        // Trigger any bound ready events
        if ( jQuery.fn.trigger ) {
            jQuery( document ).trigger("ready").off("ready");
        }
    },

    // See test/unit/core.js for details concerning isFunction.
    // Since version 1.3, DOM methods and functions like alert
    // aren't supported. They return false on IE (#2968).
    isFunction: function( obj ) {
        return jQuery.type(obj) === "function";
    },

    isArray: Array.isArray || function( obj ) {
        return jQuery.type(obj) === "array";
    },

    isWindow: function( obj ) {
        /* jshint eqeqeq: false */
        return obj != null && obj == obj.window;
    },

    isNumeric: function( obj ) {
        return !isNaN( parseFloat(obj) ) && isFinite( obj );
    },

    type: function( obj ) {
        if ( obj == null ) {
            return String( obj );
        }
        return typeof obj === "object" || typeof obj === "function" ?
            class2type[ core_toString.call(obj) ] || "object" :
            typeof obj;
    },

    isPlainObject: function( obj ) {
        var key;

        // Must be an Object.
        // Because of IE, we also have to check the presence of the constructor property.
        // Make sure that DOM nodes and window objects don't pass through, as well
        if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
            return false;
        }

        try {
            // Not own constructor property must be Object
            if ( obj.constructor &&
                !core_hasOwn.call(obj, "constructor") &&
                !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
                return false;
            }
        } catch ( e ) {
            // IE8,9 Will throw exceptions on certain host objects #9897
            return false;
        }

        // Support: IE<9
        // Handle iteration over inherited properties before own properties.
        if ( jQuery.support.ownLast ) {
            for ( key in obj ) {
                return core_hasOwn.call( obj, key );
            }
        }

        // Own properties are enumerated firstly, so to speed up,
        // if last one is own, then all properties are own.
        for ( key in obj ) {}

        return key === undefined || core_hasOwn.call( obj, key );
    },

    isEmptyObject: function( obj ) {
        var name;
        for ( name in obj ) {
            return false;
        }
        return true;
    },

    error: function( msg ) {
        throw new Error( msg );
    },

    // data: string of html
    // context (optional): If specified, the fragment will be created in this context, defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    parseHTML: function( data, context, keepScripts ) {
        if ( !data || typeof data !== "string" ) {
            return null;
        }
        if ( typeof context === "boolean" ) {
            keepScripts = context;
            context = false;
        }
        context = context || document;

        var parsed = rsingleTag.exec( data ),
            scripts = !keepScripts && [];

        // Single tag
        if ( parsed ) {
            return [ context.createElement( parsed[1] ) ];
        }

        parsed = jQuery.buildFragment( [ data ], context, scripts );
        if ( scripts ) {
            jQuery( scripts ).remove();
        }
        return jQuery.merge( [], parsed.childNodes );
    },

    parseJSON: function( data ) {
        // Attempt to parse using the native JSON parser first
        if ( window.JSON && window.JSON.parse ) {
            return window.JSON.parse( data );
        }

        if ( data === null ) {
            return data;
        }

        if ( typeof data === "string" ) {

            // Make sure leading/trailing whitespace is removed (IE can't handle it)
            data = jQuery.trim( data );

            if ( data ) {
                // Make sure the incoming data is actual JSON
                // Logic borrowed from http://json.org/json2.js
                if ( rvalidchars.test( data.replace( rvalidescape, "@" )
                    .replace( rvalidtokens, "]" )
                    .replace( rvalidbraces, "")) ) {

                    return ( new Function( "return " + data ) )();
                }
            }
        }

        jQuery.error( "Invalid JSON: " + data );
    },

    // Cross-browser xml parsing
    parseXML: function( data ) {
        var xml, tmp;
        if ( !data || typeof data !== "string" ) {
            return null;
        }
        try {
            if ( window.DOMParser ) { // Standard
                tmp = new DOMParser();
                xml = tmp.parseFromString( data , "text/xml" );
            } else { // IE
                xml = new ActiveXObject( "Microsoft.XMLDOM" );
                xml.async = "false";
                xml.loadXML( data );
            }
        } catch( e ) {
            xml = undefined;
        }
        if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
            jQuery.error( "Invalid XML: " + data );
        }
        return xml;
    },

    noop: function() {},

    // Evaluates a script in a global context
    // Workarounds based on findings by Jim Driscoll
    // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
    globalEval: function( data ) {
        if ( data && jQuery.trim( data ) ) {
            // We use execScript on Internet Explorer
            // We use an anonymous function so that context is window
            // rather than jQuery in Firefox
            ( window.execScript || function( data ) {
                window[ "eval" ].call( window, data );
            } )( data );
        }
    },

    // Convert dashed to camelCase; used by the css and data modules
    // Microsoft forgot to hump their vendor prefix (#9572)
    camelCase: function( string ) {
        return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    },

    nodeName: function( elem, name ) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },

    // args is for internal usage only
    each: function( obj, callback, args ) {
        var value,
            i = 0,
            length = obj.length,
            isArray = isArraylike( obj );

        if ( args ) {
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback.apply( obj[ i ], args );

                    if ( value === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    value = callback.apply( obj[ i ], args );

                    if ( value === false ) {
                        break;
                    }
                }
            }

        // A special, fast, case for the most common use of each
        } else {
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback.call( obj[ i ], i, obj[ i ] );

                    if ( value === false ) {
                        break;
                    }
                }
            } else {
                for ( i in obj ) {
                    value = callback.call( obj[ i ], i, obj[ i ] );

                    if ( value === false ) {
                        break;
                    }
                }
            }
        }

        return obj;
    },

    // Use native String.trim function wherever possible
    trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
        function( text ) {
            return text == null ?
                "" :
                core_trim.call( text );
        } :

        // Otherwise use our own trimming functionality
        function( text ) {
            return text == null ?
                "" :
                ( text + "" ).replace( rtrim, "" );
        },

    // results is for internal usage only
    makeArray: function( arr, results ) {
        var ret = results || [];

        if ( arr != null ) {
            if ( isArraylike( Object(arr) ) ) {
                jQuery.merge( ret,
                    typeof arr === "string" ?
                    [ arr ] : arr
                );
            } else {
                core_push.call( ret, arr );
            }
        }

        return ret;
    },

    inArray: function( elem, arr, i ) {
        var len;

        if ( arr ) {
            if ( core_indexOf ) {
                return core_indexOf.call( arr, elem, i );
            }

            len = arr.length;
            i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

            for ( ; i < len; i++ ) {
                // Skip accessing in sparse arrays
                if ( i in arr && arr[ i ] === elem ) {
                    return i;
                }
            }
        }

        return -1;
    },

    merge: function( first, second ) {
        var l = second.length,
            i = first.length,
            j = 0;

        if ( typeof l === "number" ) {
            for ( ; j < l; j++ ) {
                first[ i++ ] = second[ j ];
            }
        } else {
            while ( second[j] !== undefined ) {
                first[ i++ ] = second[ j++ ];
            }
        }

        first.length = i;

        return first;
    },

    grep: function( elems, callback, inv ) {
        var retVal,
            ret = [],
            i = 0,
            length = elems.length;
        inv = !!inv;

        // Go through the array, only saving the items
        // that pass the validator function
        for ( ; i < length; i++ ) {
            retVal = !!callback( elems[ i ], i );
            if ( inv !== retVal ) {
                ret.push( elems[ i ] );
            }
        }

        return ret;
    },

    // arg is for internal usage only
    map: function( elems, callback, arg ) {
        var value,
            i = 0,
            length = elems.length,
            isArray = isArraylike( elems ),
            ret = [];

        // Go through the array, translating each of the items to their
        if ( isArray ) {
            for ( ; i < length; i++ ) {
                value = callback( elems[ i ], i, arg );

                if ( value != null ) {
                    ret[ ret.length ] = value;
                }
            }

        // Go through every key on the object,
        } else {
            for ( i in elems ) {
                value = callback( elems[ i ], i, arg );

                if ( value != null ) {
                    ret[ ret.length ] = value;
                }
            }
        }

        // Flatten any nested arrays
        return core_concat.apply( [], ret );
    },

    // A global GUID counter for objects
    guid: 1,

    // Bind a function to a context, optionally partially applying any
    // arguments.
    proxy: function( fn, context ) {
        var args, proxy, tmp;

        if ( typeof context === "string" ) {
            tmp = fn[ context ];
            context = fn;
            fn = tmp;
        }

        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if ( !jQuery.isFunction( fn ) ) {
            return undefined;
        }

        // Simulated bind
        args = core_slice.call( arguments, 2 );
        proxy = function() {
            return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
        };

        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;

        return proxy;
    },

    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
        var i = 0,
            length = elems.length,
            bulk = key == null;

        // Sets many values
        if ( jQuery.type( key ) === "object" ) {
            chainable = true;
            for ( i in key ) {
                jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
            }

        // Sets one value
        } else if ( value !== undefined ) {
            chainable = true;

            if ( !jQuery.isFunction( value ) ) {
                raw = true;
            }

            if ( bulk ) {
                // Bulk operations run against the entire set
                if ( raw ) {
                    fn.call( elems, value );
                    fn = null;

                // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function( elem, key, value ) {
                        return bulk.call( jQuery( elem ), value );
                    };
                }
            }

            if ( fn ) {
                for ( ; i < length; i++ ) {
                    fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
                }
            }
        }

        return chainable ?
            elems :

            // Gets
            bulk ?
                fn.call( elems ) :
                length ? fn( elems[0], key ) : emptyGet;
    },

    now: function() {
        return ( new Date() ).getTime();
    },

    // A method for quickly swapping in/out CSS properties to get correct calculations.
    // Note: this method belongs to the css module but it's needed here for the support module.
    // If support gets modularized, this method should be moved back to the css module.
    swap: function( elem, options, callback, args ) {
        var ret, name,
            old = {};

        // Remember the old values, and insert the new ones
        for ( name in options ) {
            old[ name ] = elem.style[ name ];
            elem.style[ name ] = options[ name ];
        }

        ret = callback.apply( elem, args || [] );

        // Revert the old values
        for ( name in options ) {
            elem.style[ name ] = old[ name ];
        }

        return ret;
    }
});

jQuery.ready.promise = function( obj ) {
    if ( !readyList ) {

        readyList = jQuery.Deferred();

        // Catch cases where $(document).ready() is called after the browser event has already occurred.
        // we once tried to use readyState "interactive" here, but it caused issues like the one
        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
        if ( document.readyState === "complete" ) {
            // Handle it asynchronously to allow scripts the opportunity to delay ready
            setTimeout( jQuery.ready );

        // Standards-based browsers support DOMContentLoaded
        } else if ( document.addEventListener ) {
            // Use the handy event callback
            document.addEventListener( "DOMContentLoaded", completed, false );

            // A fallback to window.onload, that will always work
            window.addEventListener( "load", completed, false );

        // If IE event model is used
        } else {
            // Ensure firing before onload, maybe late but safe also for iframes
            document.attachEvent( "onreadystatechange", completed );

            // A fallback to window.onload, that will always work
            window.attachEvent( "onload", completed );

            // If IE and not a frame
            // continually check to see if the document is ready
            var top = false;

            try {
                top = window.frameElement == null && document.documentElement;
            } catch(e) {}

            if ( top && top.doScroll ) {
                (function doScrollCheck() {
                    if ( !jQuery.isReady ) {

                        try {
                            // Use the trick by Diego Perini
                            // http://javascript.nwbox.com/IEContentLoaded/
                            top.doScroll("left");
                        } catch(e) {
                            return setTimeout( doScrollCheck, 50 );
                        }

                        // detach all dom ready events
                        detach();

                        // and execute any waiting functions
                        jQuery.ready();
                    }
                })();
            }
        }
    }
    return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
    var length = obj.length,
        type = jQuery.type( obj );

    if ( jQuery.isWindow( obj ) ) {
        return false;
    }

    if ( obj.nodeType === 1 && length ) {
        return true;
    }

    return type === "array" || type !== "function" &&
        ( length === 0 ||
        typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.10.2
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03
 */
(function( window, undefined ) {

var i,
    support,
    cachedruns,
    Expr,
    getText,
    isXML,
    compile,
    outermostContext,
    sortInput,

    // Local document vars
    setDocument,
    document,
    docElem,
    documentIsHTML,
    rbuggyQSA,
    rbuggyMatches,
    matches,
    contains,

    // Instance-specific data
    expando = "sizzle" + -(new Date()),
    preferredDoc = window.document,
    dirruns = 0,
    done = 0,
    classCache = createCache(),
    tokenCache = createCache(),
    compilerCache = createCache(),
    hasDuplicate = false,
    sortOrder = function( a, b ) {
        if ( a === b ) {
            hasDuplicate = true;
            return 0;
        }
        return 0;
    },

    // General-purpose constants
    strundefined = typeof undefined,
    MAX_NEGATIVE = 1 << 31,

    // Instance methods
    hasOwn = ({}).hasOwnProperty,
    arr = [],
    pop = arr.pop,
    push_native = arr.push,
    push = arr.push,
    slice = arr.slice,
    // Use a stripped-down indexOf if we can't use a native one
    indexOf = arr.indexOf || function( elem ) {
        var i = 0,
            len = this.length;
        for ( ; i < len; i++ ) {
            if ( this[i] === elem ) {
                return i;
            }
        }
        return -1;
    },

    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

    // Regular expressions

    // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
    // http://www.w3.org/TR/css3-syntax/#characters
    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

    // Loosely modeled on CSS identifier characters
    // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
    // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = characterEncoding.replace( "w", "w#" ),

    // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
        "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

    // Prefer arguments quoted,
    //   then not containing pseudos/brackets,
    //   then attribute selectors/non-parenthetical expressions,
    //   then anything else
    // These preferences are here to reduce the number of selectors
    //   needing tokenize in the PSEUDO preFilter
    pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

    rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
    rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

    rsibling = new RegExp( whitespace + "*[+~]" ),
    rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

    rpseudo = new RegExp( pseudos ),
    ridentifier = new RegExp( "^" + identifier + "$" ),

    matchExpr = {
        "ID": new RegExp( "^#(" + characterEncoding + ")" ),
        "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
        "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
        "ATTR": new RegExp( "^" + attributes ),
        "PSEUDO": new RegExp( "^" + pseudos ),
        "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
            "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
            "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
        "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
        // For use in libraries implementing .is()
        // We use this for POS matching in `select`
        "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
            whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
    },

    rnative = /^[^{]+\{\s*\[native \w/,

    // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

    rinputs = /^(?:input|select|textarea|button)$/i,
    rheader = /^h\d$/i,

    rescape = /'|\\/g,

    // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
    funescape = function( _, escaped, escapedWhitespace ) {
        var high = "0x" + escaped - 0x10000;
        // NaN means non-codepoint
        // Support: Firefox
        // Workaround erroneous numeric interpretation of +"0x"
        return high !== high || escapedWhitespace ?
            escaped :
            // BMP codepoint
            high < 0 ?
                String.fromCharCode( high + 0x10000 ) :
                // Supplemental Plane codepoint (surrogate pair)
                String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
    };

// Optimize for push.apply( _, NodeList )
try {
    push.apply(
        (arr = slice.call( preferredDoc.childNodes )),
        preferredDoc.childNodes
    );
    // Support: Android<4.0
    // Detect silently failing push.apply
    arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
    push = { apply: arr.length ?

        // Leverage slice if possible
        function( target, els ) {
            push_native.apply( target, slice.call(els) );
        } :

        // Support: IE<9
        // Otherwise append directly
        function( target, els ) {
            var j = target.length,
                i = 0;
            // Can't trust NodeList.length
            while ( (target[j++] = els[i++]) ) {}
            target.length = j - 1;
        }
    };
}

function Sizzle( selector, context, results, seed ) {
    var match, elem, m, nodeType,
        // QSA vars
        i, groups, old, nid, newContext, newSelector;

    if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
        setDocument( context );
    }

    context = context || document;
    results = results || [];

    if ( !selector || typeof selector !== "string" ) {
        return results;
    }

    if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
        return [];
    }

    if ( documentIsHTML && !seed ) {

        // Shortcuts
        if ( (match = rquickExpr.exec( selector )) ) {
            // Speed-up: Sizzle("#ID")
            if ( (m = match[1]) ) {
                if ( nodeType === 9 ) {
                    elem = context.getElementById( m );
                    // Check parentNode to catch when Blackberry 4.6 returns
                    // nodes that are no longer in the document #6963
                    if ( elem && elem.parentNode ) {
                        // Handle the case where IE, Opera, and Webkit return items
                        // by name instead of ID
                        if ( elem.id === m ) {
                            results.push( elem );
                            return results;
                        }
                    } else {
                        return results;
                    }
                } else {
                    // Context is not a document
                    if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                        contains( context, elem ) && elem.id === m ) {
                        results.push( elem );
                        return results;
                    }
                }

            // Speed-up: Sizzle("TAG")
            } else if ( match[2] ) {
                push.apply( results, context.getElementsByTagName( selector ) );
                return results;

            // Speed-up: Sizzle(".CLASS")
            } else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
                push.apply( results, context.getElementsByClassName( m ) );
                return results;
            }
        }

        // QSA path
        if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
            nid = old = expando;
            newContext = context;
            newSelector = nodeType === 9 && selector;

            // qSA works strangely on Element-rooted queries
            // We can work around this by specifying an extra ID on the root
            // and working up from there (Thanks to Andrew Dupont for the technique)
            // IE 8 doesn't work on object elements
            if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                groups = tokenize( selector );

                if ( (old = context.getAttribute("id")) ) {
                    nid = old.replace( rescape, "\\$&" );
                } else {
                    context.setAttribute( "id", nid );
                }
                nid = "[id='" + nid + "'] ";

                i = groups.length;
                while ( i-- ) {
                    groups[i] = nid + toSelector( groups[i] );
                }
                newContext = rsibling.test( selector ) && context.parentNode || context;
                newSelector = groups.join(",");
            }

            if ( newSelector ) {
                try {
                    push.apply( results,
                        newContext.querySelectorAll( newSelector )
                    );
                    return results;
                } catch(qsaError) {
                } finally {
                    if ( !old ) {
                        context.removeAttribute("id");
                    }
                }
            }
        }
    }

    // All others
    return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *  property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *  deleting the oldest entry
 */
function createCache() {
    var keys = [];

    function cache( key, value ) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if ( keys.push( key += " " ) > Expr.cacheLength ) {
            // Only keep the most recent entries
            delete cache[ keys.shift() ];
        }
        return (cache[ key ] = value);
    }
    return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
    fn[ expando ] = true;
    return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
    var div = document.createElement("div");

    try {
        return !!fn( div );
    } catch (e) {
        return false;
    } finally {
        // Remove from its parent by default
        if ( div.parentNode ) {
            div.parentNode.removeChild( div );
        }
        // release memory in IE
        div = null;
    }
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
    var arr = attrs.split("|"),
        i = attrs.length;

    while ( i-- ) {
        Expr.attrHandle[ arr[i] ] = handler;
    }
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
    var cur = b && a,
        diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
            ( ~b.sourceIndex || MAX_NEGATIVE ) -
            ( ~a.sourceIndex || MAX_NEGATIVE );

    // Use IE sourceIndex if available on both nodes
    if ( diff ) {
        return diff;
    }

    // Check if b follows a
    if ( cur ) {
        while ( (cur = cur.nextSibling) ) {
            if ( cur === b ) {
                return -1;
            }
        }
    }

    return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
    return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
    };
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
    return function( elem ) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
    };
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
    return markFunction(function( argument ) {
        argument = +argument;
        return markFunction(function( seed, matches ) {
            var j,
                matchIndexes = fn( [], seed.length, argument ),
                i = matchIndexes.length;

            // Match elements found at the specified indexes
            while ( i-- ) {
                if ( seed[ (j = matchIndexes[i]) ] ) {
                    seed[j] = !(matches[j] = seed[j]);
                }
            }
        });
    });
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
    // documentElement is verified for cases where it doesn't yet exist
    // (such as loading iframes in IE - #4833)
    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
    return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
    var doc = node ? node.ownerDocument || node : preferredDoc,
        parent = doc.defaultView;

    // If no document and documentElement is available, return
    if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
        return document;
    }

    // Set our document
    document = doc;
    docElem = doc.documentElement;

    // Support tests
    documentIsHTML = !isXML( doc );

    // Support: IE>8
    // If iframe document is assigned to "document" variable and if iframe has been reloaded,
    // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
    // IE6-8 do not support the defaultView property so parent will be undefined
    if ( parent && parent.attachEvent && parent !== parent.top ) {
        parent.attachEvent( "onbeforeunload", function() {
            setDocument();
        });
    }

    /* Attributes
    ---------------------------------------------------------------------- */

    // Support: IE<8
    // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
    support.attributes = assert(function( div ) {
        div.className = "i";
        return !div.getAttribute("className");
    });

    /* getElement(s)By*
    ---------------------------------------------------------------------- */

    // Check if getElementsByTagName("*") returns only elements
    support.getElementsByTagName = assert(function( div ) {
        div.appendChild( doc.createComment("") );
        return !div.getElementsByTagName("*").length;
    });

    // Check if getElementsByClassName can be trusted
    support.getElementsByClassName = assert(function( div ) {
        div.innerHTML = "<div class='a'></div><div class='a i'></div>";

        // Support: Safari<4
        // Catch class over-caching
        div.firstChild.className = "i";
        // Support: Opera<10
        // Catch gEBCN failure to find non-leading classes
        return div.getElementsByClassName("i").length === 2;
    });

    // Support: IE<10
    // Check if getElementById returns elements by name
    // The broken getElementById methods don't pick up programatically-set names,
    // so use a roundabout getElementsByName test
    support.getById = assert(function( div ) {
        docElem.appendChild( div ).id = expando;
        return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
    });

    // ID find and filter
    if ( support.getById ) {
        Expr.find["ID"] = function( id, context ) {
            if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
                var m = context.getElementById( id );
                // Check parentNode to catch when Blackberry 4.6 returns
                // nodes that are no longer in the document #6963
                return m && m.parentNode ? [m] : [];
            }
        };
        Expr.filter["ID"] = function( id ) {
            var attrId = id.replace( runescape, funescape );
            return function( elem ) {
                return elem.getAttribute("id") === attrId;
            };
        };
    } else {
        // Support: IE6/7
        // getElementById is not reliable as a find shortcut
        delete Expr.find["ID"];

        Expr.filter["ID"] =  function( id ) {
            var attrId = id.replace( runescape, funescape );
            return function( elem ) {
                var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                return node && node.value === attrId;
            };
        };
    }

    // Tag
    Expr.find["TAG"] = support.getElementsByTagName ?
        function( tag, context ) {
            if ( typeof context.getElementsByTagName !== strundefined ) {
                return context.getElementsByTagName( tag );
            }
        } :
        function( tag, context ) {
            var elem,
                tmp = [],
                i = 0,
                results = context.getElementsByTagName( tag );

            // Filter out possible comments
            if ( tag === "*" ) {
                while ( (elem = results[i++]) ) {
                    if ( elem.nodeType === 1 ) {
                        tmp.push( elem );
                    }
                }

                return tmp;
            }
            return results;
        };

    // Class
    Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
        if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
            return context.getElementsByClassName( className );
        }
    };

    /* QSA/matchesSelector
    ---------------------------------------------------------------------- */

    // QSA and matchesSelector support

    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
    rbuggyMatches = [];

    // qSa(:focus) reports false when true (Chrome 21)
    // We allow this because of a bug in IE8/9 that throws an error
    // whenever `document.activeElement` is accessed on an iframe
    // So, we allow :focus to pass through QSA all the time to avoid the IE error
    // See http://bugs.jquery.com/ticket/13378
    rbuggyQSA = [];

    if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function( div ) {
            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // http://bugs.jquery.com/ticket/12359
            div.innerHTML = "<select><option selected=''></option></select>";

            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if ( !div.querySelectorAll("[selected]").length ) {
                rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
            }

            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if ( !div.querySelectorAll(":checked").length ) {
                rbuggyQSA.push(":checked");
            }
        });

        assert(function( div ) {

            // Support: Opera 10-12/IE8
            // ^= $= *= and empty values
            // Should not select anything
            // Support: Windows 8 Native Apps
            // The type attribute is restricted during .innerHTML assignment
            var input = doc.createElement("input");
            input.setAttribute( "type", "hidden" );
            div.appendChild( input ).setAttribute( "t", "" );

            if ( div.querySelectorAll("[t^='']").length ) {
                rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
            }

            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if ( !div.querySelectorAll(":enabled").length ) {
                rbuggyQSA.push( ":enabled", ":disabled" );
            }

            // Opera 10-11 does not throw on post-comma invalid pseudos
            div.querySelectorAll("*,:x");
            rbuggyQSA.push(",.*:");
        });
    }

    if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
        docElem.mozMatchesSelector ||
        docElem.oMatchesSelector ||
        docElem.msMatchesSelector) )) ) {

        assert(function( div ) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call( div, "div" );

            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call( div, "[s!='']:x" );
            rbuggyMatches.push( "!=", pseudos );
        });
    }

    rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
    rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

    /* Contains
    ---------------------------------------------------------------------- */

    // Element contains another
    // Purposefully does not implement inclusive descendent
    // As in, an element does not contain itself
    contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
        function( a, b ) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
            return a === bup || !!( bup && bup.nodeType === 1 && (
                adown.contains ?
                    adown.contains( bup ) :
                    a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
            ));
        } :
        function( a, b ) {
            if ( b ) {
                while ( (b = b.parentNode) ) {
                    if ( b === a ) {
                        return true;
                    }
                }
            }
            return false;
        };

    /* Sorting
    ---------------------------------------------------------------------- */

    // Document order sorting
    sortOrder = docElem.compareDocumentPosition ?
    function( a, b ) {

        // Flag for duplicate removal
        if ( a === b ) {
            hasDuplicate = true;
            return 0;
        }

        var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

        if ( compare ) {
            // Disconnected nodes
            if ( compare & 1 ||
                (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

                // Choose the first element that is related to our preferred document
                if ( a === doc || contains(preferredDoc, a) ) {
                    return -1;
                }
                if ( b === doc || contains(preferredDoc, b) ) {
                    return 1;
                }

                // Maintain original order
                return sortInput ?
                    ( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
                    0;
            }

            return compare & 4 ? -1 : 1;
        }

        // Not directly comparable, sort on existence of method
        return a.compareDocumentPosition ? -1 : 1;
    } :
    function( a, b ) {
        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [ a ],
            bp = [ b ];

        // Exit early if the nodes are identical
        if ( a === b ) {
            hasDuplicate = true;
            return 0;

        // Parentless nodes are either documents or disconnected
        } else if ( !aup || !bup ) {
            return a === doc ? -1 :
                b === doc ? 1 :
                aup ? -1 :
                bup ? 1 :
                sortInput ?
                ( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
                0;

        // If the nodes are siblings, we can do a quick check
        } else if ( aup === bup ) {
            return siblingCheck( a, b );
        }

        // Otherwise we need full lists of their ancestors for comparison
        cur = a;
        while ( (cur = cur.parentNode) ) {
            ap.unshift( cur );
        }
        cur = b;
        while ( (cur = cur.parentNode) ) {
            bp.unshift( cur );
        }

        // Walk down the tree looking for a discrepancy
        while ( ap[i] === bp[i] ) {
            i++;
        }

        return i ?
            // Do a sibling check if the nodes have a common ancestor
            siblingCheck( ap[i], bp[i] ) :

            // Otherwise nodes in our document sort first
            ap[i] === preferredDoc ? -1 :
            bp[i] === preferredDoc ? 1 :
            0;
    };

    return doc;
};

Sizzle.matches = function( expr, elements ) {
    return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
        setDocument( elem );
    }

    // Make sure that attribute selectors are quoted
    expr = expr.replace( rattributeQuotes, "='$1']" );

    if ( support.matchesSelector && documentIsHTML &&
        ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
        ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

        try {
            var ret = matches.call( elem, expr );

            // IE 9's matchesSelector returns false on disconnected nodes
            if ( ret || support.disconnectedMatch ||
                    // As well, disconnected nodes are said to be in a document
                    // fragment in IE 9
                    elem.document && elem.document.nodeType !== 11 ) {
                return ret;
            }
        } catch(e) {}
    }

    return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
    // Set document vars if needed
    if ( ( context.ownerDocument || context ) !== document ) {
        setDocument( context );
    }
    return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
    // Set document vars if needed
    if ( ( elem.ownerDocument || elem ) !== document ) {
        setDocument( elem );
    }

    var fn = Expr.attrHandle[ name.toLowerCase() ],
        // Don't get fooled by Object.prototype properties (jQuery #13807)
        val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
            fn( elem, name, !documentIsHTML ) :
            undefined;

    return val === undefined ?
        support.attributes || !documentIsHTML ?
            elem.getAttribute( name ) :
            (val = elem.getAttributeNode(name)) && val.specified ?
                val.value :
                null :
        val;
};

Sizzle.error = function( msg ) {
    throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
    var elem,
        duplicates = [],
        j = 0,
        i = 0;

    // Unless we *know* we can detect duplicates, assume their presence
    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice( 0 );
    results.sort( sortOrder );

    if ( hasDuplicate ) {
        while ( (elem = results[i++]) ) {
            if ( elem === results[ i ] ) {
                j = duplicates.push( i );
            }
        }
        while ( j-- ) {
            results.splice( duplicates[ j ], 1 );
        }
    }

    return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
    var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;

    if ( !nodeType ) {
        // If no nodeType, this is expected to be an array
        for ( ; (node = elem[i]); i++ ) {
            // Do not traverse comment nodes
            ret += getText( node );
        }
    } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (see #11153)
        if ( typeof elem.textContent === "string" ) {
            return elem.textContent;
        } else {
            // Traverse its children
            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                ret += getText( elem );
            }
        }
    } else if ( nodeType === 3 || nodeType === 4 ) {
        return elem.nodeValue;
    }
    // Do not include comment or processing instruction nodes

    return ret;
};

Expr = Sizzle.selectors = {

    // Can be adjusted by the user
    cacheLength: 50,

    createPseudo: markFunction,

    match: matchExpr,

    attrHandle: {},

    find: {},

    relative: {
        ">": { dir: "parentNode", first: true },
        " ": { dir: "parentNode" },
        "+": { dir: "previousSibling", first: true },
        "~": { dir: "previousSibling" }
    },

    preFilter: {
        "ATTR": function( match ) {
            match[1] = match[1].replace( runescape, funescape );

            // Move the given value to match[3] whether quoted or unquoted
            match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

            if ( match[2] === "~=" ) {
                match[3] = " " + match[3] + " ";
            }

            return match.slice( 0, 4 );
        },

        "CHILD": function( match ) {
            /* matches from matchExpr["CHILD"]
                1 type (only|nth|...)
                2 what (child|of-type)
                3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                4 xn-component of xn+y argument ([+-]?\d*n|)
                5 sign of xn-component
                6 x of xn-component
                7 sign of y-component
                8 y of y-component
            */
            match[1] = match[1].toLowerCase();

            if ( match[1].slice( 0, 3 ) === "nth" ) {
                // nth-* requires argument
                if ( !match[3] ) {
                    Sizzle.error( match[0] );
                }

                // numeric x and y parameters for Expr.filter.CHILD
                // remember that false/true cast respectively to 0/1
                match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

            // other types prohibit arguments
            } else if ( match[3] ) {
                Sizzle.error( match[0] );
            }

            return match;
        },

        "PSEUDO": function( match ) {
            var excess,
                unquoted = !match[5] && match[2];

            if ( matchExpr["CHILD"].test( match[0] ) ) {
                return null;
            }

            // Accept quoted arguments as-is
            if ( match[3] && match[4] !== undefined ) {
                match[2] = match[4];

            // Strip excess characters from unquoted arguments
            } else if ( unquoted && rpseudo.test( unquoted ) &&
                // Get excess from tokenize (recursively)
                (excess = tokenize( unquoted, true )) &&
                // advance to the next closing parenthesis
                (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

                // excess is a negative index
                match[0] = match[0].slice( 0, excess );
                match[2] = unquoted.slice( 0, excess );
            }

            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice( 0, 3 );
        }
    },

    filter: {

        "TAG": function( nodeNameSelector ) {
            var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
            return nodeNameSelector === "*" ?
                function() { return true; } :
                function( elem ) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                };
        },

        "CLASS": function( className ) {
            var pattern = classCache[ className + " " ];

            return pattern ||
                (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                classCache( className, function( elem ) {
                    return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
                });
        },

        "ATTR": function( name, operator, check ) {
            return function( elem ) {
                var result = Sizzle.attr( elem, name );

                if ( result == null ) {
                    return operator === "!=";
                }
                if ( !operator ) {
                    return true;
                }

                result += "";

                return operator === "=" ? result === check :
                    operator === "!=" ? result !== check :
                    operator === "^=" ? check && result.indexOf( check ) === 0 :
                    operator === "*=" ? check && result.indexOf( check ) > -1 :
                    operator === "$=" ? check && result.slice( -check.length ) === check :
                    operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
                    operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                    false;
            };
        },

        "CHILD": function( type, what, argument, first, last ) {
            var simple = type.slice( 0, 3 ) !== "nth",
                forward = type.slice( -4 ) !== "last",
                ofType = what === "of-type";

            return first === 1 && last === 0 ?

                // Shortcut for :nth-*(n)
                function( elem ) {
                    return !!elem.parentNode;
                } :

                function( elem, context, xml ) {
                    var cache, outerCache, node, diff, nodeIndex, start,
                        dir = simple !== forward ? "nextSibling" : "previousSibling",
                        parent = elem.parentNode,
                        name = ofType && elem.nodeName.toLowerCase(),
                        useCache = !xml && !ofType;

                    if ( parent ) {

                        // :(first|last|only)-(child|of-type)
                        if ( simple ) {
                            while ( dir ) {
                                node = elem;
                                while ( (node = node[ dir ]) ) {
                                    if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                                        return false;
                                    }
                                }
                                // Reverse direction for :only-* (if we haven't yet done so)
                                start = dir = type === "only" && !start && "nextSibling";
                            }
                            return true;
                        }

                        start = [ forward ? parent.firstChild : parent.lastChild ];

                        // non-xml :nth-child(...) stores cache data on `parent`
                        if ( forward && useCache ) {
                            // Seek `elem` from a previously-cached index
                            outerCache = parent[ expando ] || (parent[ expando ] = {});
                            cache = outerCache[ type ] || [];
                            nodeIndex = cache[0] === dirruns && cache[1];
                            diff = cache[0] === dirruns && cache[2];
                            node = nodeIndex && parent.childNodes[ nodeIndex ];

                            while ( (node = ++nodeIndex && node && node[ dir ] ||

                                // Fallback to seeking `elem` from the start
                                (diff = nodeIndex = 0) || start.pop()) ) {

                                // When found, cache indexes on `parent` and break
                                if ( node.nodeType === 1 && ++diff && node === elem ) {
                                    outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            }

                        // Use previously-cached element index if available
                        } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                            diff = cache[1];

                        // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                        } else {
                            // Use the same loop as above to seek `elem` from the start
                            while ( (node = ++nodeIndex && node && node[ dir ] ||
                                (diff = nodeIndex = 0) || start.pop()) ) {

                                if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                                    // Cache the index of each encountered element
                                    if ( useCache ) {
                                        (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                                    }

                                    if ( node === elem ) {
                                        break;
                                    }
                                }
                            }
                        }

                        // Incorporate the offset, then check against cycle size
                        diff -= last;
                        return diff === first || ( diff % first === 0 && diff / first >= 0 );
                    }
                };
        },

        "PSEUDO": function( pseudo, argument ) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args,
                fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                    Sizzle.error( "unsupported pseudo: " + pseudo );

            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if ( fn[ expando ] ) {
                return fn( argument );
            }

            // But maintain support for old signatures
            if ( fn.length > 1 ) {
                args = [ pseudo, pseudo, "", argument ];
                return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                    markFunction(function( seed, matches ) {
                        var idx,
                            matched = fn( seed, argument ),
                            i = matched.length;
                        while ( i-- ) {
                            idx = indexOf.call( seed, matched[i] );
                            seed[ idx ] = !( matches[ idx ] = matched[i] );
                        }
                    }) :
                    function( elem ) {
                        return fn( elem, 0, args );
                    };
            }

            return fn;
        }
    },

    pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function( selector ) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [],
                results = [],
                matcher = compile( selector.replace( rtrim, "$1" ) );

            return matcher[ expando ] ?
                markFunction(function( seed, matches, context, xml ) {
                    var elem,
                        unmatched = matcher( seed, null, xml, [] ),
                        i = seed.length;

                    // Match elements unmatched by `matcher`
                    while ( i-- ) {
                        if ( (elem = unmatched[i]) ) {
                            seed[i] = !(matches[i] = elem);
                        }
                    }
                }) :
                function( elem, context, xml ) {
                    input[0] = elem;
                    matcher( input, null, xml, results );
                    return !results.pop();
                };
        }),

        "has": markFunction(function( selector ) {
            return function( elem ) {
                return Sizzle( selector, elem ).length > 0;
            };
        }),

        "contains": markFunction(function( text ) {
            return function( elem ) {
                return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
            };
        }),

        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction( function( lang ) {
            // lang value must be a valid identifier
            if ( !ridentifier.test(lang || "") ) {
                Sizzle.error( "unsupported lang: " + lang );
            }
            lang = lang.replace( runescape, funescape ).toLowerCase();
            return function( elem ) {
                var elemLang;
                do {
                    if ( (elemLang = documentIsHTML ?
                        elem.lang :
                        elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

                        elemLang = elemLang.toLowerCase();
                        return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                    }
                } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                return false;
            };
        }),

        // Miscellaneous
        "target": function( elem ) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice( 1 ) === elem.id;
        },

        "root": function( elem ) {
            return elem === docElem;
        },

        "focus": function( elem ) {
            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },

        // Boolean properties
        "enabled": function( elem ) {
            return elem.disabled === false;
        },

        "disabled": function( elem ) {
            return elem.disabled === true;
        },

        "checked": function( elem ) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
        },

        "selected": function( elem ) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if ( elem.parentNode ) {
                elem.parentNode.selectedIndex;
            }

            return elem.selected === true;
        },

        // Contents
        "empty": function( elem ) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
            //   not comment, processing instructions, or others
            // Thanks to Diego Perini for the nodeName shortcut
            //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
            for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
                    return false;
                }
            }
            return true;
        },

        "parent": function( elem ) {
            return !Expr.pseudos["empty"]( elem );
        },

        // Element/input types
        "header": function( elem ) {
            return rheader.test( elem.nodeName );
        },

        "input": function( elem ) {
            return rinputs.test( elem.nodeName );
        },

        "button": function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === "button" || name === "button";
        },

        "text": function( elem ) {
            var attr;
            // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
            // use getAttribute instead to test this case
            return elem.nodeName.toLowerCase() === "input" &&
                elem.type === "text" &&
                ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
        },

        // Position-in-collection
        "first": createPositionalPseudo(function() {
            return [ 0 ];
        }),

        "last": createPositionalPseudo(function( matchIndexes, length ) {
            return [ length - 1 ];
        }),

        "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
            return [ argument < 0 ? argument + length : argument ];
        }),

        "even": createPositionalPseudo(function( matchIndexes, length ) {
            var i = 0;
            for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "odd": createPositionalPseudo(function( matchIndexes, length ) {
            var i = 1;
            for ( ; i < length; i += 2 ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
            var i = argument < 0 ? argument + length : argument;
            for ( ; --i >= 0; ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        }),

        "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
            var i = argument < 0 ? argument + length : argument;
            for ( ; ++i < length; ) {
                matchIndexes.push( i );
            }
            return matchIndexes;
        })
    }
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
    Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
    Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
    var matched, match, tokens, type,
        soFar, groups, preFilters,
        cached = tokenCache[ selector + " " ];

    if ( cached ) {
        return parseOnly ? 0 : cached.slice( 0 );
    }

    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;

    while ( soFar ) {

        // Comma and first run
        if ( !matched || (match = rcomma.exec( soFar )) ) {
            if ( match ) {
                // Don't consume trailing commas as valid
                soFar = soFar.slice( match[0].length ) || soFar;
            }
            groups.push( tokens = [] );
        }

        matched = false;

        // Combinators
        if ( (match = rcombinators.exec( soFar )) ) {
            matched = match.shift();
            tokens.push({
                value: matched,
                // Cast descendant combinators to space
                type: match[0].replace( rtrim, " " )
            });
            soFar = soFar.slice( matched.length );
        }

        // Filters
        for ( type in Expr.filter ) {
            if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                (match = preFilters[ type ]( match ))) ) {
                matched = match.shift();
                tokens.push({
                    value: matched,
                    type: type,
                    matches: match
                });
                soFar = soFar.slice( matched.length );
            }
        }

        if ( !matched ) {
            break;
        }
    }

    // Return the length of the invalid excess
    // if we're just parsing
    // Otherwise, throw an error or return tokens
    return parseOnly ?
        soFar.length :
        soFar ?
            Sizzle.error( selector ) :
            // Cache the tokens
            tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
    var i = 0,
        len = tokens.length,
        selector = "";
    for ( ; i < len; i++ ) {
        selector += tokens[i].value;
    }
    return selector;
}

function addCombinator( matcher, combinator, base ) {
    var dir = combinator.dir,
        checkNonElements = base && dir === "parentNode",
        doneName = done++;

    return combinator.first ?
        // Check against closest ancestor/preceding element
        function( elem, context, xml ) {
            while ( (elem = elem[ dir ]) ) {
                if ( elem.nodeType === 1 || checkNonElements ) {
                    return matcher( elem, context, xml );
                }
            }
        } :

        // Check against all ancestor/preceding elements
        function( elem, context, xml ) {
            var data, cache, outerCache,
                dirkey = dirruns + " " + doneName;

            // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
            if ( xml ) {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        if ( matcher( elem, context, xml ) ) {
                            return true;
                        }
                    }
                }
            } else {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        outerCache = elem[ expando ] || (elem[ expando ] = {});
                        if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
                            if ( (data = cache[1]) === true || data === cachedruns ) {
                                return data === true;
                            }
                        } else {
                            cache = outerCache[ dir ] = [ dirkey ];
                            cache[1] = matcher( elem, context, xml ) || cachedruns;
                            if ( cache[1] === true ) {
                                return true;
                            }
                        }
                    }
                }
            }
        };
}

function elementMatcher( matchers ) {
    return matchers.length > 1 ?
        function( elem, context, xml ) {
            var i = matchers.length;
            while ( i-- ) {
                if ( !matchers[i]( elem, context, xml ) ) {
                    return false;
                }
            }
            return true;
        } :
        matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
    var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;

    for ( ; i < len; i++ ) {
        if ( (elem = unmatched[i]) ) {
            if ( !filter || filter( elem, context, xml ) ) {
                newUnmatched.push( elem );
                if ( mapped ) {
                    map.push( i );
                }
            }
        }
    }

    return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
    if ( postFilter && !postFilter[ expando ] ) {
        postFilter = setMatcher( postFilter );
    }
    if ( postFinder && !postFinder[ expando ] ) {
        postFinder = setMatcher( postFinder, postSelector );
    }
    return markFunction(function( seed, results, context, xml ) {
        var temp, i, elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,

            // Get initial elements from seed or context
            elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && ( seed || !selector ) ?
                condense( elems, preMap, preFilter, context, xml ) :
                elems,

            matcherOut = matcher ?
                // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

                    // ...intermediate processing is necessary
                    [] :

                    // ...otherwise use results directly
                    results :
                matcherIn;

        // Find primary matches
        if ( matcher ) {
            matcher( matcherIn, matcherOut, context, xml );
        }

        // Apply postFilter
        if ( postFilter ) {
            temp = condense( matcherOut, postMap );
            postFilter( temp, [], context, xml );

            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while ( i-- ) {
                if ( (elem = temp[i]) ) {
                    matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                }
            }
        }

        if ( seed ) {
            if ( postFinder || preFilter ) {
                if ( postFinder ) {
                    // Get the final matcherOut by condensing this intermediate into postFinder contexts
                    temp = [];
                    i = matcherOut.length;
                    while ( i-- ) {
                        if ( (elem = matcherOut[i]) ) {
                            // Restore matcherIn since elem is not yet a final match
                            temp.push( (matcherIn[i] = elem) );
                        }
                    }
                    postFinder( null, (matcherOut = []), temp, xml );
                }

                // Move matched elements from seed to results to keep them synchronized
                i = matcherOut.length;
                while ( i-- ) {
                    if ( (elem = matcherOut[i]) &&
                        (temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

                        seed[temp] = !(results[temp] = elem);
                    }
                }
            }

        // Add elements to results, through postFinder if defined
        } else {
            matcherOut = condense(
                matcherOut === results ?
                    matcherOut.splice( preexisting, matcherOut.length ) :
                    matcherOut
            );
            if ( postFinder ) {
                postFinder( null, results, matcherOut, xml );
            } else {
                push.apply( results, matcherOut );
            }
        }
    });
}

function matcherFromTokens( tokens ) {
    var checkContext, matcher, j,
        len = tokens.length,
        leadingRelative = Expr.relative[ tokens[0].type ],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,

        // The foundational matcher ensures that elements are reachable from top-level context(s)
        matchContext = addCombinator( function( elem ) {
            return elem === checkContext;
        }, implicitRelative, true ),
        matchAnyContext = addCombinator( function( elem ) {
            return indexOf.call( checkContext, elem ) > -1;
        }, implicitRelative, true ),
        matchers = [ function( elem, context, xml ) {
            return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                (checkContext = context).nodeType ?
                    matchContext( elem, context, xml ) :
                    matchAnyContext( elem, context, xml ) );
        } ];

    for ( ; i < len; i++ ) {
        if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
            matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
        } else {
            matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

            // Return special upon seeing a positional matcher
            if ( matcher[ expando ] ) {
                // Find the next relative operator (if any) for proper handling
                j = ++i;
                for ( ; j < len; j++ ) {
                    if ( Expr.relative[ tokens[j].type ] ) {
                        break;
                    }
                }
                return setMatcher(
                    i > 1 && elementMatcher( matchers ),
                    i > 1 && toSelector(
                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
                    ).replace( rtrim, "$1" ),
                    matcher,
                    i < j && matcherFromTokens( tokens.slice( i, j ) ),
                    j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                    j < len && toSelector( tokens )
                );
            }
            matchers.push( matcher );
        }
    }

    return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
    // A counter to specify which element is currently being matched
    var matcherCachedRuns = 0,
        bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function( seed, context, xml, results, expandContext ) {
            var elem, j, matcher,
                setMatched = [],
                matchedCount = 0,
                i = "0",
                unmatched = seed && [],
                outermost = expandContext != null,
                contextBackup = outermostContext,
                // We must always have either seed elements or context
                elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
                // Use integer dirruns iff this is the outermost matcher
                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

            if ( outermost ) {
                outermostContext = context !== document && context;
                cachedruns = matcherCachedRuns;
            }

            // Add elements passing elementMatchers directly to results
            // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
            for ( ; (elem = elems[i]) != null; i++ ) {
                if ( byElement && elem ) {
                    j = 0;
                    while ( (matcher = elementMatchers[j++]) ) {
                        if ( matcher( elem, context, xml ) ) {
                            results.push( elem );
                            break;
                        }
                    }
                    if ( outermost ) {
                        dirruns = dirrunsUnique;
                        cachedruns = ++matcherCachedRuns;
                    }
                }

                // Track unmatched elements for set filters
                if ( bySet ) {
                    // They will have gone through all possible matchers
                    if ( (elem = !matcher && elem) ) {
                        matchedCount--;
                    }

                    // Lengthen the array for every element, matched or not
                    if ( seed ) {
                        unmatched.push( elem );
                    }
                }
            }

            // Apply set filters to unmatched elements
            matchedCount += i;
            if ( bySet && i !== matchedCount ) {
                j = 0;
                while ( (matcher = setMatchers[j++]) ) {
                    matcher( unmatched, setMatched, context, xml );
                }

                if ( seed ) {
                    // Reintegrate element matches to eliminate the need for sorting
                    if ( matchedCount > 0 ) {
                        while ( i-- ) {
                            if ( !(unmatched[i] || setMatched[i]) ) {
                                setMatched[i] = pop.call( results );
                            }
                        }
                    }

                    // Discard index placeholder values to get only actual matches
                    setMatched = condense( setMatched );
                }

                // Add matches to results
                push.apply( results, setMatched );

                // Seedless set matches succeeding multiple successful matchers stipulate sorting
                if ( outermost && !seed && setMatched.length > 0 &&
                    ( matchedCount + setMatchers.length ) > 1 ) {

                    Sizzle.uniqueSort( results );
                }
            }

            // Override manipulation of globals by nested matchers
            if ( outermost ) {
                dirruns = dirrunsUnique;
                outermostContext = contextBackup;
            }

            return unmatched;
        };

    return bySet ?
        markFunction( superMatcher ) :
        superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
    var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[ selector + " " ];

    if ( !cached ) {
        // Generate a function of recursive functions that can be used to check each element
        if ( !group ) {
            group = tokenize( selector );
        }
        i = group.length;
        while ( i-- ) {
            cached = matcherFromTokens( group[i] );
            if ( cached[ expando ] ) {
                setMatchers.push( cached );
            } else {
                elementMatchers.push( cached );
            }
        }

        // Cache the compiled function
        cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
    }
    return cached;
};

function multipleContexts( selector, contexts, results ) {
    var i = 0,
        len = contexts.length;
    for ( ; i < len; i++ ) {
        Sizzle( selector, contexts[i], results );
    }
    return results;
}

function select( selector, context, results, seed ) {
    var i, tokens, token, type, find,
        match = tokenize( selector );

    if ( !seed ) {
        // Try to minimize operations if there is only one group
        if ( match.length === 1 ) {

            // Take a shortcut and set the context if the root selector is an ID
            tokens = match[0] = match[0].slice( 0 );
            if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                    support.getById && context.nodeType === 9 && documentIsHTML &&
                    Expr.relative[ tokens[1].type ] ) {

                context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
                if ( !context ) {
                    return results;
                }
                selector = selector.slice( tokens.shift().value.length );
            }

            // Fetch a seed set for right-to-left matching
            i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
            while ( i-- ) {
                token = tokens[i];

                // Abort if we hit a combinator
                if ( Expr.relative[ (type = token.type) ] ) {
                    break;
                }
                if ( (find = Expr.find[ type ]) ) {
                    // Search, expanding context for leading sibling combinators
                    if ( (seed = find(
                        token.matches[0].replace( runescape, funescape ),
                        rsibling.test( tokens[0].type ) && context.parentNode || context
                    )) ) {

                        // If seed is empty or no tokens remain, we can return early
                        tokens.splice( i, 1 );
                        selector = seed.length && toSelector( tokens );
                        if ( !selector ) {
                            push.apply( results, seed );
                            return results;
                        }

                        break;
                    }
                }
            }
        }
    }

    // Compile and execute a filtering function
    // Provide `match` to avoid retokenization if we modified the selector above
    compile( selector, match )(
        seed,
        context,
        !documentIsHTML,
        results,
        rsibling.test( selector )
    );
    return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
    // Should return 1, but returns 4 (following)
    return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
    div.innerHTML = "<a href='#'></a>";
    return div.firstChild.getAttribute("href") === "#" ;
}) ) {
    addHandle( "type|href|height|width", function( elem, name, isXML ) {
        if ( !isXML ) {
            return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
        }
    });
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
    div.innerHTML = "<input/>";
    div.firstChild.setAttribute( "value", "" );
    return div.firstChild.getAttribute( "value" ) === "";
}) ) {
    addHandle( "value", function( elem, name, isXML ) {
        if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
            return elem.defaultValue;
        }
    });
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
    return div.getAttribute("disabled") == null;
}) ) {
    addHandle( booleans, function( elem, name, isXML ) {
        var val;
        if ( !isXML ) {
            return (val = elem.getAttributeNode( name )) && val.specified ?
                val.value :
                elem[ name ] === true ? name.toLowerCase() : null;
        }
    });
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
    var object = optionsCache[ options ] = {};
    jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
        object[ flag ] = true;
    });
    return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *  options: an optional list of space-separated options that will change how
 *          the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *  once:           will ensure the callback list can only be fired once (like a Deferred)
 *
 *  memory:         will keep track of previous values and will call any callback added
 *                  after the list has been fired right away with the latest "memorized"
 *                  values (like a Deferred)
 *
 *  unique:         will ensure a callback can only be added once (no duplicate in the list)
 *
 *  stopOnFalse:    interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ?
        ( optionsCache[ options ] || createOptions( options ) ) :
        jQuery.extend( {}, options );

    var // Flag to know if list is currently firing
        firing,
        // Last fire value (for non-forgettable lists)
        memory,
        // Flag to know if list was already fired
        fired,
        // End of the loop when firing
        firingLength,
        // Index of currently firing callback (modified by remove if needed)
        firingIndex,
        // First callback to fire (used internally by add and fireWith)
        firingStart,
        // Actual callback list
        list = [],
        // Stack of fire calls for repeatable lists
        stack = !options.once && [],
        // Fire callbacks
        fire = function( data ) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                    memory = false; // To prevent further calls using add
                    break;
                }
            }
            firing = false;
            if ( list ) {
                if ( stack ) {
                    if ( stack.length ) {
                        fire( stack.shift() );
                    }
                } else if ( memory ) {
                    list = [];
                } else {
                    self.disable();
                }
            }
        },
        // Actual Callbacks object
        self = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
                if ( list ) {
                    // First, we save the current length
                    var start = list.length;
                    (function add( args ) {
                        jQuery.each( args, function( _, arg ) {
                            var type = jQuery.type( arg );
                            if ( type === "function" ) {
                                if ( !options.unique || !self.has( arg ) ) {
                                    list.push( arg );
                                }
                            } else if ( arg && arg.length && type !== "string" ) {
                                // Inspect recursively
                                add( arg );
                            }
                        });
                    })( arguments );
                    // Do we need to add the callbacks to the
                    // current firing batch?
                    if ( firing ) {
                        firingLength = list.length;
                    // With memory, if we're not firing then
                    // we should call right away
                    } else if ( memory ) {
                        firingStart = start;
                        fire( memory );
                    }
                }
                return this;
            },
            // Remove a callback from the list
            remove: function() {
                if ( list ) {
                    jQuery.each( arguments, function( _, arg ) {
                        var index;
                        while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                            list.splice( index, 1 );
                            // Handle firing indexes
                            if ( firing ) {
                                if ( index <= firingLength ) {
                                    firingLength--;
                                }
                                if ( index <= firingIndex ) {
                                    firingIndex--;
                                }
                            }
                        }
                    });
                }
                return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function( fn ) {
                return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
            },
            // Remove all callbacks from the list
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            // Have the list do nothing anymore
            disable: function() {
                list = stack = memory = undefined;
                return this;
            },
            // Is it disabled?
            disabled: function() {
                return !list;
            },
            // Lock the list in its current state
            lock: function() {
                stack = undefined;
                if ( !memory ) {
                    self.disable();
                }
                return this;
            },
            // Is it locked?
            locked: function() {
                return !stack;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function( context, args ) {
                if ( list && ( !fired || stack ) ) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    if ( firing ) {
                        stack.push( args );
                    } else {
                        fire( args );
                    }
                }
                return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
                self.fireWith( this, arguments );
                return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
                return !!fired;
            }
        };

    return self;
};
jQuery.extend({

    Deferred: function( func ) {
        var tuples = [
                // action, add listener, listener list, final state
                [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                [ "notify", "progress", jQuery.Callbacks("memory") ]
            ],
            state = "pending",
            promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done( arguments ).fail( arguments );
                    return this;
                },
                then: function( /* fnDone, fnFail, fnProgress */ ) {
                    var fns = arguments;
                    return jQuery.Deferred(function( newDefer ) {
                        jQuery.each( tuples, function( i, tuple ) {
                            var action = tuple[ 0 ],
                                fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                            // deferred[ done | fail | progress ] for forwarding actions to newDefer
                            deferred[ tuple[1] ](function() {
                                var returned = fn && fn.apply( this, arguments );
                                if ( returned && jQuery.isFunction( returned.promise ) ) {
                                    returned.promise()
                                        .done( newDefer.resolve )
                                        .fail( newDefer.reject )
                                        .progress( newDefer.notify );
                                } else {
                                    newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                                }
                            });
                        });
                        fns = null;
                    }).promise();
                },
                // Get a promise for this deferred
                // If obj is provided, the promise aspect is added to the object
                promise: function( obj ) {
                    return obj != null ? jQuery.extend( obj, promise ) : promise;
                }
            },
            deferred = {};

        // Keep pipe for back-compat
        promise.pipe = promise.then;

        // Add list-specific methods
        jQuery.each( tuples, function( i, tuple ) {
            var list = tuple[ 2 ],
                stateString = tuple[ 3 ];

            // promise[ done | fail | progress ] = list.add
            promise[ tuple[1] ] = list.add;

            // Handle state
            if ( stateString ) {
                list.add(function() {
                    // state = [ resolved | rejected ]
                    state = stateString;

                // [ reject_list | resolve_list ].disable; progress_list.lock
                }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
            }

            // deferred[ resolve | reject | notify ]
            deferred[ tuple[0] ] = function() {
                deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
                return this;
            };
            deferred[ tuple[0] + "With" ] = list.fireWith;
        });

        // Make the deferred a promise
        promise.promise( deferred );

        // Call given func if any
        if ( func ) {
            func.call( deferred, deferred );
        }

        // All done!
        return deferred;
    },

    // Deferred helper
    when: function( subordinate /* , ..., subordinateN */ ) {
        var i = 0,
            resolveValues = core_slice.call( arguments ),
            length = resolveValues.length,

            // the count of uncompleted subordinates
            remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
            deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

            // Update function for both resolve and progress values
            updateFunc = function( i, contexts, values ) {
                return function( value ) {
                    contexts[ i ] = this;
                    values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
                    if( values === progressValues ) {
                        deferred.notifyWith( contexts, values );
                    } else if ( !( --remaining ) ) {
                        deferred.resolveWith( contexts, values );
                    }
                };
            },

            progressValues, progressContexts, resolveContexts;

        // add listeners to Deferred subordinates; treat others as resolved
        if ( length > 1 ) {
            progressValues = new Array( length );
            progressContexts = new Array( length );
            resolveContexts = new Array( length );
            for ( ; i < length; i++ ) {
                if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                    resolveValues[ i ].promise()
                        .done( updateFunc( i, resolveContexts, resolveValues ) )
                        .fail( deferred.reject )
                        .progress( updateFunc( i, progressContexts, progressValues ) );
                } else {
                    --remaining;
                }
            }
        }

        // if we're not waiting on anything, resolve the master
        if ( !remaining ) {
            deferred.resolveWith( resolveContexts, resolveValues );
        }

        return deferred.promise();
    }
});
jQuery.support = (function( support ) {

    var all, a, input, select, fragment, opt, eventName, isSupported, i,
        div = document.createElement("div");

    // Setup
    div.setAttribute( "className", "t" );
    div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

    // Finish early in limited (non-browser) environments
    all = div.getElementsByTagName("*") || [];
    a = div.getElementsByTagName("a")[ 0 ];
    if ( !a || !a.style || !all.length ) {
        return support;
    }

    // First batch of tests
    select = document.createElement("select");
    opt = select.appendChild( document.createElement("option") );
    input = div.getElementsByTagName("input")[ 0 ];

    a.style.cssText = "top:1px;float:left;opacity:.5";

    // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
    support.getSetAttribute = div.className !== "t";

    // IE strips leading whitespace when .innerHTML is used
    support.leadingWhitespace = div.firstChild.nodeType === 3;

    // Make sure that tbody elements aren't automatically inserted
    // IE will insert them into empty tables
    support.tbody = !div.getElementsByTagName("tbody").length;

    // Make sure that link elements get serialized correctly by innerHTML
    // This requires a wrapper element in IE
    support.htmlSerialize = !!div.getElementsByTagName("link").length;

    // Get the style information from getAttribute
    // (IE uses .cssText instead)
    support.style = /top/.test( a.getAttribute("style") );

    // Make sure that URLs aren't manipulated
    // (IE normalizes it by default)
    support.hrefNormalized = a.getAttribute("href") === "/a";

    // Make sure that element opacity exists
    // (IE uses filter instead)
    // Use a regex to work around a WebKit issue. See #5145
    support.opacity = /^0.5/.test( a.style.opacity );

    // Verify style float existence
    // (IE uses styleFloat instead of cssFloat)
    support.cssFloat = !!a.style.cssFloat;

    // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
    support.checkOn = !!input.value;

    // Make sure that a selected-by-default option has a working selected property.
    // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
    support.optSelected = opt.selected;

    // Tests for enctype support on a form (#6743)
    support.enctype = !!document.createElement("form").enctype;

    // Makes sure cloning an html5 element does not cause problems
    // Where outerHTML is undefined, this still works
    support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";

    // Will be defined later
    support.inlineBlockNeedsLayout = false;
    support.shrinkWrapBlocks = false;
    support.pixelPosition = false;
    support.deleteExpando = true;
    support.noCloneEvent = true;
    support.reliableMarginRight = true;
    support.boxSizingReliable = true;

    // Make sure checked status is properly cloned
    input.checked = true;
    support.noCloneChecked = input.cloneNode( true ).checked;

    // Make sure that the options inside disabled selects aren't marked as disabled
    // (WebKit marks them as disabled)
    select.disabled = true;
    support.optDisabled = !opt.disabled;

    // Support: IE<9
    try {
        delete div.test;
    } catch( e ) {
        support.deleteExpando = false;
    }

    // Check if we can trust getAttribute("value")
    input = document.createElement("input");
    input.setAttribute( "value", "" );
    support.input = input.getAttribute( "value" ) === "";

    // Check if an input maintains its value after becoming a radio
    input.value = "t";
    input.setAttribute( "type", "radio" );
    support.radioValue = input.value === "t";

    // #11217 - WebKit loses check when the name is after the checked attribute
    input.setAttribute( "checked", "t" );
    input.setAttribute( "name", "t" );

    fragment = document.createDocumentFragment();
    fragment.appendChild( input );

    // Check if a disconnected checkbox will retain its checked
    // value of true after appended to the DOM (IE6/7)
    support.appendChecked = input.checked;

    // WebKit doesn't clone checked state correctly in fragments
    support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

    // Support: IE<9
    // Opera does not clone events (and typeof div.attachEvent === undefined).
    // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
    if ( div.attachEvent ) {
        div.attachEvent( "onclick", function() {
            support.noCloneEvent = false;
        });

        div.cloneNode( true ).click();
    }

    // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
    // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
    for ( i in { submit: true, change: true, focusin: true }) {
        div.setAttribute( eventName = "on" + i, "t" );

        support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
    }

    div.style.backgroundClip = "content-box";
    div.cloneNode( true ).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";

    // Support: IE<9
    // Iteration over object's inherited properties before its own.
    for ( i in jQuery( support ) ) {
        break;
    }
    support.ownLast = i !== "0";

    // Run tests that need a body at doc ready
    jQuery(function() {
        var container, marginDiv, tds,
            divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
            body = document.getElementsByTagName("body")[0];

        if ( !body ) {
            // Return for frameset docs that don't have a body
            return;
        }

        container = document.createElement("div");
        container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

        body.appendChild( container ).appendChild( div );

        // Support: IE8
        // Check if table cells still have offsetWidth/Height when they are set
        // to display:none and there are still other visible table cells in a
        // table row; if so, offsetWidth/Height are not reliable for use when
        // determining if an element has been hidden directly using
        // display:none (it is still safe to use offsets if a parent element is
        // hidden; don safety goggles and see bug #4512 for more information).
        div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
        tds = div.getElementsByTagName("td");
        tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
        isSupported = ( tds[ 0 ].offsetHeight === 0 );

        tds[ 0 ].style.display = "";
        tds[ 1 ].style.display = "none";

        // Support: IE8
        // Check if empty table cells still have offsetWidth/Height
        support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

        // Check box-sizing and margin behavior.
        div.innerHTML = "";
        div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";

        // Workaround failing boxSizing test due to offsetWidth returning wrong value
        // with some non-1 values of body zoom, ticket #13543
        jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
            support.boxSizing = div.offsetWidth === 4;
        });

        // Use window.getComputedStyle because jsdom on node.js will break without it.
        if ( window.getComputedStyle ) {
            support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
            support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

            // Check if div with explicit width and no margin-right incorrectly
            // gets computed margin-right based on width of container. (#3333)
            // Fails in WebKit before Feb 2011 nightlies
            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
            marginDiv = div.appendChild( document.createElement("div") );
            marginDiv.style.cssText = div.style.cssText = divReset;
            marginDiv.style.marginRight = marginDiv.style.width = "0";
            div.style.width = "1px";

            support.reliableMarginRight =
                !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
        }

        if ( typeof div.style.zoom !== core_strundefined ) {
            // Support: IE<8
            // Check if natively block-level elements act like inline-block
            // elements when setting their display to 'inline' and giving
            // them layout
            div.innerHTML = "";
            div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
            support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

            // Support: IE6
            // Check if elements with layout shrink-wrap their children
            div.style.display = "block";
            div.innerHTML = "<div></div>";
            div.firstChild.style.width = "5px";
            support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

            if ( support.inlineBlockNeedsLayout ) {
                // Prevent IE 6 from affecting layout for positioned elements #11048
                // Prevent IE from shrinking the body in IE 7 mode #12869
                // Support: IE<8
                body.style.zoom = 1;
            }
        }

        body.removeChild( container );

        // Null elements to avoid leaks in IE
        container = div = tds = marginDiv = null;
    });

    // Null elements to avoid leaks in IE
    all = select = fragment = opt = a = input = null;

    return support;
})({});

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
    rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
    if ( !jQuery.acceptData( elem ) ) {
        return;
    }

    var ret, thisCache,
        internalKey = jQuery.expando,

        // We have to handle DOM nodes and JS objects differently because IE6-7
        // can't GC object references properly across the DOM-JS boundary
        isNode = elem.nodeType,

        // Only DOM nodes need the global jQuery cache; JS object data is
        // attached directly to the object so GC can occur automatically
        cache = isNode ? jQuery.cache : elem,

        // Only defining an ID for JS objects if its cache already exists allows
        // the code to shortcut on the same path as a DOM node with no cache
        id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

    // Avoid doing any more work than we need to when trying to get data on an
    // object that has no data at all
    if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
        return;
    }

    if ( !id ) {
        // Only DOM nodes need a new unique ID for each element since their data
        // ends up in the global cache
        if ( isNode ) {
            id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
        } else {
            id = internalKey;
        }
    }

    if ( !cache[ id ] ) {
        // Avoid exposing jQuery metadata on plain JS objects when the object
        // is serialized using JSON.stringify
        cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
    }

    // An object can be passed to jQuery.data instead of a key/value pair; this gets
    // shallow copied over onto the existing cache
    if ( typeof name === "object" || typeof name === "function" ) {
        if ( pvt ) {
            cache[ id ] = jQuery.extend( cache[ id ], name );
        } else {
            cache[ id ].data = jQuery.extend( cache[ id ].data, name );
        }
    }

    thisCache = cache[ id ];

    // jQuery data() is stored in a separate object inside the object's internal data
    // cache in order to avoid key collisions between internal data and user-defined
    // data.
    if ( !pvt ) {
        if ( !thisCache.data ) {
            thisCache.data = {};
        }

        thisCache = thisCache.data;
    }

    if ( data !== undefined ) {
        thisCache[ jQuery.camelCase( name ) ] = data;
    }

    // Check for both converted-to-camel and non-converted data property names
    // If a data property was specified
    if ( typeof name === "string" ) {

        // First Try to find as-is property data
        ret = thisCache[ name ];

        // Test for null|undefined property data
        if ( ret == null ) {

            // Try to find the camelCased property
            ret = thisCache[ jQuery.camelCase( name ) ];
        }
    } else {
        ret = thisCache;
    }

    return ret;
}

function internalRemoveData( elem, name, pvt ) {
    if ( !jQuery.acceptData( elem ) ) {
        return;
    }

    var thisCache, i,
        isNode = elem.nodeType,

        // See jQuery.data for more information
        cache = isNode ? jQuery.cache : elem,
        id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

    // If there is already no cache entry for this object, there is no
    // purpose in continuing
    if ( !cache[ id ] ) {
        return;
    }

    if ( name ) {

        thisCache = pvt ? cache[ id ] : cache[ id ].data;

        if ( thisCache ) {

            // Support array or space separated string names for data keys
            if ( !jQuery.isArray( name ) ) {

                // try the string as a key before any manipulation
                if ( name in thisCache ) {
                    name = [ name ];
                } else {

                    // split the camel cased version by spaces unless a key with the spaces exists
                    name = jQuery.camelCase( name );
                    if ( name in thisCache ) {
                        name = [ name ];
                    } else {
                        name = name.split(" ");
                    }
                }
            } else {
                // If "name" is an array of keys...
                // When data is initially created, via ("key", "val") signature,
                // keys will be converted to camelCase.
                // Since there is no way to tell _how_ a key was added, remove
                // both plain key and camelCase key. #12786
                // This will only penalize the array argument path.
                name = name.concat( jQuery.map( name, jQuery.camelCase ) );
            }

            i = name.length;
            while ( i-- ) {
                delete thisCache[ name[i] ];
            }

            // If there is no data left in the cache, we want to continue
            // and let the cache object itself get destroyed
            if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
                return;
            }
        }
    }

    // See jQuery.data for more information
    if ( !pvt ) {
        delete cache[ id ].data;

        // Don't destroy the parent cache unless the internal data object
        // had been the only thing left in it
        if ( !isEmptyDataObject( cache[ id ] ) ) {
            return;
        }
    }

    // Destroy the cache
    if ( isNode ) {
        jQuery.cleanData( [ elem ], true );

    // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
    /* jshint eqeqeq: false */
    } else if ( jQuery.support.deleteExpando || cache != cache.window ) {
        /* jshint eqeqeq: true */
        delete cache[ id ];

    // When all else fails, null
    } else {
        cache[ id ] = null;
    }
}

jQuery.extend({
    cache: {},

    // The following elements throw uncatchable exceptions if you
    // attempt to add expando properties to them.
    noData: {
        "applet": true,
        "embed": true,
        // Ban all objects except for Flash (which handle expandos)
        "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
    },

    hasData: function( elem ) {
        elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
        return !!elem && !isEmptyDataObject( elem );
    },

    data: function( elem, name, data ) {
        return internalData( elem, name, data );
    },

    removeData: function( elem, name ) {
        return internalRemoveData( elem, name );
    },

    // For internal use only.
    _data: function( elem, name, data ) {
        return internalData( elem, name, data, true );
    },

    _removeData: function( elem, name ) {
        return internalRemoveData( elem, name, true );
    },

    // A method for determining if a DOM node can handle the data expando
    acceptData: function( elem ) {
        // Do not set data on non-element because it will not be cleared (#8335).
        if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
            return false;
        }

        var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

        // nodes accept data unless otherwise specified; rejection can be conditional
        return !noData || noData !== true && elem.getAttribute("classid") === noData;
    }
});

jQuery.fn.extend({
    data: function( key, value ) {
        var attrs, name,
            data = null,
            i = 0,
            elem = this[0];

        // Special expections of .data basically thwart jQuery.access,
        // so implement the relevant behavior ourselves

        // Gets all values
        if ( key === undefined ) {
            if ( this.length ) {
                data = jQuery.data( elem );

                if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
                    attrs = elem.attributes;
                    for ( ; i < attrs.length; i++ ) {
                        name = attrs[i].name;

                        if ( name.indexOf("data-") === 0 ) {
                            name = jQuery.camelCase( name.slice(5) );

                            dataAttr( elem, name, data[ name ] );
                        }
                    }
                    jQuery._data( elem, "parsedAttrs", true );
                }
            }

            return data;
        }

        // Sets multiple values
        if ( typeof key === "object" ) {
            return this.each(function() {
                jQuery.data( this, key );
            });
        }

        return arguments.length > 1 ?

            // Sets one value
            this.each(function() {
                jQuery.data( this, key, value );
            }) :

            // Gets one value
            // Try to fetch any internally stored data first
            elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
    },

    removeData: function( key ) {
        return this.each(function() {
            jQuery.removeData( this, key );
        });
    }
});

function dataAttr( elem, key, data ) {
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if ( data === undefined && elem.nodeType === 1 ) {

        var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

        data = elem.getAttribute( name );

        if ( typeof data === "string" ) {
            try {
                data = data === "true" ? true :
                    data === "false" ? false :
                    data === "null" ? null :
                    // Only convert to a number if it doesn't change the string
                    +data + "" === data ? +data :
                    rbrace.test( data ) ? jQuery.parseJSON( data ) :
                        data;
            } catch( e ) {}

            // Make sure we set the data so it isn't changed later
            jQuery.data( elem, key, data );

        } else {
            data = undefined;
        }
    }

    return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
    var name;
    for ( name in obj ) {

        // if the public data object is empty, the private is still empty
        if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
            continue;
        }
        if ( name !== "toJSON" ) {
            return false;
        }
    }

    return true;
}
jQuery.extend({
    queue: function( elem, type, data ) {
        var queue;

        if ( elem ) {
            type = ( type || "fx" ) + "queue";
            queue = jQuery._data( elem, type );

            // Speed up dequeue by getting out quickly if this is just a lookup
            if ( data ) {
                if ( !queue || jQuery.isArray(data) ) {
                    queue = jQuery._data( elem, type, jQuery.makeArray(data) );
                } else {
                    queue.push( data );
                }
            }
            return queue || [];
        }
    },

    dequeue: function( elem, type ) {
        type = type || "fx";

        var queue = jQuery.queue( elem, type ),
            startLength = queue.length,
            fn = queue.shift(),
            hooks = jQuery._queueHooks( elem, type ),
            next = function() {
                jQuery.dequeue( elem, type );
            };

        // If the fx queue is dequeued, always remove the progress sentinel
        if ( fn === "inprogress" ) {
            fn = queue.shift();
            startLength--;
        }

        if ( fn ) {

            // Add a progress sentinel to prevent the fx queue from being
            // automatically dequeued
            if ( type === "fx" ) {
                queue.unshift( "inprogress" );
            }

            // clear up the last queue stop function
            delete hooks.stop;
            fn.call( elem, next, hooks );
        }

        if ( !startLength && hooks ) {
            hooks.empty.fire();
        }
    },

    // not intended for public consumption - generates a queueHooks object, or returns the current one
    _queueHooks: function( elem, type ) {
        var key = type + "queueHooks";
        return jQuery._data( elem, key ) || jQuery._data( elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
                jQuery._removeData( elem, type + "queue" );
                jQuery._removeData( elem, key );
            })
        });
    }
});

jQuery.fn.extend({
    queue: function( type, data ) {
        var setter = 2;

        if ( typeof type !== "string" ) {
            data = type;
            type = "fx";
            setter--;
        }

        if ( arguments.length < setter ) {
            return jQuery.queue( this[0], type );
        }

        return data === undefined ?
            this :
            this.each(function() {
                var queue = jQuery.queue( this, type, data );

                // ensure a hooks for this queue
                jQuery._queueHooks( this, type );

                if ( type === "fx" && queue[0] !== "inprogress" ) {
                    jQuery.dequeue( this, type );
                }
            });
    },
    dequeue: function( type ) {
        return this.each(function() {
            jQuery.dequeue( this, type );
        });
    },
    // Based off of the plugin by Clint Helfers, with permission.
    // http://blindsignals.com/index.php/2009/07/jquery-delay/
    delay: function( time, type ) {
        time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
        type = type || "fx";

        return this.queue( type, function( next, hooks ) {
            var timeout = setTimeout( next, time );
            hooks.stop = function() {
                clearTimeout( timeout );
            };
        });
    },
    clearQueue: function( type ) {
        return this.queue( type || "fx", [] );
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function( type, obj ) {
        var tmp,
            count = 1,
            defer = jQuery.Deferred(),
            elements = this,
            i = this.length,
            resolve = function() {
                if ( !( --count ) ) {
                    defer.resolveWith( elements, [ elements ] );
                }
            };

        if ( typeof type !== "string" ) {
            obj = type;
            type = undefined;
        }
        type = type || "fx";

        while( i-- ) {
            tmp = jQuery._data( elements[ i ], type + "queueHooks" );
            if ( tmp && tmp.empty ) {
                count++;
                tmp.empty.add( resolve );
            }
        }
        resolve();
        return defer.promise( obj );
    }
});
var nodeHook, boolHook,
    rclass = /[\t\r\n\f]/g,
    rreturn = /\r/g,
    rfocusable = /^(?:input|select|textarea|button|object)$/i,
    rclickable = /^(?:a|area)$/i,
    ruseDefault = /^(?:checked|selected)$/i,
    getSetAttribute = jQuery.support.getSetAttribute,
    getSetInput = jQuery.support.input;

jQuery.fn.extend({
    attr: function( name, value ) {
        return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
    },

    removeAttr: function( name ) {
        return this.each(function() {
            jQuery.removeAttr( this, name );
        });
    },

    prop: function( name, value ) {
        return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
    },

    removeProp: function( name ) {
        name = jQuery.propFix[ name ] || name;
        return this.each(function() {
            // try/catch handles cases where IE balks (such as removing a property on window)
            try {
                this[ name ] = undefined;
                delete this[ name ];
            } catch( e ) {}
        });
    },

    addClass: function( value ) {
        var classes, elem, cur, clazz, j,
            i = 0,
            len = this.length,
            proceed = typeof value === "string" && value;

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( j ) {
                jQuery( this ).addClass( value.call( this, j, this.className ) );
            });
        }

        if ( proceed ) {
            // The disjunction here is for better compressibility (see removeClass)
            classes = ( value || "" ).match( core_rnotwhite ) || [];

            for ( ; i < len; i++ ) {
                elem = this[ i ];
                cur = elem.nodeType === 1 && ( elem.className ?
                    ( " " + elem.className + " " ).replace( rclass, " " ) :
                    " "
                );

                if ( cur ) {
                    j = 0;
                    while ( (clazz = classes[j++]) ) {
                        if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                            cur += clazz + " ";
                        }
                    }
                    elem.className = jQuery.trim( cur );

                }
            }
        }

        return this;
    },

    removeClass: function( value ) {
        var classes, elem, cur, clazz, j,
            i = 0,
            len = this.length,
            proceed = arguments.length === 0 || typeof value === "string" && value;

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( j ) {
                jQuery( this ).removeClass( value.call( this, j, this.className ) );
            });
        }
        if ( proceed ) {
            classes = ( value || "" ).match( core_rnotwhite ) || [];

            for ( ; i < len; i++ ) {
                elem = this[ i ];
                // This expression is here for better compressibility (see addClass)
                cur = elem.nodeType === 1 && ( elem.className ?
                    ( " " + elem.className + " " ).replace( rclass, " " ) :
                    ""
                );

                if ( cur ) {
                    j = 0;
                    while ( (clazz = classes[j++]) ) {
                        // Remove *all* instances
                        while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                            cur = cur.replace( " " + clazz + " ", " " );
                        }
                    }
                    elem.className = value ? jQuery.trim( cur ) : "";
                }
            }
        }

        return this;
    },

    toggleClass: function( value, stateVal ) {
        var type = typeof value;

        if ( typeof stateVal === "boolean" && type === "string" ) {
            return stateVal ? this.addClass( value ) : this.removeClass( value );
        }

        if ( jQuery.isFunction( value ) ) {
            return this.each(function( i ) {
                jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
            });
        }

        return this.each(function() {
            if ( type === "string" ) {
                // toggle individual class names
                var className,
                    i = 0,
                    self = jQuery( this ),
                    classNames = value.match( core_rnotwhite ) || [];

                while ( (className = classNames[ i++ ]) ) {
                    // check each className given, space separated list
                    if ( self.hasClass( className ) ) {
                        self.removeClass( className );
                    } else {
                        self.addClass( className );
                    }
                }

            // Toggle whole class name
            } else if ( type === core_strundefined || type === "boolean" ) {
                if ( this.className ) {
                    // store className if set
                    jQuery._data( this, "__className__", this.className );
                }

                // If the element has a class name or if we're passed "false",
                // then remove the whole classname (if there was one, the above saved it).
                // Otherwise bring back whatever was previously saved (if anything),
                // falling back to the empty string if nothing was stored.
                this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
            }
        });
    },

    hasClass: function( selector ) {
        var className = " " + selector + " ",
            i = 0,
            l = this.length;
        for ( ; i < l; i++ ) {
            if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
                return true;
            }
        }

        return false;
    },

    val: function( value ) {
        var ret, hooks, isFunction,
            elem = this[0];

        if ( !arguments.length ) {
            if ( elem ) {
                hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

                if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                    return ret;
                }

                ret = elem.value;

                return typeof ret === "string" ?
                    // handle most common string cases
                    ret.replace(rreturn, "") :
                    // handle cases where value is null/undef or number
                    ret == null ? "" : ret;
            }

            return;
        }

        isFunction = jQuery.isFunction( value );

        return this.each(function( i ) {
            var val;

            if ( this.nodeType !== 1 ) {
                return;
            }

            if ( isFunction ) {
                val = value.call( this, i, jQuery( this ).val() );
            } else {
                val = value;
            }

            // Treat null/undefined as ""; convert numbers to string
            if ( val == null ) {
                val = "";
            } else if ( typeof val === "number" ) {
                val += "";
            } else if ( jQuery.isArray( val ) ) {
                val = jQuery.map(val, function ( value ) {
                    return value == null ? "" : value + "";
                });
            }

            hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

            // If set returns undefined, fall back to normal setting
            if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                this.value = val;
            }
        });
    }
});

jQuery.extend({
    valHooks: {
        option: {
            get: function( elem ) {
                // Use proper attribute retrieval(#6932, #12072)
                var val = jQuery.find.attr( elem, "value" );
                return val != null ?
                    val :
                    elem.text;
            }
        },
        select: {
            get: function( elem ) {
                var value, option,
                    options = elem.options,
                    index = elem.selectedIndex,
                    one = elem.type === "select-one" || index < 0,
                    values = one ? null : [],
                    max = one ? index + 1 : options.length,
                    i = index < 0 ?
                        max :
                        one ? index : 0;

                // Loop through all the selected options
                for ( ; i < max; i++ ) {
                    option = options[ i ];

                    // oldIE doesn't update selected after form reset (#2551)
                    if ( ( option.selected || i === index ) &&
                            // Don't return options that are disabled or in a disabled optgroup
                            ( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
                            ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

                        // Get the specific value for the option
                        value = jQuery( option ).val();

                        // We don't need an array for one selects
                        if ( one ) {
                            return value;
                        }

                        // Multi-Selects return an array
                        values.push( value );
                    }
                }

                return values;
            },

            set: function( elem, value ) {
                var optionSet, option,
                    options = elem.options,
                    values = jQuery.makeArray( value ),
                    i = options.length;

                while ( i-- ) {
                    option = options[ i ];
                    if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
                        optionSet = true;
                    }
                }

                // force browsers to behave consistently when non-matching value is set
                if ( !optionSet ) {
                    elem.selectedIndex = -1;
                }
                return values;
            }
        }
    },

    attr: function( elem, name, value ) {
        var hooks, ret,
            nType = elem.nodeType;

        // don't get/set attributes on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
            return;
        }

        // Fallback to prop when attributes are not supported
        if ( typeof elem.getAttribute === core_strundefined ) {
            return jQuery.prop( elem, name, value );
        }

        // All attributes are lowercase
        // Grab necessary hook if one is defined
        if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
            name = name.toLowerCase();
            hooks = jQuery.attrHooks[ name ] ||
                ( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
        }

        if ( value !== undefined ) {

            if ( value === null ) {
                jQuery.removeAttr( elem, name );

            } else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                return ret;

            } else {
                elem.setAttribute( name, value + "" );
                return value;
            }

        } else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
            return ret;

        } else {
            ret = jQuery.find.attr( elem, name );

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ?
                undefined :
                ret;
        }
    },

    removeAttr: function( elem, value ) {
        var name, propName,
            i = 0,
            attrNames = value && value.match( core_rnotwhite );

        if ( attrNames && elem.nodeType === 1 ) {
            while ( (name = attrNames[i++]) ) {
                propName = jQuery.propFix[ name ] || name;

                // Boolean attributes get special treatment (#10870)
                if ( jQuery.expr.match.bool.test( name ) ) {
                    // Set corresponding property to false
                    if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
                        elem[ propName ] = false;
                    // Support: IE<9
                    // Also clear defaultChecked/defaultSelected (if appropriate)
                    } else {
                        elem[ jQuery.camelCase( "default-" + name ) ] =
                            elem[ propName ] = false;
                    }

                // See #9699 for explanation of this approach (setting first, then removal)
                } else {
                    jQuery.attr( elem, name, "" );
                }

                elem.removeAttribute( getSetAttribute ? name : propName );
            }
        }
    },

    attrHooks: {
        type: {
            set: function( elem, value ) {
                if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
                    // Setting the type on a radio button after the value resets the value in IE6-9
                    // Reset value to default in case type is set after value during creation
                    var val = elem.value;
                    elem.setAttribute( "type", value );
                    if ( val ) {
                        elem.value = val;
                    }
                    return value;
                }
            }
        }
    },

    propFix: {
        "for": "htmlFor",
        "class": "className"
    },

    prop: function( elem, name, value ) {
        var ret, hooks, notxml,
            nType = elem.nodeType;

        // don't get/set properties on text, comment and attribute nodes
        if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
            return;
        }

        notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

        if ( notxml ) {
            // Fix name and attach hooks
            name = jQuery.propFix[ name ] || name;
            hooks = jQuery.propHooks[ name ];
        }

        if ( value !== undefined ) {
            return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
                ret :
                ( elem[ name ] = value );

        } else {
            return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
                ret :
                elem[ name ];
        }
    },

    propHooks: {
        tabIndex: {
            get: function( elem ) {
                // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                // Use proper attribute retrieval(#12072)
                var tabindex = jQuery.find.attr( elem, "tabindex" );

                return tabindex ?
                    parseInt( tabindex, 10 ) :
                    rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
                        0 :
                        -1;
            }
        }
    }
});

// Hooks for boolean attributes
boolHook = {
    set: function( elem, value, name ) {
        if ( value === false ) {
            // Remove boolean attributes when set to false
            jQuery.removeAttr( elem, name );
        } else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
            // IE<8 needs the *property* name
            elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

        // Use defaultChecked and defaultSelected for oldIE
        } else {
            elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
        }

        return name;
    }
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
    var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

    jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
        function( elem, name, isXML ) {
            var fn = jQuery.expr.attrHandle[ name ],
                ret = isXML ?
                    undefined :
                    /* jshint eqeqeq: false */
                    (jQuery.expr.attrHandle[ name ] = undefined) !=
                        getter( elem, name, isXML ) ?

                        name.toLowerCase() :
                        null;
            jQuery.expr.attrHandle[ name ] = fn;
            return ret;
        } :
        function( elem, name, isXML ) {
            return isXML ?
                undefined :
                elem[ jQuery.camelCase( "default-" + name ) ] ?
                    name.toLowerCase() :
                    null;
        };
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
    jQuery.attrHooks.value = {
        set: function( elem, value, name ) {
            if ( jQuery.nodeName( elem, "input" ) ) {
                // Does not return so that setAttribute is also used
                elem.defaultValue = value;
            } else {
                // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                return nodeHook && nodeHook.set( elem, value, name );
            }
        }
    };
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

    // Use this for any attribute in IE6/7
    // This fixes almost every IE6/7 issue
    nodeHook = {
        set: function( elem, value, name ) {
            // Set the existing or create a new attribute node
            var ret = elem.getAttributeNode( name );
            if ( !ret ) {
                elem.setAttributeNode(
                    (ret = elem.ownerDocument.createAttribute( name ))
                );
            }

            ret.value = value += "";

            // Break association with cloned elements by also using setAttribute (#9646)
            return name === "value" || value === elem.getAttribute( name ) ?
                value :
                undefined;
        }
    };
    jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
        // Some attributes are constructed with empty-string values when not defined
        function( elem, name, isXML ) {
            var ret;
            return isXML ?
                undefined :
                (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
                    ret.value :
                    null;
        };
    jQuery.valHooks.button = {
        get: function( elem, name ) {
            var ret = elem.getAttributeNode( name );
            return ret && ret.specified ?
                ret.value :
                undefined;
        },
        set: nodeHook.set
    };

    // Set contenteditable to false on removals(#10429)
    // Setting to empty string throws an error as an invalid value
    jQuery.attrHooks.contenteditable = {
        set: function( elem, value, name ) {
            nodeHook.set( elem, value === "" ? false : value, name );
        }
    };

    // Set width and height to auto instead of 0 on empty string( Bug #8150 )
    // This is for removals
    jQuery.each([ "width", "height" ], function( i, name ) {
        jQuery.attrHooks[ name ] = {
            set: function( elem, value ) {
                if ( value === "" ) {
                    elem.setAttribute( name, "auto" );
                    return value;
                }
            }
        };
    });
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
    // href/src property should get the full normalized URL (#10299/#12915)
    jQuery.each([ "href", "src" ], function( i, name ) {
        jQuery.propHooks[ name ] = {
            get: function( elem ) {
                return elem.getAttribute( name, 4 );
            }
        };
    });
}

if ( !jQuery.support.style ) {
    jQuery.attrHooks.style = {
        get: function( elem ) {
            // Return undefined in the case of empty string
            // Note: IE uppercases css property names, but if we were to .toLowerCase()
            // .cssText, that would destroy case senstitivity in URL's, like in "background"
            return elem.style.cssText || undefined;
        },
        set: function( elem, value ) {
            return ( elem.style.cssText = value + "" );
        }
    };
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
    jQuery.propHooks.selected = {
        get: function( elem ) {
            var parent = elem.parentNode;

            if ( parent ) {
                parent.selectedIndex;

                // Make sure that it also works with optgroups, see #5701
                if ( parent.parentNode ) {
                    parent.parentNode.selectedIndex;
                }
            }
            return null;
        }
    };
}

jQuery.each([
    "tabIndex",
    "readOnly",
    "maxLength",
    "cellSpacing",
    "cellPadding",
    "rowSpan",
    "colSpan",
    "useMap",
    "frameBorder",
    "contentEditable"
], function() {
    jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
    jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
    jQuery.valHooks[ this ] = {
        set: function( elem, value ) {
            if ( jQuery.isArray( value ) ) {
                return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
            }
        }
    };
    if ( !jQuery.support.checkOn ) {
        jQuery.valHooks[ this ].get = function( elem ) {
            // Support: Webkit
            // "" is returned instead of "on" if a value isn't specified
            return elem.getAttribute("value") === null ? "on" : elem.value;
        };
    }
});
var rformElems = /^(?:input|select|textarea)$/i,
    rkeyEvent = /^key/,
    rmouseEvent = /^(?:mouse|contextmenu)|click/,
    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
    return true;
}

function returnFalse() {
    return false;
}

function safeActiveElement() {
    try {
        return document.activeElement;
    } catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

    global: {},

    add: function( elem, types, handler, data, selector ) {
        var tmp, events, t, handleObjIn,
            special, eventHandle, handleObj,
            handlers, type, namespaces, origType,
            elemData = jQuery._data( elem );

        // Don't attach events to noData or text/comment nodes (but allow plain objects)
        if ( !elemData ) {
            return;
        }

        // Caller can pass in an object of custom data in lieu of the handler
        if ( handler.handler ) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
        }

        // Make sure that the handler has a unique ID, used to find/remove it later
        if ( !handler.guid ) {
            handler.guid = jQuery.guid++;
        }

        // Init the element's event structure and main handler, if this is the first
        if ( !(events = elemData.events) ) {
            events = elemData.events = {};
        }
        if ( !(eventHandle = elemData.handle) ) {
            eventHandle = elemData.handle = function( e ) {
                // Discard the second event of a jQuery.event.trigger() and
                // when an event is called after a page has unloaded
                return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
                    jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
                    undefined;
            };
            // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
            eventHandle.elem = elem;
        }

        // Handle multiple events separated by a space
        types = ( types || "" ).match( core_rnotwhite ) || [""];
        t = types.length;
        while ( t-- ) {
            tmp = rtypenamespace.exec( types[t] ) || [];
            type = origType = tmp[1];
            namespaces = ( tmp[2] || "" ).split( "." ).sort();

            // There *must* be a type, no attaching namespace-only handlers
            if ( !type ) {
                continue;
            }

            // If event changes its type, use the special event handlers for the changed type
            special = jQuery.event.special[ type ] || {};

            // If selector defined, determine special event api type, otherwise given type
            type = ( selector ? special.delegateType : special.bindType ) || type;

            // Update special based on newly reset type
            special = jQuery.event.special[ type ] || {};

            // handleObj is passed to all event handlers
            handleObj = jQuery.extend({
                type: type,
                origType: origType,
                data: data,
                handler: handler,
                guid: handler.guid,
                selector: selector,
                needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                namespace: namespaces.join(".")
            }, handleObjIn );

            // Init the event handler queue if we're the first
            if ( !(handlers = events[ type ]) ) {
                handlers = events[ type ] = [];
                handlers.delegateCount = 0;

                // Only use addEventListener/attachEvent if the special events handler returns false
                if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                    // Bind the global event handler to the element
                    if ( elem.addEventListener ) {
                        elem.addEventListener( type, eventHandle, false );

                    } else if ( elem.attachEvent ) {
                        elem.attachEvent( "on" + type, eventHandle );
                    }
                }
            }

            if ( special.add ) {
                special.add.call( elem, handleObj );

                if ( !handleObj.handler.guid ) {
                    handleObj.handler.guid = handler.guid;
                }
            }

            // Add to the element's handler list, delegates in front
            if ( selector ) {
                handlers.splice( handlers.delegateCount++, 0, handleObj );
            } else {
                handlers.push( handleObj );
            }

            // Keep track of which events have ever been used, for event optimization
            jQuery.event.global[ type ] = true;
        }

        // Nullify elem to prevent memory leaks in IE
        elem = null;
    },

    // Detach an event or set of events from an element
    remove: function( elem, types, handler, selector, mappedTypes ) {
        var j, handleObj, tmp,
            origCount, t, events,
            special, handlers, type,
            namespaces, origType,
            elemData = jQuery.hasData( elem ) && jQuery._data( elem );

        if ( !elemData || !(events = elemData.events) ) {
            return;
        }

        // Once for each type.namespace in types; type may be omitted
        types = ( types || "" ).match( core_rnotwhite ) || [""];
        t = types.length;
        while ( t-- ) {
            tmp = rtypenamespace.exec( types[t] ) || [];
            type = origType = tmp[1];
            namespaces = ( tmp[2] || "" ).split( "." ).sort();

            // Unbind all events (on this namespace, if provided) for the element
            if ( !type ) {
                for ( type in events ) {
                    jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                }
                continue;
            }

            special = jQuery.event.special[ type ] || {};
            type = ( selector ? special.delegateType : special.bindType ) || type;
            handlers = events[ type ] || [];
            tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

            // Remove matching events
            origCount = j = handlers.length;
            while ( j-- ) {
                handleObj = handlers[ j ];

                if ( ( mappedTypes || origType === handleObj.origType ) &&
                    ( !handler || handler.guid === handleObj.guid ) &&
                    ( !tmp || tmp.test( handleObj.namespace ) ) &&
                    ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                    handlers.splice( j, 1 );

                    if ( handleObj.selector ) {
                        handlers.delegateCount--;
                    }
                    if ( special.remove ) {
                        special.remove.call( elem, handleObj );
                    }
                }
            }

            // Remove generic event handler if we removed something and no more handlers exist
            // (avoids potential for endless recursion during removal of special event handlers)
            if ( origCount && !handlers.length ) {
                if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                    jQuery.removeEvent( elem, type, elemData.handle );
                }

                delete events[ type ];
            }
        }

        // Remove the expando if it's no longer used
        if ( jQuery.isEmptyObject( events ) ) {
            delete elemData.handle;

            // removeData also checks for emptiness and clears the expando if empty
            // so use it instead of delete
            jQuery._removeData( elem, "events" );
        }
    },

    trigger: function( event, data, elem, onlyHandlers ) {
        var handle, ontype, cur,
            bubbleType, special, tmp, i,
            eventPath = [ elem || document ],
            type = core_hasOwn.call( event, "type" ) ? event.type : event,
            namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

        cur = tmp = elem = elem || document;

        // Don't do events on text and comment nodes
        if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
            return;
        }

        // focus/blur morphs to focusin/out; ensure we're not firing them right now
        if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
            return;
        }

        if ( type.indexOf(".") >= 0 ) {
            // Namespaced trigger; create a regexp to match event type in handle()
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
        }
        ontype = type.indexOf(":") < 0 && "on" + type;

        // Caller can pass in a jQuery.Event object, Object, or just an event type string
        event = event[ jQuery.expando ] ?
            event :
            new jQuery.Event( type, typeof event === "object" && event );

        // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
        event.isTrigger = onlyHandlers ? 2 : 3;
        event.namespace = namespaces.join(".");
        event.namespace_re = event.namespace ?
            new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
            null;

        // Clean up the event in case it is being reused
        event.result = undefined;
        if ( !event.target ) {
            event.target = elem;
        }

        // Clone any incoming data and prepend the event, creating the handler arg list
        data = data == null ?
            [ event ] :
            jQuery.makeArray( data, [ event ] );

        // Allow special events to draw outside the lines
        special = jQuery.event.special[ type ] || {};
        if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
            return;
        }

        // Determine event propagation path in advance, per W3C events spec (#9951)
        // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
        if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

            bubbleType = special.delegateType || type;
            if ( !rfocusMorph.test( bubbleType + type ) ) {
                cur = cur.parentNode;
            }
            for ( ; cur; cur = cur.parentNode ) {
                eventPath.push( cur );
                tmp = cur;
            }

            // Only add window if we got to document (e.g., not plain obj or detached DOM)
            if ( tmp === (elem.ownerDocument || document) ) {
                eventPath.push( tmp.defaultView || tmp.parentWindow || window );
            }
        }

        // Fire handlers on the event path
        i = 0;
        while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

            event.type = i > 1 ?
                bubbleType :
                special.bindType || type;

            // jQuery handler
            handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
            if ( handle ) {
                handle.apply( cur, data );
            }

            // Native handler
            handle = ontype && cur[ ontype ];
            if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
                event.preventDefault();
            }
        }
        event.type = type;

        // If nobody prevented the default action, do it now
        if ( !onlyHandlers && !event.isDefaultPrevented() ) {

            if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
                jQuery.acceptData( elem ) ) {

                // Call a native DOM method on the target with the same name name as the event.
                // Can't use an .isFunction() check here because IE6/7 fails that test.
                // Don't do default actions on window, that's where global variables be (#6170)
                if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

                    // Don't re-trigger an onFOO event when we call its FOO() method
                    tmp = elem[ ontype ];

                    if ( tmp ) {
                        elem[ ontype ] = null;
                    }

                    // Prevent re-triggering of the same event, since we already bubbled it above
                    jQuery.event.triggered = type;
                    try {
                        elem[ type ]();
                    } catch ( e ) {
                        // IE<9 dies on focus/blur to hidden element (#1486,#12518)
                        // only reproducible on winXP IE8 native, not IE9 in IE8 mode
                    }
                    jQuery.event.triggered = undefined;

                    if ( tmp ) {
                        elem[ ontype ] = tmp;
                    }
                }
            }
        }

        return event.result;
    },

    dispatch: function( event ) {

        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix( event );

        var i, ret, handleObj, matched, j,
            handlerQueue = [],
            args = core_slice.call( arguments ),
            handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
            special = jQuery.event.special[ event.type ] || {};

        // Use the fix-ed jQuery.Event rather than the (read-only) native event
        args[0] = event;
        event.delegateTarget = this;

        // Call the preDispatch hook for the mapped type, and let it bail if desired
        if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
            return;
        }

        // Determine handlers
        handlerQueue = jQuery.event.handlers.call( this, event, handlers );

        // Run delegates first; they may want to stop propagation beneath us
        i = 0;
        while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
            event.currentTarget = matched.elem;

            j = 0;
            while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

                // Triggered event must either 1) have no namespace, or
                // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

                    event.handleObj = handleObj;
                    event.data = handleObj.data;

                    ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                            .apply( matched.elem, args );

                    if ( ret !== undefined ) {
                        if ( (event.result = ret) === false ) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
            }
        }

        // Call the postDispatch hook for the mapped type
        if ( special.postDispatch ) {
            special.postDispatch.call( this, event );
        }

        return event.result;
    },

    handlers: function( event, handlers ) {
        var sel, handleObj, matches, i,
            handlerQueue = [],
            delegateCount = handlers.delegateCount,
            cur = event.target;

        // Find delegate handlers
        // Black-hole SVG <use> instance trees (#13180)
        // Avoid non-left-click bubbling in Firefox (#3861)
        if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

            /* jshint eqeqeq: false */
            for ( ; cur != this; cur = cur.parentNode || this ) {
                /* jshint eqeqeq: true */

                // Don't check non-elements (#13208)
                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
                    matches = [];
                    for ( i = 0; i < delegateCount; i++ ) {
                        handleObj = handlers[ i ];

                        // Don't conflict with Object.prototype properties (#13203)
                        sel = handleObj.selector + " ";

                        if ( matches[ sel ] === undefined ) {
                            matches[ sel ] = handleObj.needsContext ?
                                jQuery( sel, this ).index( cur ) >= 0 :
                                jQuery.find( sel, this, null, [ cur ] ).length;
                        }
                        if ( matches[ sel ] ) {
                            matches.push( handleObj );
                        }
                    }
                    if ( matches.length ) {
                        handlerQueue.push({ elem: cur, handlers: matches });
                    }
                }
            }
        }

        // Add the remaining (directly-bound) handlers
        if ( delegateCount < handlers.length ) {
            handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
        }

        return handlerQueue;
    },

    fix: function( event ) {
        if ( event[ jQuery.expando ] ) {
            return event;
        }

        // Create a writable copy of the event object and normalize some properties
        var i, prop, copy,
            type = event.type,
            originalEvent = event,
            fixHook = this.fixHooks[ type ];

        if ( !fixHook ) {
            this.fixHooks[ type ] = fixHook =
                rmouseEvent.test( type ) ? this.mouseHooks :
                rkeyEvent.test( type ) ? this.keyHooks :
                {};
        }
        copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

        event = new jQuery.Event( originalEvent );

        i = copy.length;
        while ( i-- ) {
            prop = copy[ i ];
            event[ prop ] = originalEvent[ prop ];
        }

        // Support: IE<9
        // Fix target property (#1925)
        if ( !event.target ) {
            event.target = originalEvent.srcElement || document;
        }

        // Support: Chrome 23+, Safari?
        // Target should not be a text node (#504, #13143)
        if ( event.target.nodeType === 3 ) {
            event.target = event.target.parentNode;
        }

        // Support: IE<9
        // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
        event.metaKey = !!event.metaKey;

        return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
    },

    // Includes some event props shared by KeyEvent and MouseEvent
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

    fixHooks: {},

    keyHooks: {
        props: "char charCode key keyCode".split(" "),
        filter: function( event, original ) {

            // Add which for key events
            if ( event.which == null ) {
                event.which = original.charCode != null ? original.charCode : original.keyCode;
            }

            return event;
        }
    },

    mouseHooks: {
        props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
        filter: function( event, original ) {
            var body, eventDoc, doc,
                button = original.button,
                fromElement = original.fromElement;

            // Calculate pageX/Y if missing and clientX/Y available
            if ( event.pageX == null && original.clientX != null ) {
                eventDoc = event.target.ownerDocument || document;
                doc = eventDoc.documentElement;
                body = eventDoc.body;

                event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
            }

            // Add relatedTarget, if necessary
            if ( !event.relatedTarget && fromElement ) {
                event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
            }

            // Add which for click: 1 === left; 2 === middle; 3 === right
            // Note: button is not normalized, so don't use it
            if ( !event.which && button !== undefined ) {
                event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
            }

            return event;
        }
    },

    special: {
        load: {
            // Prevent triggered image.load events from bubbling to window.load
            noBubble: true
        },
        focus: {
            // Fire native event if possible so blur/focus sequence is correct
            trigger: function() {
                if ( this !== safeActiveElement() && this.focus ) {
                    try {
                        this.focus();
                        return false;
                    } catch ( e ) {
                        // Support: IE<9
                        // If we error on focus to hidden element (#1486, #12518),
                        // let .trigger() run the handlers
                    }
                }
            },
            delegateType: "focusin"
        },
        blur: {
            trigger: function() {
                if ( this === safeActiveElement() && this.blur ) {
                    this.blur();
                    return false;
                }
            },
            delegateType: "focusout"
        },
        click: {
            // For checkbox, fire native event so checked state will be right
            trigger: function() {
                if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
                    this.click();
                    return false;
                }
            },

            // For cross-browser consistency, don't fire native .click() on links
            _default: function( event ) {
                return jQuery.nodeName( event.target, "a" );
            }
        },

        beforeunload: {
            postDispatch: function( event ) {

                // Even when returnValue equals to undefined Firefox will still show alert
                if ( event.result !== undefined ) {
                    event.originalEvent.returnValue = event.result;
                }
            }
        }
    },

    simulate: function( type, elem, event, bubble ) {
        // Piggyback on a donor event to simulate a different one.
        // Fake originalEvent to avoid donor's stopPropagation, but if the
        // simulated event prevents default then we do the same on the donor.
        var e = jQuery.extend(
            new jQuery.Event(),
            event,
            {
                type: type,
                isSimulated: true,
                originalEvent: {}
            }
        );
        if ( bubble ) {
            jQuery.event.trigger( e, null, elem );
        } else {
            jQuery.event.dispatch.call( elem, e );
        }
        if ( e.isDefaultPrevented() ) {
            event.preventDefault();
        }
    }
};

jQuery.removeEvent = document.removeEventListener ?
    function( elem, type, handle ) {
        if ( elem.removeEventListener ) {
            elem.removeEventListener( type, handle, false );
        }
    } :
    function( elem, type, handle ) {
        var name = "on" + type;

        if ( elem.detachEvent ) {

            // #8545, #7054, preventing memory leaks for custom events in IE6-8
            // detachEvent needed property on element, by name of that event, to properly expose it to GC
            if ( typeof elem[ name ] === core_strundefined ) {
                elem[ name ] = null;
            }

            elem.detachEvent( name, handle );
        }
    };

jQuery.Event = function( src, props ) {
    // Allow instantiation without the 'new' keyword
    if ( !(this instanceof jQuery.Event) ) {
        return new jQuery.Event( src, props );
    }

    // Event object
    if ( src && src.type ) {
        this.originalEvent = src;
        this.type = src.type;

        // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.
        this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
            src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

    // Event type
    } else {
        this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if ( props ) {
        jQuery.extend( this, props );
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();

    // Mark it as fixed
    this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,

    preventDefault: function() {
        var e = this.originalEvent;

        this.isDefaultPrevented = returnTrue;
        if ( !e ) {
            return;
        }

        // If preventDefault exists, run it on the original event
        if ( e.preventDefault ) {
            e.preventDefault();

        // Support: IE
        // Otherwise set the returnValue property of the original event to false
        } else {
            e.returnValue = false;
        }
    },
    stopPropagation: function() {
        var e = this.originalEvent;

        this.isPropagationStopped = returnTrue;
        if ( !e ) {
            return;
        }
        // If stopPropagation exists, run it on the original event
        if ( e.stopPropagation ) {
            e.stopPropagation();
        }

        // Support: IE
        // Set the cancelBubble property of the original event to true
        e.cancelBubble = true;
    },
    stopImmediatePropagation: function() {
        this.isImmediatePropagationStopped = returnTrue;
        this.stopPropagation();
    }
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
}, function( orig, fix ) {
    jQuery.event.special[ orig ] = {
        delegateType: fix,
        bindType: fix,

        handle: function( event ) {
            var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj;

            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply( this, arguments );
                event.type = fix;
            }
            return ret;
        }
    };
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

    jQuery.event.special.submit = {
        setup: function() {
            // Only need this for delegated form submit events
            if ( jQuery.nodeName( this, "form" ) ) {
                return false;
            }

            // Lazy-add a submit handler when a descendant form may potentially be submitted
            jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
                // Node name check avoids a VML-related crash in IE (#9807)
                var elem = e.target,
                    form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
                if ( form && !jQuery._data( form, "submitBubbles" ) ) {
                    jQuery.event.add( form, "submit._submit", function( event ) {
                        event._submit_bubble = true;
                    });
                    jQuery._data( form, "submitBubbles", true );
                }
            });
            // return undefined since we don't need an event listener
        },

        postDispatch: function( event ) {
            // If form was submitted by the user, bubble the event up the tree
            if ( event._submit_bubble ) {
                delete event._submit_bubble;
                if ( this.parentNode && !event.isTrigger ) {
                    jQuery.event.simulate( "submit", this.parentNode, event, true );
                }
            }
        },

        teardown: function() {
            // Only need this for delegated form submit events
            if ( jQuery.nodeName( this, "form" ) ) {
                return false;
            }

            // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
            jQuery.event.remove( this, "._submit" );
        }
    };
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

    jQuery.event.special.change = {

        setup: function() {

            if ( rformElems.test( this.nodeName ) ) {
                // IE doesn't fire change on a check/radio until blur; trigger it on click
                // after a propertychange. Eat the blur-change in special.change.handle.
                // This still fires onchange a second time for check/radio after blur.
                if ( this.type === "checkbox" || this.type === "radio" ) {
                    jQuery.event.add( this, "propertychange._change", function( event ) {
                        if ( event.originalEvent.propertyName === "checked" ) {
                            this._just_changed = true;
                        }
                    });
                    jQuery.event.add( this, "click._change", function( event ) {
                        if ( this._just_changed && !event.isTrigger ) {
                            this._just_changed = false;
                        }
                        // Allow triggered, simulated change events (#11500)
                        jQuery.event.simulate( "change", this, event, true );
                    });
                }
                return false;
            }
            // Delegated event; lazy-add a change handler on descendant inputs
            jQuery.event.add( this, "beforeactivate._change", function( e ) {
                var elem = e.target;

                if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
                    jQuery.event.add( elem, "change._change", function( event ) {
                        if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
                            jQuery.event.simulate( "change", this.parentNode, event, true );
                        }
                    });
                    jQuery._data( elem, "changeBubbles", true );
                }
            });
        },

        handle: function( event ) {
            var elem = event.target;

            // Swallow native change events from checkbox/radio, we already triggered them above
            if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
                return event.handleObj.handler.apply( this, arguments );
            }
        },

        teardown: function() {
            jQuery.event.remove( this, "._change" );

            return !rformElems.test( this.nodeName );
        }
    };
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
    jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

        // Attach a single capturing handler while someone wants focusin/focusout
        var attaches = 0,
            handler = function( event ) {
                jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
            };

        jQuery.event.special[ fix ] = {
            setup: function() {
                if ( attaches++ === 0 ) {
                    document.addEventListener( orig, handler, true );
                }
            },
            teardown: function() {
                if ( --attaches === 0 ) {
                    document.removeEventListener( orig, handler, true );
                }
            }
        };
    });
}

jQuery.fn.extend({

    on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
        var type, origFn;

        // Types can be a map of types/handlers
        if ( typeof types === "object" ) {
            // ( types-Object, selector, data )
            if ( typeof selector !== "string" ) {
                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for ( type in types ) {
                this.on( type, selector, data, types[ type ], one );
            }
            return this;
        }

        if ( data == null && fn == null ) {
            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if ( fn == null ) {
            if ( typeof selector === "string" ) {
                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {
                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if ( fn === false ) {
            fn = returnFalse;
        } else if ( !fn ) {
            return this;
        }

        if ( one === 1 ) {
            origFn = fn;
            fn = function( event ) {
                // Can use an empty set, since event contains the info
                jQuery().off( event );
                return origFn.apply( this, arguments );
            };
            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
        }
        return this.each( function() {
            jQuery.event.add( this, types, fn, data, selector );
        });
    },
    one: function( types, selector, data, fn ) {
        return this.on( types, selector, data, fn, 1 );
    },
    off: function( types, selector, fn ) {
        var handleObj, type;
        if ( types && types.preventDefault && types.handleObj ) {
            // ( event )  dispatched jQuery.Event
            handleObj = types.handleObj;
            jQuery( types.delegateTarget ).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
            );
            return this;
        }
        if ( typeof types === "object" ) {
            // ( types-object [, selector] )
            for ( type in types ) {
                this.off( type, selector, types[ type ] );
            }
            return this;
        }
        if ( selector === false || typeof selector === "function" ) {
            // ( types [, fn] )
            fn = selector;
            selector = undefined;
        }
        if ( fn === false ) {
            fn = returnFalse;
        }
        return this.each(function() {
            jQuery.event.remove( this, types, fn, selector );
        });
    },

    trigger: function( type, data ) {
        return this.each(function() {
            jQuery.event.trigger( type, data, this );
        });
    },
    triggerHandler: function( type, data ) {
        var elem = this[0];
        if ( elem ) {
            return jQuery.event.trigger( type, data, elem, true );
        }
    }
});
var isSimple = /^.[^:#\[\.,]*$/,
    rparentsprev = /^(?:parents|prev(?:Until|All))/,
    rneedsContext = jQuery.expr.match.needsContext,
    // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };

jQuery.fn.extend({
    find: function( selector ) {
        var i,
            ret = [],
            self = this,
            len = self.length;

        if ( typeof selector !== "string" ) {
            return this.pushStack( jQuery( selector ).filter(function() {
                for ( i = 0; i < len; i++ ) {
                    if ( jQuery.contains( self[ i ], this ) ) {
                        return true;
                    }
                }
            }) );
        }

        for ( i = 0; i < len; i++ ) {
            jQuery.find( selector, self[ i ], ret );
        }

        // Needed because $( selector, context ) becomes $( context ).find( selector )
        ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
        ret.selector = this.selector ? this.selector + " " + selector : selector;
        return ret;
    },

    has: function( target ) {
        var i,
            targets = jQuery( target, this ),
            len = targets.length;

        return this.filter(function() {
            for ( i = 0; i < len; i++ ) {
                if ( jQuery.contains( this, targets[i] ) ) {
                    return true;
                }
            }
        });
    },

    not: function( selector ) {
        return this.pushStack( winnow(this, selector || [], true) );
    },

    filter: function( selector ) {
        return this.pushStack( winnow(this, selector || [], false) );
    },

    is: function( selector ) {
        return !!winnow(
            this,

            // If this is a positional/relative selector, check membership in the returned set
            // so $("p:first").is("p:last") won't return true for a doc with two "p".
            typeof selector === "string" && rneedsContext.test( selector ) ?
                jQuery( selector ) :
                selector || [],
            false
        ).length;
    },

    closest: function( selectors, context ) {
        var cur,
            i = 0,
            l = this.length,
            ret = [],
            pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                jQuery( selectors, context || this.context ) :
                0;

        for ( ; i < l; i++ ) {
            for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
                // Always skip document fragments
                if ( cur.nodeType < 11 && (pos ?
                    pos.index(cur) > -1 :

                    // Don't pass non-elements to Sizzle
                    cur.nodeType === 1 &&
                        jQuery.find.matchesSelector(cur, selectors)) ) {

                    cur = ret.push( cur );
                    break;
                }
            }
        }

        return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
    },

    // Determine the position of an element within
    // the matched set of elements
    index: function( elem ) {

        // No argument, return index in parent
        if ( !elem ) {
            return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
        }

        // index in selector
        if ( typeof elem === "string" ) {
            return jQuery.inArray( this[0], jQuery( elem ) );
        }

        // Locate the position of the desired element
        return jQuery.inArray(
            // If it receives a jQuery object, the first element is used
            elem.jquery ? elem[0] : elem, this );
    },

    add: function( selector, context ) {
        var set = typeof selector === "string" ?
                jQuery( selector, context ) :
                jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
            all = jQuery.merge( this.get(), set );

        return this.pushStack( jQuery.unique(all) );
    },

    addBack: function( selector ) {
        return this.add( selector == null ?
            this.prevObject : this.prevObject.filter(selector)
        );
    }
});

function sibling( cur, dir ) {
    do {
        cur = cur[ dir ];
    } while ( cur && cur.nodeType !== 1 );

    return cur;
}

jQuery.each({
    parent: function( elem ) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function( elem ) {
        return jQuery.dir( elem, "parentNode" );
    },
    parentsUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "parentNode", until );
    },
    next: function( elem ) {
        return sibling( elem, "nextSibling" );
    },
    prev: function( elem ) {
        return sibling( elem, "previousSibling" );
    },
    nextAll: function( elem ) {
        return jQuery.dir( elem, "nextSibling" );
    },
    prevAll: function( elem ) {
        return jQuery.dir( elem, "previousSibling" );
    },
    nextUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "nextSibling", until );
    },
    prevUntil: function( elem, i, until ) {
        return jQuery.dir( elem, "previousSibling", until );
    },
    siblings: function( elem ) {
        return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
    },
    children: function( elem ) {
        return jQuery.sibling( elem.firstChild );
    },
    contents: function( elem ) {
        return jQuery.nodeName( elem, "iframe" ) ?
            elem.contentDocument || elem.contentWindow.document :
            jQuery.merge( [], elem.childNodes );
    }
}, function( name, fn ) {
    jQuery.fn[ name ] = function( until, selector ) {
        var ret = jQuery.map( this, fn, until );

        if ( name.slice( -5 ) !== "Until" ) {
            selector = until;
        }

        if ( selector && typeof selector === "string" ) {
            ret = jQuery.filter( selector, ret );
        }

        if ( this.length > 1 ) {
            // Remove duplicates
            if ( !guaranteedUnique[ name ] ) {
                ret = jQuery.unique( ret );
            }

            // Reverse order for parents* and prev-derivatives
            if ( rparentsprev.test( name ) ) {
                ret = ret.reverse();
            }
        }

        return this.pushStack( ret );
    };
});

jQuery.extend({
    filter: function( expr, elems, not ) {
        var elem = elems[ 0 ];

        if ( not ) {
            expr = ":not(" + expr + ")";
        }

        return elems.length === 1 && elem.nodeType === 1 ?
            jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
            jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
                return elem.nodeType === 1;
            }));
    },

    dir: function( elem, dir, until ) {
        var matched = [],
            cur = elem[ dir ];

        while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
            if ( cur.nodeType === 1 ) {
                matched.push( cur );
            }
            cur = cur[dir];
        }
        return matched;
    },

    sibling: function( n, elem ) {
        var r = [];

        for ( ; n; n = n.nextSibling ) {
            if ( n.nodeType === 1 && n !== elem ) {
                r.push( n );
            }
        }

        return r;
    }
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
    if ( jQuery.isFunction( qualifier ) ) {
        return jQuery.grep( elements, function( elem, i ) {
            /* jshint -W018 */
            return !!qualifier.call( elem, i, elem ) !== not;
        });

    }

    if ( qualifier.nodeType ) {
        return jQuery.grep( elements, function( elem ) {
            return ( elem === qualifier ) !== not;
        });

    }

    if ( typeof qualifier === "string" ) {
        if ( isSimple.test( qualifier ) ) {
            return jQuery.filter( qualifier, elements, not );
        }

        qualifier = jQuery.filter( qualifier, elements );
    }

    return jQuery.grep( elements, function( elem ) {
        return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
    });
}
function createSafeFragment( document ) {
    var list = nodeNames.split( "|" ),
        safeFrag = document.createDocumentFragment();

    if ( safeFrag.createElement ) {
        while ( list.length ) {
            safeFrag.createElement(
                list.pop()
            );
        }
    }
    return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
        "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
    rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
    rleadingWhitespace = /^\s+/,
    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
    rtagName = /<([\w:]+)/,
    rtbody = /<tbody/i,
    rhtml = /<|&#?\w+;/,
    rnoInnerhtml = /<(?:script|style|link)/i,
    manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rscriptType = /^$|\/(?:java|ecma)script/i,
    rscriptTypeMasked = /^true\/(.*)/,
    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

    // We have to close these tags to support XHTML (#13200)
    wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

        // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
        // unless wrapped in a div with non-breaking characters in front of it.
        _default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
    },
    safeFragment = createSafeFragment( document ),
    fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
    text: function( value ) {
        return jQuery.access( this, function( value ) {
            return value === undefined ?
                jQuery.text( this ) :
                this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
        }, null, value, arguments.length );
    },

    append: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                var target = manipulationTarget( this, elem );
                target.appendChild( elem );
            }
        });
    },

    prepend: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                var target = manipulationTarget( this, elem );
                target.insertBefore( elem, target.firstChild );
            }
        });
    },

    before: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.parentNode ) {
                this.parentNode.insertBefore( elem, this );
            }
        });
    },

    after: function() {
        return this.domManip( arguments, function( elem ) {
            if ( this.parentNode ) {
                this.parentNode.insertBefore( elem, this.nextSibling );
            }
        });
    },

    // keepData is for internal use only--do not document
    remove: function( selector, keepData ) {
        var elem,
            elems = selector ? jQuery.filter( selector, this ) : this,
            i = 0;

        for ( ; (elem = elems[i]) != null; i++ ) {

            if ( !keepData && elem.nodeType === 1 ) {
                jQuery.cleanData( getAll( elem ) );
            }

            if ( elem.parentNode ) {
                if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
                    setGlobalEval( getAll( elem, "script" ) );
                }
                elem.parentNode.removeChild( elem );
            }
        }

        return this;
    },

    empty: function() {
        var elem,
            i = 0;

        for ( ; (elem = this[i]) != null; i++ ) {
            // Remove element nodes and prevent memory leaks
            if ( elem.nodeType === 1 ) {
                jQuery.cleanData( getAll( elem, false ) );
            }

            // Remove any remaining nodes
            while ( elem.firstChild ) {
                elem.removeChild( elem.firstChild );
            }

            // If this is a select, ensure that it displays empty (#12336)
            // Support: IE<9
            if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
                elem.options.length = 0;
            }
        }

        return this;
    },

    clone: function( dataAndEvents, deepDataAndEvents ) {
        dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
        deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

        return this.map( function () {
            return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
        });
    },

    html: function( value ) {
        return jQuery.access( this, function( value ) {
            var elem = this[0] || {},
                i = 0,
                l = this.length;

            if ( value === undefined ) {
                return elem.nodeType === 1 ?
                    elem.innerHTML.replace( rinlinejQuery, "" ) :
                    undefined;
            }

            // See if we can take a shortcut and just use innerHTML
            if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
                ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
                !wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

                value = value.replace( rxhtmlTag, "<$1></$2>" );

                try {
                    for (; i < l; i++ ) {
                        // Remove element nodes and prevent memory leaks
                        elem = this[i] || {};
                        if ( elem.nodeType === 1 ) {
                            jQuery.cleanData( getAll( elem, false ) );
                            elem.innerHTML = value;
                        }
                    }

                    elem = 0;

                // If using innerHTML throws an exception, use the fallback method
                } catch(e) {}
            }

            if ( elem ) {
                this.empty().append( value );
            }
        }, null, value, arguments.length );
    },

    replaceWith: function() {
        var
            // Snapshot the DOM in case .domManip sweeps something relevant into its fragment
            args = jQuery.map( this, function( elem ) {
                return [ elem.nextSibling, elem.parentNode ];
            }),
            i = 0;

        // Make the changes, replacing each context element with the new content
        this.domManip( arguments, function( elem ) {
            var next = args[ i++ ],
                parent = args[ i++ ];

            if ( parent ) {
                // Don't use the snapshot next if it has moved (#13810)
                if ( next && next.parentNode !== parent ) {
                    next = this.nextSibling;
                }
                jQuery( this ).remove();
                parent.insertBefore( elem, next );
            }
        // Allow new content to include elements from the context set
        }, true );

        // Force removal if there was no new content (e.g., from empty arguments)
        return i ? this : this.remove();
    },

    detach: function( selector ) {
        return this.remove( selector, true );
    },

    domManip: function( args, callback, allowIntersection ) {

        // Flatten any nested arrays
        args = core_concat.apply( [], args );

        var first, node, hasScripts,
            scripts, doc, fragment,
            i = 0,
            l = this.length,
            set = this,
            iNoClone = l - 1,
            value = args[0],
            isFunction = jQuery.isFunction( value );

        // We can't cloneNode fragments that contain checked, in WebKit
        if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
            return this.each(function( index ) {
                var self = set.eq( index );
                if ( isFunction ) {
                    args[0] = value.call( this, index, self.html() );
                }
                self.domManip( args, callback, allowIntersection );
            });
        }

        if ( l ) {
            fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
            first = fragment.firstChild;

            if ( fragment.childNodes.length === 1 ) {
                fragment = first;
            }

            if ( first ) {
                scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                hasScripts = scripts.length;

                // Use the original fragment for the last item instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for ( ; i < l; i++ ) {
                    node = fragment;

                    if ( i !== iNoClone ) {
                        node = jQuery.clone( node, true, true );

                        // Keep references to cloned scripts for later restoration
                        if ( hasScripts ) {
                            jQuery.merge( scripts, getAll( node, "script" ) );
                        }
                    }

                    callback.call( this[i], node, i );
                }

                if ( hasScripts ) {
                    doc = scripts[ scripts.length - 1 ].ownerDocument;

                    // Reenable scripts
                    jQuery.map( scripts, restoreScript );

                    // Evaluate executable scripts on first document insertion
                    for ( i = 0; i < hasScripts; i++ ) {
                        node = scripts[ i ];
                        if ( rscriptType.test( node.type || "" ) &&
                            !jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

                            if ( node.src ) {
                                // Hope ajax is available...
                                jQuery._evalUrl( node.src );
                            } else {
                                jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
                            }
                        }
                    }
                }

                // Fix #11809: Avoid leaking memory
                fragment = first = null;
            }
        }

        return this;
    }
});

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
    return jQuery.nodeName( elem, "table" ) &&
        jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

        elem.getElementsByTagName("tbody")[0] ||
            elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
        elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
    elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
    return elem;
}
function restoreScript( elem ) {
    var match = rscriptTypeMasked.exec( elem.type );
    if ( match ) {
        elem.type = match[1];
    } else {
        elem.removeAttribute("type");
    }
    return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
    var elem,
        i = 0;
    for ( ; (elem = elems[i]) != null; i++ ) {
        jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
    }
}

function cloneCopyEvent( src, dest ) {

    if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
        return;
    }

    var type, i, l,
        oldData = jQuery._data( src ),
        curData = jQuery._data( dest, oldData ),
        events = oldData.events;

    if ( events ) {
        delete curData.handle;
        curData.events = {};

        for ( type in events ) {
            for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                jQuery.event.add( dest, type, events[ type ][ i ] );
            }
        }
    }

    // make the cloned public data object a copy from the original
    if ( curData.data ) {
        curData.data = jQuery.extend( {}, curData.data );
    }
}

function fixCloneNodeIssues( src, dest ) {
    var nodeName, e, data;

    // We do not need to do anything for non-Elements
    if ( dest.nodeType !== 1 ) {
        return;
    }

    nodeName = dest.nodeName.toLowerCase();

    // IE6-8 copies events bound via attachEvent when using cloneNode.
    if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
        data = jQuery._data( dest );

        for ( e in data.events ) {
            jQuery.removeEvent( dest, e, data.handle );
        }

        // Event data gets referenced instead of copied if the expando gets copied too
        dest.removeAttribute( jQuery.expando );
    }

    // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
    if ( nodeName === "script" && dest.text !== src.text ) {
        disableScript( dest ).text = src.text;
        restoreScript( dest );

    // IE6-10 improperly clones children of object elements using classid.
    // IE10 throws NoModificationAllowedError if parent is null, #12132.
    } else if ( nodeName === "object" ) {
        if ( dest.parentNode ) {
            dest.outerHTML = src.outerHTML;
        }

        // This path appears unavoidable for IE9. When cloning an object
        // element in IE9, the outerHTML strategy above is not sufficient.
        // If the src has innerHTML and the destination does not,
        // copy the src.innerHTML into the dest.innerHTML. #10324
        if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
            dest.innerHTML = src.innerHTML;
        }

    } else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
        // IE6-8 fails to persist the checked state of a cloned checkbox
        // or radio button. Worse, IE6-7 fail to give the cloned element
        // a checked appearance if the defaultChecked value isn't also set

        dest.defaultChecked = dest.checked = src.checked;

        // IE6-7 get confused and end up setting the value of a cloned
        // checkbox/radio button to an empty string instead of "on"
        if ( dest.value !== src.value ) {
            dest.value = src.value;
        }

    // IE6-8 fails to return the selected option to the default selected
    // state when cloning options
    } else if ( nodeName === "option" ) {
        dest.defaultSelected = dest.selected = src.defaultSelected;

    // IE6-8 fails to set the defaultValue to the correct value when
    // cloning other types of input fields
    } else if ( nodeName === "input" || nodeName === "textarea" ) {
        dest.defaultValue = src.defaultValue;
    }
}

jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
}, function( name, original ) {
    jQuery.fn[ name ] = function( selector ) {
        var elems,
            i = 0,
            ret = [],
            insert = jQuery( selector ),
            last = insert.length - 1;

        for ( ; i <= last; i++ ) {
            elems = i === last ? this : this.clone(true);
            jQuery( insert[i] )[ original ]( elems );

            // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
            core_push.apply( ret, elems.get() );
        }

        return this.pushStack( ret );
    };
});

function getAll( context, tag ) {
    var elems, elem,
        i = 0,
        found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
            typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
            undefined;

    if ( !found ) {
        for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
            if ( !tag || jQuery.nodeName( elem, tag ) ) {
                found.push( elem );
            } else {
                jQuery.merge( found, getAll( elem, tag ) );
            }
        }
    }

    return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
        jQuery.merge( [ context ], found ) :
        found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
    if ( manipulation_rcheckableType.test( elem.type ) ) {
        elem.defaultChecked = elem.checked;
    }
}

jQuery.extend({
    clone: function( elem, dataAndEvents, deepDataAndEvents ) {
        var destElements, node, clone, i, srcElements,
            inPage = jQuery.contains( elem.ownerDocument, elem );

        if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
            clone = elem.cloneNode( true );

        // IE<=8 does not properly clone detached, unknown element nodes
        } else {
            fragmentDiv.innerHTML = elem.outerHTML;
            fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
        }

        if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

            // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
            destElements = getAll( clone );
            srcElements = getAll( elem );

            // Fix all IE cloning issues
            for ( i = 0; (node = srcElements[i]) != null; ++i ) {
                // Ensure that the destination node is not null; Fixes #9587
                if ( destElements[i] ) {
                    fixCloneNodeIssues( node, destElements[i] );
                }
            }
        }

        // Copy the events from the original to the clone
        if ( dataAndEvents ) {
            if ( deepDataAndEvents ) {
                srcElements = srcElements || getAll( elem );
                destElements = destElements || getAll( clone );

                for ( i = 0; (node = srcElements[i]) != null; i++ ) {
                    cloneCopyEvent( node, destElements[i] );
                }
            } else {
                cloneCopyEvent( elem, clone );
            }
        }

        // Preserve script evaluation history
        destElements = getAll( clone, "script" );
        if ( destElements.length > 0 ) {
            setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
        }

        destElements = srcElements = node = null;

        // Return the cloned set
        return clone;
    },

    buildFragment: function( elems, context, scripts, selection ) {
        var j, elem, contains,
            tmp, tag, tbody, wrap,
            l = elems.length,

            // Ensure a safe fragment
            safe = createSafeFragment( context ),

            nodes = [],
            i = 0;

        for ( ; i < l; i++ ) {
            elem = elems[ i ];

            if ( elem || elem === 0 ) {

                // Add nodes directly
                if ( jQuery.type( elem ) === "object" ) {
                    jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

                // Convert non-html into a text node
                } else if ( !rhtml.test( elem ) ) {
                    nodes.push( context.createTextNode( elem ) );

                // Convert html into DOM nodes
                } else {
                    tmp = tmp || safe.appendChild( context.createElement("div") );

                    // Deserialize a standard representation
                    tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
                    wrap = wrapMap[ tag ] || wrapMap._default;

                    tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while ( j-- ) {
                        tmp = tmp.lastChild;
                    }

                    // Manually add leading whitespace removed by IE
                    if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
                        nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
                    }

                    // Remove IE's autoinserted <tbody> from table fragments
                    if ( !jQuery.support.tbody ) {

                        // String was a <table>, *may* have spurious <tbody>
                        elem = tag === "table" && !rtbody.test( elem ) ?
                            tmp.firstChild :

                            // String was a bare <thead> or <tfoot>
                            wrap[1] === "<table>" && !rtbody.test( elem ) ?
                                tmp :
                                0;

                        j = elem && elem.childNodes.length;
                        while ( j-- ) {
                            if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
                                elem.removeChild( tbody );
                            }
                        }
                    }

                    jQuery.merge( nodes, tmp.childNodes );

                    // Fix #12392 for WebKit and IE > 9
                    tmp.textContent = "";

                    // Fix #12392 for oldIE
                    while ( tmp.firstChild ) {
                        tmp.removeChild( tmp.firstChild );
                    }

                    // Remember the top-level container for proper cleanup
                    tmp = safe.lastChild;
                }
            }
        }

        // Fix #11356: Clear elements from fragment
        if ( tmp ) {
            safe.removeChild( tmp );
        }

        // Reset defaultChecked for any radios and checkboxes
        // about to be appended to the DOM in IE 6/7 (#8060)
        if ( !jQuery.support.appendChecked ) {
            jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
        }

        i = 0;
        while ( (elem = nodes[ i++ ]) ) {

            // #4087 - If origin and destination elements are the same, and this is
            // that element, do not do anything
            if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
                continue;
            }

            contains = jQuery.contains( elem.ownerDocument, elem );

            // Append to fragment
            tmp = getAll( safe.appendChild( elem ), "script" );

            // Preserve script evaluation history
            if ( contains ) {
                setGlobalEval( tmp );
            }

            // Capture executables
            if ( scripts ) {
                j = 0;
                while ( (elem = tmp[ j++ ]) ) {
                    if ( rscriptType.test( elem.type || "" ) ) {
                        scripts.push( elem );
                    }
                }
            }
        }

        tmp = null;

        return safe;
    },

    cleanData: function( elems, /* internal */ acceptData ) {
        var elem, type, id, data,
            i = 0,
            internalKey = jQuery.expando,
            cache = jQuery.cache,
            deleteExpando = jQuery.support.deleteExpando,
            special = jQuery.event.special;

        for ( ; (elem = elems[i]) != null; i++ ) {

            if ( acceptData || jQuery.acceptData( elem ) ) {

                id = elem[ internalKey ];
                data = id && cache[ id ];

                if ( data ) {
                    if ( data.events ) {
                        for ( type in data.events ) {
                            if ( special[ type ] ) {
                                jQuery.event.remove( elem, type );

                            // This is a shortcut to avoid jQuery.event.remove's overhead
                            } else {
                                jQuery.removeEvent( elem, type, data.handle );
                            }
                        }
                    }

                    // Remove cache only if it was not already removed by jQuery.event.remove
                    if ( cache[ id ] ) {

                        delete cache[ id ];

                        // IE does not allow us to delete expando properties from nodes,
                        // nor does it have a removeAttribute function on Document nodes;
                        // we must handle all of these cases
                        if ( deleteExpando ) {
                            delete elem[ internalKey ];

                        } else if ( typeof elem.removeAttribute !== core_strundefined ) {
                            elem.removeAttribute( internalKey );

                        } else {
                            elem[ internalKey ] = null;
                        }

                        core_deletedIds.push( id );
                    }
                }
            }
        }
    },

    _evalUrl: function( url ) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    }
});
jQuery.fn.extend({
    wrapAll: function( html ) {
        if ( jQuery.isFunction( html ) ) {
            return this.each(function(i) {
                jQuery(this).wrapAll( html.call(this, i) );
            });
        }

        if ( this[0] ) {
            // The elements to wrap the target around
            var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

            if ( this[0].parentNode ) {
                wrap.insertBefore( this[0] );
            }

            wrap.map(function() {
                var elem = this;

                while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
                    elem = elem.firstChild;
                }

                return elem;
            }).append( this );
        }

        return this;
    },

    wrapInner: function( html ) {
        if ( jQuery.isFunction( html ) ) {
            return this.each(function(i) {
                jQuery(this).wrapInner( html.call(this, i) );
            });
        }

        return this.each(function() {
            var self = jQuery( this ),
                contents = self.contents();

            if ( contents.length ) {
                contents.wrapAll( html );

            } else {
                self.append( html );
            }
        });
    },

    wrap: function( html ) {
        var isFunction = jQuery.isFunction( html );

        return this.each(function(i) {
            jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
        });
    },

    unwrap: function() {
        return this.parent().each(function() {
            if ( !jQuery.nodeName( this, "body" ) ) {
                jQuery( this ).replaceWith( this.childNodes );
            }
        }).end();
    }
});
var iframe, getStyles, curCSS,
    ralpha = /alpha\([^)]*\)/i,
    ropacity = /opacity\s*=\s*([^)]*)/,
    rposition = /^(top|right|bottom|left)$/,
    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    rmargin = /^margin/,
    rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
    rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
    rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
    elemdisplay = { BODY: "block" },

    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    cssNormalTransform = {
        letterSpacing: 0,
        fontWeight: 400
    },

    cssExpand = [ "Top", "Right", "Bottom", "Left" ],
    cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

    // shortcut for names that are not vendor prefixed
    if ( name in style ) {
        return name;
    }

    // check for vendor prefixed names
    var capName = name.charAt(0).toUpperCase() + name.slice(1),
        origName = name,
        i = cssPrefixes.length;

    while ( i-- ) {
        name = cssPrefixes[ i ] + capName;
        if ( name in style ) {
            return name;
        }
    }

    return origName;
}

function isHidden( elem, el ) {
    // isHidden might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;
    return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
    var display, elem, hidden,
        values = [],
        index = 0,
        length = elements.length;

    for ( ; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
            continue;
        }

        values[ index ] = jQuery._data( elem, "olddisplay" );
        display = elem.style.display;
        if ( show ) {
            // Reset the inline display of this element to learn if it is
            // being hidden by cascaded rules or not
            if ( !values[ index ] && display === "none" ) {
                elem.style.display = "";
            }

            // Set elements which have been overridden with display: none
            // in a stylesheet to whatever the default browser style is
            // for such an element
            if ( elem.style.display === "" && isHidden( elem ) ) {
                values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
            }
        } else {

            if ( !values[ index ] ) {
                hidden = isHidden( elem );

                if ( display && display !== "none" || !hidden ) {
                    jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
                }
            }
        }
    }

    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for ( index = 0; index < length; index++ ) {
        elem = elements[ index ];
        if ( !elem.style ) {
            continue;
        }
        if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
            elem.style.display = show ? values[ index ] || "" : "none";
        }
    }

    return elements;
}

jQuery.fn.extend({
    css: function( name, value ) {
        return jQuery.access( this, function( elem, name, value ) {
            var len, styles,
                map = {},
                i = 0;

            if ( jQuery.isArray( name ) ) {
                styles = getStyles( elem );
                len = name.length;

                for ( ; i < len; i++ ) {
                    map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                }

                return map;
            }

            return value !== undefined ?
                jQuery.style( elem, name, value ) :
                jQuery.css( elem, name );
        }, name, value, arguments.length > 1 );
    },
    show: function() {
        return showHide( this, true );
    },
    hide: function() {
        return showHide( this );
    },
    toggle: function( state ) {
        if ( typeof state === "boolean" ) {
            return state ? this.show() : this.hide();
        }

        return this.each(function() {
            if ( isHidden( this ) ) {
                jQuery( this ).show();
            } else {
                jQuery( this ).hide();
            }
        });
    }
});

jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
        opacity: {
            get: function( elem, computed ) {
                if ( computed ) {
                    // We should always get a number back from opacity
                    var ret = curCSS( elem, "opacity" );
                    return ret === "" ? "1" : ret;
                }
            }
        }
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
        "columnCount": true,
        "fillOpacity": true,
        "fontWeight": true,
        "lineHeight": true,
        "opacity": true,
        "order": true,
        "orphans": true,
        "widows": true,
        "zIndex": true,
        "zoom": true
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {
        // normalize float css property
        "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
    },

    // Get and set the style property on a DOM Node
    style: function( elem, name, value, extra ) {
        // Don't set styles on text and comment nodes
        if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
            return;
        }

        // Make sure that we're working with the right name
        var ret, type, hooks,
            origName = jQuery.camelCase( name ),
            style = elem.style;

        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

        // gets hook for the prefixed version
        // followed by the unprefixed version
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // Check if we're setting a value
        if ( value !== undefined ) {
            type = typeof value;

            // convert relative number strings (+= or -=) to relative numbers. #7345
            if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                // Fixes bug #9237
                type = "number";
            }

            // Make sure that NaN and null values aren't set. See: #7116
            if ( value == null || type === "number" && isNaN( value ) ) {
                return;
            }

            // If a number was passed in, add 'px' to the (except for certain CSS properties)
            if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                value += "px";
            }

            // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
            // but it would mean to define eight (for every problematic property) identical functions
            if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
                style[ name ] = "inherit";
            }

            // If a hook was provided, use that value, otherwise just set the specified value
            if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

                // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                // Fixes bug #5509
                try {
                    style[ name ] = value;
                } catch(e) {}
            }

        } else {
            // If a hook was provided get the non-computed value from there
            if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                return ret;
            }

            // Otherwise just get the value from the style object
            return style[ name ];
        }
    },

    css: function( elem, name, extra, styles ) {
        var num, val, hooks,
            origName = jQuery.camelCase( name );

        // Make sure that we're working with the right name
        name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

        // gets hook for the prefixed version
        // followed by the unprefixed version
        hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

        // If a hook was provided get the computed value from there
        if ( hooks && "get" in hooks ) {
            val = hooks.get( elem, true, extra );
        }

        // Otherwise, if a way to get the computed value exists, use that
        if ( val === undefined ) {
            val = curCSS( elem, name, styles );
        }

        //convert "normal" to computed value
        if ( val === "normal" && name in cssNormalTransform ) {
            val = cssNormalTransform[ name ];
        }

        // Return, converting to number if forced or a qualifier was provided and val looks numeric
        if ( extra === "" || extra ) {
            num = parseFloat( val );
            return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
        }
        return val;
    }
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
    getStyles = function( elem ) {
        return window.getComputedStyle( elem, null );
    };

    curCSS = function( elem, name, _computed ) {
        var width, minWidth, maxWidth,
            computed = _computed || getStyles( elem ),

            // getPropertyValue is only needed for .css('filter') in IE9, see #12537
            ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
            style = elem.style;

        if ( computed ) {

            if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
                ret = jQuery.style( elem, name );
            }

            // A tribute to the "awesome hack by Dean Edwards"
            // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
            // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
            // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
            if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }

        return ret;
    };
} else if ( document.documentElement.currentStyle ) {
    getStyles = function( elem ) {
        return elem.currentStyle;
    };

    curCSS = function( elem, name, _computed ) {
        var left, rs, rsLeft,
            computed = _computed || getStyles( elem ),
            ret = computed ? computed[ name ] : undefined,
            style = elem.style;

        // Avoid setting ret to empty string here
        // so we don't default to auto
        if ( ret == null && style && style[ name ] ) {
            ret = style[ name ];
        }

        // From the awesome hack by Dean Edwards
        // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

        // If we're not dealing with a regular pixel number
        // but a number that has a weird ending, we need to convert it to pixels
        // but not position css attributes, as those are proportional to the parent element instead
        // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
        if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

            // Remember the original values
            left = style.left;
            rs = elem.runtimeStyle;
            rsLeft = rs && rs.left;

            // Put in the new values to get a computed value out
            if ( rsLeft ) {
                rs.left = elem.currentStyle.left;
            }
            style.left = name === "fontSize" ? "1em" : ret;
            ret = style.pixelLeft + "px";

            // Revert the changed values
            style.left = left;
            if ( rsLeft ) {
                rs.left = rsLeft;
            }
        }

        return ret === "" ? "auto" : ret;
    };
}

function setPositiveNumber( elem, value, subtract ) {
    var matches = rnumsplit.exec( value );
    return matches ?
        // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
        value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
    var i = extra === ( isBorderBox ? "border" : "content" ) ?
        // If we already have the right measurement, avoid augmentation
        4 :
        // Otherwise initialize for horizontal or vertical properties
        name === "width" ? 1 : 0,

        val = 0;

    for ( ; i < 4; i += 2 ) {
        // both box models exclude margin, so add it if we want it
        if ( extra === "margin" ) {
            val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
        }

        if ( isBorderBox ) {
            // border-box includes padding, so remove it if we want content
            if ( extra === "content" ) {
                val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
            }

            // at this point, extra isn't border nor margin, so remove border
            if ( extra !== "margin" ) {
                val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
            }
        } else {
            // at this point, extra isn't content, so add padding
            val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

            // at this point, extra isn't content nor padding, so add border
            if ( extra !== "padding" ) {
                val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
            }
        }
    }

    return val;
}

function getWidthOrHeight( elem, name, extra ) {

    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true,
        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
        styles = getStyles( elem ),
        isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

    // some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if ( val <= 0 || val == null ) {
        // Fall back to computed then uncomputed css if necessary
        val = curCSS( elem, name, styles );
        if ( val < 0 || val == null ) {
            val = elem.style[ name ];
        }

        // Computed unit is not pixels. Stop here and return.
        if ( rnumnonpx.test(val) ) {
            return val;
        }

        // we need the check for style in case a browser which returns unreliable values
        // for getComputedStyle silently falls back to the reliable elem.style
        valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

        // Normalize "", auto, and prepare for extra
        val = parseFloat( val ) || 0;
    }

    // use the active box-sizing model to add/subtract irrelevant styles
    return ( val +
        augmentWidthOrHeight(
            elem,
            name,
            extra || ( isBorderBox ? "border" : "content" ),
            valueIsBorderBox,
            styles
        )
    ) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
    var doc = document,
        display = elemdisplay[ nodeName ];

    if ( !display ) {
        display = actualDisplay( nodeName, doc );

        // If the simple way fails, read from inside an iframe
        if ( display === "none" || !display ) {
            // Use the already-created iframe if possible
            iframe = ( iframe ||
                jQuery("<iframe frameborder='0' width='0' height='0'/>")
                .css( "cssText", "display:block !important" )
            ).appendTo( doc.documentElement );

            // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
            doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
            doc.write("<!doctype html><html><body>");
            doc.close();

            display = actualDisplay( nodeName, doc );
            iframe.detach();
        }

        // Store the correct default display
        elemdisplay[ nodeName ] = display;
    }

    return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
    var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
        display = jQuery.css( elem[0], "display" );
    elem.remove();
    return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
    jQuery.cssHooks[ name ] = {
        get: function( elem, computed, extra ) {
            if ( computed ) {
                // certain elements can have dimension info if we invisibly show them
                // however, it must have a current display style that would benefit from this
                return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
                    jQuery.swap( elem, cssShow, function() {
                        return getWidthOrHeight( elem, name, extra );
                    }) :
                    getWidthOrHeight( elem, name, extra );
            }
        },

        set: function( elem, value, extra ) {
            var styles = extra && getStyles( elem );
            return setPositiveNumber( elem, value, extra ?
                augmentWidthOrHeight(
                    elem,
                    name,
                    extra,
                    jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                    styles
                ) : 0
            );
        }
    };
});

if ( !jQuery.support.opacity ) {
    jQuery.cssHooks.opacity = {
        get: function( elem, computed ) {
            // IE uses filters for opacity
            return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
                ( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
                computed ? "1" : "";
        },

        set: function( elem, value ) {
            var style = elem.style,
                currentStyle = elem.currentStyle,
                opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
                filter = currentStyle && currentStyle.filter || style.filter || "";

            // IE has trouble with opacity if it does not have layout
            // Force it by setting the zoom level
            style.zoom = 1;

            // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
            // if value === "", then remove inline opacity #12685
            if ( ( value >= 1 || value === "" ) &&
                    jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
                    style.removeAttribute ) {

                // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                // if "filter:" is present at all, clearType is disabled, we want to avoid this
                // style.removeAttribute is IE Only, but so apparently is this code path...
                style.removeAttribute( "filter" );

                // if there is no filter style applied in a css rule or unset inline opacity, we are done
                if ( value === "" || currentStyle && !currentStyle.filter ) {
                    return;
                }
            }

            // otherwise, set new filter values
            style.filter = ralpha.test( filter ) ?
                filter.replace( ralpha, opacity ) :
                filter + " " + opacity;
        }
    };
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
    if ( !jQuery.support.reliableMarginRight ) {
        jQuery.cssHooks.marginRight = {
            get: function( elem, computed ) {
                if ( computed ) {
                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                    // Work around by temporarily setting element display to inline-block
                    return jQuery.swap( elem, { "display": "inline-block" },
                        curCSS, [ elem, "marginRight" ] );
                }
            }
        };
    }

    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // getComputedStyle returns percent when specified for top/left/bottom/right
    // rather than make the css module depend on the offset module, we just check for it here
    if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
        jQuery.each( [ "top", "left" ], function( i, prop ) {
            jQuery.cssHooks[ prop ] = {
                get: function( elem, computed ) {
                    if ( computed ) {
                        computed = curCSS( elem, prop );
                        // if curCSS returns percentage, fallback to offset
                        return rnumnonpx.test( computed ) ?
                            jQuery( elem ).position()[ prop ] + "px" :
                            computed;
                    }
                }
            };
        });
    }

});

if ( jQuery.expr && jQuery.expr.filters ) {
    jQuery.expr.filters.hidden = function( elem ) {
        // Support: Opera <= 12.12
        // Opera reports offsetWidths and offsetHeights less than zero on some elements
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
            (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
    };

    jQuery.expr.filters.visible = function( elem ) {
        return !jQuery.expr.filters.hidden( elem );
    };
}

// These hooks are used by animate to expand properties
jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
}, function( prefix, suffix ) {
    jQuery.cssHooks[ prefix + suffix ] = {
        expand: function( value ) {
            var i = 0,
                expanded = {},

                // assumes a single number if not a string
                parts = typeof value === "string" ? value.split(" ") : [ value ];

            for ( ; i < 4; i++ ) {
                expanded[ prefix + cssExpand[ i ] + suffix ] =
                    parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
            }

            return expanded;
        }
    };

    if ( !rmargin.test( prefix ) ) {
        jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
    }
});
var r20 = /%20/g,
    rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
    serialize: function() {
        return jQuery.param( this.serializeArray() );
    },
    serializeArray: function() {
        return this.map(function(){
            // Can add propHook for "elements" to filter or add form elements
            var elements = jQuery.prop( this, "elements" );
            return elements ? jQuery.makeArray( elements ) : this;
        })
        .filter(function(){
            var type = this.type;
            // Use .is(":disabled") so that fieldset[disabled] works
            return this.name && !jQuery( this ).is( ":disabled" ) &&
                rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                ( this.checked || !manipulation_rcheckableType.test( type ) );
        })
        .map(function( i, elem ){
            var val = jQuery( this ).val();

            return val == null ?
                null :
                jQuery.isArray( val ) ?
                    jQuery.map( val, function( val ){
                        return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                    }) :
                    { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
        }).get();
    }
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
    var prefix,
        s = [],
        add = function( key, value ) {
            // If value is a function, invoke it and return its value
            value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
            s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
        };

    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if ( traditional === undefined ) {
        traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }

    // If an array was passed in, assume that it is an array of form elements.
    if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
        // Serialize the form elements
        jQuery.each( a, function() {
            add( this.name, this.value );
        });

    } else {
        // If traditional, encode the "old" way (the way 1.3.2 or older
        // did it), otherwise encode params recursively.
        for ( prefix in a ) {
            buildParams( prefix, a[ prefix ], traditional, add );
        }
    }

    // Return the resulting serialization
    return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
    var name;

    if ( jQuery.isArray( obj ) ) {
        // Serialize array item.
        jQuery.each( obj, function( i, v ) {
            if ( traditional || rbracket.test( prefix ) ) {
                // Treat each array item as a scalar.
                add( prefix, v );

            } else {
                // Item is non-scalar (array or object), encode its numeric index.
                buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
            }
        });

    } else if ( !traditional && jQuery.type( obj ) === "object" ) {
        // Serialize object item.
        for ( name in obj ) {
            buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
        }

    } else {
        // Serialize scalar item.
        add( prefix, obj );
    }
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
    "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

    // Handle event binding
    jQuery.fn[ name ] = function( data, fn ) {
        return arguments.length > 0 ?
            this.on( name, null, data, fn ) :
            this.trigger( name );
    };
});

jQuery.fn.extend({
    hover: function( fnOver, fnOut ) {
        return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
    },

    bind: function( types, data, fn ) {
        return this.on( types, null, data, fn );
    },
    unbind: function( types, fn ) {
        return this.off( types, null, fn );
    },

    delegate: function( selector, types, data, fn ) {
        return this.on( types, selector, data, fn );
    },
    undelegate: function( selector, types, fn ) {
        // ( namespace ) or ( selector, types [, fn] )
        return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
    }
});
var
    // Document location
    ajaxLocParts,
    ajaxLocation,
    ajax_nonce = jQuery.now(),

    ajax_rquery = /\?/,
    rhash = /#.*$/,
    rts = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

    // Keep a copy of the old load method
    _load = jQuery.fn.load,

    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},

    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},

    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
    ajaxLocation = location.href;
} catch( e ) {
    // Use the href attribute of an A element
    // since IE will modify it given document.location
    ajaxLocation = document.createElement( "a" );
    ajaxLocation.href = "";
    ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

    // dataTypeExpression is optional and defaults to "*"
    return function( dataTypeExpression, func ) {

        if ( typeof dataTypeExpression !== "string" ) {
            func = dataTypeExpression;
            dataTypeExpression = "*";
        }

        var dataType,
            i = 0,
            dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

        if ( jQuery.isFunction( func ) ) {
            // For each dataType in the dataTypeExpression
            while ( (dataType = dataTypes[i++]) ) {
                // Prepend if requested
                if ( dataType[0] === "+" ) {
                    dataType = dataType.slice( 1 ) || "*";
                    (structure[ dataType ] = structure[ dataType ] || []).unshift( func );

                // Otherwise append
                } else {
                    (structure[ dataType ] = structure[ dataType ] || []).push( func );
                }
            }
        }
    };
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

    var inspected = {},
        seekingTransport = ( structure === transports );

    function inspect( dataType ) {
        var selected;
        inspected[ dataType ] = true;
        jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
            var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
            if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
                options.dataTypes.unshift( dataTypeOrTransport );
                inspect( dataTypeOrTransport );
                return false;
            } else if ( seekingTransport ) {
                return !( selected = dataTypeOrTransport );
            }
        });
        return selected;
    }

    return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
    var deep, key,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for ( key in src ) {
        if ( src[ key ] !== undefined ) {
            ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
        }
    }
    if ( deep ) {
        jQuery.extend( true, target, deep );
    }

    return target;
}

jQuery.fn.load = function( url, params, callback ) {
    if ( typeof url !== "string" && _load ) {
        return _load.apply( this, arguments );
    }

    var selector, response, type,
        self = this,
        off = url.indexOf(" ");

    if ( off >= 0 ) {
        selector = url.slice( off, url.length );
        url = url.slice( 0, off );
    }

    // If it's a function
    if ( jQuery.isFunction( params ) ) {

        // We assume that it's the callback
        callback = params;
        params = undefined;

    // Otherwise, build a param string
    } else if ( params && typeof params === "object" ) {
        type = "POST";
    }

    // If we have elements to modify, make the request
    if ( self.length > 0 ) {
        jQuery.ajax({
            url: url,

            // if "type" variable is undefined, then "GET" method will be used
            type: type,
            dataType: "html",
            data: params
        }).done(function( responseText ) {

            // Save response for use in complete callback
            response = arguments;

            self.html( selector ?

                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

                // Otherwise use the full result
                responseText );

        }).complete( callback && function( jqXHR, status ) {
            self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
        });
    }

    return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
    jQuery.fn[ type ] = function( fn ){
        return this.on( type, fn );
    };
});

jQuery.extend({

    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
        url: ajaxLocation,
        type: "GET",
        isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
        global: true,
        processData: true,
        async: true,
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        /*
        timeout: 0,
        data: null,
        dataType: null,
        username: null,
        password: null,
        cache: null,
        throws: false,
        traditional: false,
        headers: {},
        */

        accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
        },

        contents: {
            xml: /xml/,
            html: /html/,
            json: /json/
        },

        responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
        },

        // Data converters
        // Keys separate source (or catchall "*") and destination types with a single space
        converters: {

            // Convert anything to text
            "* text": String,

            // Text to html (true = no transformation)
            "text html": true,

            // Evaluate text as a json expression
            "text json": jQuery.parseJSON,

            // Parse text as xml
            "text xml": jQuery.parseXML
        },

        // For options that shouldn't be deep extended:
        // you can add your own custom options here if
        // and when you create one that shouldn't be
        // deep extended (see ajaxExtend)
        flatOptions: {
            url: true,
            context: true
        }
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function( target, settings ) {
        return settings ?

            // Building a settings object
            ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

            // Extending ajaxSettings
            ajaxExtend( jQuery.ajaxSettings, target );
    },

    ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
    ajaxTransport: addToPrefiltersOrTransports( transports ),

    // Main method
    ajax: function( url, options ) {

        // If url is an object, simulate pre-1.5 signature
        if ( typeof url === "object" ) {
            options = url;
            url = undefined;
        }

        // Force options to be an object
        options = options || {};

        var // Cross-domain detection vars
            parts,
            // Loop variable
            i,
            // URL without anti-cache param
            cacheURL,
            // Response headers as string
            responseHeadersString,
            // timeout handle
            timeoutTimer,

            // To know if global events are to be dispatched
            fireGlobals,

            transport,
            // Response headers
            responseHeaders,
            // Create the final options object
            s = jQuery.ajaxSetup( {}, options ),
            // Callbacks context
            callbackContext = s.context || s,
            // Context for global events is callbackContext if it is a DOM node or jQuery collection
            globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
                jQuery( callbackContext ) :
                jQuery.event,
            // Deferreds
            deferred = jQuery.Deferred(),
            completeDeferred = jQuery.Callbacks("once memory"),
            // Status-dependent callbacks
            statusCode = s.statusCode || {},
            // Headers (they are sent all at once)
            requestHeaders = {},
            requestHeadersNames = {},
            // The jqXHR state
            state = 0,
            // Default abort message
            strAbort = "canceled",
            // Fake xhr
            jqXHR = {
                readyState: 0,

                // Builds headers hashtable if needed
                getResponseHeader: function( key ) {
                    var match;
                    if ( state === 2 ) {
                        if ( !responseHeaders ) {
                            responseHeaders = {};
                            while ( (match = rheaders.exec( responseHeadersString )) ) {
                                responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                            }
                        }
                        match = responseHeaders[ key.toLowerCase() ];
                    }
                    return match == null ? null : match;
                },

                // Raw string
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },

                // Caches the header
                setRequestHeader: function( name, value ) {
                    var lname = name.toLowerCase();
                    if ( !state ) {
                        name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                        requestHeaders[ name ] = value;
                    }
                    return this;
                },

                // Overrides response content-type header
                overrideMimeType: function( type ) {
                    if ( !state ) {
                        s.mimeType = type;
                    }
                    return this;
                },

                // Status-dependent callbacks
                statusCode: function( map ) {
                    var code;
                    if ( map ) {
                        if ( state < 2 ) {
                            for ( code in map ) {
                                // Lazy-add the new callback in a way that preserves old ones
                                statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                            }
                        } else {
                            // Execute the appropriate callbacks
                            jqXHR.always( map[ jqXHR.status ] );
                        }
                    }
                    return this;
                },

                // Cancel the request
                abort: function( statusText ) {
                    var finalText = statusText || strAbort;
                    if ( transport ) {
                        transport.abort( finalText );
                    }
                    done( 0, finalText );
                    return this;
                }
            };

        // Attach deferreds
        deferred.promise( jqXHR ).complete = completeDeferred.add;
        jqXHR.success = jqXHR.done;
        jqXHR.error = jqXHR.fail;

        // Remove hash character (#7531: and string promotion)
        // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
        // Handle falsy url in the settings object (#10093: consistency with old signature)
        // We also use the url parameter if available
        s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

        // Alias method option to type as per ticket #12004
        s.type = options.method || options.type || s.method || s.type;

        // Extract dataTypes list
        s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

        // A cross-domain request is in order when we have a protocol:host:port mismatch
        if ( s.crossDomain == null ) {
            parts = rurl.exec( s.url.toLowerCase() );
            s.crossDomain = !!( parts &&
                ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
                    ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
                        ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
            );
        }

        // Convert data if not already a string
        if ( s.data && s.processData && typeof s.data !== "string" ) {
            s.data = jQuery.param( s.data, s.traditional );
        }

        // Apply prefilters
        inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

        // If request was aborted inside a prefilter, stop there
        if ( state === 2 ) {
            return jqXHR;
        }

        // We can fire global events as of now if asked to
        fireGlobals = s.global;

        // Watch for a new set of requests
        if ( fireGlobals && jQuery.active++ === 0 ) {
            jQuery.event.trigger("ajaxStart");
        }

        // Uppercase the type
        s.type = s.type.toUpperCase();

        // Determine if request has content
        s.hasContent = !rnoContent.test( s.type );

        // Save the URL in case we're toying with the If-Modified-Since
        // and/or If-None-Match header later on
        cacheURL = s.url;

        // More options handling for requests with no content
        if ( !s.hasContent ) {

            // If data is available, append data to url
            if ( s.data ) {
                cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
                // #9682: remove data so that it's not used in an eventual retry
                delete s.data;
            }

            // Add anti-cache in url if needed
            if ( s.cache === false ) {
                s.url = rts.test( cacheURL ) ?

                    // If there is already a '_' parameter, set its value
                    cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

                    // Otherwise add one to the end
                    cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
            }
        }

        // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
        if ( s.ifModified ) {
            if ( jQuery.lastModified[ cacheURL ] ) {
                jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
            }
            if ( jQuery.etag[ cacheURL ] ) {
                jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
            }
        }

        // Set the correct header, if data is being sent
        if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
            jqXHR.setRequestHeader( "Content-Type", s.contentType );
        }

        // Set the Accepts header for the server, depending on the dataType
        jqXHR.setRequestHeader(
            "Accept",
            s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                s.accepts[ "*" ]
        );

        // Check for headers option
        for ( i in s.headers ) {
            jqXHR.setRequestHeader( i, s.headers[ i ] );
        }

        // Allow custom headers/mimetypes and early abort
        if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
            // Abort if not done already and return
            return jqXHR.abort();
        }

        // aborting is no longer a cancellation
        strAbort = "abort";

        // Install callbacks on deferreds
        for ( i in { success: 1, error: 1, complete: 1 } ) {
            jqXHR[ i ]( s[ i ] );
        }

        // Get transport
        transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

        // If no transport, we auto-abort
        if ( !transport ) {
            done( -1, "No Transport" );
        } else {
            jqXHR.readyState = 1;

            // Send global event
            if ( fireGlobals ) {
                globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
            }
            // Timeout
            if ( s.async && s.timeout > 0 ) {
                timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout );
            }

            try {
                state = 1;
                transport.send( requestHeaders, done );
            } catch ( e ) {
                // Propagate exception as error if not done
                if ( state < 2 ) {
                    done( -1, e );
                // Simply rethrow otherwise
                } else {
                    throw e;
                }
            }
        }

        // Callback for when everything is done
        function done( status, nativeStatusText, responses, headers ) {
            var isSuccess, success, error, response, modified,
                statusText = nativeStatusText;

            // Called once
            if ( state === 2 ) {
                return;
            }

            // State is "done" now
            state = 2;

            // Clear timeout if it exists
            if ( timeoutTimer ) {
                clearTimeout( timeoutTimer );
            }

            // Dereference transport for early garbage collection
            // (no matter how long the jqXHR object will be used)
            transport = undefined;

            // Cache response headers
            responseHeadersString = headers || "";

            // Set readyState
            jqXHR.readyState = status > 0 ? 4 : 0;

            // Determine if successful
            isSuccess = status >= 200 && status < 300 || status === 304;

            // Get response data
            if ( responses ) {
                response = ajaxHandleResponses( s, jqXHR, responses );
            }

            // Convert no matter what (that way responseXXX fields are always set)
            response = ajaxConvert( s, response, jqXHR, isSuccess );

            // If successful, handle type chaining
            if ( isSuccess ) {

                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                if ( s.ifModified ) {
                    modified = jqXHR.getResponseHeader("Last-Modified");
                    if ( modified ) {
                        jQuery.lastModified[ cacheURL ] = modified;
                    }
                    modified = jqXHR.getResponseHeader("etag");
                    if ( modified ) {
                        jQuery.etag[ cacheURL ] = modified;
                    }
                }

                // if no content
                if ( status === 204 || s.type === "HEAD" ) {
                    statusText = "nocontent";

                // if not modified
                } else if ( status === 304 ) {
                    statusText = "notmodified";

                // If we have data, let's convert it
                } else {
                    statusText = response.state;
                    success = response.data;
                    error = response.error;
                    isSuccess = !error;
                }
            } else {
                // We extract error from statusText
                // then normalize statusText and status for non-aborts
                error = statusText;
                if ( status || !statusText ) {
                    statusText = "error";
                    if ( status < 0 ) {
                        status = 0;
                    }
                }
            }

            // Set data for the fake xhr object
            jqXHR.status = status;
            jqXHR.statusText = ( nativeStatusText || statusText ) + "";

            // Success/Error
            if ( isSuccess ) {
                deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
            } else {
                deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
            }

            // Status-dependent callbacks
            jqXHR.statusCode( statusCode );
            statusCode = undefined;

            if ( fireGlobals ) {
                globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                    [ jqXHR, s, isSuccess ? success : error ] );
            }

            // Complete
            completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

            if ( fireGlobals ) {
                globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                // Handle the global AJAX counter
                if ( !( --jQuery.active ) ) {
                    jQuery.event.trigger("ajaxStop");
                }
            }
        }

        return jqXHR;
    },

    getJSON: function( url, data, callback ) {
        return jQuery.get( url, data, callback, "json" );
    },

    getScript: function( url, callback ) {
        return jQuery.get( url, undefined, callback, "script" );
    }
});

jQuery.each( [ "get", "post" ], function( i, method ) {
    jQuery[ method ] = function( url, data, callback, type ) {
        // shift arguments if data argument was omitted
        if ( jQuery.isFunction( data ) ) {
            type = type || callback;
            callback = data;
            data = undefined;
        }

        return jQuery.ajax({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
        });
    };
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
    var firstDataType, ct, finalDataType, type,
        contents = s.contents,
        dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while( dataTypes[ 0 ] === "*" ) {
        dataTypes.shift();
        if ( ct === undefined ) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
        }
    }

    // Check if we're dealing with a known content-type
    if ( ct ) {
        for ( type in contents ) {
            if ( contents[ type ] && contents[ type ].test( ct ) ) {
                dataTypes.unshift( type );
                break;
            }
        }
    }

    // Check to see if we have a response for the expected dataType
    if ( dataTypes[ 0 ] in responses ) {
        finalDataType = dataTypes[ 0 ];
    } else {
        // Try convertible dataTypes
        for ( type in responses ) {
            if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                finalDataType = type;
                break;
            }
            if ( !firstDataType ) {
                firstDataType = type;
            }
        }
        // Or just use first one
        finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if ( finalDataType ) {
        if ( finalDataType !== dataTypes[ 0 ] ) {
            dataTypes.unshift( finalDataType );
        }
        return responses[ finalDataType ];
    }
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
    var conv2, current, conv, tmp, prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
        dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if ( dataTypes[ 1 ] ) {
        for ( conv in s.converters ) {
            converters[ conv.toLowerCase() ] = s.converters[ conv ];
        }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while ( current ) {

        if ( s.responseFields[ current ] ) {
            jqXHR[ s.responseFields[ current ] ] = response;
        }

        // Apply the dataFilter if provided
        if ( !prev && isSuccess && s.dataFilter ) {
            response = s.dataFilter( response, s.dataType );
        }

        prev = current;
        current = dataTypes.shift();

        if ( current ) {

            // There's only work to do if current dataType is non-auto
            if ( current === "*" ) {

                current = prev;

            // Convert response if prev dataType is non-auto and differs from current
            } else if ( prev !== "*" && prev !== current ) {

                // Seek a direct converter
                conv = converters[ prev + " " + current ] || converters[ "* " + current ];

                // If none found, seek a pair
                if ( !conv ) {
                    for ( conv2 in converters ) {

                        // If conv2 outputs current
                        tmp = conv2.split( " " );
                        if ( tmp[ 1 ] === current ) {

                            // If prev can be converted to accepted input
                            conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                converters[ "* " + tmp[ 0 ] ];
                            if ( conv ) {
                                // Condense equivalence converters
                                if ( conv === true ) {
                                    conv = converters[ conv2 ];

                                // Otherwise, insert the intermediate dataType
                                } else if ( converters[ conv2 ] !== true ) {
                                    current = tmp[ 0 ];
                                    dataTypes.unshift( tmp[ 1 ] );
                                }
                                break;
                            }
                        }
                    }
                }

                // Apply converter (if not an equivalence)
                if ( conv !== true ) {

                    // Unless errors are allowed to bubble, catch and return them
                    if ( conv && s[ "throws" ] ) {
                        response = conv( response );
                    } else {
                        try {
                            response = conv( response );
                        } catch ( e ) {
                            return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                        }
                    }
                }
            }
        }
    }

    return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
    accepts: {
        script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
        script: /(?:java|ecma)script/
    },
    converters: {
        "text script": function( text ) {
            jQuery.globalEval( text );
            return text;
        }
    }
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
    if ( s.cache === undefined ) {
        s.cache = false;
    }
    if ( s.crossDomain ) {
        s.type = "GET";
        s.global = false;
    }
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

    // This transport only deals with cross domain requests
    if ( s.crossDomain ) {

        var script,
            head = document.head || jQuery("head")[0] || document.documentElement;

        return {

            send: function( _, callback ) {

                script = document.createElement("script");

                script.async = true;

                if ( s.scriptCharset ) {
                    script.charset = s.scriptCharset;
                }

                script.src = s.url;

                // Attach handlers for all browsers
                script.onload = script.onreadystatechange = function( _, isAbort ) {

                    if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

                        // Handle memory leak in IE
                        script.onload = script.onreadystatechange = null;

                        // Remove the script
                        if ( script.parentNode ) {
                            script.parentNode.removeChild( script );
                        }

                        // Dereference the script
                        script = null;

                        // Callback if not abort
                        if ( !isAbort ) {
                            callback( 200, "success" );
                        }
                    }
                };

                // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                // Use native DOM manipulation to avoid our domManip AJAX trickery
                head.insertBefore( script, head.firstChild );
            },

            abort: function() {
                if ( script ) {
                    script.onload( undefined, true );
                }
            }
        };
    }
});
var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function() {
        var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
        this[ callback ] = true;
        return callback;
    }
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

    var callbackName, overwritten, responseContainer,
        jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
            "url" :
            typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
        );

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

        // Get callback name, remembering preexisting value associated with it
        callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
            s.jsonpCallback() :
            s.jsonpCallback;

        // Insert callback into url or form data
        if ( jsonProp ) {
            s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
        } else if ( s.jsonp !== false ) {
            s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
        }

        // Use data converter to retrieve json after script execution
        s.converters["script json"] = function() {
            if ( !responseContainer ) {
                jQuery.error( callbackName + " was not called" );
            }
            return responseContainer[ 0 ];
        };

        // force json dataType
        s.dataTypes[ 0 ] = "json";

        // Install callback
        overwritten = window[ callbackName ];
        window[ callbackName ] = function() {
            responseContainer = arguments;
        };

        // Clean-up function (fires after converters)
        jqXHR.always(function() {
            // Restore preexisting value
            window[ callbackName ] = overwritten;

            // Save back as free
            if ( s[ callbackName ] ) {
                // make sure that re-using the options doesn't screw things around
                s.jsonpCallback = originalSettings.jsonpCallback;

                // save the callback name for future use
                oldCallbacks.push( callbackName );
            }

            // Call if it was a function and we have a response
            if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                overwritten( responseContainer[ 0 ] );
            }

            responseContainer = overwritten = undefined;
        });

        // Delegate to script
        return "script";
    }
});
var xhrCallbacks, xhrSupported,
    xhrId = 0,
    // #5280: Internet Explorer will keep connections alive if we don't abort on unload
    xhrOnUnloadAbort = window.ActiveXObject && function() {
        // Abort all pending requests
        var key;
        for ( key in xhrCallbacks ) {
            xhrCallbacks[ key ]( undefined, true );
        }
    };

// Functions to create xhrs
function createStandardXHR() {
    try {
        return new window.XMLHttpRequest();
    } catch( e ) {}
}

function createActiveXHR() {
    try {
        return new window.ActiveXObject("Microsoft.XMLHTTP");
    } catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
    /* Microsoft failed to properly
     * implement the XMLHttpRequest in IE7 (can't request local files),
     * so we use the ActiveXObject when it is available
     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
     * we need a fallback.
     */
    function() {
        return !this.isLocal && createStandardXHR() || createActiveXHR();
    } :
    // For all other browsers, use the standard XMLHttpRequest object
    createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

    jQuery.ajaxTransport(function( s ) {
        // Cross domain only allowed if supported through XMLHttpRequest
        if ( !s.crossDomain || jQuery.support.cors ) {

            var callback;

            return {
                send: function( headers, complete ) {

                    // Get a new xhr
                    var handle, i,
                        xhr = s.xhr();

                    // Open the socket
                    // Passing null username, generates a login popup on Opera (#2865)
                    if ( s.username ) {
                        xhr.open( s.type, s.url, s.async, s.username, s.password );
                    } else {
                        xhr.open( s.type, s.url, s.async );
                    }

                    // Apply custom fields if provided
                    if ( s.xhrFields ) {
                        for ( i in s.xhrFields ) {
                            xhr[ i ] = s.xhrFields[ i ];
                        }
                    }

                    // Override mime type if needed
                    if ( s.mimeType && xhr.overrideMimeType ) {
                        xhr.overrideMimeType( s.mimeType );
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if ( !s.crossDomain && !headers["X-Requested-With"] ) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }

                    // Need an extra try/catch for cross domain requests in Firefox 3
                    try {
                        for ( i in headers ) {
                            xhr.setRequestHeader( i, headers[ i ] );
                        }
                    } catch( err ) {}

                    // Do send the request
                    // This may raise an exception which is actually
                    // handled in jQuery.ajax (so no try/catch here)
                    xhr.send( ( s.hasContent && s.data ) || null );

                    // Listener
                    callback = function( _, isAbort ) {
                        var status, responseHeaders, statusText, responses;

                        // Firefox throws exceptions when accessing properties
                        // of an xhr when a network error occurred
                        // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                        try {

                            // Was never called and is aborted or complete
                            if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

                                // Only called once
                                callback = undefined;

                                // Do not keep as active anymore
                                if ( handle ) {
                                    xhr.onreadystatechange = jQuery.noop;
                                    if ( xhrOnUnloadAbort ) {
                                        delete xhrCallbacks[ handle ];
                                    }
                                }

                                // If it's an abort
                                if ( isAbort ) {
                                    // Abort it manually if needed
                                    if ( xhr.readyState !== 4 ) {
                                        xhr.abort();
                                    }
                                } else {
                                    responses = {};
                                    status = xhr.status;
                                    responseHeaders = xhr.getAllResponseHeaders();

                                    // When requesting binary data, IE6-9 will throw an exception
                                    // on any attempt to access responseText (#11426)
                                    if ( typeof xhr.responseText === "string" ) {
                                        responses.text = xhr.responseText;
                                    }

                                    // Firefox throws an exception when accessing
                                    // statusText for faulty cross-domain requests
                                    try {
                                        statusText = xhr.statusText;
                                    } catch( e ) {
                                        // We normalize with Webkit giving an empty statusText
                                        statusText = "";
                                    }

                                    // Filter status for non standard behaviors

                                    // If the request is local and we have data: assume a success
                                    // (success with no data won't get notified, that's the best we
                                    // can do given current implementations)
                                    if ( !status && s.isLocal && !s.crossDomain ) {
                                        status = responses.text ? 200 : 404;
                                    // IE - #1450: sometimes returns 1223 when it should be 204
                                    } else if ( status === 1223 ) {
                                        status = 204;
                                    }
                                }
                            }
                        } catch( firefoxAccessException ) {
                            if ( !isAbort ) {
                                complete( -1, firefoxAccessException );
                            }
                        }

                        // Call complete if needed
                        if ( responses ) {
                            complete( status, statusText, responses, responseHeaders );
                        }
                    };

                    if ( !s.async ) {
                        // if we're in sync mode we fire the callback
                        callback();
                    } else if ( xhr.readyState === 4 ) {
                        // (IE6 & IE7) if it's in cache and has been
                        // retrieved directly we need to fire the callback
                        setTimeout( callback );
                    } else {
                        handle = ++xhrId;
                        if ( xhrOnUnloadAbort ) {
                            // Create the active xhrs callbacks list if needed
                            // and attach the unload handler
                            if ( !xhrCallbacks ) {
                                xhrCallbacks = {};
                                jQuery( window ).unload( xhrOnUnloadAbort );
                            }
                            // Add to list of active xhrs callbacks
                            xhrCallbacks[ handle ] = callback;
                        }
                        xhr.onreadystatechange = callback;
                    }
                },

                abort: function() {
                    if ( callback ) {
                        callback( undefined, true );
                    }
                }
            };
        }
    });
}
var fxNow, timerId,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
    rrun = /queueHooks$/,
    animationPrefilters = [ defaultPrefilter ],
    tweeners = {
        "*": [function( prop, value ) {
            var tween = this.createTween( prop, value ),
                target = tween.cur(),
                parts = rfxnum.exec( value ),
                unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

                // Starting value computation is required for potential unit mismatches
                start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
                    rfxnum.exec( jQuery.css( tween.elem, prop ) ),
                scale = 1,
                maxIterations = 20;

            if ( start && start[ 3 ] !== unit ) {
                // Trust units reported by jQuery.css
                unit = unit || start[ 3 ];

                // Make sure we update the tween properties later on
                parts = parts || [];

                // Iteratively approximate from a nonzero starting point
                start = +target || 1;

                do {
                    // If previous iteration zeroed out, double until we get *something*
                    // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                    scale = scale || ".5";

                    // Adjust and apply
                    start = start / scale;
                    jQuery.style( tween.elem, prop, start + unit );

                // Update scale, tolerating zero or NaN from tween.cur()
                // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
                } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
            }

            // Update tween properties
            if ( parts ) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                // If a +=/-= token was provided, we're doing a relative animation
                tween.end = parts[ 1 ] ?
                    start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
                    +parts[ 2 ];
            }

            return tween;
        }]
    };

// Animations created synchronously will run synchronously
function createFxNow() {
    setTimeout(function() {
        fxNow = undefined;
    });
    return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
    var tween,
        collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
        index = 0,
        length = collection.length;
    for ( ; index < length; index++ ) {
        if ( (tween = collection[ index ].call( animation, prop, value )) ) {

            // we're done with this property
            return tween;
        }
    }
}

function Animation( elem, properties, options ) {
    var result,
        stopped,
        index = 0,
        length = animationPrefilters.length,
        deferred = jQuery.Deferred().always( function() {
            // don't match elem in the :animated selector
            delete tick.elem;
        }),
        tick = function() {
            if ( stopped ) {
                return false;
            }
            var currentTime = fxNow || createFxNow(),
                remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
                temp = remaining / animation.duration || 0,
                percent = 1 - temp,
                index = 0,
                length = animation.tweens.length;

            for ( ; index < length ; index++ ) {
                animation.tweens[ index ].run( percent );
            }

            deferred.notifyWith( elem, [ animation, percent, remaining ]);

            if ( percent < 1 && length ) {
                return remaining;
            } else {
                deferred.resolveWith( elem, [ animation ] );
                return false;
            }
        },
        animation = deferred.promise({
            elem: elem,
            props: jQuery.extend( {}, properties ),
            opts: jQuery.extend( true, { specialEasing: {} }, options ),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function( prop, end ) {
                var tween = jQuery.Tween( elem, animation.opts, prop, end,
                        animation.opts.specialEasing[ prop ] || animation.opts.easing );
                animation.tweens.push( tween );
                return tween;
            },
            stop: function( gotoEnd ) {
                var index = 0,
                    // if we are going to the end, we want to run all the tweens
                    // otherwise we skip this part
                    length = gotoEnd ? animation.tweens.length : 0;
                if ( stopped ) {
                    return this;
                }
                stopped = true;
                for ( ; index < length ; index++ ) {
                    animation.tweens[ index ].run( 1 );
                }

                // resolve when we played the last frame
                // otherwise, reject
                if ( gotoEnd ) {
                    deferred.resolveWith( elem, [ animation, gotoEnd ] );
                } else {
                    deferred.rejectWith( elem, [ animation, gotoEnd ] );
                }
                return this;
            }
        }),
        props = animation.props;

    propFilter( props, animation.opts.specialEasing );

    for ( ; index < length ; index++ ) {
        result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
        if ( result ) {
            return result;
        }
    }

    jQuery.map( props, createTween, animation );

    if ( jQuery.isFunction( animation.opts.start ) ) {
        animation.opts.start.call( elem, animation );
    }

    jQuery.fx.timer(
        jQuery.extend( tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        })
    );

    // attach callbacks from options
    return animation.progress( animation.opts.progress )
        .done( animation.opts.done, animation.opts.complete )
        .fail( animation.opts.fail )
        .always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for ( index in props ) {
        name = jQuery.camelCase( index );
        easing = specialEasing[ name ];
        value = props[ index ];
        if ( jQuery.isArray( value ) ) {
            easing = value[ 1 ];
            value = props[ index ] = value[ 0 ];
        }

        if ( index !== name ) {
            props[ name ] = value;
            delete props[ index ];
        }

        hooks = jQuery.cssHooks[ name ];
        if ( hooks && "expand" in hooks ) {
            value = hooks.expand( value );
            delete props[ name ];

            // not quite $.extend, this wont overwrite keys already present.
            // also - reusing 'index' from above because we have the correct "name"
            for ( index in value ) {
                if ( !( index in props ) ) {
                    props[ index ] = value[ index ];
                    specialEasing[ index ] = easing;
                }
            }
        } else {
            specialEasing[ name ] = easing;
        }
    }
}

jQuery.Animation = jQuery.extend( Animation, {

    tweener: function( props, callback ) {
        if ( jQuery.isFunction( props ) ) {
            callback = props;
            props = [ "*" ];
        } else {
            props = props.split(" ");
        }

        var prop,
            index = 0,
            length = props.length;

        for ( ; index < length ; index++ ) {
            prop = props[ index ];
            tweeners[ prop ] = tweeners[ prop ] || [];
            tweeners[ prop ].unshift( callback );
        }
    },

    prefilter: function( callback, prepend ) {
        if ( prepend ) {
            animationPrefilters.unshift( callback );
        } else {
            animationPrefilters.push( callback );
        }
    }
});

function defaultPrefilter( elem, props, opts ) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHidden( elem ),
        dataShow = jQuery._data( elem, "fxshow" );

    // handle queue: false promises
    if ( !opts.queue ) {
        hooks = jQuery._queueHooks( elem, "fx" );
        if ( hooks.unqueued == null ) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
                if ( !hooks.unqueued ) {
                    oldfire();
                }
            };
        }
        hooks.unqueued++;

        anim.always(function() {
            // doing this makes sure that the complete handler will be called
            // before this completes
            anim.always(function() {
                hooks.unqueued--;
                if ( !jQuery.queue( elem, "fx" ).length ) {
                    hooks.empty.fire();
                }
            });
        });
    }

    // height/width overflow pass
    if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
        // Make sure that nothing sneaks out
        // Record all 3 overflow attributes because IE does not
        // change the overflow attribute when overflowX and
        // overflowY are set to the same value
        opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

        // Set display property to inline-block for height/width
        // animations on inline elements that are having width/height animated
        if ( jQuery.css( elem, "display" ) === "inline" &&
                jQuery.css( elem, "float" ) === "none" ) {

            // inline-level elements accept inline-block;
            // block-level elements need to be inline with layout
            if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
                style.display = "inline-block";

            } else {
                style.zoom = 1;
            }
        }
    }

    if ( opts.overflow ) {
        style.overflow = "hidden";
        if ( !jQuery.support.shrinkWrapBlocks ) {
            anim.always(function() {
                style.overflow = opts.overflow[ 0 ];
                style.overflowX = opts.overflow[ 1 ];
                style.overflowY = opts.overflow[ 2 ];
            });
        }
    }


    // show/hide pass
    for ( prop in props ) {
        value = props[ prop ];
        if ( rfxtypes.exec( value ) ) {
            delete props[ prop ];
            toggle = toggle || value === "toggle";
            if ( value === ( hidden ? "hide" : "show" ) ) {
                continue;
            }
            orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
        }
    }

    if ( !jQuery.isEmptyObject( orig ) ) {
        if ( dataShow ) {
            if ( "hidden" in dataShow ) {
                hidden = dataShow.hidden;
            }
        } else {
            dataShow = jQuery._data( elem, "fxshow", {} );
        }

        // store state if its toggle - enables .stop().toggle() to "reverse"
        if ( toggle ) {
            dataShow.hidden = !hidden;
        }
        if ( hidden ) {
            jQuery( elem ).show();
        } else {
            anim.done(function() {
                jQuery( elem ).hide();
            });
        }
        anim.done(function() {
            var prop;
            jQuery._removeData( elem, "fxshow" );
            for ( prop in orig ) {
                jQuery.style( elem, prop, orig[ prop ] );
            }
        });
        for ( prop in orig ) {
            tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

            if ( !( prop in dataShow ) ) {
                dataShow[ prop ] = tween.start;
                if ( hidden ) {
                    tween.end = tween.start;
                    tween.start = prop === "width" || prop === "height" ? 1 : 0;
                }
            }
        }
    }
}

function Tween( elem, options, prop, end, easing ) {
    return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
    constructor: Tween,
    init: function( elem, options, prop, end, easing, unit ) {
        this.elem = elem;
        this.prop = prop;
        this.easing = easing || "swing";
        this.options = options;
        this.start = this.now = this.cur();
        this.end = end;
        this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    },
    cur: function() {
        var hooks = Tween.propHooks[ this.prop ];

        return hooks && hooks.get ?
            hooks.get( this ) :
            Tween.propHooks._default.get( this );
    },
    run: function( percent ) {
        var eased,
            hooks = Tween.propHooks[ this.prop ];

        if ( this.options.duration ) {
            this.pos = eased = jQuery.easing[ this.easing ](
                percent, this.options.duration * percent, 0, 1, this.options.duration
            );
        } else {
            this.pos = eased = percent;
        }
        this.now = ( this.end - this.start ) * eased + this.start;

        if ( this.options.step ) {
            this.options.step.call( this.elem, this.now, this );
        }

        if ( hooks && hooks.set ) {
            hooks.set( this );
        } else {
            Tween.propHooks._default.set( this );
        }
        return this;
    }
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
    _default: {
        get: function( tween ) {
            var result;

            if ( tween.elem[ tween.prop ] != null &&
                (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                return tween.elem[ tween.prop ];
            }

            // passing an empty string as a 3rd parameter to .css will automatically
            // attempt a parseFloat and fallback to a string if the parse fails
            // so, simple values such as "10px" are parsed to Float.
            // complex values such as "rotate(1rad)" are returned as is.
            result = jQuery.css( tween.elem, tween.prop, "" );
            // Empty strings, null, undefined and "auto" are converted to 0.
            return !result || result === "auto" ? 0 : result;
        },
        set: function( tween ) {
            // use step hook for back compat - use cssHook if its there - use .style if its
            // available and use plain properties where available
            if ( jQuery.fx.step[ tween.prop ] ) {
                jQuery.fx.step[ tween.prop ]( tween );
            } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
            } else {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    }
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function( tween ) {
        if ( tween.elem.nodeType && tween.elem.parentNode ) {
            tween.elem[ tween.prop ] = tween.now;
        }
    }
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
    var cssFn = jQuery.fn[ name ];
    jQuery.fn[ name ] = function( speed, easing, callback ) {
        return speed == null || typeof speed === "boolean" ?
            cssFn.apply( this, arguments ) :
            this.animate( genFx( name, true ), speed, easing, callback );
    };
});

jQuery.fn.extend({
    fadeTo: function( speed, to, easing, callback ) {

        // show any hidden elements after setting opacity to 0
        return this.filter( isHidden ).css( "opacity", 0 ).show()

            // animate to the value specified
            .end().animate({ opacity: to }, speed, easing, callback );
    },
    animate: function( prop, speed, easing, callback ) {
        var empty = jQuery.isEmptyObject( prop ),
            optall = jQuery.speed( speed, easing, callback ),
            doAnimation = function() {
                // Operate on a copy of prop so per-property easing won't be lost
                var anim = Animation( this, jQuery.extend( {}, prop ), optall );

                // Empty animations, or finishing resolves immediately
                if ( empty || jQuery._data( this, "finish" ) ) {
                    anim.stop( true );
                }
            };
            doAnimation.finish = doAnimation;

        return empty || optall.queue === false ?
            this.each( doAnimation ) :
            this.queue( optall.queue, doAnimation );
    },
    stop: function( type, clearQueue, gotoEnd ) {
        var stopQueue = function( hooks ) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop( gotoEnd );
        };

        if ( typeof type !== "string" ) {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
        }
        if ( clearQueue && type !== false ) {
            this.queue( type || "fx", [] );
        }

        return this.each(function() {
            var dequeue = true,
                index = type != null && type + "queueHooks",
                timers = jQuery.timers,
                data = jQuery._data( this );

            if ( index ) {
                if ( data[ index ] && data[ index ].stop ) {
                    stopQueue( data[ index ] );
                }
            } else {
                for ( index in data ) {
                    if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                        stopQueue( data[ index ] );
                    }
                }
            }

            for ( index = timers.length; index--; ) {
                if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                    timers[ index ].anim.stop( gotoEnd );
                    dequeue = false;
                    timers.splice( index, 1 );
                }
            }

            // start the next in the queue if the last step wasn't forced
            // timers currently will call their complete callbacks, which will dequeue
            // but only if they were gotoEnd
            if ( dequeue || !gotoEnd ) {
                jQuery.dequeue( this, type );
            }
        });
    },
    finish: function( type ) {
        if ( type !== false ) {
            type = type || "fx";
        }
        return this.each(function() {
            var index,
                data = jQuery._data( this ),
                queue = data[ type + "queue" ],
                hooks = data[ type + "queueHooks" ],
                timers = jQuery.timers,
                length = queue ? queue.length : 0;

            // enable finishing flag on private data
            data.finish = true;

            // empty the queue first
            jQuery.queue( this, type, [] );

            if ( hooks && hooks.stop ) {
                hooks.stop.call( this, true );
            }

            // look for any active animations, and finish them
            for ( index = timers.length; index--; ) {
                if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                    timers[ index ].anim.stop( true );
                    timers.splice( index, 1 );
                }
            }

            // look for any animations in the old queue and finish them
            for ( index = 0; index < length; index++ ) {
                if ( queue[ index ] && queue[ index ].finish ) {
                    queue[ index ].finish.call( this );
                }
            }

            // turn off finishing flag
            delete data.finish;
        });
    }
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
    var which,
        attrs = { height: type },
        i = 0;

    // if we include width, step value is 1 to do all cssExpand values,
    // if we don't include width, step value is 2 to skip over Left and Right
    includeWidth = includeWidth? 1 : 0;
    for( ; i < 4 ; i += 2 - includeWidth ) {
        which = cssExpand[ i ];
        attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
    }

    if ( includeWidth ) {
        attrs.opacity = attrs.width = type;
    }

    return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
    jQuery.fn[ name ] = function( speed, easing, callback ) {
        return this.animate( props, speed, easing, callback );
    };
});

jQuery.speed = function( speed, easing, fn ) {
    var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
        complete: fn || !fn && easing ||
            jQuery.isFunction( speed ) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
    };

    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
        opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

    // normalize opt.queue - true/undefined/null -> "fx"
    if ( opt.queue == null || opt.queue === true ) {
        opt.queue = "fx";
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function() {
        if ( jQuery.isFunction( opt.old ) ) {
            opt.old.call( this );
        }

        if ( opt.queue ) {
            jQuery.dequeue( this, opt.queue );
        }
    };

    return opt;
};

jQuery.easing = {
    linear: function( p ) {
        return p;
    },
    swing: function( p ) {
        return 0.5 - Math.cos( p*Math.PI ) / 2;
    }
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
    var timer,
        timers = jQuery.timers,
        i = 0;

    fxNow = jQuery.now();

    for ( ; i < timers.length; i++ ) {
        timer = timers[ i ];
        // Checks the timer has not already been removed
        if ( !timer() && timers[ i ] === timer ) {
            timers.splice( i--, 1 );
        }
    }

    if ( !timers.length ) {
        jQuery.fx.stop();
    }
    fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
    if ( timer() && jQuery.timers.push( timer ) ) {
        jQuery.fx.start();
    }
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
    if ( !timerId ) {
        timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
    }
};

jQuery.fx.stop = function() {
    clearInterval( timerId );
    timerId = null;
};

jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
    jQuery.expr.filters.animated = function( elem ) {
        return jQuery.grep(jQuery.timers, function( fn ) {
            return elem === fn.elem;
        }).length;
    };
}
jQuery.fn.offset = function( options ) {
    if ( arguments.length ) {
        return options === undefined ?
            this :
            this.each(function( i ) {
                jQuery.offset.setOffset( this, options, i );
            });
    }

    var docElem, win,
        box = { top: 0, left: 0 },
        elem = this[ 0 ],
        doc = elem && elem.ownerDocument;

    if ( !doc ) {
        return;
    }

    docElem = doc.documentElement;

    // Make sure it's not a disconnected DOM node
    if ( !jQuery.contains( docElem, elem ) ) {
        return box;
    }

    // If we don't have gBCR, just use 0,0 rather than error
    // BlackBerry 5, iOS 3 (original iPhone)
    if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
        box = elem.getBoundingClientRect();
    }
    win = getWindow( doc );
    return {
        top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
        left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
    };
};

jQuery.offset = {

    setOffset: function( elem, options, i ) {
        var position = jQuery.css( elem, "position" );

        // set position first, in-case top/left are set even on static elem
        if ( position === "static" ) {
            elem.style.position = "relative";
        }

        var curElem = jQuery( elem ),
            curOffset = curElem.offset(),
            curCSSTop = jQuery.css( elem, "top" ),
            curCSSLeft = jQuery.css( elem, "left" ),
            calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
            props = {}, curPosition = {}, curTop, curLeft;

        // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
        if ( calculatePosition ) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
        } else {
            curTop = parseFloat( curCSSTop ) || 0;
            curLeft = parseFloat( curCSSLeft ) || 0;
        }

        if ( jQuery.isFunction( options ) ) {
            options = options.call( elem, i, curOffset );
        }

        if ( options.top != null ) {
            props.top = ( options.top - curOffset.top ) + curTop;
        }
        if ( options.left != null ) {
            props.left = ( options.left - curOffset.left ) + curLeft;
        }

        if ( "using" in options ) {
            options.using.call( elem, props );
        } else {
            curElem.css( props );
        }
    }
};


jQuery.fn.extend({

    position: function() {
        if ( !this[ 0 ] ) {
            return;
        }

        var offsetParent, offset,
            parentOffset = { top: 0, left: 0 },
            elem = this[ 0 ];

        // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
        if ( jQuery.css( elem, "position" ) === "fixed" ) {
            // we assume that getBoundingClientRect is available when computed position is fixed
            offset = elem.getBoundingClientRect();
        } else {
            // Get *real* offsetParent
            offsetParent = this.offsetParent();

            // Get correct offsets
            offset = this.offset();
            if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
                parentOffset = offsetParent.offset();
            }

            // Add offsetParent borders
            parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
            parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
        }

        // Subtract parent offsets and element margins
        // note: when an element has margin: auto the offsetLeft and marginLeft
        // are the same in Safari causing offset.left to incorrectly be 0
        return {
            top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
            left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
        };
    },

    offsetParent: function() {
        return this.map(function() {
            var offsetParent = this.offsetParent || docElem;
            while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
                offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || docElem;
        });
    }
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
    var top = /Y/.test( prop );

    jQuery.fn[ method ] = function( val ) {
        return jQuery.access( this, function( elem, method, val ) {
            var win = getWindow( elem );

            if ( val === undefined ) {
                return win ? (prop in win) ? win[ prop ] :
                    win.document.documentElement[ method ] :
                    elem[ method ];
            }

            if ( win ) {
                win.scrollTo(
                    !top ? val : jQuery( win ).scrollLeft(),
                    top ? val : jQuery( win ).scrollTop()
                );

            } else {
                elem[ method ] = val;
            }
        }, method, val, arguments.length, null );
    };
});

function getWindow( elem ) {
    return jQuery.isWindow( elem ) ?
        elem :
        elem.nodeType === 9 ?
            elem.defaultView || elem.parentWindow :
            false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
    jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
        // margin is only for outerHeight, outerWidth
        jQuery.fn[ funcName ] = function( margin, value ) {
            var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

            return jQuery.access( this, function( elem, type, value ) {
                var doc;

                if ( jQuery.isWindow( elem ) ) {
                    // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                    // isn't a whole lot we can do. See pull request at this URL for discussion:
                    // https://github.com/jquery/jquery/pull/764
                    return elem.document.documentElement[ "client" + name ];
                }

                // Get document width or height
                if ( elem.nodeType === 9 ) {
                    doc = elem.documentElement;

                    // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                    // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                    return Math.max(
                        elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                        elem.body[ "offset" + name ], doc[ "offset" + name ],
                        doc[ "client" + name ]
                    );
                }

                return value === undefined ?
                    // Get width or height on the element, requesting but not forcing parseFloat
                    jQuery.css( elem, type, extra ) :

                    // Set width or height on the element
                    jQuery.style( elem, type, value, extra );
            }, type, chainable ? margin : undefined, chainable, null );
        };
    });
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
    return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
    // Expose jQuery as module.exports in loaders that implement the Node
    // module pattern (including browserify). Do not create the global, since
    // the user will be storing it themselves locally, and globals are frowned
    // upon in the Node module world.
    module.exports = jQuery;
} else {
    // Otherwise expose jQuery to the global object as usual
    window.jQuery = window.$ = jQuery;

    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    if ( typeof define === "function" && define.amd ) {
        define( "jquery", [], function () { return jQuery; } );
    }
}

})( window );
/*
    json2.js
    2013-05-26

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

//! moment.js
//! version : 2.2.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a){function b(a,b){return function(c){return i(a.call(this,c),b)}}function c(a,b){return function(c){return this.lang().ordinal(a.call(this,c),b)}}function d(){}function e(a){g(this,a)}function f(a){var b=a.years||a.year||a.y||0,c=a.months||a.month||a.M||0,d=a.weeks||a.week||a.w||0,e=a.days||a.day||a.d||0,f=a.hours||a.hour||a.h||0,g=a.minutes||a.minute||a.m||0,h=a.seconds||a.second||a.s||0,i=a.milliseconds||a.millisecond||a.ms||0;this._input=a,this._milliseconds=+i+1e3*h+6e4*g+36e5*f,this._days=+e+7*d,this._months=+c+12*b,this._data={},this._bubble()}function g(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a}function h(a){return 0>a?Math.ceil(a):Math.floor(a)}function i(a,b){for(var c=a+"";c.length<b;)c="0"+c;return c}function j(a,b,c,d){var e,f,g=b._milliseconds,h=b._days,i=b._months;g&&a._d.setTime(+a._d+g*c),(h||i)&&(e=a.minute(),f=a.hour()),h&&a.date(a.date()+h*c),i&&a.month(a.month()+i*c),g&&!d&&L.updateOffset(a),(h||i)&&(a.minute(e),a.hour(f))}function k(a){return"[object Array]"===Object.prototype.toString.call(a)}function l(a,b){var c,d=Math.min(a.length,b.length),e=Math.abs(a.length-b.length),f=0;for(c=0;d>c;c++)~~a[c]!==~~b[c]&&f++;return f+e}function m(a){return a?ib[a]||a.toLowerCase().replace(/(.)s$/,"$1"):a}function n(a,b){return b.abbr=a,P[a]||(P[a]=new d),P[a].set(b),P[a]}function o(a){delete P[a]}function p(a){if(!a)return L.fn._lang;if(!P[a]&&Q)try{require("./lang/"+a)}catch(b){return L.fn._lang}return P[a]||L.fn._lang}function q(a){return a.match(/\[.*\]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function r(a){var b,c,d=a.match(T);for(b=0,c=d.length;c>b;b++)d[b]=mb[d[b]]?mb[d[b]]:q(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function s(a,b){return b=t(b,a.lang()),jb[b]||(jb[b]=r(b)),jb[b](a)}function t(a,b){function c(a){return b.longDateFormat(a)||a}for(var d=5;d--&&(U.lastIndex=0,U.test(a));)a=a.replace(U,c);return a}function u(a,b){switch(a){case"DDDD":return X;case"YYYY":return Y;case"YYYYY":return Z;case"S":case"SS":case"SSS":case"DDD":return W;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return $;case"a":case"A":return p(b._l)._meridiemParse;case"X":return bb;case"Z":case"ZZ":return _;case"T":return ab;case"MM":case"DD":case"YY":case"HH":case"hh":case"mm":case"ss":case"M":case"D":case"d":case"H":case"h":case"m":case"s":return V;default:return new RegExp(a.replace("\\",""))}}function v(a){var b=(_.exec(a)||[])[0],c=(b+"").match(fb)||["-",0,0],d=+(60*c[1])+~~c[2];return"+"===c[0]?-d:d}function w(a,b,c){var d,e=c._a;switch(a){case"M":case"MM":null!=b&&(e[1]=~~b-1);break;case"MMM":case"MMMM":d=p(c._l).monthsParse(b),null!=d?e[1]=d:c._isValid=!1;break;case"D":case"DD":null!=b&&(e[2]=~~b);break;case"DDD":case"DDDD":null!=b&&(e[1]=0,e[2]=~~b);break;case"YY":e[0]=~~b+(~~b>68?1900:2e3);break;case"YYYY":case"YYYYY":e[0]=~~b;break;case"a":case"A":c._isPm=p(c._l).isPM(b);break;case"H":case"HH":case"h":case"hh":e[3]=~~b;break;case"m":case"mm":e[4]=~~b;break;case"s":case"ss":e[5]=~~b;break;case"S":case"SS":case"SSS":e[6]=~~(1e3*("0."+b));break;case"X":c._d=new Date(1e3*parseFloat(b));break;case"Z":case"ZZ":c._useUTC=!0,c._tzm=v(b)}null==b&&(c._isValid=!1)}function x(a){var b,c,d,e=[];if(!a._d){for(d=z(a),b=0;3>b&&null==a._a[b];++b)a._a[b]=e[b]=d[b];for(;7>b;b++)a._a[b]=e[b]=null==a._a[b]?2===b?1:0:a._a[b];e[3]+=~~((a._tzm||0)/60),e[4]+=~~((a._tzm||0)%60),c=new Date(0),a._useUTC?(c.setUTCFullYear(e[0],e[1],e[2]),c.setUTCHours(e[3],e[4],e[5],e[6])):(c.setFullYear(e[0],e[1],e[2]),c.setHours(e[3],e[4],e[5],e[6])),a._d=c}}function y(a){var b=a._i;a._d||(a._a=[b.years||b.year||b.y,b.months||b.month||b.M,b.days||b.day||b.d,b.hours||b.hour||b.h,b.minutes||b.minute||b.m,b.seconds||b.second||b.s,b.milliseconds||b.millisecond||b.ms],x(a))}function z(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function A(a){var b,c,d,e=p(a._l),f=""+a._i;for(d=t(a._f,e).match(T),a._a=[],b=0;b<d.length;b++)c=(u(d[b],a).exec(f)||[])[0],c&&(f=f.slice(f.indexOf(c)+c.length)),mb[d[b]]&&w(d[b],c,a);f&&(a._il=f),a._isPm&&a._a[3]<12&&(a._a[3]+=12),a._isPm===!1&&12===a._a[3]&&(a._a[3]=0),x(a)}function B(a){var b,c,d,f,h,i=99;for(f=0;f<a._f.length;f++)b=g({},a),b._f=a._f[f],A(b),c=new e(b),h=l(b._a,c.toArray()),c._il&&(h+=c._il.length),i>h&&(i=h,d=c);g(a,d)}function C(a){var b,c=a._i,d=cb.exec(c);if(d){for(a._f="YYYY-MM-DD"+(d[2]||" "),b=0;4>b;b++)if(eb[b][1].exec(c)){a._f+=eb[b][0];break}_.exec(c)&&(a._f+=" Z"),A(a)}else a._d=new Date(c)}function D(b){var c=b._i,d=R.exec(c);c===a?b._d=new Date:d?b._d=new Date(+d[1]):"string"==typeof c?C(b):k(c)?(b._a=c.slice(0),x(b)):c instanceof Date?b._d=new Date(+c):"object"==typeof c?y(b):b._d=new Date(c)}function E(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function F(a,b,c){var d=O(Math.abs(a)/1e3),e=O(d/60),f=O(e/60),g=O(f/24),h=O(g/365),i=45>d&&["s",d]||1===e&&["m"]||45>e&&["mm",e]||1===f&&["h"]||22>f&&["hh",f]||1===g&&["d"]||25>=g&&["dd",g]||45>=g&&["M"]||345>g&&["MM",O(g/30)]||1===h&&["y"]||["yy",h];return i[2]=b,i[3]=a>0,i[4]=c,E.apply({},i)}function G(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=L(a).add("d",f),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function H(a){var b=a._i,c=a._f;return null===b||""===b?null:("string"==typeof b&&(a._i=b=p().preparse(b)),L.isMoment(b)?(a=g({},b),a._d=new Date(+b._d)):c?k(c)?B(a):A(a):D(a),new e(a))}function I(a,b){L.fn[a]=L.fn[a+"s"]=function(a){var c=this._isUTC?"UTC":"";return null!=a?(this._d["set"+c+b](a),L.updateOffset(this),this):this._d["get"+c+b]()}}function J(a){L.duration.fn[a]=function(){return this._data[a]}}function K(a,b){L.duration.fn["as"+a]=function(){return+this/b}}for(var L,M,N="2.2.1",O=Math.round,P={},Q="undefined"!=typeof module&&module.exports,R=/^\/?Date\((\-?\d+)/i,S=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)\:(\d+)\.?(\d{3})?/,T=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,U=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,V=/\d\d?/,W=/\d{1,3}/,X=/\d{3}/,Y=/\d{1,4}/,Z=/[+\-]?\d{1,6}/,$=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,_=/Z|[\+\-]\d\d:?\d\d/i,ab=/T/i,bb=/[\+\-]?\d+(\.\d{1,3})?/,cb=/^\s*\d{4}-\d\d-\d\d((T| )(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,db="YYYY-MM-DDTHH:mm:ssZ",eb=[["HH:mm:ss.S",/(T| )\d\d:\d\d:\d\d\.\d{1,3}/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],fb=/([\+\-]|\d\d)/gi,gb="Date|Hours|Minutes|Seconds|Milliseconds".split("|"),hb={Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6},ib={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",w:"week",W:"isoweek",M:"month",y:"year"},jb={},kb="DDD w W M D d".split(" "),lb="M D H h m s w W".split(" "),mb={M:function(){return this.month()+1},MMM:function(a){return this.lang().monthsShort(this,a)},MMMM:function(a){return this.lang().months(this,a)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(a){return this.lang().weekdaysMin(this,a)},ddd:function(a){return this.lang().weekdaysShort(this,a)},dddd:function(a){return this.lang().weekdays(this,a)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return i(this.year()%100,2)},YYYY:function(){return i(this.year(),4)},YYYYY:function(){return i(this.year(),5)},gg:function(){return i(this.weekYear()%100,2)},gggg:function(){return this.weekYear()},ggggg:function(){return i(this.weekYear(),5)},GG:function(){return i(this.isoWeekYear()%100,2)},GGGG:function(){return this.isoWeekYear()},GGGGG:function(){return i(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.lang().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.lang().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return~~(this.milliseconds()/100)},SS:function(){return i(~~(this.milliseconds()/10),2)},SSS:function(){return i(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+i(~~(a/60),2)+":"+i(~~a%60,2)},ZZ:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+i(~~(10*a/6),4)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()}};kb.length;)M=kb.pop(),mb[M+"o"]=c(mb[M],M);for(;lb.length;)M=lb.pop(),mb[M+M]=b(mb[M],2);for(mb.DDDD=b(mb.DDD,3),g(d.prototype,{set:function(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(a){return this._months[a.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(a){return this._monthsShort[a.month()]},monthsParse:function(a){var b,c,d;for(this._monthsParse||(this._monthsParse=[]),b=0;12>b;b++)if(this._monthsParse[b]||(c=L.utc([2e3,b]),d="^"+this.months(c,"")+"|^"+this.monthsShort(c,""),this._monthsParse[b]=new RegExp(d.replace(".",""),"i")),this._monthsParse[b].test(a))return b},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(a){return this._weekdays[a.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(a){return this._weekdaysShort[a.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(a){return this._weekdaysMin[a.day()]},weekdaysParse:function(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=L([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},longDateFormat:function(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b},isPM:function(a){return"p"===(a+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(a,b){var c=this._calendar[a];return"function"==typeof c?c.apply(b):c},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)},pastFuture:function(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)},ordinal:function(a){return this._ordinal.replace("%d",a)},_ordinal:"%d",preparse:function(a){return a},postformat:function(a){return a},week:function(a){return G(a,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6}}),L=function(a,b,c){return H({_i:a,_f:b,_l:c,_isUTC:!1})},L.utc=function(a,b,c){return H({_useUTC:!0,_isUTC:!0,_l:c,_i:a,_f:b}).utc()},L.unix=function(a){return L(1e3*a)},L.duration=function(a,b){var c,d,e=L.isDuration(a),g="number"==typeof a,h=e?a._input:g?{}:a,i=S.exec(a);return g?b?h[b]=a:h.milliseconds=a:i&&(c="-"===i[1]?-1:1,h={y:0,d:~~i[2]*c,h:~~i[3]*c,m:~~i[4]*c,s:~~i[5]*c,ms:~~i[6]*c}),d=new f(h),e&&a.hasOwnProperty("_lang")&&(d._lang=a._lang),d},L.version=N,L.defaultFormat=db,L.updateOffset=function(){},L.lang=function(a,b){return a?(a=a.toLowerCase(),a=a.replace("_","-"),b?n(a,b):null===b?(o(a),a="en"):P[a]||p(a),L.duration.fn._lang=L.fn._lang=p(a),void 0):L.fn._lang._abbr},L.langData=function(a){return a&&a._lang&&a._lang._abbr&&(a=a._lang._abbr),p(a)},L.isMoment=function(a){return a instanceof e},L.isDuration=function(a){return a instanceof f},g(L.fn=e.prototype,{clone:function(){return L(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){return s(L(this).utc(),"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds()]},isValid:function(){return null==this._isValid&&(this._isValid=this._a?!l(this._a,(this._isUTC?L.utc(this._a):L(this._a)).toArray()):!isNaN(this._d.getTime())),!!this._isValid},invalidAt:function(){var a,b=this._a,c=(this._isUTC?L.utc(this._a):L(this._a)).toArray();for(a=6;a>=0&&b[a]===c[a];--a);return a},utc:function(){return this.zone(0)},local:function(){return this.zone(0),this._isUTC=!1,this},format:function(a){var b=s(this,a||L.defaultFormat);return this.lang().postformat(b)},add:function(a,b){var c;return c="string"==typeof a?L.duration(+b,a):L.duration(a,b),j(this,c,1),this},subtract:function(a,b){var c;return c="string"==typeof a?L.duration(+b,a):L.duration(a,b),j(this,c,-1),this},diff:function(a,b,c){var d,e,f=this._isUTC?L(a).zone(this._offset||0):L(a).local(),g=6e4*(this.zone()-f.zone());return b=m(b),"year"===b||"month"===b?(d=432e5*(this.daysInMonth()+f.daysInMonth()),e=12*(this.year()-f.year())+(this.month()-f.month()),e+=(this-L(this).startOf("month")-(f-L(f).startOf("month")))/d,e-=6e4*(this.zone()-L(this).startOf("month").zone()-(f.zone()-L(f).startOf("month").zone()))/d,"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:h(e)},from:function(a,b){return L.duration(this.diff(a)).lang(this.lang()._abbr).humanize(!b)},fromNow:function(a){return this.from(L(),a)},calendar:function(){var a=this.diff(L().zone(this.zone()).startOf("day"),"days",!0),b=-6>a?"sameElse":-1>a?"lastWeek":0>a?"lastDay":1>a?"sameDay":2>a?"nextDay":7>a?"nextWeek":"sameElse";return this.format(this.lang().calendar(b,this))},isLeapYear:function(){var a=this.year();return 0===a%4&&0!==a%100||0===a%400},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?"string"==typeof a&&(a=this.lang().weekdaysParse(a),"number"!=typeof a)?this:this.add({d:a-b}):b},month:function(a){var b,c=this._isUTC?"UTC":"";return null!=a?"string"==typeof a&&(a=this.lang().monthsParse(a),"number"!=typeof a)?this:(b=this.date(),this.date(1),this._d["set"+c+"Month"](a),this.date(Math.min(b,this.daysInMonth())),L.updateOffset(this),this):this._d["get"+c+"Month"]()},startOf:function(a){switch(a=m(a)){case"year":this.month(0);case"month":this.date(1);case"week":case"isoweek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a?this.weekday(0):"isoweek"===a&&this.isoWeekday(1),this},endOf:function(a){return a=m(a),this.startOf(a).add("isoweek"===a?"week":a,1).subtract("ms",1)},isAfter:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)>+L(a).startOf(b)},isBefore:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)<+L(a).startOf(b)},isSame:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)===+L(a).startOf(b)},min:function(a){return a=L.apply(null,arguments),this>a?this:a},max:function(a){return a=L.apply(null,arguments),a>this?this:a},zone:function(a){var b=this._offset||0;return null==a?this._isUTC?b:this._d.getTimezoneOffset():("string"==typeof a&&(a=v(a)),Math.abs(a)<16&&(a=60*a),this._offset=a,this._isUTC=!0,b!==a&&j(this,L.duration(b-a,"m"),1,!0),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},hasAlignedHourOffset:function(a){return a=a?L(a).zone():0,0===(this.zone()-a)%60},daysInMonth:function(){return L.utc([this.year(),this.month()+1,0]).date()},dayOfYear:function(a){var b=O((L(this).startOf("day")-L(this).startOf("year"))/864e5)+1;return null==a?b:this.add("d",a-b)},weekYear:function(a){var b=G(this,this.lang()._week.dow,this.lang()._week.doy).year;return null==a?b:this.add("y",a-b)},isoWeekYear:function(a){var b=G(this,1,4).year;return null==a?b:this.add("y",a-b)},week:function(a){var b=this.lang().week(this);return null==a?b:this.add("d",7*(a-b))},isoWeek:function(a){var b=G(this,1,4).week;return null==a?b:this.add("d",7*(a-b))},weekday:function(a){var b=(this._d.getDay()+7-this.lang()._week.dow)%7;return null==a?b:this.add("d",a-b)},isoWeekday:function(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)},get:function(a){return a=m(a),this[a.toLowerCase()]()},set:function(a,b){a=m(a),this[a.toLowerCase()](b)},lang:function(b){return b===a?this._lang:(this._lang=p(b),this)}}),M=0;M<gb.length;M++)I(gb[M].toLowerCase().replace(/s$/,""),gb[M]);I("year","FullYear"),L.fn.days=L.fn.day,L.fn.months=L.fn.month,L.fn.weeks=L.fn.week,L.fn.isoWeeks=L.fn.isoWeek,L.fn.toJSON=L.fn.toISOString,g(L.duration.fn=f.prototype,{_bubble:function(){var a,b,c,d,e=this._milliseconds,f=this._days,g=this._months,i=this._data;i.milliseconds=e%1e3,a=h(e/1e3),i.seconds=a%60,b=h(a/60),i.minutes=b%60,c=h(b/60),i.hours=c%24,f+=h(c/24),i.days=f%30,g+=h(f/30),i.months=g%12,d=h(g/12),i.years=d},weeks:function(){return h(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+2592e6*(this._months%12)+31536e6*~~(this._months/12)},humanize:function(a){var b=+this,c=F(b,!a,this.lang());return a&&(c=this.lang().pastFuture(b,c)),this.lang().postformat(c)},add:function(a,b){var c=L.duration(a,b);return this._milliseconds+=c._milliseconds,this._days+=c._days,this._months+=c._months,this._bubble(),this},subtract:function(a,b){var c=L.duration(a,b);return this._milliseconds-=c._milliseconds,this._days-=c._days,this._months-=c._months,this._bubble(),this},get:function(a){return a=m(a),this[a.toLowerCase()+"s"]()},as:function(a){return a=m(a),this["as"+a.charAt(0).toUpperCase()+a.slice(1)+"s"]()},lang:L.fn.lang});for(M in hb)hb.hasOwnProperty(M)&&(K(M,hb[M]),J(M.toLowerCase()));K("Weeks",6048e5),L.duration.fn.asMonths=function(){return(+this-31536e6*this.years())/2592e6+12*this.years()},L.lang("en",{ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),function(a){a(L)}(function(a){a.lang("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}),function(a){a(L)}(function(a){a.lang("ar",{months:"يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),monthsShort:"يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}),function(a){a(L)}(function(a){a.lang("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"h:mm",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&20>c?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,doy:7}})}),function(a){a(L)}(function(b){function c(a,b,c){var d={mm:"munutenn",MM:"miz",dd:"devezh"};return a+" "+f(d[c],a)}function d(a){switch(e(a)){case 1:case 3:case 4:case 5:case 9:return a+" bloaz";default:return a+" vloaz"}}function e(a){return a>9?e(a%10):a}function f(a,b){return 2===b?g(a):a}function g(b){var c={m:"v",b:"v",d:"z"};return c[b.charAt(0)]===a?b:c[b.charAt(0)]+b.substring(1)}b.lang("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),longDateFormat:{LT:"h[e]mm A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY LT",LLLL:"dddd, D [a viz] MMMM YYYY LT"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:c,h:"un eur",hh:"%d eur",d:"un devezh",dd:c,M:"ur miz",MM:c,y:"ur bloaz",yy:d},ordinal:function(a){var b=1===a?"añ":"vet";return a+b},week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("ca",{months:"Gener_Febrer_Març_Abril_Maig_Juny_Juliol_Agost_Setembre_Octubre_Novembre_Desembre".split("_"),monthsShort:"Gen._Febr._Mar._Abr._Mai._Jun._Jul._Ag._Set._Oct._Nov._Des.".split("_"),weekdays:"Diumenge_Dilluns_Dimarts_Dimecres_Dijous_Divendres_Dissabte".split("_"),weekdaysShort:"Dg._Dl._Dt._Dc._Dj._Dv._Ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinal:"%dº",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){function b(a){return a>1&&5>a&&1!==~~(a/10)}function c(a,c,d,e){var f=a+" ";switch(d){case"s":return c||e?"pár vteřin":"pár vteřinami";case"m":return c?"minuta":e?"minutu":"minutou";case"mm":return c||e?f+(b(a)?"minuty":"minut"):f+"minutami";break;case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(b(a)?"hodiny":"hodin"):f+"hodinami";break;case"d":return c||e?"den":"dnem";case"dd":return c||e?f+(b(a)?"dny":"dní"):f+"dny";break;case"M":return c||e?"měsíc":"měsícem";case"MM":return c||e?f+(b(a)?"měsíce":"měsíců"):f+"měsíci";break;case"y":return c||e?"rok":"rokem";case"yy":return c||e?f+(b(a)?"roky":"let"):f+"lety"}}var d="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),e="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");a.lang("cs",{months:d,monthsShort:e,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(d,e),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("cv",{months:"кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"),monthsShort:"кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кç_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",L:"DD-MM-YYYY",LL:"YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]",LLL:"YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT",LLLL:"dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ĕнер] LT [сехетре]",nextWeek:"[Çитес] dddd LT [сехетре]",lastWeek:"[Иртнĕ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(a){var b=/сехет$/i.exec(a)?"рен":/çул$/i.exec(a)?"тан":"ран";return a+b},past:"%s каялла",s:"пĕр-ик çеккунт",m:"пĕр минут",mm:"%d минут",h:"пĕр сехет",hh:"%d сехет",d:"пĕр кун",dd:"%d кун",M:"пĕр уйăх",MM:"%d уйăх",y:"пĕр çул",yy:"%d çул"},ordinal:"%d-мĕш",week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D. MMMM, YYYY LT"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){function b(a,b,c){var d={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?d[c][0]:d[c][1]}a.lang("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"H:mm [Uhr]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT",sameElse:"L",nextDay:"[Morgen um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gestern um] LT",lastWeek:"[letzten] dddd [um] LT"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:b,mm:"%d Minuten",h:b,hh:"%d Stunden",d:b,dd:b,M:b,MM:b,y:b,yy:b},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf("MMMM")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(a,b,c){return a>11?c?"μμ":"ΜΜ":c?"πμ":"ΠΜ"},longDateFormat:{LT:"h:mm A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:"[την προηγούμενη] dddd [{}] LT",sameElse:"L"},calendar:function(a,b){var c=this._calendarEl[a],d=b&&b.hours();return c.replace("{}",1===d%12?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinal:function(a){return a+"η"},week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",L:"YYYY-MM-DD",LL:"D MMMM, YYYY",LLL:"D MMMM, YYYY LT",LLLL:"dddd, D MMMM, YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}})}),function(a){a(L)}(function(a){a.lang("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";
return a+c},week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY LT",LLLL:"dddd, [la] D[-an de] MMMM, YYYY LT"},meridiem:function(a,b,c){return a>11?c?"p.t.m.":"P.T.M.":c?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinal:"%da",week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),longDateFormat:{LT:"H:mm",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinal:"%dº",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){function b(a,b,c,d){return d||b?"paari sekundi":"paar sekundit"}a.lang("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:b,m:"minut",mm:"%d minutit",h:"tund",hh:"%d tundi",d:"päev",dd:"%d päeva",M:"kuu",MM:"%d kuud",y:"aasta",yy:"%d aastat"},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),longDateFormat:{LT:"HH:mm",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] LT",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] LT",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] LT",llll:"ddd, YYYY[ko] MMM D[a] LT"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){var b={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},c={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};a.lang("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},meridiem:function(a){return 12>a?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return c[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]}).replace(/,/g,"،")},ordinal:"%dم",week:{dow:6,doy:12}})}),function(a){a(L)}(function(a){function b(a,b,d,e){var f="";switch(d){case"s":return e?"muutaman sekunnin":"muutama sekunti";case"m":return e?"minuutin":"minuutti";case"mm":f=e?"minuutin":"minuuttia";break;case"h":return e?"tunnin":"tunti";case"hh":f=e?"tunnin":"tuntia";break;case"d":return e?"päivän":"päivä";case"dd":f=e?"päivän":"päivää";break;case"M":return e?"kuukauden":"kuukausi";case"MM":f=e?"kuukauden":"kuukautta";break;case"y":return e?"vuoden":"vuosi";case"yy":f=e?"vuoden":"vuotta"}return f=c(a,e)+" "+f}function c(a,b){return 10>a?b?e[a]:d[a]:a}var d="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),e=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",d[7],d[8],d[9]];a.lang("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] LT",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] LT",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] LT",llll:"ddd, Do MMM YYYY, [klo] LT"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:b,m:b,mm:b,h:b,hh:b,d:b,dd:b,M:b,MM:b,y:b,yy:b},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinal:function(a){return a+(1===a?"er":"")}})}),function(a){a(L)}(function(a){a.lang("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinal:function(a){return a+(1===a?"er":"")},week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("gl",{months:"Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),monthsShort:"Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),weekdays:"Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),weekdaysShort:"Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),longDateFormat:{LT:"H:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(a){return"uns segundos"===a?"nuns segundos":"en "+a},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinal:"%dº",week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY LT",LLLL:"dddd, D [ב]MMMM YYYY LT",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(a){return 2===a?"שעתיים":a+" שעות"},d:"יום",dd:function(a){return 2===a?"יומיים":a+" ימים"},M:"חודש",MM:function(a){return 2===a?"חודשיים":a+" חודשים"},y:"שנה",yy:function(a){return 2===a?"שנתיים":a+" שנים"}}})}),function(a){a(L)}(function(a){var b={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};a.lang("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiem:function(a){return 4>a?"रात":10>a?"सुबह":17>a?"दोपहर":20>a?"शाम":"रात"},week:{dow:0,doy:6}})}),function(a){a(L)}(function(a){function b(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}a.lang("hr",{months:"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),monthsShort:"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:b,mm:b,h:b,hh:b,d:"dan",dd:b,M:"mjesec",MM:b,y:"godinu",yy:b},ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){function b(a,b,c,d){var e=a;switch(c){case"s":return d||b?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(d||b?" perc":" perce");case"mm":return e+(d||b?" perc":" perce");case"h":return"egy"+(d||b?" óra":" órája");case"hh":return e+(d||b?" óra":" órája");case"d":return"egy"+(d||b?" nap":" napja");case"dd":return e+(d||b?" nap":" napja");case"M":return"egy"+(d||b?" hónap":" hónapja");case"MM":return e+(d||b?" hónap":" hónapja");case"y":return"egy"+(d||b?" év":" éve");case"yy":return e+(d||b?" év":" éve")}return""}function c(a){return(a?"":"[múlt] ")+"["+d[this.day()]+"] LT[-kor]"}var d="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");a.lang("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D., LT",LLLL:"YYYY. MMMM D., dddd LT"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return c.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return c.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:b,m:b,mm:b,h:b,hh:b,d:b,dd:b,M:b,MM:b,y:b,yy:b},ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] LT",LLLL:"dddd, D MMMM YYYY [pukul] LT"},meridiem:function(a){return 11>a?"pagi":15>a?"siang":19>a?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){function b(a){return 11===a%100?!0:1===a%10?!1:!0}function c(a,c,d,e){var f=a+" ";switch(d){case"s":return c||e?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return c?"mínúta":"mínútu";case"mm":return b(a)?f+(c||e?"mínútur":"mínútum"):c?f+"mínúta":f+"mínútu";case"hh":return b(a)?f+(c||e?"klukkustundir":"klukkustundum"):f+"klukkustund";case"d":return c?"dagur":e?"dag":"degi";case"dd":return b(a)?c?f+"dagar":f+(e?"daga":"dögum"):c?f+"dagur":f+(e?"dag":"degi");case"M":return c?"mánuður":e?"mánuð":"mánuði";case"MM":return b(a)?c?f+"mánuðir":f+(e?"mánuði":"mánuðum"):c?f+"mánuður":f+(e?"mánuð":"mánuði");case"y":return c||e?"ár":"ári";case"yy":return b(a)?f+(c||e?"ár":"árum"):f+(c||e?"ár":"ári")}}a.lang("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd, D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:c,m:c,mm:c,h:"klukkustund",hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("it",{months:"Gennaio_Febbraio_Marzo_Aprile_Maggio_Giugno_Luglio_Agosto_Settembre_Ottobre_Novembre_Dicembre".split("_"),monthsShort:"Gen_Feb_Mar_Apr_Mag_Giu_Lug_Ago_Set_Ott_Nov_Dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"D_L_Ma_Me_G_V_S".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:"[lo scorso] dddd [alle] LT",sameElse:"L"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?"tra":"in")+" "+a},past:"%s fa",s:"secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinal:"%dº",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日LT",LLLL:"YYYY年M月D日LT dddd"},meridiem:function(a){return 12>a?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}),function(a){a(L)}(function(a){function b(a,b){var c={nominative:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),accusative:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},d=/D[oD] *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function c(a,b){var c={nominative:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),accusative:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_")},d=/(წინა|შემდეგ)/.test(b)?"accusative":"nominative";return c[d][a.day()]}a.lang("ka",{months:b,monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:c,weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(a){return/(წამი|წუთი|საათი|წელი)/.test(a)?a.replace(/ი$/,"ში"):a+"ში"},past:function(a){return/(წამი|წუთი|საათი|დღე|თვე)/.test(a)?a.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(a)?a.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinal:function(a){return 0===a?a:1===a?a+"-ლი":20>a||100>=a&&0===a%20||0===a%100?"მე-"+a:a+"-ე"},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 mm분",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 LT",LLLL:"YYYY년 MMMM D일 dddd LT"},meridiem:function(a){return 12>a?"오전":"오후"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinal:"%d일"})}),function(a){a(L)}(function(a){function b(a,b,c){var d=a.split("_");return c?1===b%10&&11!==b?d[2]:d[3]:1===b%10&&11!==b?d[0]:d[1]}function c(a,c,e){return a+" "+b(d[e],a,c)}var d={mm:"minūti_minūtes_minūte_minūtes",hh:"stundu_stundas_stunda_stundas",dd:"dienu_dienas_diena_dienas",MM:"mēnesi_mēnešus_mēnesis_mēneši",yy:"gadu_gadus_gads_gadi"};a.lang("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",L:"DD.MM.YYYY",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, LT",LLLL:"YYYY. [gada] D. MMMM, dddd, LT"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"%s vēlāk",past:"%s agrāk",s:"dažas sekundes",m:"minūti",mm:c,h:"stundu",hh:c,d:"dienu",dd:c,M:"mēnesi",MM:c,y:"gadu",yy:c},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiem:function(a){return 4>a?"രാത്രി":12>a?"രാവിലെ":17>a?"ഉച്ച കഴിഞ്ഞ്":20>a?"വൈകുന്നേരം":"രാത്രി"}})}),function(a){a(L)}(function(a){var b={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};a.lang("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%s नंतर",past:"%s पूर्वी",s:"सेकंद",m:"एक मिनिट",mm:"%d मिनिटे",h:"एक तास",hh:"%d तास",d:"एक दिवस",dd:"%d दिवस",M:"एक महिना",MM:"%d महिने",y:"एक वर्ष",yy:"%d वर्षे"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiem:function(a){return 4>a?"रात्री":10>a?"सकाळी":17>a?"दुपारी":20>a?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}),function(a){a(L)}(function(a){a.lang("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] LT",LLLL:"dddd, D MMMM YYYY [pukul] LT"},meridiem:function(a){return 11>a?"pagi":15>a?"tengahari":19>a?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"H.mm",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){var b={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},c={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};a.lang("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आइ._सो._मङ्_बु._बि._शु._श.".split("_"),longDateFormat:{LT:"Aको h:mm बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return c[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return b[a]})},meridiem:function(a){return 3>a?"राती":10>a?"बिहान":15>a?"दिउँसो":18>a?"बेलुका":20>a?"साँझ":"राती"},calendar:{sameDay:"[आज] LT",nextDay:"[भोली] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडी",s:"केही समय",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){var b="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),c="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");a.lang("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(a,d){return/-MMM-/.test(d)?c[a.month()]:b[a.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Vandaag om] LT",nextDay:"[Morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregående] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekund",m:"ett minutt",mm:"%d minutt",h:"en time",hh:"%d timar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){function b(a){return 5>a%10&&a%10>1&&1!==~~(a/10)}function c(a,c,d){var e=a+" ";switch(d){case"m":return c?"minuta":"minutę";case"mm":return e+(b(a)?"minuty":"minut");case"h":return c?"godzina":"godzinę";case"hh":return e+(b(a)?"godziny":"godzin");case"MM":return e+(b(a)?"miesiące":"miesięcy");case"yy":return e+(b(a)?"lata":"lat")}}var d="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),e="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");a.lang("pl",{months:function(a,b){return/D MMMM/.test(b)?e[a.month()]:d[a.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"N_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";
case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:c,mm:c,h:c,hh:c,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:c,y:"rok",yy:c},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinal:"%dº"})}),function(a){a(L)}(function(a){a.lang("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinal:"%dº",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("ro",{months:"Ianuarie_Februarie_Martie_Aprilie_Mai_Iunie_Iulie_August_Septembrie_Octombrie_Noiembrie_Decembrie".split("_"),monthsShort:"Ian_Feb_Mar_Apr_Mai_Iun_Iul_Aug_Sep_Oct_Noi_Dec".split("_"),weekdays:"Duminică_Luni_Marţi_Miercuri_Joi_Vineri_Sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:"%d minute",h:"o oră",hh:"%d ore",d:"o zi",dd:"%d zile",M:"o lună",MM:"%d luni",y:"un an",yy:"%d ani"},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){function b(a,b){var c=a.split("_");return 1===b%10&&11!==b%100?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(a,c,d){var e={mm:"минута_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===d?c?"минута":"минуту":a+" "+b(e[d],+a)}function d(a,b){var c={nominative:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),accusative:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_")},d=/D[oD]? *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function e(a,b){var c={nominative:"янв_фев_мар_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),accusative:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_")},d=/D[oD]? *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function f(a,b){var c={nominative:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),accusative:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_")},d=/\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/.test(b)?"accusative":"nominative";return c[d][a.day()]}a.lang("ru",{months:d,monthsShort:e,weekdays:f,weekdaysShort:"вск_пнд_втр_срд_чтв_птн_сбт".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., LT",LLLL:"dddd, D MMMM YYYY г., LT"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(){return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT"},lastWeek:function(){switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:c,mm:c,h:"час",hh:c,d:"день",dd:c,M:"месяц",MM:c,y:"год",yy:c},ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":return a+"-й";case"D":return a+"-го";case"w":case"W":return a+"-я";default:return a}},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){function b(a){return a>1&&5>a}function c(a,c,d,e){var f=a+" ";switch(d){case"s":return c||e?"pár sekúnd":"pár sekundami";case"m":return c?"minúta":e?"minútu":"minútou";case"mm":return c||e?f+(b(a)?"minúty":"minút"):f+"minútami";break;case"h":return c?"hodina":e?"hodinu":"hodinou";case"hh":return c||e?f+(b(a)?"hodiny":"hodín"):f+"hodinami";break;case"d":return c||e?"deň":"dňom";case"dd":return c||e?f+(b(a)?"dni":"dní"):f+"dňami";break;case"M":return c||e?"mesiac":"mesiacom";case"MM":return c||e?f+(b(a)?"mesiace":"mesiacov"):f+"mesiacmi";break;case"y":return c||e?"rok":"rokom";case"yy":return c||e?f+(b(a)?"roky":"rokov"):f+"rokmi"}}var d="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),e="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");a.lang("sk",{months:d,monthsShort:e,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(d,e),weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){function b(a,b,c){var d=a+" ";switch(c){case"m":return b?"ena minuta":"eno minuto";case"mm":return d+=1===a?"minuta":2===a?"minuti":3===a||4===a?"minute":"minut";case"h":return b?"ena ura":"eno uro";case"hh":return d+=1===a?"ura":2===a?"uri":3===a||4===a?"ure":"ur";case"dd":return d+=1===a?"dan":"dni";case"MM":return d+=1===a?"mesec":2===a?"meseca":3===a||4===a?"mesece":"mesecev";case"yy":return d+=1===a?"leto":2===a?"leti":3===a||4===a?"leta":"let"}}a.lang("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[prejšnja] dddd [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"%s nazaj",s:"nekaj sekund",m:b,mm:b,h:b,hh:b,d:"en dan",dd:b,M:"en mesec",MM:b,y:"eno leto",yy:b},ordinal:"%d.",week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Marte_E Mërkure_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Neser në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s me parë",s:"disa seconda",m:"një minut",mm:"%d minutea",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinal:"%d.",week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"dddd LT",lastWeek:"[Förra] dddd[en] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"e":1===b?"a":2===b?"a":3===b?"e":"e";return a+c},week:{dow:1,doy:4}})}),function(a){a(L)}(function(a){a.lang("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา LT",LLLL:"วันddddที่ D MMMM YYYY เวลา LT"},meridiem:function(a){return 12>a?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}),function(a){a(L)}(function(a){var b={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};a.lang("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(a){if(0===a)return a+"'ıncı";var c=a%10,d=a%100-c,e=a>=100?100:null;return a+(b[c]||b[d]||b[e])},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("tzm-la",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}),function(a){a(L)}(function(a){a.lang("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}),function(a){a(L)}(function(a){function b(a,b){var c=a.split("_");return 1===b%10&&11!==b%100?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function c(a,c,d){var e={mm:"хвилина_хвилини_хвилин",hh:"година_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===d?c?"хвилина":"хвилину":"h"===d?c?"година":"годину":a+" "+b(e[d],+a)}function d(a,b){var c={nominative:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"),accusative:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_")},d=/D[oD]? *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function e(a,b){var c={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},d=/(\[[ВвУу]\]) ?dddd/.test(b)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(b)?"genitive":"nominative";return c[d][a.day()]}function f(a){return function(){return a+"о"+(11===this.hours()?"б":"")+"] LT"}}a.lang("uk",{months:d,monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:e,weekdaysShort:"нед_пон_вів_сер_чет_п’ят_суб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., LT",LLLL:"dddd, D MMMM YYYY р., LT"},calendar:{sameDay:f("[Сьогодні "),nextDay:f("[Завтра "),lastDay:f("[Вчора "),nextWeek:f("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return f("[Минулої] dddd [").call(this);case 1:case 2:case 4:return f("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:c,mm:c,h:"годину",hh:c,d:"день",dd:c,M:"місяць",MM:c,y:"рік",yy:c},ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a+"-й";case"D":return a+"-го";default:return a}},week:{dow:1,doy:7}})}),function(a){a(L)}(function(a){a.lang("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiem:function(a,b){return 9>a?"早上":11>a&&30>b?"上午":13>a&&30>b?"中午":18>a?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"周";default:return a}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1分钟",mm:"%d分钟",h:"1小时",hh:"%d小时",d:"1天",dd:"%d天",M:"1个月",MM:"%d个月",y:"1年",yy:"%d年"}})}),function(a){a(L)}(function(a){a.lang("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiem:function(a,b){return 9>a?"早上":11>a&&30>b?"上午":13>a&&30>b?"中午":18>a?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}})}),L.lang("en"),Q&&(module.exports=L),"undefined"==typeof ender&&(this.moment=L),"function"==typeof define&&define.amd&&define("moment",[],function(){return L})}).call(this);
/*! jQuery UI - v1.9.2 - 2012-11-23
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.slider.js, jquery.ui.sortable.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js
* Copyright (c) 2012 jQuery Foundation and other contributors Licensed MIT */

(function( $, undefined ) {

var uuid = 0,
    runiqueId = /^ui-id-\d+$/;

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
$.ui = $.ui || {};
if ( $.ui.version ) {
    return;
}

$.extend( $.ui, {
    version: "1.9.2",

    keyCode: {
        BACKSPACE: 8,
        COMMA: 188,
        DELETE: 46,
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        LEFT: 37,
        NUMPAD_ADD: 107,
        NUMPAD_DECIMAL: 110,
        NUMPAD_DIVIDE: 111,
        NUMPAD_ENTER: 108,
        NUMPAD_MULTIPLY: 106,
        NUMPAD_SUBTRACT: 109,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        PERIOD: 190,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38
    }
});

// plugins
$.fn.extend({
    _focus: $.fn.focus,
    focus: function( delay, fn ) {
        return typeof delay === "number" ?
            this.each(function() {
                var elem = this;
                setTimeout(function() {
                    $( elem ).focus();
                    if ( fn ) {
                        fn.call( elem );
                    }
                }, delay );
            }) :
            this._focus.apply( this, arguments );
    },

    scrollParent: function() {
        var scrollParent;
        if (($.ui.ie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
            scrollParent = this.parents().filter(function() {
                return (/(relative|absolute|fixed)/).test($.css(this,'position')) && (/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));
            }).eq(0);
        } else {
            scrollParent = this.parents().filter(function() {
                return (/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));
            }).eq(0);
        }

        return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
    },

    zIndex: function( zIndex ) {
        if ( zIndex !== undefined ) {
            return this.css( "zIndex", zIndex );
        }

        if ( this.length ) {
            var elem = $( this[ 0 ] ), position, value;
            while ( elem.length && elem[ 0 ] !== document ) {
                // Ignore z-index if position is set to a value where z-index is ignored by the browser
                // This makes behavior of this function consistent across browsers
                // WebKit always returns auto if the element is positioned
                position = elem.css( "position" );
                if ( position === "absolute" || position === "relative" || position === "fixed" ) {
                    // IE returns 0 when zIndex is not specified
                    // other browsers return a string
                    // we ignore the case of nested elements with an explicit value of 0
                    // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                    value = parseInt( elem.css( "zIndex" ), 10 );
                    if ( !isNaN( value ) && value !== 0 ) {
                        return value;
                    }
                }
                elem = elem.parent();
            }
        }

        return 0;
    },

    uniqueId: function() {
        return this.each(function() {
            if ( !this.id ) {
                this.id = "ui-id-" + (++uuid);
            }
        });
    },

    removeUniqueId: function() {
        return this.each(function() {
            if ( runiqueId.test( this.id ) ) {
                $( this ).removeAttr( "id" );
            }
        });
    }
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
    var map, mapName, img,
        nodeName = element.nodeName.toLowerCase();
    if ( "area" === nodeName ) {
        map = element.parentNode;
        mapName = map.name;
        if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
            return false;
        }
        img = $( "img[usemap=#" + mapName + "]" )[0];
        return !!img && visible( img );
    }
    return ( /input|select|textarea|button|object/.test( nodeName ) ?
        !element.disabled :
        "a" === nodeName ?
            element.href || isTabIndexNotNaN :
            isTabIndexNotNaN) &&
        // the element and all of its ancestors must be visible
        visible( element );
}

function visible( element ) {
    return $.expr.filters.visible( element ) &&
        !$( element ).parents().andSelf().filter(function() {
            return $.css( this, "visibility" ) === "hidden";
        }).length;
}

$.extend( $.expr[ ":" ], {
    data: $.expr.createPseudo ?
        $.expr.createPseudo(function( dataName ) {
            return function( elem ) {
                return !!$.data( elem, dataName );
            };
        }) :
        // support: jQuery <1.8
        function( elem, i, match ) {
            return !!$.data( elem, match[ 3 ] );
        },

    focusable: function( element ) {
        return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
    },

    tabbable: function( element ) {
        var tabIndex = $.attr( element, "tabindex" ),
            isTabIndexNaN = isNaN( tabIndex );
        return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
    }
});

// support
$(function() {
    var body = document.body,
        div = body.appendChild( div = document.createElement( "div" ) );

    // access offsetHeight before setting the style to prevent a layout bug
    // in IE 9 which causes the element to continue to take up space even
    // after it is removed from the DOM (#8026)
    div.offsetHeight;

    $.extend( div.style, {
        minHeight: "100px",
        height: "auto",
        padding: 0,
        borderWidth: 0
    });

    $.support.minHeight = div.offsetHeight === 100;
    $.support.selectstart = "onselectstart" in div;

    // set display to none to avoid a layout bug in IE
    // http://dev.jquery.com/ticket/4014
    body.removeChild( div ).style.display = "none";
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
    $.each( [ "Width", "Height" ], function( i, name ) {
        var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
            type = name.toLowerCase(),
            orig = {
                innerWidth: $.fn.innerWidth,
                innerHeight: $.fn.innerHeight,
                outerWidth: $.fn.outerWidth,
                outerHeight: $.fn.outerHeight
            };

        function reduce( elem, size, border, margin ) {
            $.each( side, function() {
                size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
                if ( border ) {
                    size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
                }
                if ( margin ) {
                    size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
                }
            });
            return size;
        }

        $.fn[ "inner" + name ] = function( size ) {
            if ( size === undefined ) {
                return orig[ "inner" + name ].call( this );
            }

            return this.each(function() {
                $( this ).css( type, reduce( this, size ) + "px" );
            });
        };

        $.fn[ "outer" + name] = function( size, margin ) {
            if ( typeof size !== "number" ) {
                return orig[ "outer" + name ].call( this, size );
            }

            return this.each(function() {
                $( this).css( type, reduce( this, size, true, margin ) + "px" );
            });
        };
    });
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
    $.fn.removeData = (function( removeData ) {
        return function( key ) {
            if ( arguments.length ) {
                return removeData.call( this, $.camelCase( key ) );
            } else {
                return removeData.call( this );
            }
        };
    })( $.fn.removeData );
}





// deprecated

(function() {
    var uaMatch = /msie ([\w.]+)/.exec( navigator.userAgent.toLowerCase() ) || [];
    $.ui.ie = uaMatch.length ? true : false;
    $.ui.ie6 = parseFloat( uaMatch[ 1 ], 10 ) === 6;
})();

$.fn.extend({
    disableSelection: function() {
        return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
            ".ui-disableSelection", function( event ) {
                event.preventDefault();
            });
    },

    enableSelection: function() {
        return this.unbind( ".ui-disableSelection" );
    }
});

$.extend( $.ui, {
    // $.ui.plugin is deprecated.  Use the proxy pattern instead.
    plugin: {
        add: function( module, option, set ) {
            var i,
                proto = $.ui[ module ].prototype;
            for ( i in set ) {
                proto.plugins[ i ] = proto.plugins[ i ] || [];
                proto.plugins[ i ].push( [ option, set[ i ] ] );
            }
        },
        call: function( instance, name, args ) {
            var i,
                set = instance.plugins[ name ];
            if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
                return;
            }

            for ( i = 0; i < set.length; i++ ) {
                if ( instance.options[ set[ i ][ 0 ] ] ) {
                    set[ i ][ 1 ].apply( instance.element, args );
                }
            }
        }
    },

    contains: $.contains,

    // only used by resizable
    hasScroll: function( el, a ) {

        //If overflow is hidden, the element might have extra content, but the user wants to hide it
        if ( $( el ).css( "overflow" ) === "hidden") {
            return false;
        }

        var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
            has = false;

        if ( el[ scroll ] > 0 ) {
            return true;
        }

        // TODO: determine which cases actually cause this to happen
        // if the element doesn't have the scroll set, see if it's possible to
        // set the scroll
        el[ scroll ] = 1;
        has = ( el[ scroll ] > 0 );
        el[ scroll ] = 0;
        return has;
    },

    // these are odd functions, fix the API or move into individual plugins
    isOverAxis: function( x, reference, size ) {
        //Determines when x coordinate is over "b" element axis
        return ( x > reference ) && ( x < ( reference + size ) );
    },
    isOver: function( y, x, top, left, height, width ) {
        //Determines when x, y coordinates is over "b" element
        return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );
    }
});

})( jQuery );
(function( $, undefined ) {

var uuid = 0,
    slice = Array.prototype.slice,
    _cleanData = $.cleanData;
$.cleanData = function( elems ) {
    for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
        try {
            $( elem ).triggerHandler( "remove" );
        // http://bugs.jquery.com/ticket/8235
        } catch( e ) {}
    }
    _cleanData( elems );
};

$.widget = function( name, base, prototype ) {
    var fullName, existingConstructor, constructor, basePrototype,
        namespace = name.split( "." )[ 0 ];

    name = name.split( "." )[ 1 ];
    fullName = namespace + "-" + name;

    if ( !prototype ) {
        prototype = base;
        base = $.Widget;
    }

    // create selector for plugin
    $.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
        return !!$.data( elem, fullName );
    };

    $[ namespace ] = $[ namespace ] || {};
    existingConstructor = $[ namespace ][ name ];
    constructor = $[ namespace ][ name ] = function( options, element ) {
        // allow instantiation without "new" keyword
        if ( !this._createWidget ) {
            return new constructor( options, element );
        }

        // allow instantiation without initializing for simple inheritance
        // must use "new" keyword (the code above always passes args)
        if ( arguments.length ) {
            this._createWidget( options, element );
        }
    };
    // extend with the existing constructor to carry over any static properties
    $.extend( constructor, existingConstructor, {
        version: prototype.version,
        // copy the object used to create the prototype in case we need to
        // redefine the widget later
        _proto: $.extend( {}, prototype ),
        // track widgets that inherit from this widget in case this widget is
        // redefined after a widget inherits from it
        _childConstructors: []
    });

    basePrototype = new base();
    // we need to make the options hash a property directly on the new instance
    // otherwise we'll modify the options hash on the prototype that we're
    // inheriting from
    basePrototype.options = $.widget.extend( {}, basePrototype.options );
    $.each( prototype, function( prop, value ) {
        if ( $.isFunction( value ) ) {
            prototype[ prop ] = (function() {
                var _super = function() {
                        return base.prototype[ prop ].apply( this, arguments );
                    },
                    _superApply = function( args ) {
                        return base.prototype[ prop ].apply( this, args );
                    };
                return function() {
                    var __super = this._super,
                        __superApply = this._superApply,
                        returnValue;

                    this._super = _super;
                    this._superApply = _superApply;

                    returnValue = value.apply( this, arguments );

                    this._super = __super;
                    this._superApply = __superApply;

                    return returnValue;
                };
            })();
        }
    });
    constructor.prototype = $.widget.extend( basePrototype, {
        // TODO: remove support for widgetEventPrefix
        // always use the name + a colon as the prefix, e.g., draggable:start
        // don't prefix for widgets that aren't DOM-based
        widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
    }, prototype, {
        constructor: constructor,
        namespace: namespace,
        widgetName: name,
        // TODO remove widgetBaseClass, see #8155
        widgetBaseClass: fullName,
        widgetFullName: fullName
    });

    // If this widget is being redefined then we need to find all widgets that
    // are inheriting from it and redefine all of them so that they inherit from
    // the new version of this widget. We're essentially trying to replace one
    // level in the prototype chain.
    if ( existingConstructor ) {
        $.each( existingConstructor._childConstructors, function( i, child ) {
            var childPrototype = child.prototype;

            // redefine the child widget using the same prototype that was
            // originally used, but inherit from the new version of the base
            $.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
        });
        // remove the list of existing child constructors from the old constructor
        // so the old child constructors can be garbage collected
        delete existingConstructor._childConstructors;
    } else {
        base._childConstructors.push( constructor );
    }

    $.widget.bridge( name, constructor );
};

$.widget.extend = function( target ) {
    var input = slice.call( arguments, 1 ),
        inputIndex = 0,
        inputLength = input.length,
        key,
        value;
    for ( ; inputIndex < inputLength; inputIndex++ ) {
        for ( key in input[ inputIndex ] ) {
            value = input[ inputIndex ][ key ];
            if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
                // Clone objects
                if ( $.isPlainObject( value ) ) {
                    target[ key ] = $.isPlainObject( target[ key ] ) ?
                        $.widget.extend( {}, target[ key ], value ) :
                        // Don't extend strings, arrays, etc. with objects
                        $.widget.extend( {}, value );
                // Copy everything else by reference
                } else {
                    target[ key ] = value;
                }
            }
        }
    }
    return target;
};

$.widget.bridge = function( name, object ) {
    var fullName = object.prototype.widgetFullName || name;
    $.fn[ name ] = function( options ) {
        var isMethodCall = typeof options === "string",
            args = slice.call( arguments, 1 ),
            returnValue = this;

        // allow multiple hashes to be passed on init
        options = !isMethodCall && args.length ?
            $.widget.extend.apply( null, [ options ].concat(args) ) :
            options;

        if ( isMethodCall ) {
            this.each(function() {
                var methodValue,
                    instance = $.data( this, fullName );
                if ( !instance ) {
                    return $.error( "cannot call methods on " + name + " prior to initialization; " +
                        "attempted to call method '" + options + "'" );
                }
                if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
                    return $.error( "no such method '" + options + "' for " + name + " widget instance" );
                }
                methodValue = instance[ options ].apply( instance, args );
                if ( methodValue !== instance && methodValue !== undefined ) {
                    returnValue = methodValue && methodValue.jquery ?
                        returnValue.pushStack( methodValue.get() ) :
                        methodValue;
                    return false;
                }
            });
        } else {
            this.each(function() {
                var instance = $.data( this, fullName );
                if ( instance ) {
                    instance.option( options || {} )._init();
                } else {
                    $.data( this, fullName, new object( options, this ) );
                }
            });
        }

        return returnValue;
    };
};

$.Widget = function( /* options, element */ ) {};
$.Widget._childConstructors = [];

$.Widget.prototype = {
    widgetName: "widget",
    widgetEventPrefix: "",
    defaultElement: "<div>",
    options: {
        disabled: false,

        // callbacks
        create: null
    },
    _createWidget: function( options, element ) {
        element = $( element || this.defaultElement || this )[ 0 ];
        this.element = $( element );
        this.uuid = uuid++;
        this.eventNamespace = "." + this.widgetName + this.uuid;
        this.options = $.widget.extend( {},
            this.options,
            this._getCreateOptions(),
            options );

        this.bindings = $();
        this.hoverable = $();
        this.focusable = $();

        if ( element !== this ) {
            // 1.9 BC for #7810
            // TODO remove dual storage
            $.data( element, this.widgetName, this );
            $.data( element, this.widgetFullName, this );
            this._on( true, this.element, {
                remove: function( event ) {
                    if ( event.target === element ) {
                        this.destroy();
                    }
                }
            });
            this.document = $( element.style ?
                // element within the document
                element.ownerDocument :
                // element is window or document
                element.document || element );
            this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
        }

        this._create();
        this._trigger( "create", null, this._getCreateEventData() );
        this._init();
    },
    _getCreateOptions: $.noop,
    _getCreateEventData: $.noop,
    _create: $.noop,
    _init: $.noop,

    destroy: function() {
        this._destroy();
        // we can probably remove the unbind calls in 2.0
        // all event bindings should go through this._on()
        this.element
            .unbind( this.eventNamespace )
            // 1.9 BC for #7810
            // TODO remove dual storage
            .removeData( this.widgetName )
            .removeData( this.widgetFullName )
            // support: jquery <1.6.3
            // http://bugs.jquery.com/ticket/9413
            .removeData( $.camelCase( this.widgetFullName ) );
        this.widget()
            .unbind( this.eventNamespace )
            .removeAttr( "aria-disabled" )
            .removeClass(
                this.widgetFullName + "-disabled " +
                "ui-state-disabled" );

        // clean up events and states
        this.bindings.unbind( this.eventNamespace );
        this.hoverable.removeClass( "ui-state-hover" );
        this.focusable.removeClass( "ui-state-focus" );
    },
    _destroy: $.noop,

    widget: function() {
        return this.element;
    },

    option: function( key, value ) {
        var options = key,
            parts,
            curOption,
            i;

        if ( arguments.length === 0 ) {
            // don't return a reference to the internal hash
            return $.widget.extend( {}, this.options );
        }

        if ( typeof key === "string" ) {
            // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
            options = {};
            parts = key.split( "." );
            key = parts.shift();
            if ( parts.length ) {
                curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
                for ( i = 0; i < parts.length - 1; i++ ) {
                    curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
                    curOption = curOption[ parts[ i ] ];
                }
                key = parts.pop();
                if ( value === undefined ) {
                    return curOption[ key ] === undefined ? null : curOption[ key ];
                }
                curOption[ key ] = value;
            } else {
                if ( value === undefined ) {
                    return this.options[ key ] === undefined ? null : this.options[ key ];
                }
                options[ key ] = value;
            }
        }

        this._setOptions( options );

        return this;
    },
    _setOptions: function( options ) {
        var key;

        for ( key in options ) {
            this._setOption( key, options[ key ] );
        }

        return this;
    },
    _setOption: function( key, value ) {
        this.options[ key ] = value;

        if ( key === "disabled" ) {
            this.widget()
                .toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
                .attr( "aria-disabled", value );
            this.hoverable.removeClass( "ui-state-hover" );
            this.focusable.removeClass( "ui-state-focus" );
        }

        return this;
    },

    enable: function() {
        return this._setOption( "disabled", false );
    },
    disable: function() {
        return this._setOption( "disabled", true );
    },

    _on: function( suppressDisabledCheck, element, handlers ) {
        var delegateElement,
            instance = this;

        // no suppressDisabledCheck flag, shuffle arguments
        if ( typeof suppressDisabledCheck !== "boolean" ) {
            handlers = element;
            element = suppressDisabledCheck;
            suppressDisabledCheck = false;
        }

        // no element argument, shuffle and use this.element
        if ( !handlers ) {
            handlers = element;
            element = this.element;
            delegateElement = this.widget();
        } else {
            // accept selectors, DOM elements
            element = delegateElement = $( element );
            this.bindings = this.bindings.add( element );
        }

        $.each( handlers, function( event, handler ) {
            function handlerProxy() {
                // allow widgets to customize the disabled handling
                // - disabled as an array instead of boolean
                // - disabled class as method for disabling individual parts
                if ( !suppressDisabledCheck &&
                        ( instance.options.disabled === true ||
                            $( this ).hasClass( "ui-state-disabled" ) ) ) {
                    return;
                }
                return ( typeof handler === "string" ? instance[ handler ] : handler )
                    .apply( instance, arguments );
            }

            // copy the guid so direct unbinding works
            if ( typeof handler !== "string" ) {
                handlerProxy.guid = handler.guid =
                    handler.guid || handlerProxy.guid || $.guid++;
            }

            var match = event.match( /^(\w+)\s*(.*)$/ ),
                eventName = match[1] + instance.eventNamespace,
                selector = match[2];
            if ( selector ) {
                delegateElement.delegate( selector, eventName, handlerProxy );
            } else {
                element.bind( eventName, handlerProxy );
            }
        });
    },

    _off: function( element, eventName ) {
        eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
        element.unbind( eventName ).undelegate( eventName );
    },

    _delay: function( handler, delay ) {
        function handlerProxy() {
            return ( typeof handler === "string" ? instance[ handler ] : handler )
                .apply( instance, arguments );
        }
        var instance = this;
        return setTimeout( handlerProxy, delay || 0 );
    },

    _hoverable: function( element ) {
        this.hoverable = this.hoverable.add( element );
        this._on( element, {
            mouseenter: function( event ) {
                $( event.currentTarget ).addClass( "ui-state-hover" );
            },
            mouseleave: function( event ) {
                $( event.currentTarget ).removeClass( "ui-state-hover" );
            }
        });
    },

    _focusable: function( element ) {
        this.focusable = this.focusable.add( element );
        this._on( element, {
            focusin: function( event ) {
                $( event.currentTarget ).addClass( "ui-state-focus" );
            },
            focusout: function( event ) {
                $( event.currentTarget ).removeClass( "ui-state-focus" );
            }
        });
    },

    _trigger: function( type, event, data ) {
        var prop, orig,
            callback = this.options[ type ];

        data = data || {};
        event = $.Event( event );
        event.type = ( type === this.widgetEventPrefix ?
            type :
            this.widgetEventPrefix + type ).toLowerCase();
        // the original event may come from any element
        // so we need to reset the target on the new event
        event.target = this.element[ 0 ];

        // copy original event properties over to the new event
        orig = event.originalEvent;
        if ( orig ) {
            for ( prop in orig ) {
                if ( !( prop in event ) ) {
                    event[ prop ] = orig[ prop ];
                }
            }
        }

        this.element.trigger( event, data );
        return !( $.isFunction( callback ) &&
            callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
            event.isDefaultPrevented() );
    }
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
    $.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
        if ( typeof options === "string" ) {
            options = { effect: options };
        }
        var hasOptions,
            effectName = !options ?
                method :
                options === true || typeof options === "number" ?
                    defaultEffect :
                    options.effect || defaultEffect;
        options = options || {};
        if ( typeof options === "number" ) {
            options = { duration: options };
        }
        hasOptions = !$.isEmptyObject( options );
        options.complete = callback;
        if ( options.delay ) {
            element.delay( options.delay );
        }
        if ( hasOptions && $.effects && ( $.effects.effect[ effectName ] || $.uiBackCompat !== false && $.effects[ effectName ] ) ) {
            element[ method ]( options );
        } else if ( effectName !== method && element[ effectName ] ) {
            element[ effectName ]( options.duration, options.easing, callback );
        } else {
            element.queue(function( next ) {
                $( this )[ method ]();
                if ( callback ) {
                    callback.call( element[ 0 ] );
                }
                next();
            });
        }
    };
});

// DEPRECATED
if ( $.uiBackCompat !== false ) {
    $.Widget.prototype._getCreateOptions = function() {
        return $.metadata && $.metadata.get( this.element[0] )[ this.widgetName ];
    };
}

})( jQuery );
(function( $, undefined ) {

var mouseHandled = false;
$( document ).mouseup( function( e ) {
    mouseHandled = false;
});

$.widget("ui.mouse", {
    version: "1.9.2",
    options: {
        cancel: 'input,textarea,button,select,option',
        distance: 1,
        delay: 0
    },
    _mouseInit: function() {
        var that = this;

        this.element
            .bind('mousedown.'+this.widgetName, function(event) {
                return that._mouseDown(event);
            })
            .bind('click.'+this.widgetName, function(event) {
                if (true === $.data(event.target, that.widgetName + '.preventClickEvent')) {
                    $.removeData(event.target, that.widgetName + '.preventClickEvent');
                    event.stopImmediatePropagation();
                    return false;
                }
            });

        this.started = false;
    },

    // TODO: make sure destroying one instance of mouse doesn't mess with
    // other instances of mouse
    _mouseDestroy: function() {
        this.element.unbind('.'+this.widgetName);
        if ( this._mouseMoveDelegate ) {
            $(document)
                .unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
                .unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);
        }
    },

    _mouseDown: function(event) {
        // don't let more than one widget handle mouseStart
        if( mouseHandled ) { return; }

        // we may have missed mouseup (out of window)
        (this._mouseStarted && this._mouseUp(event));

        this._mouseDownEvent = event;

        var that = this,
            btnIsLeft = (event.which === 1),
            // event.target.nodeName works around a bug in IE 8 with
            // disabled inputs (#7620)
            elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
        if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
            return true;
        }

        this.mouseDelayMet = !this.options.delay;
        if (!this.mouseDelayMet) {
            this._mouseDelayTimer = setTimeout(function() {
                that.mouseDelayMet = true;
            }, this.options.delay);
        }

        if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
            this._mouseStarted = (this._mouseStart(event) !== false);
            if (!this._mouseStarted) {
                event.preventDefault();
                return true;
            }
        }

        // Click event may never have fired (Gecko & Opera)
        if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
            $.removeData(event.target, this.widgetName + '.preventClickEvent');
        }

        // these delegates are required to keep context
        this._mouseMoveDelegate = function(event) {
            return that._mouseMove(event);
        };
        this._mouseUpDelegate = function(event) {
            return that._mouseUp(event);
        };
        $(document)
            .bind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
            .bind('mouseup.'+this.widgetName, this._mouseUpDelegate);

        event.preventDefault();

        mouseHandled = true;
        return true;
    },

    _mouseMove: function(event) {
        // IE mouseup check - mouseup happened when mouse was out of window
        if ($.ui.ie && !(document.documentMode >= 9) && !event.button) {
            return this._mouseUp(event);
        }

        if (this._mouseStarted) {
            this._mouseDrag(event);
            return event.preventDefault();
        }

        if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
            this._mouseStarted =
                (this._mouseStart(this._mouseDownEvent, event) !== false);
            (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
        }

        return !this._mouseStarted;
    },

    _mouseUp: function(event) {
        $(document)
            .unbind('mousemove.'+this.widgetName, this._mouseMoveDelegate)
            .unbind('mouseup.'+this.widgetName, this._mouseUpDelegate);

        if (this._mouseStarted) {
            this._mouseStarted = false;

            if (event.target === this._mouseDownEvent.target) {
                $.data(event.target, this.widgetName + '.preventClickEvent', true);
            }

            this._mouseStop(event);
        }

        return false;
    },

    _mouseDistanceMet: function(event) {
        return (Math.max(
                Math.abs(this._mouseDownEvent.pageX - event.pageX),
                Math.abs(this._mouseDownEvent.pageY - event.pageY)
            ) >= this.options.distance
        );
    },

    _mouseDelayMet: function(event) {
        return this.mouseDelayMet;
    },

    // These are placeholder methods, to be overriden by extending plugin
    _mouseStart: function(event) {},
    _mouseDrag: function(event) {},
    _mouseStop: function(event) {},
    _mouseCapture: function(event) { return true; }
});

})(jQuery);
(function( $, undefined ) {

$.ui = $.ui || {};

var cachedScrollbarWidth,
    max = Math.max,
    abs = Math.abs,
    round = Math.round,
    rhorizontal = /left|center|right/,
    rvertical = /top|center|bottom/,
    roffset = /[\+\-]\d+%?/,
    rposition = /^\w+/,
    rpercent = /%$/,
    _position = $.fn.position;

function getOffsets( offsets, width, height ) {
    return [
        parseInt( offsets[ 0 ], 10 ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
        parseInt( offsets[ 1 ], 10 ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
    ];
}
function parseCss( element, property ) {
    return parseInt( $.css( element, property ), 10 ) || 0;
}

$.position = {
    scrollbarWidth: function() {
        if ( cachedScrollbarWidth !== undefined ) {
            return cachedScrollbarWidth;
        }
        var w1, w2,
            div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
            innerDiv = div.children()[0];

        $( "body" ).append( div );
        w1 = innerDiv.offsetWidth;
        div.css( "overflow", "scroll" );

        w2 = innerDiv.offsetWidth;

        if ( w1 === w2 ) {
            w2 = div[0].clientWidth;
        }

        div.remove();

        return (cachedScrollbarWidth = w1 - w2);
    },
    getScrollInfo: function( within ) {
        var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
            overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
            hasOverflowX = overflowX === "scroll" ||
                ( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
            hasOverflowY = overflowY === "scroll" ||
                ( overflowY === "auto" && within.height < within.element[0].scrollHeight );
        return {
            width: hasOverflowX ? $.position.scrollbarWidth() : 0,
            height: hasOverflowY ? $.position.scrollbarWidth() : 0
        };
    },
    getWithinInfo: function( element ) {
        var withinElement = $( element || window ),
            isWindow = $.isWindow( withinElement[0] );
        return {
            element: withinElement,
            isWindow: isWindow,
            offset: withinElement.offset() || { left: 0, top: 0 },
            scrollLeft: withinElement.scrollLeft(),
            scrollTop: withinElement.scrollTop(),
            width: isWindow ? withinElement.width() : withinElement.outerWidth(),
            height: isWindow ? withinElement.height() : withinElement.outerHeight()
        };
    }
};

$.fn.position = function( options ) {
    if ( !options || !options.of ) {
        return _position.apply( this, arguments );
    }

    // make a copy, we don't want to modify arguments
    options = $.extend( {}, options );

    var atOffset, targetWidth, targetHeight, targetOffset, basePosition,
        target = $( options.of ),
        within = $.position.getWithinInfo( options.within ),
        scrollInfo = $.position.getScrollInfo( within ),
        targetElem = target[0],
        collision = ( options.collision || "flip" ).split( " " ),
        offsets = {};

    if ( targetElem.nodeType === 9 ) {
        targetWidth = target.width();
        targetHeight = target.height();
        targetOffset = { top: 0, left: 0 };
    } else if ( $.isWindow( targetElem ) ) {
        targetWidth = target.width();
        targetHeight = target.height();
        targetOffset = { top: target.scrollTop(), left: target.scrollLeft() };
    } else if ( targetElem.preventDefault ) {
        // force left top to allow flipping
        options.at = "left top";
        targetWidth = targetHeight = 0;
        targetOffset = { top: targetElem.pageY, left: targetElem.pageX };
    } else {
        targetWidth = target.outerWidth();
        targetHeight = target.outerHeight();
        targetOffset = target.offset();
    }
    // clone to reuse original targetOffset later
    basePosition = $.extend( {}, targetOffset );

    // force my and at to have valid horizontal and vertical positions
    // if a value is missing or invalid, it will be converted to center
    $.each( [ "my", "at" ], function() {
        var pos = ( options[ this ] || "" ).split( " " ),
            horizontalOffset,
            verticalOffset;

        if ( pos.length === 1) {
            pos = rhorizontal.test( pos[ 0 ] ) ?
                pos.concat( [ "center" ] ) :
                rvertical.test( pos[ 0 ] ) ?
                    [ "center" ].concat( pos ) :
                    [ "center", "center" ];
        }
        pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
        pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

        // calculate offsets
        horizontalOffset = roffset.exec( pos[ 0 ] );
        verticalOffset = roffset.exec( pos[ 1 ] );
        offsets[ this ] = [
            horizontalOffset ? horizontalOffset[ 0 ] : 0,
            verticalOffset ? verticalOffset[ 0 ] : 0
        ];

        // reduce to just the positions without the offsets
        options[ this ] = [
            rposition.exec( pos[ 0 ] )[ 0 ],
            rposition.exec( pos[ 1 ] )[ 0 ]
        ];
    });

    // normalize collision option
    if ( collision.length === 1 ) {
        collision[ 1 ] = collision[ 0 ];
    }

    if ( options.at[ 0 ] === "right" ) {
        basePosition.left += targetWidth;
    } else if ( options.at[ 0 ] === "center" ) {
        basePosition.left += targetWidth / 2;
    }

    if ( options.at[ 1 ] === "bottom" ) {
        basePosition.top += targetHeight;
    } else if ( options.at[ 1 ] === "center" ) {
        basePosition.top += targetHeight / 2;
    }

    atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
    basePosition.left += atOffset[ 0 ];
    basePosition.top += atOffset[ 1 ];

    return this.each(function() {
        var collisionPosition, using,
            elem = $( this ),
            elemWidth = elem.outerWidth(),
            elemHeight = elem.outerHeight(),
            marginLeft = parseCss( this, "marginLeft" ),
            marginTop = parseCss( this, "marginTop" ),
            collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
            collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
            position = $.extend( {}, basePosition ),
            myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

        if ( options.my[ 0 ] === "right" ) {
            position.left -= elemWidth;
        } else if ( options.my[ 0 ] === "center" ) {
            position.left -= elemWidth / 2;
        }

        if ( options.my[ 1 ] === "bottom" ) {
            position.top -= elemHeight;
        } else if ( options.my[ 1 ] === "center" ) {
            position.top -= elemHeight / 2;
        }

        position.left += myOffset[ 0 ];
        position.top += myOffset[ 1 ];

        // if the browser doesn't support fractions, then round for consistent results
        if ( !$.support.offsetFractions ) {
            position.left = round( position.left );
            position.top = round( position.top );
        }

        collisionPosition = {
            marginLeft: marginLeft,
            marginTop: marginTop
        };

        $.each( [ "left", "top" ], function( i, dir ) {
            if ( $.ui.position[ collision[ i ] ] ) {
                $.ui.position[ collision[ i ] ][ dir ]( position, {
                    targetWidth: targetWidth,
                    targetHeight: targetHeight,
                    elemWidth: elemWidth,
                    elemHeight: elemHeight,
                    collisionPosition: collisionPosition,
                    collisionWidth: collisionWidth,
                    collisionHeight: collisionHeight,
                    offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
                    my: options.my,
                    at: options.at,
                    within: within,
                    elem : elem
                });
            }
        });

        if ( $.fn.bgiframe ) {
            elem.bgiframe();
        }

        if ( options.using ) {
            // adds feedback as second argument to using callback, if present
            using = function( props ) {
                var left = targetOffset.left - position.left,
                    right = left + targetWidth - elemWidth,
                    top = targetOffset.top - position.top,
                    bottom = top + targetHeight - elemHeight,
                    feedback = {
                        target: {
                            element: target,
                            left: targetOffset.left,
                            top: targetOffset.top,
                            width: targetWidth,
                            height: targetHeight
                        },
                        element: {
                            element: elem,
                            left: position.left,
                            top: position.top,
                            width: elemWidth,
                            height: elemHeight
                        },
                        horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                        vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                    };
                if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
                    feedback.horizontal = "center";
                }
                if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
                    feedback.vertical = "middle";
                }
                if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
                    feedback.important = "horizontal";
                } else {
                    feedback.important = "vertical";
                }
                options.using.call( this, props, feedback );
            };
        }

        elem.offset( $.extend( position, { using: using } ) );
    });
};

$.ui.position = {
    fit: {
        left: function( position, data ) {
            var within = data.within,
                withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                outerWidth = within.width,
                collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                overLeft = withinOffset - collisionPosLeft,
                overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                newOverRight;

            // element is wider than within
            if ( data.collisionWidth > outerWidth ) {
                // element is initially over the left side of within
                if ( overLeft > 0 && overRight <= 0 ) {
                    newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                    position.left += overLeft - newOverRight;
                // element is initially over right side of within
                } else if ( overRight > 0 && overLeft <= 0 ) {
                    position.left = withinOffset;
                // element is initially over both left and right sides of within
                } else {
                    if ( overLeft > overRight ) {
                        position.left = withinOffset + outerWidth - data.collisionWidth;
                    } else {
                        position.left = withinOffset;
                    }
                }
            // too far left -> align with left edge
            } else if ( overLeft > 0 ) {
                position.left += overLeft;
            // too far right -> align with right edge
            } else if ( overRight > 0 ) {
                position.left -= overRight;
            // adjust based on position and margin
            } else {
                position.left = max( position.left - collisionPosLeft, position.left );
            }
        },
        top: function( position, data ) {
            var within = data.within,
                withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                outerHeight = data.within.height,
                collisionPosTop = position.top - data.collisionPosition.marginTop,
                overTop = withinOffset - collisionPosTop,
                overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                newOverBottom;

            // element is taller than within
            if ( data.collisionHeight > outerHeight ) {
                // element is initially over the top of within
                if ( overTop > 0 && overBottom <= 0 ) {
                    newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                    position.top += overTop - newOverBottom;
                // element is initially over bottom of within
                } else if ( overBottom > 0 && overTop <= 0 ) {
                    position.top = withinOffset;
                // element is initially over both top and bottom of within
                } else {
                    if ( overTop > overBottom ) {
                        position.top = withinOffset + outerHeight - data.collisionHeight;
                    } else {
                        position.top = withinOffset;
                    }
                }
            // too far up -> align with top
            } else if ( overTop > 0 ) {
                position.top += overTop;
            // too far down -> align with bottom edge
            } else if ( overBottom > 0 ) {
                position.top -= overBottom;
            // adjust based on position and margin
            } else {
                position.top = max( position.top - collisionPosTop, position.top );
            }
        }
    },
    flip: {
        left: function( position, data ) {
            var within = data.within,
                withinOffset = within.offset.left + within.scrollLeft,
                outerWidth = within.width,
                offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                overLeft = collisionPosLeft - offsetLeft,
                overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                myOffset = data.my[ 0 ] === "left" ?
                    -data.elemWidth :
                    data.my[ 0 ] === "right" ?
                        data.elemWidth :
                        0,
                atOffset = data.at[ 0 ] === "left" ?
                    data.targetWidth :
                    data.at[ 0 ] === "right" ?
                        -data.targetWidth :
                        0,
                offset = -2 * data.offset[ 0 ],
                newOverRight,
                newOverLeft;

            if ( overLeft < 0 ) {
                newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
                    position.left += myOffset + atOffset + offset;
                }
            }
            else if ( overRight > 0 ) {
                newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
                    position.left += myOffset + atOffset + offset;
                }
            }
        },
        top: function( position, data ) {
            var within = data.within,
                withinOffset = within.offset.top + within.scrollTop,
                outerHeight = within.height,
                offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                collisionPosTop = position.top - data.collisionPosition.marginTop,
                overTop = collisionPosTop - offsetTop,
                overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                top = data.my[ 1 ] === "top",
                myOffset = top ?
                    -data.elemHeight :
                    data.my[ 1 ] === "bottom" ?
                        data.elemHeight :
                        0,
                atOffset = data.at[ 1 ] === "top" ?
                    data.targetHeight :
                    data.at[ 1 ] === "bottom" ?
                        -data.targetHeight :
                        0,
                offset = -2 * data.offset[ 1 ],
                newOverTop,
                newOverBottom;
            if ( overTop < 0 ) {
                newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
                    position.top += myOffset + atOffset + offset;
                }
            }
            else if ( overBottom > 0 ) {
                newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
                    position.top += myOffset + atOffset + offset;
                }
            }
        }
    },
    flipfit: {
        left: function() {
            $.ui.position.flip.left.apply( this, arguments );
            $.ui.position.fit.left.apply( this, arguments );
        },
        top: function() {
            $.ui.position.flip.top.apply( this, arguments );
            $.ui.position.fit.top.apply( this, arguments );
        }
    }
};

// fraction support test
(function () {
    var testElement, testElementParent, testElementStyle, offsetLeft, i,
        body = document.getElementsByTagName( "body" )[ 0 ],
        div = document.createElement( "div" );

    //Create a "fake body" for testing based on method used in jQuery.support
    testElement = document.createElement( body ? "div" : "body" );
    testElementStyle = {
        visibility: "hidden",
        width: 0,
        height: 0,
        border: 0,
        margin: 0,
        background: "none"
    };
    if ( body ) {
        $.extend( testElementStyle, {
            position: "absolute",
            left: "-1000px",
            top: "-1000px"
        });
    }
    for ( i in testElementStyle ) {
        testElement.style[ i ] = testElementStyle[ i ];
    }
    testElement.appendChild( div );
    testElementParent = body || document.documentElement;
    testElementParent.insertBefore( testElement, testElementParent.firstChild );

    div.style.cssText = "position: absolute; left: 10.7432222px;";

    offsetLeft = $( div ).offset().left;
    $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

    testElement.innerHTML = "";
    testElementParent.removeChild( testElement );
})();

// DEPRECATED
if ( $.uiBackCompat !== false ) {
    // offset option
    (function( $ ) {
        var _position = $.fn.position;
        $.fn.position = function( options ) {
            if ( !options || !options.offset ) {
                return _position.call( this, options );
            }
            var offset = options.offset.split( " " ),
                at = options.at.split( " " );
            if ( offset.length === 1 ) {
                offset[ 1 ] = offset[ 0 ];
            }
            if ( /^\d/.test( offset[ 0 ] ) ) {
                offset[ 0 ] = "+" + offset[ 0 ];
            }
            if ( /^\d/.test( offset[ 1 ] ) ) {
                offset[ 1 ] = "+" + offset[ 1 ];
            }
            if ( at.length === 1 ) {
                if ( /left|center|right/.test( at[ 0 ] ) ) {
                    at[ 1 ] = "center";
                } else {
                    at[ 1 ] = at[ 0 ];
                    at[ 0 ] = "center";
                }
            }
            return _position.call( this, $.extend( options, {
                at: at[ 0 ] + offset[ 0 ] + " " + at[ 1 ] + offset[ 1 ],
                offset: undefined
            } ) );
        };
    }( jQuery ) );
}

}( jQuery ) );
(function( $, undefined ) {

var uid = 0,
    hideProps = {},
    showProps = {};

hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =
    hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
showProps.height = showProps.paddingTop = showProps.paddingBottom =
    showProps.borderTopWidth = showProps.borderBottomWidth = "show";

$.widget( "ui.accordion", {
    version: "1.9.2",
    options: {
        active: 0,
        animate: {},
        collapsible: false,
        event: "click",
        header: "> li > :first-child,> :not(li):even",
        heightStyle: "auto",
        icons: {
            activeHeader: "ui-icon-triangle-1-s",
            header: "ui-icon-triangle-1-e"
        },

        // callbacks
        activate: null,
        beforeActivate: null
    },

    _create: function() {
        var accordionId = this.accordionId = "ui-accordion-" +
                (this.element.attr( "id" ) || ++uid),
            options = this.options;

        this.prevShow = this.prevHide = $();
        this.element.addClass( "ui-accordion ui-widget ui-helper-reset" );

        this.headers = this.element.find( options.header )
            .addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" );
        this._hoverable( this.headers );
        this._focusable( this.headers );

        this.headers.next()
            .addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
            .hide();

        // don't allow collapsible: false and active: false / null
        if ( !options.collapsible && (options.active === false || options.active == null) ) {
            options.active = 0;
        }
        // handle negative values
        if ( options.active < 0 ) {
            options.active += this.headers.length;
        }
        this.active = this._findActive( options.active )
            .addClass( "ui-accordion-header-active ui-state-active" )
            .toggleClass( "ui-corner-all ui-corner-top" );
        this.active.next()
            .addClass( "ui-accordion-content-active" )
            .show();

        this._createIcons();
        this.refresh();

        // ARIA
        this.element.attr( "role", "tablist" );

        this.headers
            .attr( "role", "tab" )
            .each(function( i ) {
                var header = $( this ),
                    headerId = header.attr( "id" ),
                    panel = header.next(),
                    panelId = panel.attr( "id" );
                if ( !headerId ) {
                    headerId = accordionId + "-header-" + i;
                    header.attr( "id", headerId );
                }
                if ( !panelId ) {
                    panelId = accordionId + "-panel-" + i;
                    panel.attr( "id", panelId );
                }
                header.attr( "aria-controls", panelId );
                panel.attr( "aria-labelledby", headerId );
            })
            .next()
                .attr( "role", "tabpanel" );

        this.headers
            .not( this.active )
            .attr({
                "aria-selected": "false",
                tabIndex: -1
            })
            .next()
                .attr({
                    "aria-expanded": "false",
                    "aria-hidden": "true"
                })
                .hide();

        // make sure at least one header is in the tab order
        if ( !this.active.length ) {
            this.headers.eq( 0 ).attr( "tabIndex", 0 );
        } else {
            this.active.attr({
                "aria-selected": "true",
                tabIndex: 0
            })
            .next()
                .attr({
                    "aria-expanded": "true",
                    "aria-hidden": "false"
                });
        }

        this._on( this.headers, { keydown: "_keydown" });
        this._on( this.headers.next(), { keydown: "_panelKeyDown" });
        this._setupEvents( options.event );
    },

    _getCreateEventData: function() {
        return {
            header: this.active,
            content: !this.active.length ? $() : this.active.next()
        };
    },

    _createIcons: function() {
        var icons = this.options.icons;
        if ( icons ) {
            $( "<span>" )
                .addClass( "ui-accordion-header-icon ui-icon " + icons.header )
                .prependTo( this.headers );
            this.active.children( ".ui-accordion-header-icon" )
                .removeClass( icons.header )
                .addClass( icons.activeHeader );
            this.headers.addClass( "ui-accordion-icons" );
        }
    },

    _destroyIcons: function() {
        this.headers
            .removeClass( "ui-accordion-icons" )
            .children( ".ui-accordion-header-icon" )
                .remove();
    },

    _destroy: function() {
        var contents;

        // clean up main element
        this.element
            .removeClass( "ui-accordion ui-widget ui-helper-reset" )
            .removeAttr( "role" );

        // clean up headers
        this.headers
            .removeClass( "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
            .removeAttr( "role" )
            .removeAttr( "aria-selected" )
            .removeAttr( "aria-controls" )
            .removeAttr( "tabIndex" )
            .each(function() {
                if ( /^ui-accordion/.test( this.id ) ) {
                    this.removeAttribute( "id" );
                }
            });
        this._destroyIcons();

        // clean up content panels
        contents = this.headers.next()
            .css( "display", "" )
            .removeAttr( "role" )
            .removeAttr( "aria-expanded" )
            .removeAttr( "aria-hidden" )
            .removeAttr( "aria-labelledby" )
            .removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled" )
            .each(function() {
                if ( /^ui-accordion/.test( this.id ) ) {
                    this.removeAttribute( "id" );
                }
            });
        if ( this.options.heightStyle !== "content" ) {
            contents.css( "height", "" );
        }
    },

    _setOption: function( key, value ) {
        if ( key === "active" ) {
            // _activate() will handle invalid values and update this.options
            this._activate( value );
            return;
        }

        if ( key === "event" ) {
            if ( this.options.event ) {
                this._off( this.headers, this.options.event );
            }
            this._setupEvents( value );
        }

        this._super( key, value );

        // setting collapsible: false while collapsed; open first panel
        if ( key === "collapsible" && !value && this.options.active === false ) {
            this._activate( 0 );
        }

        if ( key === "icons" ) {
            this._destroyIcons();
            if ( value ) {
                this._createIcons();
            }
        }

        // #5332 - opacity doesn't cascade to positioned elements in IE
        // so we need to add the disabled class to the headers and panels
        if ( key === "disabled" ) {
            this.headers.add( this.headers.next() )
                .toggleClass( "ui-state-disabled", !!value );
        }
    },

    _keydown: function( event ) {
        if ( event.altKey || event.ctrlKey ) {
            return;
        }

        var keyCode = $.ui.keyCode,
            length = this.headers.length,
            currentIndex = this.headers.index( event.target ),
            toFocus = false;

        switch ( event.keyCode ) {
            case keyCode.RIGHT:
            case keyCode.DOWN:
                toFocus = this.headers[ ( currentIndex + 1 ) % length ];
                break;
            case keyCode.LEFT:
            case keyCode.UP:
                toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
                break;
            case keyCode.SPACE:
            case keyCode.ENTER:
                this._eventHandler( event );
                break;
            case keyCode.HOME:
                toFocus = this.headers[ 0 ];
                break;
            case keyCode.END:
                toFocus = this.headers[ length - 1 ];
                break;
        }

        if ( toFocus ) {
            $( event.target ).attr( "tabIndex", -1 );
            $( toFocus ).attr( "tabIndex", 0 );
            toFocus.focus();
            event.preventDefault();
        }
    },

    _panelKeyDown : function( event ) {
        if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
            $( event.currentTarget ).prev().focus();
        }
    },

    refresh: function() {
        var maxHeight, overflow,
            heightStyle = this.options.heightStyle,
            parent = this.element.parent();


        if ( heightStyle === "fill" ) {
            // IE 6 treats height like minHeight, so we need to turn off overflow
            // in order to get a reliable height
            // we use the minHeight support test because we assume that only
            // browsers that don't support minHeight will treat height as minHeight
            if ( !$.support.minHeight ) {
                overflow = parent.css( "overflow" );
                parent.css( "overflow", "hidden");
            }
            maxHeight = parent.height();
            this.element.siblings( ":visible" ).each(function() {
                var elem = $( this ),
                    position = elem.css( "position" );

                if ( position === "absolute" || position === "fixed" ) {
                    return;
                }
                maxHeight -= elem.outerHeight( true );
            });
            if ( overflow ) {
                parent.css( "overflow", overflow );
            }

            this.headers.each(function() {
                maxHeight -= $( this ).outerHeight( true );
            });

            this.headers.next()
                .each(function() {
                    $( this ).height( Math.max( 0, maxHeight -
                        $( this ).innerHeight() + $( this ).height() ) );
                })
                .css( "overflow", "auto" );
        } else if ( heightStyle === "auto" ) {
            maxHeight = 0;
            this.headers.next()
                .each(function() {
                    maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
                })
                .height( maxHeight );
        }
    },

    _activate: function( index ) {
        var active = this._findActive( index )[ 0 ];

        // trying to activate the already active panel
        if ( active === this.active[ 0 ] ) {
            return;
        }

        // trying to collapse, simulate a click on the currently active header
        active = active || this.active[ 0 ];

        this._eventHandler({
            target: active,
            currentTarget: active,
            preventDefault: $.noop
        });
    },

    _findActive: function( selector ) {
        return typeof selector === "number" ? this.headers.eq( selector ) : $();
    },

    _setupEvents: function( event ) {
        var events = {};
        if ( !event ) {
            return;
        }
        $.each( event.split(" "), function( index, eventName ) {
            events[ eventName ] = "_eventHandler";
        });
        this._on( this.headers, events );
    },

    _eventHandler: function( event ) {
        var options = this.options,
            active = this.active,
            clicked = $( event.currentTarget ),
            clickedIsActive = clicked[ 0 ] === active[ 0 ],
            collapsing = clickedIsActive && options.collapsible,
            toShow = collapsing ? $() : clicked.next(),
            toHide = active.next(),
            eventData = {
                oldHeader: active,
                oldPanel: toHide,
                newHeader: collapsing ? $() : clicked,
                newPanel: toShow
            };

        event.preventDefault();

        if (
                // click on active header, but not collapsible
                ( clickedIsActive && !options.collapsible ) ||
                // allow canceling activation
                ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
            return;
        }

        options.active = collapsing ? false : this.headers.index( clicked );

        // when the call to ._toggle() comes after the class changes
        // it causes a very odd bug in IE 8 (see #6720)
        this.active = clickedIsActive ? $() : clicked;
        this._toggle( eventData );

        // switch classes
        // corner classes on the previously active header stay after the animation
        active.removeClass( "ui-accordion-header-active ui-state-active" );
        if ( options.icons ) {
            active.children( ".ui-accordion-header-icon" )
                .removeClass( options.icons.activeHeader )
                .addClass( options.icons.header );
        }

        if ( !clickedIsActive ) {
            clicked
                .removeClass( "ui-corner-all" )
                .addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
            if ( options.icons ) {
                clicked.children( ".ui-accordion-header-icon" )
                    .removeClass( options.icons.header )
                    .addClass( options.icons.activeHeader );
            }

            clicked
                .next()
                .addClass( "ui-accordion-content-active" );
        }
    },

    _toggle: function( data ) {
        var toShow = data.newPanel,
            toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

        // handle activating a panel during the animation for another activation
        this.prevShow.add( this.prevHide ).stop( true, true );
        this.prevShow = toShow;
        this.prevHide = toHide;

        if ( this.options.animate ) {
            this._animate( toShow, toHide, data );
        } else {
            toHide.hide();
            toShow.show();
            this._toggleComplete( data );
        }

        toHide.attr({
            "aria-expanded": "false",
            "aria-hidden": "true"
        });
        toHide.prev().attr( "aria-selected", "false" );
        // if we're switching panels, remove the old header from the tab order
        // if we're opening from collapsed state, remove the previous header from the tab order
        // if we're collapsing, then keep the collapsing header in the tab order
        if ( toShow.length && toHide.length ) {
            toHide.prev().attr( "tabIndex", -1 );
        } else if ( toShow.length ) {
            this.headers.filter(function() {
                return $( this ).attr( "tabIndex" ) === 0;
            })
            .attr( "tabIndex", -1 );
        }

        toShow
            .attr({
                "aria-expanded": "true",
                "aria-hidden": "false"
            })
            .prev()
                .attr({
                    "aria-selected": "true",
                    tabIndex: 0
                });
    },

    _animate: function( toShow, toHide, data ) {
        var total, easing, duration,
            that = this,
            adjust = 0,
            down = toShow.length &&
                ( !toHide.length || ( toShow.index() < toHide.index() ) ),
            animate = this.options.animate || {},
            options = down && animate.down || animate,
            complete = function() {
                that._toggleComplete( data );
            };

        if ( typeof options === "number" ) {
            duration = options;
        }
        if ( typeof options === "string" ) {
            easing = options;
        }
        // fall back from options to animation in case of partial down settings
        easing = easing || options.easing || animate.easing;
        duration = duration || options.duration || animate.duration;

        if ( !toHide.length ) {
            return toShow.animate( showProps, duration, easing, complete );
        }
        if ( !toShow.length ) {
            return toHide.animate( hideProps, duration, easing, complete );
        }

        total = toShow.show().outerHeight();
        toHide.animate( hideProps, {
            duration: duration,
            easing: easing,
            step: function( now, fx ) {
                fx.now = Math.round( now );
            }
        });
        toShow
            .hide()
            .animate( showProps, {
                duration: duration,
                easing: easing,
                complete: complete,
                step: function( now, fx ) {
                    fx.now = Math.round( now );
                    if ( fx.prop !== "height" ) {
                        adjust += fx.now;
                    } else if ( that.options.heightStyle !== "content" ) {
                        fx.now = Math.round( total - toHide.outerHeight() - adjust );
                        adjust = 0;
                    }
                }
            });
    },

    _toggleComplete: function( data ) {
        var toHide = data.oldPanel;

        toHide
            .removeClass( "ui-accordion-content-active" )
            .prev()
                .removeClass( "ui-corner-top" )
                .addClass( "ui-corner-all" );

        // Work around for rendering bug in IE (#5421)
        if ( toHide.length ) {
            toHide.parent()[0].className = toHide.parent()[0].className;
        }

        this._trigger( "activate", null, data );
    }
});



// DEPRECATED
if ( $.uiBackCompat !== false ) {
    // navigation options
    (function( $, prototype ) {
        $.extend( prototype.options, {
            navigation: false,
            navigationFilter: function() {
                return this.href.toLowerCase() === location.href.toLowerCase();
            }
        });

        var _create = prototype._create;
        prototype._create = function() {
            if ( this.options.navigation ) {
                var that = this,
                    headers = this.element.find( this.options.header ),
                    content = headers.next(),
                    current = headers.add( content )
                        .find( "a" )
                        .filter( this.options.navigationFilter )
                        [ 0 ];
                if ( current ) {
                    headers.add( content ).each( function( index ) {
                        if ( $.contains( this, current ) ) {
                            that.options.active = Math.floor( index / 2 );
                            return false;
                        }
                    });
                }
            }
            _create.call( this );
        };
    }( jQuery, jQuery.ui.accordion.prototype ) );

    // height options
    (function( $, prototype ) {
        $.extend( prototype.options, {
            heightStyle: null, // remove default so we fall back to old values
            autoHeight: true, // use heightStyle: "auto"
            clearStyle: false, // use heightStyle: "content"
            fillSpace: false // use heightStyle: "fill"
        });

        var _create = prototype._create,
            _setOption = prototype._setOption;

        $.extend( prototype, {
            _create: function() {
                this.options.heightStyle = this.options.heightStyle ||
                    this._mergeHeightStyle();

                _create.call( this );
            },

            _setOption: function( key ) {
                if ( key === "autoHeight" || key === "clearStyle" || key === "fillSpace" ) {
                    this.options.heightStyle = this._mergeHeightStyle();
                }
                _setOption.apply( this, arguments );
            },

            _mergeHeightStyle: function() {
                var options = this.options;

                if ( options.fillSpace ) {
                    return "fill";
                }

                if ( options.clearStyle ) {
                    return "content";
                }

                if ( options.autoHeight ) {
                    return "auto";
                }
            }
        });
    }( jQuery, jQuery.ui.accordion.prototype ) );

    // icon options
    (function( $, prototype ) {
        $.extend( prototype.options.icons, {
            activeHeader: null, // remove default so we fall back to old values
            headerSelected: "ui-icon-triangle-1-s"
        });

        var _createIcons = prototype._createIcons;
        prototype._createIcons = function() {
            if ( this.options.icons ) {
                this.options.icons.activeHeader = this.options.icons.activeHeader ||
                    this.options.icons.headerSelected;
            }
            _createIcons.call( this );
        };
    }( jQuery, jQuery.ui.accordion.prototype ) );

    // expanded active option, activate method
    (function( $, prototype ) {
        prototype.activate = prototype._activate;

        var _findActive = prototype._findActive;
        prototype._findActive = function( index ) {
            if ( index === -1 ) {
                index = false;
            }
            if ( index && typeof index !== "number" ) {
                index = this.headers.index( this.headers.filter( index ) );
                if ( index === -1 ) {
                    index = false;
                }
            }
            return _findActive.call( this, index );
        };
    }( jQuery, jQuery.ui.accordion.prototype ) );

    // resize method
    jQuery.ui.accordion.prototype.resize = jQuery.ui.accordion.prototype.refresh;

    // change events
    (function( $, prototype ) {
        $.extend( prototype.options, {
            change: null,
            changestart: null
        });

        var _trigger = prototype._trigger;
        prototype._trigger = function( type, event, data ) {
            var ret = _trigger.apply( this, arguments );
            if ( !ret ) {
                return false;
            }

            if ( type === "beforeActivate" ) {
                ret = _trigger.call( this, "changestart", event, {
                    oldHeader: data.oldHeader,
                    oldContent: data.oldPanel,
                    newHeader: data.newHeader,
                    newContent: data.newPanel
                });
            } else if ( type === "activate" ) {
                ret = _trigger.call( this, "change", event, {
                    oldHeader: data.oldHeader,
                    oldContent: data.oldPanel,
                    newHeader: data.newHeader,
                    newContent: data.newPanel
                });
            }
            return ret;
        };
    }( jQuery, jQuery.ui.accordion.prototype ) );

    // animated option
    // NOTE: this only provides support for "slide", "bounceslide", and easings
    // not the full $.ui.accordion.animations API
    (function( $, prototype ) {
        $.extend( prototype.options, {
            animate: null,
            animated: "slide"
        });

        var _create = prototype._create;
        prototype._create = function() {
            var options = this.options;
            if ( options.animate === null ) {
                if ( !options.animated ) {
                    options.animate = false;
                } else if ( options.animated === "slide" ) {
                    options.animate = 300;
                } else if ( options.animated === "bounceslide" ) {
                    options.animate = {
                        duration: 200,
                        down: {
                            easing: "easeOutBounce",
                            duration: 1000
                        }
                    };
                } else {
                    options.animate = options.animated;
                }
            }

            _create.call( this );
        };
    }( jQuery, jQuery.ui.accordion.prototype ) );
}

})( jQuery );
(function( $, undefined ) {

// used to prevent race conditions with remote data sources
var requestIndex = 0;

$.widget( "ui.autocomplete", {
    version: "1.9.2",
    defaultElement: "<input>",
    options: {
        appendTo: "body",
        autoFocus: false,
        delay: 300,
        minLength: 1,
        position: {
            my: "left top",
            at: "left bottom",
            collision: "none"
        },
        source: null,

        // callbacks
        change: null,
        close: null,
        focus: null,
        open: null,
        response: null,
        search: null,
        select: null
    },

    pending: 0,

    _create: function() {
        // Some browsers only repeat keydown events, not keypress events,
        // so we use the suppressKeyPress flag to determine if we've already
        // handled the keydown event. #7269
        // Unfortunately the code for & in keypress is the same as the up arrow,
        // so we use the suppressKeyPressRepeat flag to avoid handling keypress
        // events when we know the keydown event was used to modify the
        // search term. #7799
        var suppressKeyPress, suppressKeyPressRepeat, suppressInput;

        this.isMultiLine = this._isMultiLine();
        this.valueMethod = this.element[ this.element.is( "input,textarea" ) ? "val" : "text" ];
        this.isNewMenu = true;

        this.element
            .addClass( "ui-autocomplete-input" )
            .attr( "autocomplete", "off" );

        this._on( this.element, {
            keydown: function( event ) {
                if ( this.element.prop( "readOnly" ) ) {
                    suppressKeyPress = true;
                    suppressInput = true;
                    suppressKeyPressRepeat = true;
                    return;
                }

                suppressKeyPress = false;
                suppressInput = false;
                suppressKeyPressRepeat = false;
                var keyCode = $.ui.keyCode;
                switch( event.keyCode ) {
                case keyCode.PAGE_UP:
                    suppressKeyPress = true;
                    this._move( "previousPage", event );
                    break;
                case keyCode.PAGE_DOWN:
                    suppressKeyPress = true;
                    this._move( "nextPage", event );
                    break;
                case keyCode.UP:
                    suppressKeyPress = true;
                    this._keyEvent( "previous", event );
                    break;
                case keyCode.DOWN:
                    suppressKeyPress = true;
                    this._keyEvent( "next", event );
                    break;
                case keyCode.ENTER:
                case keyCode.NUMPAD_ENTER:
                    // when menu is open and has focus
                    if ( this.menu.active ) {
                        // #6055 - Opera still allows the keypress to occur
                        // which causes forms to submit
                        suppressKeyPress = true;
                        event.preventDefault();
                        this.menu.select( event );
                    }
                    break;
                case keyCode.TAB:
                    if ( this.menu.active ) {
                        this.menu.select( event );
                    }
                    break;
                case keyCode.ESCAPE:
                    if ( this.menu.element.is( ":visible" ) ) {
                        this._value( this.term );
                        this.close( event );
                        // Different browsers have different default behavior for escape
                        // Single press can mean undo or clear
                        // Double press in IE means clear the whole form
                        event.preventDefault();
                    }
                    break;
                default:
                    suppressKeyPressRepeat = true;
                    // search timeout should be triggered before the input value is changed
                    this._searchTimeout( event );
                    break;
                }
            },
            keypress: function( event ) {
                if ( suppressKeyPress ) {
                    suppressKeyPress = false;
                    event.preventDefault();
                    return;
                }
                if ( suppressKeyPressRepeat ) {
                    return;
                }

                // replicate some key handlers to allow them to repeat in Firefox and Opera
                var keyCode = $.ui.keyCode;
                switch( event.keyCode ) {
                case keyCode.PAGE_UP:
                    this._move( "previousPage", event );
                    break;
                case keyCode.PAGE_DOWN:
                    this._move( "nextPage", event );
                    break;
                case keyCode.UP:
                    this._keyEvent( "previous", event );
                    break;
                case keyCode.DOWN:
                    this._keyEvent( "next", event );
                    break;
                }
            },
            input: function( event ) {
                if ( suppressInput ) {
                    suppressInput = false;
                    event.preventDefault();
                    return;
                }
                this._searchTimeout( event );
            },
            focus: function() {
                this.selectedItem = null;
                this.previous = this._value();
            },
            blur: function( event ) {
                if ( this.cancelBlur ) {
                    delete this.cancelBlur;
                    return;
                }

                clearTimeout( this.searching );
                this.close( event );
                this._change( event );
            }
        });

        this._initSource();
        this.menu = $( "<ul>" )
            .addClass( "ui-autocomplete" )
            .appendTo( this.document.find( this.options.appendTo || "body" )[ 0 ] )
            .menu({
                // custom key handling for now
                input: $(),
                // disable ARIA support, the live region takes care of that
                role: null
            })
            .zIndex( this.element.zIndex() + 1 )
            .hide()
            .data( "menu" );

        this._on( this.menu.element, {
            mousedown: function( event ) {
                // prevent moving focus out of the text field
                event.preventDefault();

                // IE doesn't prevent moving focus even with event.preventDefault()
                // so we set a flag to know when we should ignore the blur event
                this.cancelBlur = true;
                this._delay(function() {
                    delete this.cancelBlur;
                });

                // clicking on the scrollbar causes focus to shift to the body
                // but we can't detect a mouseup or a click immediately afterward
                // so we have to track the next mousedown and close the menu if
                // the user clicks somewhere outside of the autocomplete
                var menuElement = this.menu.element[ 0 ];
                if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
                    this._delay(function() {
                        var that = this;
                        this.document.one( "mousedown", function( event ) {
                            if ( event.target !== that.element[ 0 ] &&
                                    event.target !== menuElement &&
                                    !$.contains( menuElement, event.target ) ) {
                                that.close();
                            }
                        });
                    });
                }
            },
            menufocus: function( event, ui ) {
                // #7024 - Prevent accidental activation of menu items in Firefox
                if ( this.isNewMenu ) {
                    this.isNewMenu = false;
                    if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
                        this.menu.blur();

                        this.document.one( "mousemove", function() {
                            $( event.target ).trigger( event.originalEvent );
                        });

                        return;
                    }
                }

                // back compat for _renderItem using item.autocomplete, via #7810
                // TODO remove the fallback, see #8156
                var item = ui.item.data( "ui-autocomplete-item" ) || ui.item.data( "item.autocomplete" );
                if ( false !== this._trigger( "focus", event, { item: item } ) ) {
                    // use value to match what will end up in the input, if it was a key event
                    if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
                        this._value( item.value );
                    }
                } else {
                    // Normally the input is populated with the item's value as the
                    // menu is navigated, causing screen readers to notice a change and
                    // announce the item. Since the focus event was canceled, this doesn't
                    // happen, so we update the live region so that screen readers can
                    // still notice the change and announce it.
                    this.liveRegion.text( item.value );
                }
            },
            menuselect: function( event, ui ) {
                // back compat for _renderItem using item.autocomplete, via #7810
                // TODO remove the fallback, see #8156
                var item = ui.item.data( "ui-autocomplete-item" ) || ui.item.data( "item.autocomplete" ),
                    previous = this.previous;

                // only trigger when focus was lost (click on menu)
                if ( this.element[0] !== this.document[0].activeElement ) {
                    this.element.focus();
                    this.previous = previous;
                    // #6109 - IE triggers two focus events and the second
                    // is asynchronous, so we need to reset the previous
                    // term synchronously and asynchronously :-(
                    this._delay(function() {
                        this.previous = previous;
                        this.selectedItem = item;
                    });
                }

                if ( false !== this._trigger( "select", event, { item: item } ) ) {
                    this._value( item.value );
                }
                // reset the term after the select event
                // this allows custom select handling to work properly
                this.term = this._value();

                this.close( event );
                this.selectedItem = item;
            }
        });

        this.liveRegion = $( "<span>", {
                role: "status",
                "aria-live": "polite"
            })
            .addClass( "ui-helper-hidden-accessible" )
            .insertAfter( this.element );

        if ( $.fn.bgiframe ) {
            this.menu.element.bgiframe();
        }

        // turning off autocomplete prevents the browser from remembering the
        // value when navigating through history, so we re-enable autocomplete
        // if the page is unloaded before the widget is destroyed. #7790
        this._on( this.window, {
            beforeunload: function() {
                this.element.removeAttr( "autocomplete" );
            }
        });
    },

    _destroy: function() {
        clearTimeout( this.searching );
        this.element
            .removeClass( "ui-autocomplete-input" )
            .removeAttr( "autocomplete" );
        this.menu.element.remove();
        this.liveRegion.remove();
    },

    _setOption: function( key, value ) {
        this._super( key, value );
        if ( key === "source" ) {
            this._initSource();
        }
        if ( key === "appendTo" ) {
            this.menu.element.appendTo( this.document.find( value || "body" )[0] );
        }
        if ( key === "disabled" && value && this.xhr ) {
            this.xhr.abort();
        }
    },

    _isMultiLine: function() {
        // Textareas are always multi-line
        if ( this.element.is( "textarea" ) ) {
            return true;
        }
        // Inputs are always single-line, even if inside a contentEditable element
        // IE also treats inputs as contentEditable
        if ( this.element.is( "input" ) ) {
            return false;
        }
        // All other element types are determined by whether or not they're contentEditable
        return this.element.prop( "isContentEditable" );
    },

    _initSource: function() {
        var array, url,
            that = this;
        if ( $.isArray(this.options.source) ) {
            array = this.options.source;
            this.source = function( request, response ) {
                response( $.ui.autocomplete.filter( array, request.term ) );
            };
        } else if ( typeof this.options.source === "string" ) {
            url = this.options.source;
            this.source = function( request, response ) {
                if ( that.xhr ) {
                    that.xhr.abort();
                }
                that.xhr = $.ajax({
                    url: url,
                    data: request,
                    dataType: "json",
                    success: function( data ) {
                        response( data );
                    },
                    error: function() {
                        response( [] );
                    }
                });
            };
        } else {
            this.source = this.options.source;
        }
    },

    _searchTimeout: function( event ) {
        clearTimeout( this.searching );
        this.searching = this._delay(function() {
            // only search if the value has changed
            if ( this.term !== this._value() ) {
                this.selectedItem = null;
                this.search( null, event );
            }
        }, this.options.delay );
    },

    search: function( value, event ) {
        value = value != null ? value : this._value();

        // always save the actual value, not the one passed as an argument
        this.term = this._value();

        if ( value.length < this.options.minLength ) {
            return this.close( event );
        }

        if ( this._trigger( "search", event ) === false ) {
            return;
        }

        return this._search( value );
    },

    _search: function( value ) {
        this.pending++;
        this.element.addClass( "ui-autocomplete-loading" );
        this.cancelSearch = false;

        this.source( { term: value }, this._response() );
    },

    _response: function() {
        var that = this,
            index = ++requestIndex;

        return function( content ) {
            if ( index === requestIndex ) {
                that.__response( content );
            }

            that.pending--;
            if ( !that.pending ) {
                that.element.removeClass( "ui-autocomplete-loading" );
            }
        };
    },

    __response: function( content ) {
        if ( content ) {
            content = this._normalize( content );
        }
        this._trigger( "response", null, { content: content } );
        if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
            this._suggest( content );
            this._trigger( "open" );
        } else {
            // use ._close() instead of .close() so we don't cancel future searches
            this._close();
        }
    },

    close: function( event ) {
        this.cancelSearch = true;
        this._close( event );
    },

    _close: function( event ) {
        if ( this.menu.element.is( ":visible" ) ) {
            this.menu.element.hide();
            this.menu.blur();
            this.isNewMenu = true;
            this._trigger( "close", event );
        }
    },

    _change: function( event ) {
        if ( this.previous !== this._value() ) {
            this._trigger( "change", event, { item: this.selectedItem } );
        }
    },

    _normalize: function( items ) {
        // assume all items have the right format when the first item is complete
        if ( items.length && items[0].label && items[0].value ) {
            return items;
        }
        return $.map( items, function( item ) {
            if ( typeof item === "string" ) {
                return {
                    label: item,
                    value: item
                };
            }
            return $.extend({
                label: item.label || item.value,
                value: item.value || item.label
            }, item );
        });
    },

    _suggest: function( items ) {
        var ul = this.menu.element
            .empty()
            .zIndex( this.element.zIndex() + 1 );
        this._renderMenu( ul, items );
        this.menu.refresh();

        // size and position menu
        ul.show();
        this._resizeMenu();
        ul.position( $.extend({
            of: this.element
        }, this.options.position ));

        if ( this.options.autoFocus ) {
            this.menu.next();
        }
    },

    _resizeMenu: function() {
        var ul = this.menu.element;
        ul.outerWidth( Math.max(
            // Firefox wraps long text (possibly a rounding bug)
            // so we add 1px to avoid the wrapping (#7513)
            ul.width( "" ).outerWidth() + 1,
            this.element.outerWidth()
        ) );
    },

    _renderMenu: function( ul, items ) {
        var that = this;
        $.each( items, function( index, item ) {
            that._renderItemData( ul, item );
        });
    },

    _renderItemData: function( ul, item ) {
        return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
    },

    _renderItem: function( ul, item ) {
        return $( "<li>" )
            .append( $( "<a>" ).text( item.label ) )
            .appendTo( ul );
    },

    _move: function( direction, event ) {
        if ( !this.menu.element.is( ":visible" ) ) {
            this.search( null, event );
            return;
        }
        if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
                this.menu.isLastItem() && /^next/.test( direction ) ) {
            this._value( this.term );
            this.menu.blur();
            return;
        }
        this.menu[ direction ]( event );
    },

    widget: function() {
        return this.menu.element;
    },

    _value: function() {
        return this.valueMethod.apply( this.element, arguments );
    },

    _keyEvent: function( keyEvent, event ) {
        if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
            this._move( keyEvent, event );

            // prevents moving cursor to beginning/end of the text field in some browsers
            event.preventDefault();
        }
    }
});

$.extend( $.ui.autocomplete, {
    escapeRegex: function( value ) {
        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    },
    filter: function(array, term) {
        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
        return $.grep( array, function(value) {
            return matcher.test( value.label || value.value || value );
        });
    }
});


// live region extension, adding a `messages` option
// NOTE: This is an experimental API. We are still investigating
// a full solution for string manipulation and internationalization.
$.widget( "ui.autocomplete", $.ui.autocomplete, {
    options: {
        messages: {
            noResults: "No search results.",
            results: function( amount ) {
                return amount + ( amount > 1 ? " results are" : " result is" ) +
                    " available, use up and down arrow keys to navigate.";
            }
        }
    },

    __response: function( content ) {
        var message;
        this._superApply( arguments );
        if ( this.options.disabled || this.cancelSearch ) {
            return;
        }
        if ( content && content.length ) {
            message = this.options.messages.results( content.length );
        } else {
            message = this.options.messages.noResults;
        }
        this.liveRegion.text( message );
    }
});


}( jQuery ));
(function( $, undefined ) {

var lastActive, startXPos, startYPos, clickDragged,
    baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
    stateClasses = "ui-state-hover ui-state-active ",
    typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
    formResetHandler = function() {
        var buttons = $( this ).find( ":ui-button" );
        setTimeout(function() {
            buttons.button( "refresh" );
        }, 1 );
    },
    radioGroup = function( radio ) {
        var name = radio.name,
            form = radio.form,
            radios = $( [] );
        if ( name ) {
            if ( form ) {
                radios = $( form ).find( "[name='" + name + "']" );
            } else {
                radios = $( "[name='" + name + "']", radio.ownerDocument )
                    .filter(function() {
                        return !this.form;
                    });
            }
        }
        return radios;
    };

$.widget( "ui.button", {
    version: "1.9.2",
    defaultElement: "<button>",
    options: {
        disabled: null,
        text: true,
        label: null,
        icons: {
            primary: null,
            secondary: null
        }
    },
    _create: function() {
        this.element.closest( "form" )
            .unbind( "reset" + this.eventNamespace )
            .bind( "reset" + this.eventNamespace, formResetHandler );

        if ( typeof this.options.disabled !== "boolean" ) {
            this.options.disabled = !!this.element.prop( "disabled" );
        } else {
            this.element.prop( "disabled", this.options.disabled );
        }

        this._determineButtonType();
        this.hasTitle = !!this.buttonElement.attr( "title" );

        var that = this,
            options = this.options,
            toggleButton = this.type === "checkbox" || this.type === "radio",
            activeClass = !toggleButton ? "ui-state-active" : "",
            focusClass = "ui-state-focus";

        if ( options.label === null ) {
            options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
        }

        this._hoverable( this.buttonElement );

        this.buttonElement
            .addClass( baseClasses )
            .attr( "role", "button" )
            .bind( "mouseenter" + this.eventNamespace, function() {
                if ( options.disabled ) {
                    return;
                }
                if ( this === lastActive ) {
                    $( this ).addClass( "ui-state-active" );
                }
            })
            .bind( "mouseleave" + this.eventNamespace, function() {
                if ( options.disabled ) {
                    return;
                }
                $( this ).removeClass( activeClass );
            })
            .bind( "click" + this.eventNamespace, function( event ) {
                if ( options.disabled ) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });

        this.element
            .bind( "focus" + this.eventNamespace, function() {
                // no need to check disabled, focus won't be triggered anyway
                that.buttonElement.addClass( focusClass );
            })
            .bind( "blur" + this.eventNamespace, function() {
                that.buttonElement.removeClass( focusClass );
            });

        if ( toggleButton ) {
            this.element.bind( "change" + this.eventNamespace, function() {
                if ( clickDragged ) {
                    return;
                }
                that.refresh();
            });
            // if mouse moves between mousedown and mouseup (drag) set clickDragged flag
            // prevents issue where button state changes but checkbox/radio checked state
            // does not in Firefox (see ticket #6970)
            this.buttonElement
                .bind( "mousedown" + this.eventNamespace, function( event ) {
                    if ( options.disabled ) {
                        return;
                    }
                    clickDragged = false;
                    startXPos = event.pageX;
                    startYPos = event.pageY;
                })
                .bind( "mouseup" + this.eventNamespace, function( event ) {
                    if ( options.disabled ) {
                        return;
                    }
                    if ( startXPos !== event.pageX || startYPos !== event.pageY ) {
                        clickDragged = true;
                    }
            });
        }

        if ( this.type === "checkbox" ) {
            this.buttonElement.bind( "click" + this.eventNamespace, function() {
                if ( options.disabled || clickDragged ) {
                    return false;
                }
                $( this ).toggleClass( "ui-state-active" );
                that.buttonElement.attr( "aria-pressed", that.element[0].checked );
            });
        } else if ( this.type === "radio" ) {
            this.buttonElement.bind( "click" + this.eventNamespace, function() {
                if ( options.disabled || clickDragged ) {
                    return false;
                }
                $( this ).addClass( "ui-state-active" );
                that.buttonElement.attr( "aria-pressed", "true" );

                var radio = that.element[ 0 ];
                radioGroup( radio )
                    .not( radio )
                    .map(function() {
                        return $( this ).button( "widget" )[ 0 ];
                    })
                    .removeClass( "ui-state-active" )
                    .attr( "aria-pressed", "false" );
            });
        } else {
            this.buttonElement
                .bind( "mousedown" + this.eventNamespace, function() {
                    if ( options.disabled ) {
                        return false;
                    }
                    $( this ).addClass( "ui-state-active" );
                    lastActive = this;
                    that.document.one( "mouseup", function() {
                        lastActive = null;
                    });
                })
                .bind( "mouseup" + this.eventNamespace, function() {
                    if ( options.disabled ) {
                        return false;
                    }
                    $( this ).removeClass( "ui-state-active" );
                })
                .bind( "keydown" + this.eventNamespace, function(event) {
                    if ( options.disabled ) {
                        return false;
                    }
                    if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
                        $( this ).addClass( "ui-state-active" );
                    }
                })
                .bind( "keyup" + this.eventNamespace, function() {
                    $( this ).removeClass( "ui-state-active" );
                });

            if ( this.buttonElement.is("a") ) {
                this.buttonElement.keyup(function(event) {
                    if ( event.keyCode === $.ui.keyCode.SPACE ) {
                        // TODO pass through original event correctly (just as 2nd argument doesn't work)
                        $( this ).click();
                    }
                });
            }
        }

        // TODO: pull out $.Widget's handling for the disabled option into
        // $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
        // be overridden by individual plugins
        this._setOption( "disabled", options.disabled );
        this._resetButton();
    },

    _determineButtonType: function() {
        var ancestor, labelSelector, checked;

        if ( this.element.is("[type=checkbox]") ) {
            this.type = "checkbox";
        } else if ( this.element.is("[type=radio]") ) {
            this.type = "radio";
        } else if ( this.element.is("input") ) {
            this.type = "input";
        } else {
            this.type = "button";
        }

        if ( this.type === "checkbox" || this.type === "radio" ) {
            // we don't search against the document in case the element
            // is disconnected from the DOM
            ancestor = this.element.parents().last();
            labelSelector = "label[for='" + this.element.attr("id") + "']";
            this.buttonElement = ancestor.find( labelSelector );
            if ( !this.buttonElement.length ) {
                ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                this.buttonElement = ancestor.filter( labelSelector );
                if ( !this.buttonElement.length ) {
                    this.buttonElement = ancestor.find( labelSelector );
                }
            }
            this.element.addClass( "ui-helper-hidden-accessible" );

            checked = this.element.is( ":checked" );
            if ( checked ) {
                this.buttonElement.addClass( "ui-state-active" );
            }
            this.buttonElement.prop( "aria-pressed", checked );
        } else {
            this.buttonElement = this.element;
        }
    },

    widget: function() {
        return this.buttonElement;
    },

    _destroy: function() {
        this.element
            .removeClass( "ui-helper-hidden-accessible" );
        this.buttonElement
            .removeClass( baseClasses + " " + stateClasses + " " + typeClasses )
            .removeAttr( "role" )
            .removeAttr( "aria-pressed" )
            .html( this.buttonElement.find(".ui-button-text").html() );

        if ( !this.hasTitle ) {
            this.buttonElement.removeAttr( "title" );
        }
    },

    _setOption: function( key, value ) {
        this._super( key, value );
        if ( key === "disabled" ) {
            if ( value ) {
                this.element.prop( "disabled", true );
            } else {
                this.element.prop( "disabled", false );
            }
            return;
        }
        this._resetButton();
    },

    refresh: function() {
        //See #8237 & #8828
        var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

        if ( isDisabled !== this.options.disabled ) {
            this._setOption( "disabled", isDisabled );
        }
        if ( this.type === "radio" ) {
            radioGroup( this.element[0] ).each(function() {
                if ( $( this ).is( ":checked" ) ) {
                    $( this ).button( "widget" )
                        .addClass( "ui-state-active" )
                        .attr( "aria-pressed", "true" );
                } else {
                    $( this ).button( "widget" )
                        .removeClass( "ui-state-active" )
                        .attr( "aria-pressed", "false" );
                }
            });
        } else if ( this.type === "checkbox" ) {
            if ( this.element.is( ":checked" ) ) {
                this.buttonElement
                    .addClass( "ui-state-active" )
                    .attr( "aria-pressed", "true" );
            } else {
                this.buttonElement
                    .removeClass( "ui-state-active" )
                    .attr( "aria-pressed", "false" );
            }
        }
    },

    _resetButton: function() {
        if ( this.type === "input" ) {
            if ( this.options.label ) {
                this.element.val( this.options.label );
            }
            return;
        }
        var buttonElement = this.buttonElement.removeClass( typeClasses ),
            buttonText = $( "<span></span>", this.document[0] )
                .addClass( "ui-button-text" )
                .html( this.options.label )
                .appendTo( buttonElement.empty() )
                .text(),
            icons = this.options.icons,
            multipleIcons = icons.primary && icons.secondary,
            buttonClasses = [];

        if ( icons.primary || icons.secondary ) {
            if ( this.options.text ) {
                buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
            }

            if ( icons.primary ) {
                buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
            }

            if ( icons.secondary ) {
                buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
            }

            if ( !this.options.text ) {
                buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

                if ( !this.hasTitle ) {
                    buttonElement.attr( "title", $.trim( buttonText ) );
                }
            }
        } else {
            buttonClasses.push( "ui-button-text-only" );
        }
        buttonElement.addClass( buttonClasses.join( " " ) );
    }
});

$.widget( "ui.buttonset", {
    version: "1.9.2",
    options: {
        items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)"
    },

    _create: function() {
        this.element.addClass( "ui-buttonset" );
    },

    _init: function() {
        this.refresh();
    },

    _setOption: function( key, value ) {
        if ( key === "disabled" ) {
            this.buttons.button( "option", key, value );
        }

        this._super( key, value );
    },

    refresh: function() {
        var rtl = this.element.css( "direction" ) === "rtl";

        this.buttons = this.element.find( this.options.items )
            .filter( ":ui-button" )
                .button( "refresh" )
            .end()
            .not( ":ui-button" )
                .button()
            .end()
            .map(function() {
                return $( this ).button( "widget" )[ 0 ];
            })
                .removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
                .filter( ":first" )
                    .addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
                .end()
                .filter( ":last" )
                    .addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
                .end()
            .end();
    },

    _destroy: function() {
        this.element.removeClass( "ui-buttonset" );
        this.buttons
            .map(function() {
                return $( this ).button( "widget" )[ 0 ];
            })
                .removeClass( "ui-corner-left ui-corner-right" )
            .end()
            .button( "destroy" );
    }
});

}( jQuery ) );
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.9.2" } });

var PROP_NAME = 'datepicker';
var dpuuid = new Date().getTime();
var instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
    this.debug = false; // Change this to true to start debugging
    this._curInst = null; // The current instance in use
    this._keyEvent = false; // If the last event was a key event
    this._disabledInputs = []; // List of date picker inputs that have been disabled
    this._datepickerShowing = false; // True if the popup picker is showing , false if not
    this._inDialog = false; // True if showing within a "dialog", false if not
    this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division
    this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class
    this._appendClass = 'ui-datepicker-append'; // The name of the append marker class
    this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class
    this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class
    this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class
    this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class
    this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class
    this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class
    this.regional = []; // Available regional settings, indexed by language code
    this.regional[''] = { // Default regional settings
        closeText: 'Done', // Display text for close link
        prevText: 'Prev', // Display text for previous month link
        nextText: 'Next', // Display text for next month link
        currentText: 'Today', // Display text for current month link
        monthNames: ['January','February','March','April','May','June',
            'July','August','September','October','November','December'], // Names of months for drop-down and formatting
        monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
        dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
        dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
        dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday
        weekHeader: 'Wk', // Column header for week of the year
        dateFormat: 'mm/dd/yy', // See format options on parseDate
        firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
        isRTL: false, // True if right-to-left language, false if left-to-right
        showMonthAfterYear: false, // True if the year select precedes month, false for month then year
        yearSuffix: '' // Additional text to append to the year in the month headers
    };
    this._defaults = { // Global defaults for all the date picker instances
        showOn: 'focus', // 'focus' for popup on focus,
            // 'button' for trigger button, or 'both' for either
        showAnim: 'fadeIn', // Name of jQuery animation for popup
        showOptions: {}, // Options for enhanced animations
        defaultDate: null, // Used when field is blank: actual date,
            // +/-number for offset from today, null for today
        appendText: '', // Display text following the input box, e.g. showing the format
        buttonText: '...', // Text for trigger button
        buttonImage: '', // URL for trigger button image
        buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
        hideIfNoPrevNext: false, // True to hide next/previous month links
            // if not applicable, false to just disable them
        navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
        gotoCurrent: false, // True if today link goes back to current selection instead
        changeMonth: false, // True if month can be selected directly, false if only prev/next
        changeYear: false, // True if year can be selected directly, false if only prev/next
        yearRange: 'c-10:c+10', // Range of years to display in drop-down,
            // either relative to today's year (-nn:+nn), relative to currently displayed year
            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
        showOtherMonths: false, // True to show dates in other months, false to leave blank
        selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
        showWeek: false, // True to show week of the year, false to not show it
        calculateWeek: this.iso8601Week, // How to calculate the week of the year,
            // takes a Date and returns the number of the week for it
        shortYearCutoff: '+10', // Short year values < this are in the current century,
            // > this are in the previous century,
            // string value starting with '+' for current year + value
        minDate: null, // The earliest selectable date, or null for no limit
        maxDate: null, // The latest selectable date, or null for no limit
        duration: 'fast', // Duration of display/closure
        beforeShowDay: null, // Function that takes a date and returns an array with
            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',
            // [2] = cell title (optional), e.g. $.datepicker.noWeekends
        beforeShow: null, // Function that takes an input field and
            // returns a set of custom settings for the date picker
        onSelect: null, // Define a callback function when a date is selected
        onChangeMonthYear: null, // Define a callback function when the month or year is changed
        onClose: null, // Define a callback function when the datepicker is closed
        numberOfMonths: 1, // Number of months to show at a time
        showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
        stepMonths: 1, // Number of months to step back/forward
        stepBigMonths: 12, // Number of months to step back/forward for the big links
        altField: '', // Selector for an alternate field to store selected dates into
        altFormat: '', // The date format to use for the alternate field
        constrainInput: true, // The input is constrained by the current date format
        showButtonPanel: false, // True to show button panel, false to not show it
        autoSize: false, // True to size the input for the date format, false to leave as is
        disabled: false // The initial disabled state
    };
    $.extend(this._defaults, this.regional['']);
    this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
}

$.extend(Datepicker.prototype, {
    /* Class name added to elements to indicate already configured with a date picker. */
    markerClassName: 'hasDatepicker',

    //Keep track of the maximum number of rows displayed (see #7043)
    maxRows: 4,

    /* Debug logging (if enabled). */
    log: function () {
        if (this.debug)
            console.log.apply('', arguments);
    },

    // TODO rename to "widget" when switching to widget factory
    _widgetDatepicker: function() {
        return this.dpDiv;
    },

    /* Override the default settings for all instances of the date picker.
       @param  settings  object - the new settings to use as defaults (anonymous object)
       @return the manager object */
    setDefaults: function(settings) {
        extendRemove(this._defaults, settings || {});
        return this;
    },

    /* Attach the date picker to a jQuery selection.
       @param  target    element - the target input field or division or span
       @param  settings  object - the new settings to use for this date picker instance (anonymous) */
    _attachDatepicker: function(target, settings) {
        // check for settings on the control itself - in namespace 'date:'
        var inlineSettings = null;
        for (var attrName in this._defaults) {
            var attrValue = target.getAttribute('date:' + attrName);
            if (attrValue) {
                inlineSettings = inlineSettings || {};
                try {
                    inlineSettings[attrName] = eval(attrValue);
                } catch (err) {
                    inlineSettings[attrName] = attrValue;
                }
            }
        }
        var nodeName = target.nodeName.toLowerCase();
        var inline = (nodeName == 'div' || nodeName == 'span');
        if (!target.id) {
            this.uuid += 1;
            target.id = 'dp' + this.uuid;
        }
        var inst = this._newInst($(target), inline);
        inst.settings = $.extend({}, settings || {}, inlineSettings || {});
        if (nodeName == 'input') {
            this._connectDatepicker(target, inst);
        } else if (inline) {
            this._inlineDatepicker(target, inst);
        }
    },

    /* Create a new instance object. */
    _newInst: function(target, inline) {
        var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars
        return {id: id, input: target, // associated target
            selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
            drawMonth: 0, drawYear: 0, // month being drawn
            inline: inline, // is datepicker inline or not
            dpDiv: (!inline ? this.dpDiv : // presentation div
            bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))};
    },

    /* Attach the date picker to an input field. */
    _connectDatepicker: function(target, inst) {
        var input = $(target);
        inst.append = $([]);
        inst.trigger = $([]);
        if (input.hasClass(this.markerClassName))
            return;
        this._attachments(input, inst);
        input.addClass(this.markerClassName).keydown(this._doKeyDown).
            keypress(this._doKeyPress).keyup(this._doKeyUp).
            bind("setData.datepicker", function(event, key, value) {
                inst.settings[key] = value;
            }).bind("getData.datepicker", function(event, key) {
                return this._get(inst, key);
            });
        this._autoSize(inst);
        $.data(target, PROP_NAME, inst);
        //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
        if( inst.settings.disabled ) {
            this._disableDatepicker( target );
        }
    },

    /* Make attachments based on settings. */
    _attachments: function(input, inst) {
        var appendText = this._get(inst, 'appendText');
        var isRTL = this._get(inst, 'isRTL');
        if (inst.append)
            inst.append.remove();
        if (appendText) {
            inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
            input[isRTL ? 'before' : 'after'](inst.append);
        }
        input.unbind('focus', this._showDatepicker);
        if (inst.trigger)
            inst.trigger.remove();
        var showOn = this._get(inst, 'showOn');
        if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field
            input.focus(this._showDatepicker);
        if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked
            var buttonText = this._get(inst, 'buttonText');
            var buttonImage = this._get(inst, 'buttonImage');
            inst.trigger = $(this._get(inst, 'buttonImageOnly') ?
                $('<img/>').addClass(this._triggerClass).
                    attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
                $('<button type="button"></button>').addClass(this._triggerClass).
                    html(buttonImage == '' ? buttonText : $('<img/>').attr(
                    { src:buttonImage, alt:buttonText, title:buttonText })));
            input[isRTL ? 'before' : 'after'](inst.trigger);
            inst.trigger.click(function() {
                if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
                    $.datepicker._hideDatepicker();
                else if ($.datepicker._datepickerShowing && $.datepicker._lastInput != input[0]) {
                    $.datepicker._hideDatepicker();
                    $.datepicker._showDatepicker(input[0]);
                } else
                    $.datepicker._showDatepicker(input[0]);
                return false;
            });
        }
    },

    /* Apply the maximum length for the date format. */
    _autoSize: function(inst) {
        if (this._get(inst, 'autoSize') && !inst.inline) {
            var date = new Date(2009, 12 - 1, 20); // Ensure double digits
            var dateFormat = this._get(inst, 'dateFormat');
            if (dateFormat.match(/[DM]/)) {
                var findMax = function(names) {
                    var max = 0;
                    var maxI = 0;
                    for (var i = 0; i < names.length; i++) {
                        if (names[i].length > max) {
                            max = names[i].length;
                            maxI = i;
                        }
                    }
                    return maxI;
                };
                date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
                    'monthNames' : 'monthNamesShort'))));
                date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
                    'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
            }
            inst.input.attr('size', this._formatDate(inst, date).length);
        }
    },

    /* Attach an inline date picker to a div. */
    _inlineDatepicker: function(target, inst) {
        var divSpan = $(target);
        if (divSpan.hasClass(this.markerClassName))
            return;
        divSpan.addClass(this.markerClassName).append(inst.dpDiv).
            bind("setData.datepicker", function(event, key, value){
                inst.settings[key] = value;
            }).bind("getData.datepicker", function(event, key){
                return this._get(inst, key);
            });
        $.data(target, PROP_NAME, inst);
        this._setDate(inst, this._getDefaultDate(inst), true);
        this._updateDatepicker(inst);
        this._updateAlternate(inst);
        //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
        if( inst.settings.disabled ) {
            this._disableDatepicker( target );
        }
        // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
        // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
        inst.dpDiv.css( "display", "block" );
    },

    /* Pop-up the date picker in a "dialog" box.
       @param  input     element - ignored
       @param  date      string or Date - the initial date to display
       @param  onSelect  function - the function to call when a date is selected
       @param  settings  object - update the dialog date picker instance's settings (anonymous object)
       @param  pos       int[2] - coordinates for the dialog's position within the screen or
                         event - with x/y coordinates or
                         leave empty for default (screen centre)
       @return the manager object */
    _dialogDatepicker: function(input, date, onSelect, settings, pos) {
        var inst = this._dialogInst; // internal instance
        if (!inst) {
            this.uuid += 1;
            var id = 'dp' + this.uuid;
            this._dialogInput = $('<input type="text" id="' + id +
                '" style="position: absolute; top: -100px; width: 0px;"/>');
            this._dialogInput.keydown(this._doKeyDown);
            $('body').append(this._dialogInput);
            inst = this._dialogInst = this._newInst(this._dialogInput, false);
            inst.settings = {};
            $.data(this._dialogInput[0], PROP_NAME, inst);
        }
        extendRemove(inst.settings, settings || {});
        date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
        this._dialogInput.val(date);

        this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
        if (!this._pos) {
            var browserWidth = document.documentElement.clientWidth;
            var browserHeight = document.documentElement.clientHeight;
            var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
            var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
            this._pos = // should use actual width/height below
                [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
        }

        // move input on screen for focus, but hidden behind dialog
        this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
        inst.settings.onSelect = onSelect;
        this._inDialog = true;
        this.dpDiv.addClass(this._dialogClass);
        this._showDatepicker(this._dialogInput[0]);
        if ($.blockUI)
            $.blockUI(this.dpDiv);
        $.data(this._dialogInput[0], PROP_NAME, inst);
        return this;
    },

    /* Detach a datepicker from its control.
       @param  target    element - the target input field or division or span */
    _destroyDatepicker: function(target) {
        var $target = $(target);
        var inst = $.data(target, PROP_NAME);
        if (!$target.hasClass(this.markerClassName)) {
            return;
        }
        var nodeName = target.nodeName.toLowerCase();
        $.removeData(target, PROP_NAME);
        if (nodeName == 'input') {
            inst.append.remove();
            inst.trigger.remove();
            $target.removeClass(this.markerClassName).
                unbind('focus', this._showDatepicker).
                unbind('keydown', this._doKeyDown).
                unbind('keypress', this._doKeyPress).
                unbind('keyup', this._doKeyUp);
        } else if (nodeName == 'div' || nodeName == 'span')
            $target.removeClass(this.markerClassName).empty();
    },

    /* Enable the date picker to a jQuery selection.
       @param  target    element - the target input field or division or span */
    _enableDatepicker: function(target) {
        var $target = $(target);
        var inst = $.data(target, PROP_NAME);
        if (!$target.hasClass(this.markerClassName)) {
            return;
        }
        var nodeName = target.nodeName.toLowerCase();
        if (nodeName == 'input') {
            target.disabled = false;
            inst.trigger.filter('button').
                each(function() { this.disabled = false; }).end().
                filter('img').css({opacity: '1.0', cursor: ''});
        }
        else if (nodeName == 'div' || nodeName == 'span') {
            var inline = $target.children('.' + this._inlineClass);
            inline.children().removeClass('ui-state-disabled');
            inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                prop("disabled", false);
        }
        this._disabledInputs = $.map(this._disabledInputs,
            function(value) { return (value == target ? null : value); }); // delete entry
    },

    /* Disable the date picker to a jQuery selection.
       @param  target    element - the target input field or division or span */
    _disableDatepicker: function(target) {
        var $target = $(target);
        var inst = $.data(target, PROP_NAME);
        if (!$target.hasClass(this.markerClassName)) {
            return;
        }
        var nodeName = target.nodeName.toLowerCase();
        if (nodeName == 'input') {
            target.disabled = true;
            inst.trigger.filter('button').
                each(function() { this.disabled = true; }).end().
                filter('img').css({opacity: '0.5', cursor: 'default'});
        }
        else if (nodeName == 'div' || nodeName == 'span') {
            var inline = $target.children('.' + this._inlineClass);
            inline.children().addClass('ui-state-disabled');
            inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
                prop("disabled", true);
        }
        this._disabledInputs = $.map(this._disabledInputs,
            function(value) { return (value == target ? null : value); }); // delete entry
        this._disabledInputs[this._disabledInputs.length] = target;
    },

    /* Is the first field in a jQuery collection disabled as a datepicker?
       @param  target    element - the target input field or division or span
       @return boolean - true if disabled, false if enabled */
    _isDisabledDatepicker: function(target) {
        if (!target) {
            return false;
        }
        for (var i = 0; i < this._disabledInputs.length; i++) {
            if (this._disabledInputs[i] == target)
                return true;
        }
        return false;
    },

    /* Retrieve the instance data for the target control.
       @param  target  element - the target input field or division or span
       @return  object - the associated instance data
       @throws  error if a jQuery problem getting data */
    _getInst: function(target) {
        try {
            return $.data(target, PROP_NAME);
        }
        catch (err) {
            throw 'Missing instance data for this datepicker';
        }
    },

    /* Update or retrieve the settings for a date picker attached to an input field or division.
       @param  target  element - the target input field or division or span
       @param  name    object - the new settings to update or
                       string - the name of the setting to change or retrieve,
                       when retrieving also 'all' for all instance settings or
                       'defaults' for all global defaults
       @param  value   any - the new value for the setting
                       (omit if above is an object or to retrieve a value) */
    _optionDatepicker: function(target, name, value) {
        var inst = this._getInst(target);
        if (arguments.length == 2 && typeof name == 'string') {
            return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :
                (inst ? (name == 'all' ? $.extend({}, inst.settings) :
                this._get(inst, name)) : null));
        }
        var settings = name || {};
        if (typeof name == 'string') {
            settings = {};
            settings[name] = value;
        }
        if (inst) {
            if (this._curInst == inst) {
                this._hideDatepicker();
            }
            var date = this._getDateDatepicker(target, true);
            var minDate = this._getMinMaxDate(inst, 'min');
            var maxDate = this._getMinMaxDate(inst, 'max');
            extendRemove(inst.settings, settings);
            // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
            if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)
                inst.settings.minDate = this._formatDate(inst, minDate);
            if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)
                inst.settings.maxDate = this._formatDate(inst, maxDate);
            this._attachments($(target), inst);
            this._autoSize(inst);
            this._setDate(inst, date);
            this._updateAlternate(inst);
            this._updateDatepicker(inst);
        }
    },

    // change method deprecated
    _changeDatepicker: function(target, name, value) {
        this._optionDatepicker(target, name, value);
    },

    /* Redraw the date picker attached to an input field or division.
       @param  target  element - the target input field or division or span */
    _refreshDatepicker: function(target) {
        var inst = this._getInst(target);
        if (inst) {
            this._updateDatepicker(inst);
        }
    },

    /* Set the dates for a jQuery selection.
       @param  target   element - the target input field or division or span
       @param  date     Date - the new date */
    _setDateDatepicker: function(target, date) {
        var inst = this._getInst(target);
        if (inst) {
            this._setDate(inst, date);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
        }
    },

    /* Get the date(s) for the first entry in a jQuery selection.
       @param  target     element - the target input field or division or span
       @param  noDefault  boolean - true if no default date is to be used
       @return Date - the current date */
    _getDateDatepicker: function(target, noDefault) {
        var inst = this._getInst(target);
        if (inst && !inst.inline)
            this._setDateFromField(inst, noDefault);
        return (inst ? this._getDate(inst) : null);
    },

    /* Handle keystrokes. */
    _doKeyDown: function(event) {
        var inst = $.datepicker._getInst(event.target);
        var handled = true;
        var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
        inst._keyEvent = true;
        if ($.datepicker._datepickerShowing)
            switch (event.keyCode) {
                case 9: $.datepicker._hideDatepicker();
                        handled = false;
                        break; // hide on tab out
                case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' +
                                    $.datepicker._currentClass + ')', inst.dpDiv);
                        if (sel[0])
                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                            var onSelect = $.datepicker._get(inst, 'onSelect');
                            if (onSelect) {
                                var dateStr = $.datepicker._formatDate(inst);

                                // trigger custom callback
                                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
                            }
                        else
                            $.datepicker._hideDatepicker();
                        return false; // don't submit the form
                        break; // select the value on enter
                case 27: $.datepicker._hideDatepicker();
                        break; // hide on escape
                case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            -$.datepicker._get(inst, 'stepBigMonths') :
                            -$.datepicker._get(inst, 'stepMonths')), 'M');
                        break; // previous month/year on page up/+ ctrl
                case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            +$.datepicker._get(inst, 'stepBigMonths') :
                            +$.datepicker._get(inst, 'stepMonths')), 'M');
                        break; // next month/year on page down/+ ctrl
                case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);
                        handled = event.ctrlKey || event.metaKey;
                        break; // clear on ctrl or command +end
                case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);
                        handled = event.ctrlKey || event.metaKey;
                        break; // current on ctrl or command +home
                case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
                        handled = event.ctrlKey || event.metaKey;
                        // -1 day on ctrl or command +left
                        if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                    -$.datepicker._get(inst, 'stepBigMonths') :
                                    -$.datepicker._get(inst, 'stepMonths')), 'M');
                        // next month/year on alt +left on Mac
                        break;
                case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');
                        handled = event.ctrlKey || event.metaKey;
                        break; // -1 week on ctrl or command +up
                case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
                        handled = event.ctrlKey || event.metaKey;
                        // +1 day on ctrl or command +right
                        if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                    +$.datepicker._get(inst, 'stepBigMonths') :
                                    +$.datepicker._get(inst, 'stepMonths')), 'M');
                        // next month/year on alt +right
                        break;
                case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');
                        handled = event.ctrlKey || event.metaKey;
                        break; // +1 week on ctrl or command +down
                default: handled = false;
            }
        else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home
            $.datepicker._showDatepicker(this);
        else {
            handled = false;
        }
        if (handled) {
            event.preventDefault();
            event.stopPropagation();
        }
    },

    /* Filter entered characters - based on date format. */
    _doKeyPress: function(event) {
        var inst = $.datepicker._getInst(event.target);
        if ($.datepicker._get(inst, 'constrainInput')) {
            var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
            var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
            return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
        }
    },

    /* Synchronise manual entry and field/alternate field. */
    _doKeyUp: function(event) {
        var inst = $.datepicker._getInst(event.target);
        if (inst.input.val() != inst.lastVal) {
            try {
                var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
                    (inst.input ? inst.input.val() : null),
                    $.datepicker._getFormatConfig(inst));
                if (date) { // only if valid
                    $.datepicker._setDateFromField(inst);
                    $.datepicker._updateAlternate(inst);
                    $.datepicker._updateDatepicker(inst);
                }
            }
            catch (err) {
                $.datepicker.log(err);
            }
        }
        return true;
    },

    /* Pop-up the date picker for a given input field.
       If false returned from beforeShow event handler do not show.
       @param  input  element - the input field attached to the date picker or
                      event - if triggered by focus */
    _showDatepicker: function(input) {
        input = input.target || input;
        if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger
            input = $('input', input.parentNode)[0];
        if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here
            return;
        var inst = $.datepicker._getInst(input);
        if ($.datepicker._curInst && $.datepicker._curInst != inst) {
            $.datepicker._curInst.dpDiv.stop(true, true);
            if ( inst && $.datepicker._datepickerShowing ) {
                $.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
            }
        }
        var beforeShow = $.datepicker._get(inst, 'beforeShow');
        var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
        if(beforeShowSettings === false){
            //false
            return;
        }
        extendRemove(inst.settings, beforeShowSettings);
        inst.lastVal = null;
        $.datepicker._lastInput = input;
        $.datepicker._setDateFromField(inst);
        if ($.datepicker._inDialog) // hide cursor
            input.value = '';
        if (!$.datepicker._pos) { // position below input
            $.datepicker._pos = $.datepicker._findPos(input);
            $.datepicker._pos[1] += input.offsetHeight; // add the height
        }
        var isFixed = false;
        $(input).parents().each(function() {
            isFixed |= $(this).css('position') == 'fixed';
            return !isFixed;
        });
        var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
        $.datepicker._pos = null;
        //to avoid flashes on Firefox
        inst.dpDiv.empty();
        // determine sizing offscreen
        inst.dpDiv.css({position: 'absolute', display: 'block', top: '-1000px'});
        $.datepicker._updateDatepicker(inst);
        // fix width for dynamic number of date pickers
        // and adjust position before showing
        offset = $.datepicker._checkOffset(inst, offset, isFixed);
        inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
            'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',
            left: offset.left + 'px', top: offset.top + 'px'});
        if (!inst.inline) {
            var showAnim = $.datepicker._get(inst, 'showAnim');
            var duration = $.datepicker._get(inst, 'duration');
            var postProcess = function() {
                var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
                if( !! cover.length ){
                    var borders = $.datepicker._getBorders(inst.dpDiv);
                    cover.css({left: -borders[0], top: -borders[1],
                        width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});
                }
            };
            inst.dpDiv.zIndex($(input).zIndex()+1);
            $.datepicker._datepickerShowing = true;

            // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
            if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) )
                inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
            else
                inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
            if (!showAnim || !duration)
                postProcess();
            if (inst.input.is(':visible') && !inst.input.is(':disabled'))
                inst.input.focus();
            $.datepicker._curInst = inst;
        }
    },

    /* Generate the date picker content. */
    _updateDatepicker: function(inst) {
        this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
        var borders = $.datepicker._getBorders(inst.dpDiv);
        instActive = inst; // for delegate hover events
        inst.dpDiv.empty().append(this._generateHTML(inst));
        this._attachHandlers(inst);
        var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
        if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6
            cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()})
        }
        inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
        var numMonths = this._getNumberOfMonths(inst);
        var cols = numMonths[1];
        var width = 17;
        inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
        if (cols > 1)
            inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
        inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +
            'Class']('ui-datepicker-multi');
        inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +
            'Class']('ui-datepicker-rtl');
        if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&
                // #6694 - don't focus the input if it's already focused
                // this breaks the change event in IE
                inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)
            inst.input.focus();
        // deffered render of the years select (to avoid flashes on Firefox)
        if( inst.yearshtml ){
            var origyearshtml = inst.yearshtml;
            setTimeout(function(){
                //assure that inst.yearshtml didn't change.
                if( origyearshtml === inst.yearshtml && inst.yearshtml ){
                    inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
                }
                origyearshtml = inst.yearshtml = null;
            }, 0);
        }
    },

    /* Retrieve the size of left and top borders for an element.
       @param  elem  (jQuery object) the element of interest
       @return  (number[2]) the left and top borders */
    _getBorders: function(elem) {
        var convert = function(value) {
            return {thin: 1, medium: 2, thick: 3}[value] || value;
        };
        return [parseFloat(convert(elem.css('border-left-width'))),
            parseFloat(convert(elem.css('border-top-width')))];
    },

    /* Check positioning to remain on screen. */
    _checkOffset: function(inst, offset, isFixed) {
        var dpWidth = inst.dpDiv.outerWidth();
        var dpHeight = inst.dpDiv.outerHeight();
        var inputWidth = inst.input ? inst.input.outerWidth() : 0;
        var inputHeight = inst.input ? inst.input.outerHeight() : 0;
        var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());
        var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

        offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
        offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
        offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

        // now check if datepicker is showing outside window viewport - move to a better place if so.
        offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
            Math.abs(offset.left + dpWidth - viewWidth) : 0);
        offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
            Math.abs(dpHeight + inputHeight) : 0);

        return offset;
    },

    /* Find an object's position on the screen. */
    _findPos: function(obj) {
        var inst = this._getInst(obj);
        var isRTL = this._get(inst, 'isRTL');
        while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
            obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
        }
        var position = $(obj).offset();
        return [position.left, position.top];
    },

    /* Hide the date picker from view.
       @param  input  element - the input field attached to the date picker */
    _hideDatepicker: function(input) {
        var inst = this._curInst;
        if (!inst || (input && inst != $.data(input, PROP_NAME)))
            return;
        if (this._datepickerShowing) {
            var showAnim = this._get(inst, 'showAnim');
            var duration = this._get(inst, 'duration');
            var postProcess = function() {
                $.datepicker._tidyDialog(inst);
            };

            // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
            if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) )
                inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
            else
                inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :
                    (showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
            if (!showAnim)
                postProcess();
            this._datepickerShowing = false;
            var onClose = this._get(inst, 'onClose');
            if (onClose)
                onClose.apply((inst.input ? inst.input[0] : null),
                    [(inst.input ? inst.input.val() : ''), inst]);
            this._lastInput = null;
            if (this._inDialog) {
                this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });
                if ($.blockUI) {
                    $.unblockUI();
                    $('body').append(this.dpDiv);
                }
            }
            this._inDialog = false;
        }
    },

    /* Tidy up after a dialog display. */
    _tidyDialog: function(inst) {
        inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
    },

    /* Close date picker if clicked elsewhere. */
    _checkExternalClick: function(event) {
        if (!$.datepicker._curInst)
            return;

        var $target = $(event.target),
            inst = $.datepicker._getInst($target[0]);

        if ( ( ( $target[0].id != $.datepicker._mainDivId &&
                $target.parents('#' + $.datepicker._mainDivId).length == 0 &&
                !$target.hasClass($.datepicker.markerClassName) &&
                !$target.closest("." + $.datepicker._triggerClass).length &&
                $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
            ( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst ) )
            $.datepicker._hideDatepicker();
    },

    /* Adjust one of the date sub-fields. */
    _adjustDate: function(id, offset, period) {
        var target = $(id);
        var inst = this._getInst(target[0]);
        if (this._isDisabledDatepicker(target[0])) {
            return;
        }
        this._adjustInstDate(inst, offset +
            (period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
            period);
        this._updateDatepicker(inst);
    },

    /* Action for current link. */
    _gotoToday: function(id) {
        var target = $(id);
        var inst = this._getInst(target[0]);
        if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
            inst.selectedDay = inst.currentDay;
            inst.drawMonth = inst.selectedMonth = inst.currentMonth;
            inst.drawYear = inst.selectedYear = inst.currentYear;
        }
        else {
            var date = new Date();
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
        }
        this._notifyChange(inst);
        this._adjustDate(target);
    },

    /* Action for selecting a new month/year. */
    _selectMonthYear: function(id, select, period) {
        var target = $(id);
        var inst = this._getInst(target[0]);
        inst['selected' + (period == 'M' ? 'Month' : 'Year')] =
        inst['draw' + (period == 'M' ? 'Month' : 'Year')] =
            parseInt(select.options[select.selectedIndex].value,10);
        this._notifyChange(inst);
        this._adjustDate(target);
    },

    /* Action for selecting a day. */
    _selectDay: function(id, month, year, td) {
        var target = $(id);
        if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
            return;
        }
        var inst = this._getInst(target[0]);
        inst.selectedDay = inst.currentDay = $('a', td).html();
        inst.selectedMonth = inst.currentMonth = month;
        inst.selectedYear = inst.currentYear = year;
        this._selectDate(id, this._formatDate(inst,
            inst.currentDay, inst.currentMonth, inst.currentYear));
    },

    /* Erase the input field and hide the date picker. */
    _clearDate: function(id) {
        var target = $(id);
        var inst = this._getInst(target[0]);
        this._selectDate(target, '');
    },

    /* Update the input field with the selected date. */
    _selectDate: function(id, dateStr) {
        var target = $(id);
        var inst = this._getInst(target[0]);
        dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
        if (inst.input)
            inst.input.val(dateStr);
        this._updateAlternate(inst);
        var onSelect = this._get(inst, 'onSelect');
        if (onSelect)
            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
        else if (inst.input)
            inst.input.trigger('change'); // fire the change event
        if (inst.inline)
            this._updateDatepicker(inst);
        else {
            this._hideDatepicker();
            this._lastInput = inst.input[0];
            if (typeof(inst.input[0]) != 'object')
                inst.input.focus(); // restore focus
            this._lastInput = null;
        }
    },

    /* Update any alternate field to synchronise with the main field. */
    _updateAlternate: function(inst) {
        var altField = this._get(inst, 'altField');
        if (altField) { // update alternate field too
            var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
            var date = this._getDate(inst);
            var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
            $(altField).each(function() { $(this).val(dateStr); });
        }
    },

    /* Set as beforeShowDay function to prevent selection of weekends.
       @param  date  Date - the date to customise
       @return [boolean, string] - is this date selectable?, what is its CSS class? */
    noWeekends: function(date) {
        var day = date.getDay();
        return [(day > 0 && day < 6), ''];
    },

    /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
       @param  date  Date - the date to get the week for
       @return  number - the number of the week within the year that contains this date */
    iso8601Week: function(date) {
        var checkDate = new Date(date.getTime());
        // Find Thursday of this week starting on Monday
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
        var time = checkDate.getTime();
        checkDate.setMonth(0); // Compare with Jan 1
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
    },

    /* Parse a string value into a date object.
       See formatDate below for the possible formats.

       @param  format    string - the expected format of the date
       @param  value     string - the date in the above format
       @param  settings  Object - attributes include:
                         shortYearCutoff  number - the cutoff year for determining the century (optional)
                         dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
                         dayNames         string[7] - names of the days from Sunday (optional)
                         monthNamesShort  string[12] - abbreviated names of the months (optional)
                         monthNames       string[12] - names of the months (optional)
       @return  Date - the extracted date value or null if value is blank */
    parseDate: function (format, value, settings) {
        if (format == null || value == null)
            throw 'Invalid arguments';
        value = (typeof value == 'object' ? value.toString() : value + '');
        if (value == '')
            return null;
        var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
        shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
        var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
        var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
        var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
        var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
        var year = -1;
        var month = -1;
        var day = -1;
        var doy = -1;
        var literal = false;
        // Check whether a format character is doubled
        var lookAhead = function(match) {
            var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
            if (matches)
                iFormat++;
            return matches;
        };
        // Extract a number from the string value
        var getNumber = function(match) {
            var isDoubled = lookAhead(match);
            var size = (match == '@' ? 14 : (match == '!' ? 20 :
                (match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
            var digits = new RegExp('^\\d{1,' + size + '}');
            var num = value.substring(iValue).match(digits);
            if (!num)
                throw 'Missing number at position ' + iValue;
            iValue += num[0].length;
            return parseInt(num[0], 10);
        };
        // Extract a name from the string value and convert to an index
        var getName = function(match, shortNames, longNames) {
            var names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
                return [ [k, v] ];
            }).sort(function (a, b) {
                return -(a[1].length - b[1].length);
            });
            var index = -1;
            $.each(names, function (i, pair) {
                var name = pair[1];
                if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
                    index = pair[0];
                    iValue += name.length;
                    return false;
                }
            });
            if (index != -1)
                return index + 1;
            else
                throw 'Unknown name at position ' + iValue;
        };
        // Confirm that a literal character matches the string value
        var checkLiteral = function() {
            if (value.charAt(iValue) != format.charAt(iFormat))
                throw 'Unexpected literal at position ' + iValue;
            iValue++;
        };
        var iValue = 0;
        for (var iFormat = 0; iFormat < format.length; iFormat++) {
            if (literal)
                if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                    literal = false;
                else
                    checkLiteral();
            else
                switch (format.charAt(iFormat)) {
                    case 'd':
                        day = getNumber('d');
                        break;
                    case 'D':
                        getName('D', dayNamesShort, dayNames);
                        break;
                    case 'o':
                        doy = getNumber('o');
                        break;
                    case 'm':
                        month = getNumber('m');
                        break;
                    case 'M':
                        month = getName('M', monthNamesShort, monthNames);
                        break;
                    case 'y':
                        year = getNumber('y');
                        break;
                    case '@':
                        var date = new Date(getNumber('@'));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case '!':
                        var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "'":
                        if (lookAhead("'"))
                            checkLiteral();
                        else
                            literal = true;
                        break;
                    default:
                        checkLiteral();
                }
        }
        if (iValue < value.length){
            var extra = value.substr(iValue);
            if (!/^\s+/.test(extra)) {
                throw "Extra/unparsed characters found in date: " + extra;
            }
        }
        if (year == -1)
            year = new Date().getFullYear();
        else if (year < 100)
            year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                (year <= shortYearCutoff ? 0 : -100);
        if (doy > -1) {
            month = 1;
            day = doy;
            do {
                var dim = this._getDaysInMonth(year, month - 1);
                if (day <= dim)
                    break;
                month++;
                day -= dim;
            } while (true);
        }
        var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
        if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
            throw 'Invalid date'; // E.g. 31/02/00
        return date;
    },

    /* Standard date formats. */
    ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)
    COOKIE: 'D, dd M yy',
    ISO_8601: 'yy-mm-dd',
    RFC_822: 'D, d M y',
    RFC_850: 'DD, dd-M-y',
    RFC_1036: 'D, d M y',
    RFC_1123: 'D, d M yy',
    RFC_2822: 'D, d M yy',
    RSS: 'D, d M y', // RFC 822
    TICKS: '!',
    TIMESTAMP: '@',
    W3C: 'yy-mm-dd', // ISO 8601

    _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
        Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

    /* Format a date object into a string value.
       The format can be combinations of the following:
       d  - day of month (no leading zero)
       dd - day of month (two digit)
       o  - day of year (no leading zeros)
       oo - day of year (three digit)
       D  - day name short
       DD - day name long
       m  - month of year (no leading zero)
       mm - month of year (two digit)
       M  - month name short
       MM - month name long
       y  - year (two digit)
       yy - year (four digit)
       @ - Unix timestamp (ms since 01/01/1970)
       ! - Windows ticks (100ns since 01/01/0001)
       '...' - literal text
       '' - single quote

       @param  format    string - the desired format of the date
       @param  date      Date - the date value to format
       @param  settings  Object - attributes include:
                         dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
                         dayNames         string[7] - names of the days from Sunday (optional)
                         monthNamesShort  string[12] - abbreviated names of the months (optional)
                         monthNames       string[12] - names of the months (optional)
       @return  string - the date in the above format */
    formatDate: function (format, date, settings) {
        if (!date)
            return '';
        var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
        var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
        var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
        var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
        // Check whether a format character is doubled
        var lookAhead = function(match) {
            var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
            if (matches)
                iFormat++;
            return matches;
        };
        // Format a number, with leading zero if necessary
        var formatNumber = function(match, value, len) {
            var num = '' + value;
            if (lookAhead(match))
                while (num.length < len)
                    num = '0' + num;
            return num;
        };
        // Format a name, short or long as requested
        var formatName = function(match, value, shortNames, longNames) {
            return (lookAhead(match) ? longNames[value] : shortNames[value]);
        };
        var output = '';
        var literal = false;
        if (date)
            for (var iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal)
                    if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                        literal = false;
                    else
                        output += format.charAt(iFormat);
                else
                    switch (format.charAt(iFormat)) {
                        case 'd':
                            output += formatNumber('d', date.getDate(), 2);
                            break;
                        case 'D':
                            output += formatName('D', date.getDay(), dayNamesShort, dayNames);
                            break;
                        case 'o':
                            output += formatNumber('o',
                                Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                            break;
                        case 'm':
                            output += formatNumber('m', date.getMonth() + 1, 2);
                            break;
                        case 'M':
                            output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
                            break;
                        case 'y':
                            output += (lookAhead('y') ? date.getFullYear() :
                                (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
                            break;
                        case '@':
                            output += date.getTime();
                            break;
                        case '!':
                            output += date.getTime() * 10000 + this._ticksTo1970;
                            break;
                        case "'":
                            if (lookAhead("'"))
                                output += "'";
                            else
                                literal = true;
                            break;
                        default:
                            output += format.charAt(iFormat);
                    }
            }
        return output;
    },

    /* Extract all possible characters from the date format. */
    _possibleChars: function (format) {
        var chars = '';
        var literal = false;
        // Check whether a format character is doubled
        var lookAhead = function(match) {
            var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
            if (matches)
                iFormat++;
            return matches;
        };
        for (var iFormat = 0; iFormat < format.length; iFormat++)
            if (literal)
                if (format.charAt(iFormat) == "'" && !lookAhead("'"))
                    literal = false;
                else
                    chars += format.charAt(iFormat);
            else
                switch (format.charAt(iFormat)) {
                    case 'd': case 'm': case 'y': case '@':
                        chars += '0123456789';
                        break;
                    case 'D': case 'M':
                        return null; // Accept anything
                    case "'":
                        if (lookAhead("'"))
                            chars += "'";
                        else
                            literal = true;
                        break;
                    default:
                        chars += format.charAt(iFormat);
                }
        return chars;
    },

    /* Get a setting value, defaulting if necessary. */
    _get: function(inst, name) {
        return inst.settings[name] !== undefined ?
            inst.settings[name] : this._defaults[name];
    },

    /* Parse existing date and initialise date picker. */
    _setDateFromField: function(inst, noDefault) {
        if (inst.input.val() == inst.lastVal) {
            return;
        }
        var dateFormat = this._get(inst, 'dateFormat');
        var dates = inst.lastVal = inst.input ? inst.input.val() : null;
        var date, defaultDate;
        date = defaultDate = this._getDefaultDate(inst);
        var settings = this._getFormatConfig(inst);
        try {
            date = this.parseDate(dateFormat, dates, settings) || defaultDate;
        } catch (event) {
            this.log(event);
            dates = (noDefault ? '' : dates);
        }
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        inst.currentDay = (dates ? date.getDate() : 0);
        inst.currentMonth = (dates ? date.getMonth() : 0);
        inst.currentYear = (dates ? date.getFullYear() : 0);
        this._adjustInstDate(inst);
    },

    /* Retrieve the default date shown on opening. */
    _getDefaultDate: function(inst) {
        return this._restrictMinMax(inst,
            this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
    },

    /* A date may be specified as an exact value or a relative one. */
    _determineDate: function(inst, date, defaultDate) {
        var offsetNumeric = function(offset) {
            var date = new Date();
            date.setDate(date.getDate() + offset);
            return date;
        };
        var offsetString = function(offset) {
            try {
                return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
                    offset, $.datepicker._getFormatConfig(inst));
            }
            catch (e) {
                // Ignore
            }
            var date = (offset.toLowerCase().match(/^c/) ?
                $.datepicker._getDate(inst) : null) || new Date();
            var year = date.getFullYear();
            var month = date.getMonth();
            var day = date.getDate();
            var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
            var matches = pattern.exec(offset);
            while (matches) {
                switch (matches[2] || 'd') {
                    case 'd' : case 'D' :
                        day += parseInt(matches[1],10); break;
                    case 'w' : case 'W' :
                        day += parseInt(matches[1],10) * 7; break;
                    case 'm' : case 'M' :
                        month += parseInt(matches[1],10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break;
                    case 'y': case 'Y' :
                        year += parseInt(matches[1],10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break;
                }
                matches = pattern.exec(offset);
            }
            return new Date(year, month, day);
        };
        var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :
            (typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
        newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
        if (newDate) {
            newDate.setHours(0);
            newDate.setMinutes(0);
            newDate.setSeconds(0);
            newDate.setMilliseconds(0);
        }
        return this._daylightSavingAdjust(newDate);
    },

    /* Handle switch to/from daylight saving.
       Hours may be non-zero on daylight saving cut-over:
       > 12 when midnight changeover, but then cannot generate
       midnight datetime, so jump to 1AM, otherwise reset.
       @param  date  (Date) the date to check
       @return  (Date) the corrected date */
    _daylightSavingAdjust: function(date) {
        if (!date) return null;
        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
        return date;
    },

    /* Set the date(s) directly. */
    _setDate: function(inst, date, noChange) {
        var clear = !date;
        var origMonth = inst.selectedMonth;
        var origYear = inst.selectedYear;
        var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
        inst.selectedDay = inst.currentDay = newDate.getDate();
        inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
        inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
        if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
            this._notifyChange(inst);
        this._adjustInstDate(inst);
        if (inst.input) {
            inst.input.val(clear ? '' : this._formatDate(inst));
        }
    },

    /* Retrieve the date(s) directly. */
    _getDate: function(inst) {
        var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :
            this._daylightSavingAdjust(new Date(
            inst.currentYear, inst.currentMonth, inst.currentDay)));
            return startDate;
    },

    /* Attach the onxxx handlers.  These are declared statically so
     * they work with static code transformers like Caja.
     */
    _attachHandlers: function(inst) {
        var stepMonths = this._get(inst, 'stepMonths');
        var id = '#' + inst.id.replace( /\\\\/g, "\\" );
        inst.dpDiv.find('[data-handler]').map(function () {
            var handler = {
                prev: function () {
                    window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, -stepMonths, 'M');
                },
                next: function () {
                    window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, +stepMonths, 'M');
                },
                hide: function () {
                    window['DP_jQuery_' + dpuuid].datepicker._hideDatepicker();
                },
                today: function () {
                    window['DP_jQuery_' + dpuuid].datepicker._gotoToday(id);
                },
                selectDay: function () {
                    window['DP_jQuery_' + dpuuid].datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);
                    return false;
                },
                selectMonth: function () {
                    window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'M');
                    return false;
                },
                selectYear: function () {
                    window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'Y');
                    return false;
                }
            };
            $(this).bind(this.getAttribute('data-event'), handler[this.getAttribute('data-handler')]);
        });
    },

    /* Generate the HTML for the current state of the date picker. */
    _generateHTML: function(inst) {
        var today = new Date();
        today = this._daylightSavingAdjust(
            new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time
        var isRTL = this._get(inst, 'isRTL');
        var showButtonPanel = this._get(inst, 'showButtonPanel');
        var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
        var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
        var numMonths = this._getNumberOfMonths(inst);
        var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
        var stepMonths = this._get(inst, 'stepMonths');
        var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
        var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
            new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
        var minDate = this._getMinMaxDate(inst, 'min');
        var maxDate = this._getMinMaxDate(inst, 'max');
        var drawMonth = inst.drawMonth - showCurrentAtPos;
        var drawYear = inst.drawYear;
        if (drawMonth < 0) {
            drawMonth += 12;
            drawYear--;
        }
        if (maxDate) {
            var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
                maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
            maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
            while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                drawMonth--;
                if (drawMonth < 0) {
                    drawMonth = 11;
                    drawYear--;
                }
            }
        }
        inst.drawMonth = drawMonth;
        inst.drawYear = drawYear;
        var prevText = this._get(inst, 'prevText');
        prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
            this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
            this._getFormatConfig(inst)));
        var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
            '<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click"' +
            ' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
            (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ prevText +'"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
        var nextText = this._get(inst, 'nextText');
        nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
            this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
            this._getFormatConfig(inst)));
        var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
            '<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click"' +
            ' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
            (hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
        var currentText = this._get(inst, 'currentText');
        var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
        currentText = (!navigationAsDateFormat ? currentText :
            this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
        var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">' +
            this._get(inst, 'closeText') + '</button>' : '');
        var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
            (this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click"' +
            '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
        var firstDay = parseInt(this._get(inst, 'firstDay'),10);
        firstDay = (isNaN(firstDay) ? 0 : firstDay);
        var showWeek = this._get(inst, 'showWeek');
        var dayNames = this._get(inst, 'dayNames');
        var dayNamesShort = this._get(inst, 'dayNamesShort');
        var dayNamesMin = this._get(inst, 'dayNamesMin');
        var monthNames = this._get(inst, 'monthNames');
        var monthNamesShort = this._get(inst, 'monthNamesShort');
        var beforeShowDay = this._get(inst, 'beforeShowDay');
        var showOtherMonths = this._get(inst, 'showOtherMonths');
        var selectOtherMonths = this._get(inst, 'selectOtherMonths');
        var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
        var defaultDate = this._getDefaultDate(inst);
        var html = '';
        for (var row = 0; row < numMonths[0]; row++) {
            var group = '';
            this.maxRows = 4;
            for (var col = 0; col < numMonths[1]; col++) {
                var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                var cornerClass = ' ui-corner-all';
                var calender = '';
                if (isMultiMonth) {
                    calender += '<div class="ui-datepicker-group';
                    if (numMonths[1] > 1)
                        switch (col) {
                            case 0: calender += ' ui-datepicker-group-first';
                                cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;
                            case numMonths[1]-1: calender += ' ui-datepicker-group-last';
                                cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;
                            default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;
                        }
                    calender += '">';
                }
                calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +
                    (/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +
                    (/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +
                    this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
                    row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                    '</div><table class="ui-datepicker-calendar"><thead>' +
                    '<tr>';
                var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
                for (var dow = 0; dow < 7; dow++) { // days of the week
                    var day = (dow + firstDay) % 7;
                    thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' +
                        '<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
                }
                calender += thead + '</tr></thead><tbody>';
                var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
                    inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
                var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
                this.maxRows = numRows;
                var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows
                    calender += '<tr>';
                    var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +
                        this._get(inst, 'calculateWeek')(printDate) + '</td>');
                    for (var dow = 0; dow < 7; dow++) { // create date picker days
                        var daySettings = (beforeShowDay ?
                            beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
                        var otherMonth = (printDate.getMonth() != drawMonth);
                        var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
                            (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                        tbody += '<td class="' +
                            ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends
                            (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months
                            ((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key
                            (defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?
                            // or defaultDate is current printedDate and defaultDate is selectedDate
                            ' ' + this._dayOverClass : '') + // highlight selected day
                            (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled': '') +  // highlight unselectable days
                            (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
                            (printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
                            (printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
                            ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title
                            (unselectable ? '' : ' data-handler="selectDay" data-event="click" data-month="' + printDate.getMonth() + '" data-year="' + printDate.getFullYear() + '"') + '>' + // actions
                            (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months
                            (unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
                            (printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
                            (printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day
                            (otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months
                            '" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date
                        printDate.setDate(printDate.getDate() + 1);
                        printDate = this._daylightSavingAdjust(printDate);
                    }
                    calender += tbody + '</tr>';
                }
                drawMonth++;
                if (drawMonth > 11) {
                    drawMonth = 0;
                    drawYear++;
                }
                calender += '</tbody></table>' + (isMultiMonth ? '</div>' +
                            ((numMonths[0] > 0 && col == numMonths[1]-1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
                group += calender;
            }
            html += group;
        }
        html += buttonPanel + ($.ui.ie6 && !inst.inline ?
            '<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
        inst._keyEvent = false;
        return html;
    },

    /* Generate the month and year header. */
    _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
            secondary, monthNames, monthNamesShort) {
        var changeMonth = this._get(inst, 'changeMonth');
        var changeYear = this._get(inst, 'changeYear');
        var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
        var html = '<div class="ui-datepicker-title">';
        var monthHtml = '';
        // month selection
        if (secondary || !changeMonth)
            monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
        else {
            var inMinYear = (minDate && minDate.getFullYear() == drawYear);
            var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
            monthHtml += '<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';
            for (var month = 0; month < 12; month++) {
                if ((!inMinYear || month >= minDate.getMonth()) &&
                        (!inMaxYear || month <= maxDate.getMonth()))
                    monthHtml += '<option value="' + month + '"' +
                        (month == drawMonth ? ' selected="selected"' : '') +
                        '>' + monthNamesShort[month] + '</option>';
            }
            monthHtml += '</select>';
        }
        if (!showMonthAfterYear)
            html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
        // year selection
        if ( !inst.yearshtml ) {
            inst.yearshtml = '';
            if (secondary || !changeYear)
                html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
            else {
                // determine range of years to display
                var years = this._get(inst, 'yearRange').split(':');
                var thisYear = new Date().getFullYear();
                var determineYear = function(value) {
                    var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :
                        (value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :
                        parseInt(value, 10)));
                    return (isNaN(year) ? thisYear : year);
                };
                var year = determineYear(years[0]);
                var endYear = Math.max(year, determineYear(years[1] || ''));
                year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                inst.yearshtml += '<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';
                for (; year <= endYear; year++) {
                    inst.yearshtml += '<option value="' + year + '"' +
                        (year == drawYear ? ' selected="selected"' : '') +
                        '>' + year + '</option>';
                }
                inst.yearshtml += '</select>';

                html += inst.yearshtml;
                inst.yearshtml = null;
            }
        }
        html += this._get(inst, 'yearSuffix');
        if (showMonthAfterYear)
            html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
        html += '</div>'; // Close datepicker_header
        return html;
    },

    /* Adjust one of the date sub-fields. */
    _adjustInstDate: function(inst, offset, period) {
        var year = inst.drawYear + (period == 'Y' ? offset : 0);
        var month = inst.drawMonth + (period == 'M' ? offset : 0);
        var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
            (period == 'D' ? offset : 0);
        var date = this._restrictMinMax(inst,
            this._daylightSavingAdjust(new Date(year, month, day)));
        inst.selectedDay = date.getDate();
        inst.drawMonth = inst.selectedMonth = date.getMonth();
        inst.drawYear = inst.selectedYear = date.getFullYear();
        if (period == 'M' || period == 'Y')
            this._notifyChange(inst);
    },

    /* Ensure a date is within any min/max bounds. */
    _restrictMinMax: function(inst, date) {
        var minDate = this._getMinMaxDate(inst, 'min');
        var maxDate = this._getMinMaxDate(inst, 'max');
        var newDate = (minDate && date < minDate ? minDate : date);
        newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
        return newDate;
    },

    /* Notify change of month/year. */
    _notifyChange: function(inst) {
        var onChange = this._get(inst, 'onChangeMonthYear');
        if (onChange)
            onChange.apply((inst.input ? inst.input[0] : null),
                [inst.selectedYear, inst.selectedMonth + 1, inst]);
    },

    /* Determine the number of months to show. */
    _getNumberOfMonths: function(inst) {
        var numMonths = this._get(inst, 'numberOfMonths');
        return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
    },

    /* Determine the current maximum date - ensure no time components are set. */
    _getMinMaxDate: function(inst, minMax) {
        return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
    },

    /* Find the number of days in a given month. */
    _getDaysInMonth: function(year, month) {
        return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
    },

    /* Find the day of the week of the first of a month. */
    _getFirstDayOfMonth: function(year, month) {
        return new Date(year, month, 1).getDay();
    },

    /* Determines if we should allow a "next/prev" month display change. */
    _canAdjustMonth: function(inst, offset, curYear, curMonth) {
        var numMonths = this._getNumberOfMonths(inst);
        var date = this._daylightSavingAdjust(new Date(curYear,
            curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
        if (offset < 0)
            date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
        return this._isInRange(inst, date);
    },

    /* Is the given date in the accepted range? */
    _isInRange: function(inst, date) {
        var minDate = this._getMinMaxDate(inst, 'min');
        var maxDate = this._getMinMaxDate(inst, 'max');
        return ((!minDate || date.getTime() >= minDate.getTime()) &&
            (!maxDate || date.getTime() <= maxDate.getTime()));
    },

    /* Provide the configuration settings for formatting/parsing. */
    _getFormatConfig: function(inst) {
        var shortYearCutoff = this._get(inst, 'shortYearCutoff');
        shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
            new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
        return {shortYearCutoff: shortYearCutoff,
            dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),
            monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};
    },

    /* Format the given date for display. */
    _formatDate: function(inst, day, month, year) {
        if (!day) {
            inst.currentDay = inst.selectedDay;
            inst.currentMonth = inst.selectedMonth;
            inst.currentYear = inst.selectedYear;
        }
        var date = (day ? (typeof day == 'object' ? day :
            this._daylightSavingAdjust(new Date(year, month, day))) :
            this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
        return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
    }
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
function bindHover(dpDiv) {
    var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
    return dpDiv.delegate(selector, 'mouseout', function() {
            $(this).removeClass('ui-state-hover');
            if (this.className.indexOf('ui-datepicker-prev') != -1) $(this).removeClass('ui-datepicker-prev-hover');
            if (this.className.indexOf('ui-datepicker-next') != -1) $(this).removeClass('ui-datepicker-next-hover');
        })
        .delegate(selector, 'mouseover', function(){
            if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
                $(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
                $(this).addClass('ui-state-hover');
                if (this.className.indexOf('ui-datepicker-prev') != -1) $(this).addClass('ui-datepicker-prev-hover');
                if (this.className.indexOf('ui-datepicker-next') != -1) $(this).addClass('ui-datepicker-next-hover');
            }
        });
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
    $.extend(target, props);
    for (var name in props)
        if (props[name] == null || props[name] == undefined)
            target[name] = props[name];
    return target;
};

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
                    Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

    /* Verify an empty collection wasn't passed - Fixes #6976 */
    if ( !this.length ) {
        return this;
    }

    /* Initialise the date picker. */
    if (!$.datepicker.initialized) {
        $(document).mousedown($.datepicker._checkExternalClick).
            find(document.body).append($.datepicker.dpDiv);
        $.datepicker.initialized = true;
    }

    var otherArgs = Array.prototype.slice.call(arguments, 1);
    if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
        return $.datepicker['_' + options + 'Datepicker'].
            apply($.datepicker, [this[0]].concat(otherArgs));
    if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
        return $.datepicker['_' + options + 'Datepicker'].
            apply($.datepicker, [this[0]].concat(otherArgs));
    return this.each(function() {
        typeof options == 'string' ?
            $.datepicker['_' + options + 'Datepicker'].
                apply($.datepicker, [this].concat(otherArgs)) :
            $.datepicker._attachDatepicker(this, options);
    });
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.9.2";

// Workaround for #4055
// Add another global to avoid noConflict issues with inline event handlers
window['DP_jQuery_' + dpuuid] = $;

})(jQuery);
(function( $, undefined ) {

var uiDialogClasses = "ui-dialog ui-widget ui-widget-content ui-corner-all ",
    sizeRelatedOptions = {
        buttons: true,
        height: true,
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true,
        width: true
    },
    resizableRelatedOptions = {
        maxHeight: true,
        maxWidth: true,
        minHeight: true,
        minWidth: true
    };

$.widget("ui.dialog", {
    version: "1.9.2",
    options: {
        autoOpen: true,
        buttons: {},
        closeOnEscape: true,
        closeText: "close",
        dialogClass: "",
        draggable: true,
        hide: null,
        height: "auto",
        maxHeight: false,
        maxWidth: false,
        minHeight: 150,
        minWidth: 150,
        modal: false,
        position: {
            my: "center",
            at: "center",
            of: window,
            collision: "fit",
            // ensure that the titlebar is never outside the document
            using: function( pos ) {
                var topOffset = $( this ).css( pos ).offset().top;
                if ( topOffset < 0 ) {
                    $( this ).css( "top", pos.top - topOffset );
                }
            }
        },
        resizable: true,
        show: null,
        stack: true,
        title: "",
        width: 300,
        zIndex: 1000
    },

    _create: function() {
        this.originalTitle = this.element.attr( "title" );
        // #5742 - .attr() might return a DOMElement
        if ( typeof this.originalTitle !== "string" ) {
            this.originalTitle = "";
        }
        this.oldPosition = {
            parent: this.element.parent(),
            index: this.element.parent().children().index( this.element )
        };
        this.options.title = this.options.title || this.originalTitle;
        var that = this,
            options = this.options,

            title = options.title || "&#160;",
            uiDialog,
            uiDialogTitlebar,
            uiDialogTitlebarClose,
            uiDialogTitle,
            uiDialogButtonPane;

            uiDialog = ( this.uiDialog = $( "<div>" ) )
                .addClass( uiDialogClasses + options.dialogClass )
                .css({
                    display: "none",
                    outline: 0, // TODO: move to stylesheet
                    zIndex: options.zIndex
                })
                // setting tabIndex makes the div focusable
                .attr( "tabIndex", -1)
                .keydown(function( event ) {
                    if ( options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
                            event.keyCode === $.ui.keyCode.ESCAPE ) {
                        that.close( event );
                        event.preventDefault();
                    }
                })
                .mousedown(function( event ) {
                    that.moveToTop( false, event );
                })
                .appendTo( "body" );

            this.element
                .show()
                .removeAttr( "title" )
                .addClass( "ui-dialog-content ui-widget-content" )
                .appendTo( uiDialog );

            uiDialogTitlebar = ( this.uiDialogTitlebar = $( "<div>" ) )
                .addClass( "ui-dialog-titlebar  ui-widget-header  " +
                    "ui-corner-all  ui-helper-clearfix" )
                .bind( "mousedown", function() {
                    // Dialog isn't getting focus when dragging (#8063)
                    uiDialog.focus();
                })
                .prependTo( uiDialog );

            uiDialogTitlebarClose = $( "<a href='#'></a>" )
                .addClass( "ui-dialog-titlebar-close  ui-corner-all" )
                .attr( "role", "button" )
                .click(function( event ) {
                    event.preventDefault();
                    that.close( event );
                })
                .appendTo( uiDialogTitlebar );

            ( this.uiDialogTitlebarCloseText = $( "<span>" ) )
                .addClass( "ui-icon ui-icon-closethick" )
                .text( options.closeText )
                .appendTo( uiDialogTitlebarClose );

            uiDialogTitle = $( "<span>" )
                .uniqueId()
                .addClass( "ui-dialog-title" )
                .html( title )
                .prependTo( uiDialogTitlebar );

            uiDialogButtonPane = ( this.uiDialogButtonPane = $( "<div>" ) )
                .addClass( "ui-dialog-buttonpane ui-widget-content ui-helper-clearfix" );

            ( this.uiButtonSet = $( "<div>" ) )
                .addClass( "ui-dialog-buttonset" )
                .appendTo( uiDialogButtonPane );

        uiDialog.attr({
            role: "dialog",
            "aria-labelledby": uiDialogTitle.attr( "id" )
        });

        uiDialogTitlebar.find( "*" ).add( uiDialogTitlebar ).disableSelection();
        this._hoverable( uiDialogTitlebarClose );
        this._focusable( uiDialogTitlebarClose );

        if ( options.draggable && $.fn.draggable ) {
            this._makeDraggable();
        }
        if ( options.resizable && $.fn.resizable ) {
            this._makeResizable();
        }

        this._createButtons( options.buttons );
        this._isOpen = false;

        if ( $.fn.bgiframe ) {
            uiDialog.bgiframe();
        }

        // prevent tabbing out of modal dialogs
        this._on( uiDialog, { keydown: function( event ) {
            if ( !options.modal || event.keyCode !== $.ui.keyCode.TAB ) {
                return;
            }

            var tabbables = $( ":tabbable", uiDialog ),
                first = tabbables.filter( ":first" ),
                last  = tabbables.filter( ":last" );

            if ( event.target === last[0] && !event.shiftKey ) {
                first.focus( 1 );
                return false;
            } else if ( event.target === first[0] && event.shiftKey ) {
                last.focus( 1 );
                return false;
            }
        }});
    },

    _init: function() {
        if ( this.options.autoOpen ) {
            this.open();
        }
    },

    _destroy: function() {
        var next,
            oldPosition = this.oldPosition;

        if ( this.overlay ) {
            this.overlay.destroy();
        }
        this.uiDialog.hide();
        this.element
            .removeClass( "ui-dialog-content ui-widget-content" )
            .hide()
            .appendTo( "body" );
        this.uiDialog.remove();

        if ( this.originalTitle ) {
            this.element.attr( "title", this.originalTitle );
        }

        next = oldPosition.parent.children().eq( oldPosition.index );
        // Don't try to place the dialog next to itself (#8613)
        if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {
            next.before( this.element );
        } else {
            oldPosition.parent.append( this.element );
        }
    },

    widget: function() {
        return this.uiDialog;
    },

    close: function( event ) {
        var that = this,
            maxZ, thisZ;

        if ( !this._isOpen ) {
            return;
        }

        if ( false === this._trigger( "beforeClose", event ) ) {
            return;
        }

        this._isOpen = false;

        if ( this.overlay ) {
            this.overlay.destroy();
        }

        if ( this.options.hide ) {
            this._hide( this.uiDialog, this.options.hide, function() {
                that._trigger( "close", event );
            });
        } else {
            this.uiDialog.hide();
            this._trigger( "close", event );
        }

        $.ui.dialog.overlay.resize();

        // adjust the maxZ to allow other modal dialogs to continue to work (see #4309)
        if ( this.options.modal ) {
            maxZ = 0;
            $( ".ui-dialog" ).each(function() {
                if ( this !== that.uiDialog[0] ) {
                    thisZ = $( this ).css( "z-index" );
                    if ( !isNaN( thisZ ) ) {
                        maxZ = Math.max( maxZ, thisZ );
                    }
                }
            });
            $.ui.dialog.maxZ = maxZ;
        }

        return this;
    },

    isOpen: function() {
        return this._isOpen;
    },

    // the force parameter allows us to move modal dialogs to their correct
    // position on open
    moveToTop: function( force, event ) {
        var options = this.options,
            saveScroll;

        if ( ( options.modal && !force ) ||
                ( !options.stack && !options.modal ) ) {
            return this._trigger( "focus", event );
        }

        if ( options.zIndex > $.ui.dialog.maxZ ) {
            $.ui.dialog.maxZ = options.zIndex;
        }
        if ( this.overlay ) {
            $.ui.dialog.maxZ += 1;
            $.ui.dialog.overlay.maxZ = $.ui.dialog.maxZ;
            this.overlay.$el.css( "z-index", $.ui.dialog.overlay.maxZ );
        }

        // Save and then restore scroll
        // Opera 9.5+ resets when parent z-index is changed.
        // http://bugs.jqueryui.com/ticket/3193
        saveScroll = {
            scrollTop: this.element.scrollTop(),
            scrollLeft: this.element.scrollLeft()
        };
        $.ui.dialog.maxZ += 1;
        this.uiDialog.css( "z-index", $.ui.dialog.maxZ );
        this.element.attr( saveScroll );
        this._trigger( "focus", event );

        return this;
    },

    open: function() {
        if ( this._isOpen ) {
            return;
        }

        var hasFocus,
            options = this.options,
            uiDialog = this.uiDialog;

        this._size();
        this._position( options.position );
        uiDialog.show( options.show );
        this.overlay = options.modal ? new $.ui.dialog.overlay( this ) : null;
        this.moveToTop( true );

        // set focus to the first tabbable element in the content area or the first button
        // if there are no tabbable elements, set focus on the dialog itself
        hasFocus = this.element.find( ":tabbable" );
        if ( !hasFocus.length ) {
            hasFocus = this.uiDialogButtonPane.find( ":tabbable" );
            if ( !hasFocus.length ) {
                hasFocus = uiDialog;
            }
        }
        hasFocus.eq( 0 ).focus();

        this._isOpen = true;
        this._trigger( "open" );

        return this;
    },

    _createButtons: function( buttons ) {
        var that = this,
            hasButtons = false;

        // if we already have a button pane, remove it
        this.uiDialogButtonPane.remove();
        this.uiButtonSet.empty();

        if ( typeof buttons === "object" && buttons !== null ) {
            $.each( buttons, function() {
                return !(hasButtons = true);
            });
        }
        if ( hasButtons ) {
            $.each( buttons, function( name, props ) {
                var button, click;
                props = $.isFunction( props ) ?
                    { click: props, text: name } :
                    props;
                // Default to a non-submitting button
                props = $.extend( { type: "button" }, props );
                // Change the context for the click callback to be the main element
                click = props.click;
                props.click = function() {
                    click.apply( that.element[0], arguments );
                };
                button = $( "<button></button>", props )
                    .appendTo( that.uiButtonSet );
                if ( $.fn.button ) {
                    button.button();
                }
            });
            this.uiDialog.addClass( "ui-dialog-buttons" );
            this.uiDialogButtonPane.appendTo( this.uiDialog );
        } else {
            this.uiDialog.removeClass( "ui-dialog-buttons" );
        }
    },

    _makeDraggable: function() {
        var that = this,
            options = this.options;

        function filteredUi( ui ) {
            return {
                position: ui.position,
                offset: ui.offset
            };
        }

        this.uiDialog.draggable({
            cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
            handle: ".ui-dialog-titlebar",
            containment: "document",
            start: function( event, ui ) {
                $( this )
                    .addClass( "ui-dialog-dragging" );
                that._trigger( "dragStart", event, filteredUi( ui ) );
            },
            drag: function( event, ui ) {
                that._trigger( "drag", event, filteredUi( ui ) );
            },
            stop: function( event, ui ) {
                options.position = [
                    ui.position.left - that.document.scrollLeft(),
                    ui.position.top - that.document.scrollTop()
                ];
                $( this )
                    .removeClass( "ui-dialog-dragging" );
                that._trigger( "dragStop", event, filteredUi( ui ) );
                $.ui.dialog.overlay.resize();
            }
        });
    },

    _makeResizable: function( handles ) {
        handles = (handles === undefined ? this.options.resizable : handles);
        var that = this,
            options = this.options,
            // .ui-resizable has position: relative defined in the stylesheet
            // but dialogs have to use absolute or fixed positioning
            position = this.uiDialog.css( "position" ),
            resizeHandles = typeof handles === 'string' ?
                handles :
                "n,e,s,w,se,sw,ne,nw";

        function filteredUi( ui ) {
            return {
                originalPosition: ui.originalPosition,
                originalSize: ui.originalSize,
                position: ui.position,
                size: ui.size
            };
        }

        this.uiDialog.resizable({
            cancel: ".ui-dialog-content",
            containment: "document",
            alsoResize: this.element,
            maxWidth: options.maxWidth,
            maxHeight: options.maxHeight,
            minWidth: options.minWidth,
            minHeight: this._minHeight(),
            handles: resizeHandles,
            start: function( event, ui ) {
                $( this ).addClass( "ui-dialog-resizing" );
                that._trigger( "resizeStart", event, filteredUi( ui ) );
            },
            resize: function( event, ui ) {
                that._trigger( "resize", event, filteredUi( ui ) );
            },
            stop: function( event, ui ) {
                $( this ).removeClass( "ui-dialog-resizing" );
                options.height = $( this ).height();
                options.width = $( this ).width();
                that._trigger( "resizeStop", event, filteredUi( ui ) );
                $.ui.dialog.overlay.resize();
            }
        })
        .css( "position", position )
        .find( ".ui-resizable-se" )
            .addClass( "ui-icon ui-icon-grip-diagonal-se" );
    },

    _minHeight: function() {
        var options = this.options;

        if ( options.height === "auto" ) {
            return options.minHeight;
        } else {
            return Math.min( options.minHeight, options.height );
        }
    },

    _position: function( position ) {
        var myAt = [],
            offset = [ 0, 0 ],
            isVisible;

        if ( position ) {
            // deep extending converts arrays to objects in jQuery <= 1.3.2 :-(
    //      if (typeof position == 'string' || $.isArray(position)) {
    //          myAt = $.isArray(position) ? position : position.split(' ');

            if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
                myAt = position.split ? position.split( " " ) : [ position[ 0 ], position[ 1 ] ];
                if ( myAt.length === 1 ) {
                    myAt[ 1 ] = myAt[ 0 ];
                }

                $.each( [ "left", "top" ], function( i, offsetPosition ) {
                    if ( +myAt[ i ] === myAt[ i ] ) {
                        offset[ i ] = myAt[ i ];
                        myAt[ i ] = offsetPosition;
                    }
                });

                position = {
                    my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
                        myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
                    at: myAt.join( " " )
                };
            }

            position = $.extend( {}, $.ui.dialog.prototype.options.position, position );
        } else {
            position = $.ui.dialog.prototype.options.position;
        }

        // need to show the dialog to get the actual offset in the position plugin
        isVisible = this.uiDialog.is( ":visible" );
        if ( !isVisible ) {
            this.uiDialog.show();
        }
        this.uiDialog.position( position );
        if ( !isVisible ) {
            this.uiDialog.hide();
        }
    },

    _setOptions: function( options ) {
        var that = this,
            resizableOptions = {},
            resize = false;

        $.each( options, function( key, value ) {
            that._setOption( key, value );

            if ( key in sizeRelatedOptions ) {
                resize = true;
            }
            if ( key in resizableRelatedOptions ) {
                resizableOptions[ key ] = value;
            }
        });

        if ( resize ) {
            this._size();
        }
        if ( this.uiDialog.is( ":data(resizable)" ) ) {
            this.uiDialog.resizable( "option", resizableOptions );
        }
    },

    _setOption: function( key, value ) {
        var isDraggable, isResizable,
            uiDialog = this.uiDialog;

        switch ( key ) {
            case "buttons":
                this._createButtons( value );
                break;
            case "closeText":
                // ensure that we always pass a string
                this.uiDialogTitlebarCloseText.text( "" + value );
                break;
            case "dialogClass":
                uiDialog
                    .removeClass( this.options.dialogClass )
                    .addClass( uiDialogClasses + value );
                break;
            case "disabled":
                if ( value ) {
                    uiDialog.addClass( "ui-dialog-disabled" );
                } else {
                    uiDialog.removeClass( "ui-dialog-disabled" );
                }
                break;
            case "draggable":
                isDraggable = uiDialog.is( ":data(draggable)" );
                if ( isDraggable && !value ) {
                    uiDialog.draggable( "destroy" );
                }

                if ( !isDraggable && value ) {
                    this._makeDraggable();
                }
                break;
            case "position":
                this._position( value );
                break;
            case "resizable":
                // currently resizable, becoming non-resizable
                isResizable = uiDialog.is( ":data(resizable)" );
                if ( isResizable && !value ) {
                    uiDialog.resizable( "destroy" );
                }

                // currently resizable, changing handles
                if ( isResizable && typeof value === "string" ) {
                    uiDialog.resizable( "option", "handles", value );
                }

                // currently non-resizable, becoming resizable
                if ( !isResizable && value !== false ) {
                    this._makeResizable( value );
                }
                break;
            case "title":
                // convert whatever was passed in o a string, for html() to not throw up
                $( ".ui-dialog-title", this.uiDialogTitlebar )
                    .html( "" + ( value || "&#160;" ) );
                break;
        }

        this._super( key, value );
    },

    _size: function() {
        /* If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
         * divs will both have width and height set, so we need to reset them
         */
        var nonContentHeight, minContentHeight, autoHeight,
            options = this.options,
            isVisible = this.uiDialog.is( ":visible" );

        // reset content sizing
        this.element.show().css({
            width: "auto",
            minHeight: 0,
            height: 0
        });

        if ( options.minWidth > options.width ) {
            options.width = options.minWidth;
        }

        // reset wrapper sizing
        // determine the height of all the non-content elements
        nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            })
            .outerHeight();
        minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );

        if ( options.height === "auto" ) {
            // only needed for IE6 support
            if ( $.support.minHeight ) {
                this.element.css({
                    minHeight: minContentHeight,
                    height: "auto"
                });
            } else {
                this.uiDialog.show();
                autoHeight = this.element.css( "height", "auto" ).height();
                if ( !isVisible ) {
                    this.uiDialog.hide();
                }
                this.element.height( Math.max( autoHeight, minContentHeight ) );
            }
        } else {
            this.element.height( Math.max( options.height - nonContentHeight, 0 ) );
        }

        if (this.uiDialog.is( ":data(resizable)" ) ) {
            this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
        }
    }
});

$.extend($.ui.dialog, {
    uuid: 0,
    maxZ: 0,

    getTitleId: function($el) {
        var id = $el.attr( "id" );
        if ( !id ) {
            this.uuid += 1;
            id = this.uuid;
        }
        return "ui-dialog-title-" + id;
    },

    overlay: function( dialog ) {
        this.$el = $.ui.dialog.overlay.create( dialog );
    }
});

$.extend( $.ui.dialog.overlay, {
    instances: [],
    // reuse old instances due to IE memory leak with alpha transparency (see #5185)
    oldInstances: [],
    maxZ: 0,
    events: $.map(
        "focus,mousedown,mouseup,keydown,keypress,click".split( "," ),
        function( event ) {
            return event + ".dialog-overlay";
        }
    ).join( " " ),
    create: function( dialog ) {
        if ( this.instances.length === 0 ) {
            // prevent use of anchors and inputs
            // we use a setTimeout in case the overlay is created from an
            // event that we're going to be cancelling (see #2804)
            setTimeout(function() {
                // handle $(el).dialog().dialog('close') (see #4065)
                if ( $.ui.dialog.overlay.instances.length ) {
                    $( document ).bind( $.ui.dialog.overlay.events, function( event ) {
                        // stop events if the z-index of the target is < the z-index of the overlay
                        // we cannot return true when we don't want to cancel the event (#3523)
                        if ( $( event.target ).zIndex() < $.ui.dialog.overlay.maxZ ) {
                            return false;
                        }
                    });
                }
            }, 1 );

            // handle window resize
            $( window ).bind( "resize.dialog-overlay", $.ui.dialog.overlay.resize );
        }

        var $el = ( this.oldInstances.pop() || $( "<div>" ).addClass( "ui-widget-overlay" ) );

        // allow closing by pressing the escape key
        $( document ).bind( "keydown.dialog-overlay", function( event ) {
            var instances = $.ui.dialog.overlay.instances;
            // only react to the event if we're the top overlay
            if ( instances.length !== 0 && instances[ instances.length - 1 ] === $el &&
                dialog.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
                event.keyCode === $.ui.keyCode.ESCAPE ) {

                dialog.close( event );
                event.preventDefault();
            }
        });

        $el.appendTo( document.body ).css({
            width: this.width(),
            height: this.height()
        });

        if ( $.fn.bgiframe ) {
            $el.bgiframe();
        }

        this.instances.push( $el );
        return $el;
    },

    destroy: function( $el ) {
        var indexOf = $.inArray( $el, this.instances ),
            maxZ = 0;

        if ( indexOf !== -1 ) {
            this.oldInstances.push( this.instances.splice( indexOf, 1 )[ 0 ] );
        }

        if ( this.instances.length === 0 ) {
            $( [ document, window ] ).unbind( ".dialog-overlay" );
        }

        $el.height( 0 ).width( 0 ).remove();

        // adjust the maxZ to allow other modal dialogs to continue to work (see #4309)
        $.each( this.instances, function() {
            maxZ = Math.max( maxZ, this.css( "z-index" ) );
        });
        this.maxZ = maxZ;
    },

    height: function() {
        var scrollHeight,
            offsetHeight;
        // handle IE
        if ( $.ui.ie ) {
            scrollHeight = Math.max(
                document.documentElement.scrollHeight,
                document.body.scrollHeight
            );
            offsetHeight = Math.max(
                document.documentElement.offsetHeight,
                document.body.offsetHeight
            );

            if ( scrollHeight < offsetHeight ) {
                return $( window ).height() + "px";
            } else {
                return scrollHeight + "px";
            }
        // handle "good" browsers
        } else {
            return $( document ).height() + "px";
        }
    },

    width: function() {
        var scrollWidth,
            offsetWidth;
        // handle IE
        if ( $.ui.ie ) {
            scrollWidth = Math.max(
                document.documentElement.scrollWidth,
                document.body.scrollWidth
            );
            offsetWidth = Math.max(
                document.documentElement.offsetWidth,
                document.body.offsetWidth
            );

            if ( scrollWidth < offsetWidth ) {
                return $( window ).width() + "px";
            } else {
                return scrollWidth + "px";
            }
        // handle "good" browsers
        } else {
            return $( document ).width() + "px";
        }
    },

    resize: function() {
        /* If the dialog is draggable and the user drags it past the
         * right edge of the window, the document becomes wider so we
         * need to stretch the overlay. If the user then drags the
         * dialog back to the left, the document will become narrower,
         * so we need to shrink the overlay to the appropriate size.
         * This is handled by shrinking the overlay before setting it
         * to the full document size.
         */
        var $overlays = $( [] );
        $.each( $.ui.dialog.overlay.instances, function() {
            $overlays = $overlays.add( this );
        });

        $overlays.css({
            width: 0,
            height: 0
        }).css({
            width: $.ui.dialog.overlay.width(),
            height: $.ui.dialog.overlay.height()
        });
    }
});

$.extend( $.ui.dialog.overlay.prototype, {
    destroy: function() {
        $.ui.dialog.overlay.destroy( this.$el );
    }
});

}( jQuery ) );
(function( $, undefined ) {

$.widget("ui.draggable", $.ui.mouse, {
    version: "1.9.2",
    widgetEventPrefix: "drag",
    options: {
        addClasses: true,
        appendTo: "parent",
        axis: false,
        connectToSortable: false,
        containment: false,
        cursor: "auto",
        cursorAt: false,
        grid: false,
        handle: false,
        helper: "original",
        iframeFix: false,
        opacity: false,
        refreshPositions: false,
        revert: false,
        revertDuration: 500,
        scope: "default",
        scroll: true,
        scrollSensitivity: 20,
        scrollSpeed: 20,
        snap: false,
        snapMode: "both",
        snapTolerance: 20,
        stack: false,
        zIndex: false
    },
    _create: function() {

        if (this.options.helper == 'original' && !(/^(?:r|a|f)/).test(this.element.css("position")))
            this.element[0].style.position = 'relative';

        (this.options.addClasses && this.element.addClass("ui-draggable"));
        (this.options.disabled && this.element.addClass("ui-draggable-disabled"));

        this._mouseInit();

    },

    _destroy: function() {
        this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
        this._mouseDestroy();
    },

    _mouseCapture: function(event) {

        var o = this.options;

        // among others, prevent a drag on a resizable-handle
        if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))
            return false;

        //Quit if we're not on a valid handle
        this.handle = this._getHandle(event);
        if (!this.handle)
            return false;

        $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
            $('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>')
            .css({
                width: this.offsetWidth+"px", height: this.offsetHeight+"px",
                position: "absolute", opacity: "0.001", zIndex: 1000
            })
            .css($(this).offset())
            .appendTo("body");
        });

        return true;

    },

    _mouseStart: function(event) {

        var o = this.options;

        //Create and append the visible helper
        this.helper = this._createHelper(event);

        this.helper.addClass("ui-draggable-dragging");

        //Cache the helper size
        this._cacheHelperProportions();

        //If ddmanager is used for droppables, set the global draggable
        if($.ui.ddmanager)
            $.ui.ddmanager.current = this;

        /*
         * - Position generation -
         * This block generates everything position related - it's the core of draggables.
         */

        //Cache the margins of the original element
        this._cacheMargins();

        //Store the helper's css position
        this.cssPosition = this.helper.css("position");
        this.scrollParent = this.helper.scrollParent();

        //The element's absolute position on the page minus margins
        this.offset = this.positionAbs = this.element.offset();
        this.offset = {
            top: this.offset.top - this.margins.top,
            left: this.offset.left - this.margins.left
        };

        $.extend(this.offset, {
            click: { //Where the click happened, relative to the element
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            },
            parent: this._getParentOffset(),
            relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
        });

        //Generate the original position
        this.originalPosition = this.position = this._generatePosition(event);
        this.originalPageX = event.pageX;
        this.originalPageY = event.pageY;

        //Adjust the mouse offset relative to the helper if 'cursorAt' is supplied
        (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

        //Set a containment if given in the options
        if(o.containment)
            this._setContainment();

        //Trigger event + callbacks
        if(this._trigger("start", event) === false) {
            this._clear();
            return false;
        }

        //Recache the helper size
        this._cacheHelperProportions();

        //Prepare the droppable offsets
        if ($.ui.ddmanager && !o.dropBehaviour)
            $.ui.ddmanager.prepareOffsets(this, event);


        this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

        //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
        if ( $.ui.ddmanager ) $.ui.ddmanager.dragStart(this, event);

        return true;
    },

    _mouseDrag: function(event, noPropagation) {

        //Compute the helpers position
        this.position = this._generatePosition(event);
        this.positionAbs = this._convertPositionTo("absolute");

        //Call plugins and callbacks and use the resulting position if something is returned
        if (!noPropagation) {
            var ui = this._uiHash();
            if(this._trigger('drag', event, ui) === false) {
                this._mouseUp({});
                return false;
            }
            this.position = ui.position;
        }

        if(!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left+'px';
        if(!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top+'px';
        if($.ui.ddmanager) $.ui.ddmanager.drag(this, event);

        return false;
    },

    _mouseStop: function(event) {

        //If we are using droppables, inform the manager about the drop
        var dropped = false;
        if ($.ui.ddmanager && !this.options.dropBehaviour)
            dropped = $.ui.ddmanager.drop(this, event);

        //if a drop comes from outside (a sortable)
        if(this.dropped) {
            dropped = this.dropped;
            this.dropped = false;
        }

        //if the original element is no longer in the DOM don't bother to continue (see #8269)
        var element = this.element[0], elementInDom = false;
        while ( element && (element = element.parentNode) ) {
            if (element == document ) {
                elementInDom = true;
            }
        }
        if ( !elementInDom && this.options.helper === "original" )
            return false;

        if((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
            var that = this;
            $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                if(that._trigger("stop", event) !== false) {
                    that._clear();
                }
            });
        } else {
            if(this._trigger("stop", event) !== false) {
                this._clear();
            }
        }

        return false;
    },

    _mouseUp: function(event) {
        //Remove frame helpers
        $("div.ui-draggable-iframeFix").each(function() {
            this.parentNode.removeChild(this);
        });

        //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
        if( $.ui.ddmanager ) $.ui.ddmanager.dragStop(this, event);

        return $.ui.mouse.prototype._mouseUp.call(this, event);
    },

    cancel: function() {

        if(this.helper.is(".ui-draggable-dragging")) {
            this._mouseUp({});
        } else {
            this._clear();
        }

        return this;

    },

    _getHandle: function(event) {

        var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
        $(this.options.handle, this.element)
            .find("*")
            .andSelf()
            .each(function() {
                if(this == event.target) handle = true;
            });

        return handle;

    },

    _createHelper: function(event) {

        var o = this.options;
        var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone().removeAttr('id') : this.element);

        if(!helper.parents('body').length)
            helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));

        if(helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))
            helper.css("position", "absolute");

        return helper;

    },

    _adjustOffsetFromHelper: function(obj) {
        if (typeof obj == 'string') {
            obj = obj.split(' ');
        }
        if ($.isArray(obj)) {
            obj = {left: +obj[0], top: +obj[1] || 0};
        }
        if ('left' in obj) {
            this.offset.click.left = obj.left + this.margins.left;
        }
        if ('right' in obj) {
            this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
        }
        if ('top' in obj) {
            this.offset.click.top = obj.top + this.margins.top;
        }
        if ('bottom' in obj) {
            this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        }
    },

    _getParentOffset: function() {

        //Get the offsetParent and cache its position
        this.offsetParent = this.helper.offsetParent();
        var po = this.offsetParent.offset();

        // This is a special case where we need to modify a offset calculated on start, since the following happened:
        // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
        // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
        //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
        if(this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
            po.left += this.scrollParent.scrollLeft();
            po.top += this.scrollParent.scrollTop();
        }

        if((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
        || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.ui.ie)) //Ugly IE fix
            po = { top: 0, left: 0 };

        return {
            top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
            left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
        };

    },

    _getRelativeOffset: function() {

        if(this.cssPosition == "relative") {
            var p = this.element.position();
            return {
                top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
                left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
            };
        } else {
            return { top: 0, left: 0 };
        }

    },

    _cacheMargins: function() {
        this.margins = {
            left: (parseInt(this.element.css("marginLeft"),10) || 0),
            top: (parseInt(this.element.css("marginTop"),10) || 0),
            right: (parseInt(this.element.css("marginRight"),10) || 0),
            bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
        };
    },

    _cacheHelperProportions: function() {
        this.helperProportions = {
            width: this.helper.outerWidth(),
            height: this.helper.outerHeight()
        };
    },

    _setContainment: function() {

        var o = this.options;
        if(o.containment == 'parent') o.containment = this.helper[0].parentNode;
        if(o.containment == 'document' || o.containment == 'window') this.containment = [
            o.containment == 'document' ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
            o.containment == 'document' ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
            (o.containment == 'document' ? 0 : $(window).scrollLeft()) + $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
            (o.containment == 'document' ? 0 : $(window).scrollTop()) + ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
        ];

        if(!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor != Array) {
            var c = $(o.containment);
            var ce = c[0]; if(!ce) return;
            var co = c.offset();
            var over = ($(ce).css("overflow") != 'hidden');

            this.containment = [
                (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0),
                (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0),
                (over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
                (over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top  - this.margins.bottom
            ];
            this.relative_container = c;

        } else if(o.containment.constructor == Array) {
            this.containment = o.containment;
        }

    },

    _convertPositionTo: function(d, pos) {

        if(!pos) pos = this.position;
        var mod = d == "absolute" ? 1 : -1;
        var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

        return {
            top: (
                pos.top                                                                 // The absolute mouse position
                + this.offset.relative.top * mod                                        // Only for relative positioned nodes: Relative offset from element to offset parent
                + this.offset.parent.top * mod                                          // The offsetParent's offset without borders (offset + border)
                - ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
            ),
            left: (
                pos.left                                                                // The absolute mouse position
                + this.offset.relative.left * mod                                       // Only for relative positioned nodes: Relative offset from element to offset parent
                + this.offset.parent.left * mod                                         // The offsetParent's offset without borders (offset + border)
                - ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
            )
        };

    },

    _generatePosition: function(event) {

        var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
        var pageX = event.pageX;
        var pageY = event.pageY;

        /*
         * - Position constraining -
         * Constrain the position to a mix of grid, containment.
         */

        if(this.originalPosition) { //If we are not dragging yet, we won't check for options
            var containment;
            if(this.containment) {
            if (this.relative_container){
                var co = this.relative_container.offset();
                containment = [ this.containment[0] + co.left,
                    this.containment[1] + co.top,
                    this.containment[2] + co.left,
                    this.containment[3] + co.top ];
            }
            else {
                containment = this.containment;
            }

                if(event.pageX - this.offset.click.left < containment[0]) pageX = containment[0] + this.offset.click.left;
                if(event.pageY - this.offset.click.top < containment[1]) pageY = containment[1] + this.offset.click.top;
                if(event.pageX - this.offset.click.left > containment[2]) pageX = containment[2] + this.offset.click.left;
                if(event.pageY - this.offset.click.top > containment[3]) pageY = containment[3] + this.offset.click.top;
            }

            if(o.grid) {
                //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
                var top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                pageY = containment ? (!(top - this.offset.click.top < containment[1] || top - this.offset.click.top > containment[3]) ? top : (!(top - this.offset.click.top < containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

                var left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                pageX = containment ? (!(left - this.offset.click.left < containment[0] || left - this.offset.click.left > containment[2]) ? left : (!(left - this.offset.click.left < containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
            }

        }

        return {
            top: (
                pageY                                                               // The absolute mouse position
                - this.offset.click.top                                                 // Click offset (relative to the element)
                - this.offset.relative.top                                              // Only for relative positioned nodes: Relative offset from element to offset parent
                - this.offset.parent.top                                                // The offsetParent's offset without borders (offset + border)
                + ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
            ),
            left: (
                pageX                                                               // The absolute mouse position
                - this.offset.click.left                                                // Click offset (relative to the element)
                - this.offset.relative.left                                             // Only for relative positioned nodes: Relative offset from element to offset parent
                - this.offset.parent.left                                               // The offsetParent's offset without borders (offset + border)
                + ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
            )
        };

    },

    _clear: function() {
        this.helper.removeClass("ui-draggable-dragging");
        if(this.helper[0] != this.element[0] && !this.cancelHelperRemoval) this.helper.remove();
        //if($.ui.ddmanager) $.ui.ddmanager.current = null;
        this.helper = null;
        this.cancelHelperRemoval = false;
    },

    // From now on bulk stuff - mainly helpers

    _trigger: function(type, event, ui) {
        ui = ui || this._uiHash();
        $.ui.plugin.call(this, type, [event, ui]);
        if(type == "drag") this.positionAbs = this._convertPositionTo("absolute"); //The absolute position has to be recalculated after plugins
        return $.Widget.prototype._trigger.call(this, type, event, ui);
    },

    plugins: {},

    _uiHash: function(event) {
        return {
            helper: this.helper,
            position: this.position,
            originalPosition: this.originalPosition,
            offset: this.positionAbs
        };
    }

});

$.ui.plugin.add("draggable", "connectToSortable", {
    start: function(event, ui) {

        var inst = $(this).data("draggable"), o = inst.options,
            uiSortable = $.extend({}, ui, { item: inst.element });
        inst.sortables = [];
        $(o.connectToSortable).each(function() {
            var sortable = $.data(this, 'sortable');
            if (sortable && !sortable.options.disabled) {
                inst.sortables.push({
                    instance: sortable,
                    shouldRevert: sortable.options.revert
                });
                sortable.refreshPositions();    // Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
                sortable._trigger("activate", event, uiSortable);
            }
        });

    },
    stop: function(event, ui) {

        //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
        var inst = $(this).data("draggable"),
            uiSortable = $.extend({}, ui, { item: inst.element });

        $.each(inst.sortables, function() {
            if(this.instance.isOver) {

                this.instance.isOver = 0;

                inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
                this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

                //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: 'valid/invalid'
                if(this.shouldRevert) this.instance.options.revert = true;

                //Trigger the stop of the sortable
                this.instance._mouseStop(event);

                this.instance.options.helper = this.instance.options._helper;

                //If the helper has been the original item, restore properties in the sortable
                if(inst.options.helper == 'original')
                    this.instance.currentItem.css({ top: 'auto', left: 'auto' });

            } else {
                this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
                this.instance._trigger("deactivate", event, uiSortable);
            }

        });

    },
    drag: function(event, ui) {

        var inst = $(this).data("draggable"), that = this;

        var checkPos = function(o) {
            var dyClick = this.offset.click.top, dxClick = this.offset.click.left;
            var helperTop = this.positionAbs.top, helperLeft = this.positionAbs.left;
            var itemHeight = o.height, itemWidth = o.width;
            var itemTop = o.top, itemLeft = o.left;

            return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
        };

        $.each(inst.sortables, function(i) {

            var innermostIntersecting = false;
            var thisSortable = this;
            //Copy over some variables to allow calling the sortable's native _intersectsWith
            this.instance.positionAbs = inst.positionAbs;
            this.instance.helperProportions = inst.helperProportions;
            this.instance.offset.click = inst.offset.click;

            if(this.instance._intersectsWith(this.instance.containerCache)) {
                innermostIntersecting = true;
                $.each(inst.sortables, function () {
                    this.instance.positionAbs = inst.positionAbs;
                    this.instance.helperProportions = inst.helperProportions;
                    this.instance.offset.click = inst.offset.click;
                    if  (this != thisSortable
                        && this.instance._intersectsWith(this.instance.containerCache)
                        && $.ui.contains(thisSortable.instance.element[0], this.instance.element[0]))
                        innermostIntersecting = false;
                        return innermostIntersecting;
                });
            }


            if(innermostIntersecting) {
                //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
                if(!this.instance.isOver) {

                    this.instance.isOver = 1;
                    //Now we fake the start of dragging for the sortable instance,
                    //by cloning the list group item, appending it to the sortable and using it as inst.currentItem
                    //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
                    this.instance.currentItem = $(that).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item", true);
                    this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
                    this.instance.options.helper = function() { return ui.helper[0]; };

                    event.target = this.instance.currentItem[0];
                    this.instance._mouseCapture(event, true);
                    this.instance._mouseStart(event, true, true);

                    //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
                    this.instance.offset.click.top = inst.offset.click.top;
                    this.instance.offset.click.left = inst.offset.click.left;
                    this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                    this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

                    inst._trigger("toSortable", event);
                    inst.dropped = this.instance.element; //draggable revert needs that
                    //hack so receive/update callbacks work (mostly)
                    inst.currentItem = inst.element;
                    this.instance.fromOutside = inst;

                }

                //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
                if(this.instance.currentItem) this.instance._mouseDrag(event);

            } else {

                //If it doesn't intersect with the sortable, and it intersected before,
                //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
                if(this.instance.isOver) {

                    this.instance.isOver = 0;
                    this.instance.cancelHelperRemoval = true;

                    //Prevent reverting on this forced stop
                    this.instance.options.revert = false;

                    // The out event needs to be triggered independently
                    this.instance._trigger('out', event, this.instance._uiHash(this.instance));

                    this.instance._mouseStop(event, true);
                    this.instance.options.helper = this.instance.options._helper;

                    //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
                    this.instance.currentItem.remove();
                    if(this.instance.placeholder) this.instance.placeholder.remove();

                    inst._trigger("fromSortable", event);
                    inst.dropped = false; //draggable revert needs that
                }

            };

        });

    }
});

$.ui.plugin.add("draggable", "cursor", {
    start: function(event, ui) {
        var t = $('body'), o = $(this).data('draggable').options;
        if (t.css("cursor")) o._cursor = t.css("cursor");
        t.css("cursor", o.cursor);
    },
    stop: function(event, ui) {
        var o = $(this).data('draggable').options;
        if (o._cursor) $('body').css("cursor", o._cursor);
    }
});

$.ui.plugin.add("draggable", "opacity", {
    start: function(event, ui) {
        var t = $(ui.helper), o = $(this).data('draggable').options;
        if(t.css("opacity")) o._opacity = t.css("opacity");
        t.css('opacity', o.opacity);
    },
    stop: function(event, ui) {
        var o = $(this).data('draggable').options;
        if(o._opacity) $(ui.helper).css('opacity', o._opacity);
    }
});

$.ui.plugin.add("draggable", "scroll", {
    start: function(event, ui) {
        var i = $(this).data("draggable");
        if(i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') i.overflowOffset = i.scrollParent.offset();
    },
    drag: function(event, ui) {

        var i = $(this).data("draggable"), o = i.options, scrolled = false;

        if(i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') {

            if(!o.axis || o.axis != 'x') {
                if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                    i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity)
                    i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
            }

            if(!o.axis || o.axis != 'y') {
                if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                    i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity)
                    i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
            }

        } else {

            if(!o.axis || o.axis != 'x') {
                if(event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                    scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                    scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
            }

            if(!o.axis || o.axis != 'y') {
                if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                    scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                    scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
            }

        }

        if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
            $.ui.ddmanager.prepareOffsets(i, event);

    }
});

$.ui.plugin.add("draggable", "snap", {
    start: function(event, ui) {

        var i = $(this).data("draggable"), o = i.options;
        i.snapElements = [];

        $(o.snap.constructor != String ? ( o.snap.items || ':data(draggable)' ) : o.snap).each(function() {
            var $t = $(this); var $o = $t.offset();
            if(this != i.element[0]) i.snapElements.push({
                item: this,
                width: $t.outerWidth(), height: $t.outerHeight(),
                top: $o.top, left: $o.left
            });
        });

    },
    drag: function(event, ui) {

        var inst = $(this).data("draggable"), o = inst.options;
        var d = o.snapTolerance;

        var x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
            y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

        for (var i = inst.snapElements.length - 1; i >= 0; i--){

            var l = inst.snapElements[i].left, r = l + inst.snapElements[i].width,
                t = inst.snapElements[i].top, b = t + inst.snapElements[i].height;

            //Yes, I know, this is insane ;)
            if(!((l-d < x1 && x1 < r+d && t-d < y1 && y1 < b+d) || (l-d < x1 && x1 < r+d && t-d < y2 && y2 < b+d) || (l-d < x2 && x2 < r+d && t-d < y1 && y1 < b+d) || (l-d < x2 && x2 < r+d && t-d < y2 && y2 < b+d))) {
                if(inst.snapElements[i].snapping) (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
                inst.snapElements[i].snapping = false;
                continue;
            }

            if(o.snapMode != 'inner') {
                var ts = Math.abs(t - y2) <= d;
                var bs = Math.abs(b - y1) <= d;
                var ls = Math.abs(l - x2) <= d;
                var rs = Math.abs(r - x1) <= d;
                if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
                if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
                if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
                if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
            }

            var first = (ts || bs || ls || rs);

            if(o.snapMode != 'outer') {
                var ts = Math.abs(t - y1) <= d;
                var bs = Math.abs(b - y2) <= d;
                var ls = Math.abs(l - x1) <= d;
                var rs = Math.abs(r - x2) <= d;
                if(ts) ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
                if(bs) ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
                if(ls) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
                if(rs) ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
            }

            if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))
                (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
            inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

        };

    }
});

$.ui.plugin.add("draggable", "stack", {
    start: function(event, ui) {

        var o = $(this).data("draggable").options;

        var group = $.makeArray($(o.stack)).sort(function(a,b) {
            return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
        });
        if (!group.length) { return; }

        var min = parseInt(group[0].style.zIndex) || 0;
        $(group).each(function(i) {
            this.style.zIndex = min + i;
        });

        this[0].style.zIndex = min + group.length;

    }
});

$.ui.plugin.add("draggable", "zIndex", {
    start: function(event, ui) {
        var t = $(ui.helper), o = $(this).data("draggable").options;
        if(t.css("zIndex")) o._zIndex = t.css("zIndex");
        t.css('zIndex', o.zIndex);
    },
    stop: function(event, ui) {
        var o = $(this).data("draggable").options;
        if(o._zIndex) $(ui.helper).css('zIndex', o._zIndex);
    }
});

})(jQuery);
(function( $, undefined ) {

$.widget("ui.droppable", {
    version: "1.9.2",
    widgetEventPrefix: "drop",
    options: {
        accept: '*',
        activeClass: false,
        addClasses: true,
        greedy: false,
        hoverClass: false,
        scope: 'default',
        tolerance: 'intersect'
    },
    _create: function() {

        var o = this.options, accept = o.accept;
        this.isover = 0; this.isout = 1;

        this.accept = $.isFunction(accept) ? accept : function(d) {
            return d.is(accept);
        };

        //Store the droppable's proportions
        this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };

        // Add the reference and positions to the manager
        $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
        $.ui.ddmanager.droppables[o.scope].push(this);

        (o.addClasses && this.element.addClass("ui-droppable"));

    },

    _destroy: function() {
        var drop = $.ui.ddmanager.droppables[this.options.scope];
        for ( var i = 0; i < drop.length; i++ )
            if ( drop[i] == this )
                drop.splice(i, 1);

        this.element.removeClass("ui-droppable ui-droppable-disabled");
    },

    _setOption: function(key, value) {

        if(key == 'accept') {
            this.accept = $.isFunction(value) ? value : function(d) {
                return d.is(value);
            };
        }
        $.Widget.prototype._setOption.apply(this, arguments);
    },

    _activate: function(event) {
        var draggable = $.ui.ddmanager.current;
        if(this.options.activeClass) this.element.addClass(this.options.activeClass);
        (draggable && this._trigger('activate', event, this.ui(draggable)));
    },

    _deactivate: function(event) {
        var draggable = $.ui.ddmanager.current;
        if(this.options.activeClass) this.element.removeClass(this.options.activeClass);
        (draggable && this._trigger('deactivate', event, this.ui(draggable)));
    },

    _over: function(event) {

        var draggable = $.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

        if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
            if(this.options.hoverClass) this.element.addClass(this.options.hoverClass);
            this._trigger('over', event, this.ui(draggable));
        }

    },

    _out: function(event) {

        var draggable = $.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return; // Bail if draggable and droppable are same element

        if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
            if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
            this._trigger('out', event, this.ui(draggable));
        }

    },

    _drop: function(event,custom) {

        var draggable = custom || $.ui.ddmanager.current;
        if (!draggable || (draggable.currentItem || draggable.element)[0] == this.element[0]) return false; // Bail if draggable and droppable are same element

        var childrenIntersection = false;
        this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function() {
            var inst = $.data(this, 'droppable');
            if(
                inst.options.greedy
                && !inst.options.disabled
                && inst.options.scope == draggable.options.scope
                && inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element))
                && $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
            ) { childrenIntersection = true; return false; }
        });
        if(childrenIntersection) return false;

        if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
            if(this.options.activeClass) this.element.removeClass(this.options.activeClass);
            if(this.options.hoverClass) this.element.removeClass(this.options.hoverClass);
            this._trigger('drop', event, this.ui(draggable));
            return this.element;
        }

        return false;

    },

    ui: function(c) {
        return {
            draggable: (c.currentItem || c.element),
            helper: c.helper,
            position: c.position,
            offset: c.positionAbs
        };
    }

});

$.ui.intersect = function(draggable, droppable, toleranceMode) {

    if (!droppable.offset) return false;

    var x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
        y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height;
    var l = droppable.offset.left, r = l + droppable.proportions.width,
        t = droppable.offset.top, b = t + droppable.proportions.height;

    switch (toleranceMode) {
        case 'fit':
            return (l <= x1 && x2 <= r
                && t <= y1 && y2 <= b);
            break;
        case 'intersect':
            return (l < x1 + (draggable.helperProportions.width / 2) // Right Half
                && x2 - (draggable.helperProportions.width / 2) < r // Left Half
                && t < y1 + (draggable.helperProportions.height / 2) // Bottom Half
                && y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
            break;
        case 'pointer':
            var draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left),
                draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top),
                isOver = $.ui.isOver(draggableTop, draggableLeft, t, l, droppable.proportions.height, droppable.proportions.width);
            return isOver;
            break;
        case 'touch':
            return (
                    (y1 >= t && y1 <= b) || // Top edge touching
                    (y2 >= t && y2 <= b) || // Bottom edge touching
                    (y1 < t && y2 > b)      // Surrounded vertically
                ) && (
                    (x1 >= l && x1 <= r) || // Left edge touching
                    (x2 >= l && x2 <= r) || // Right edge touching
                    (x1 < l && x2 > r)      // Surrounded horizontally
                );
            break;
        default:
            return false;
            break;
        }

};

/*
    This manager tracks offsets of draggables and droppables
*/
$.ui.ddmanager = {
    current: null,
    droppables: { 'default': [] },
    prepareOffsets: function(t, event) {

        var m = $.ui.ddmanager.droppables[t.options.scope] || [];
        var type = event ? event.type : null; // workaround for #2317
        var list = (t.currentItem || t.element).find(":data(droppable)").andSelf();

        droppablesLoop: for (var i = 0; i < m.length; i++) {

            if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) continue;   //No disabled and non-accepted
            for (var j=0; j < list.length; j++) { if(list[j] == m[i].element[0]) { m[i].proportions.height = 0; continue droppablesLoop; } }; //Filter out elements in the current dragged item
            m[i].visible = m[i].element.css("display") != "none"; if(!m[i].visible) continue;                                   //If the element is not visible, continue

            if(type == "mousedown") m[i]._activate.call(m[i], event); //Activate the droppable if used directly from draggables

            m[i].offset = m[i].element.offset();
            m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };

        }

    },
    drop: function(draggable, event) {

        var dropped = false;
        $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

            if(!this.options) return;
            if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance))
                dropped = this._drop.call(this, event) || dropped;

            if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
                this.isout = 1; this.isover = 0;
                this._deactivate.call(this, event);
            }

        });
        return dropped;

    },
    dragStart: function( draggable, event ) {
        //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
        draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
            if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );
        });
    },
    drag: function(draggable, event) {

        //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
        if(draggable.options.refreshPositions) $.ui.ddmanager.prepareOffsets(draggable, event);

        //Run through all droppables and check their positions based on specific tolerance options
        $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

            if(this.options.disabled || this.greedyChild || !this.visible) return;
            var intersects = $.ui.intersect(draggable, this, this.options.tolerance);

            var c = !intersects && this.isover == 1 ? 'isout' : (intersects && this.isover == 0 ? 'isover' : null);
            if(!c) return;

            var parentInstance;
            if (this.options.greedy) {
                // find droppable parents with same scope
                var scope = this.options.scope;
                var parent = this.element.parents(':data(droppable)').filter(function () {
                    return $.data(this, 'droppable').options.scope === scope;
                });

                if (parent.length) {
                    parentInstance = $.data(parent[0], 'droppable');
                    parentInstance.greedyChild = (c == 'isover' ? 1 : 0);
                }
            }

            // we just moved into a greedy child
            if (parentInstance && c == 'isover') {
                parentInstance['isover'] = 0;
                parentInstance['isout'] = 1;
                parentInstance._out.call(parentInstance, event);
            }

            this[c] = 1; this[c == 'isout' ? 'isover' : 'isout'] = 0;
            this[c == "isover" ? "_over" : "_out"].call(this, event);

            // we just moved out of a greedy child
            if (parentInstance && c == 'isout') {
                parentInstance['isout'] = 0;
                parentInstance['isover'] = 1;
                parentInstance._over.call(parentInstance, event);
            }
        });

    },
    dragStop: function( draggable, event ) {
        draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
        //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
        if( !draggable.options.refreshPositions ) $.ui.ddmanager.prepareOffsets( draggable, event );
    }
};

})(jQuery);
;(jQuery.effects || (function($, undefined) {

var backCompat = $.uiBackCompat !== false,
    // prefix used for storing data on .data()
    dataSpace = "ui-effects-";

$.effects = {
    effect: {}
};

/*!
 * jQuery Color Animations v2.0.0
 * http://jquery.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Mon Aug 13 13:41:02 2012 -0500
 */
(function( jQuery, undefined ) {

    var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "),

    // plusequals test for += 100 -= 100
    rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
    // a set of RE's that can match strings and generate color tuples.
    stringParsers = [{
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            parse: function( execResult ) {
                return [
                    execResult[ 1 ],
                    execResult[ 2 ],
                    execResult[ 3 ],
                    execResult[ 4 ]
                ];
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            parse: function( execResult ) {
                return [
                    execResult[ 1 ] * 2.55,
                    execResult[ 2 ] * 2.55,
                    execResult[ 3 ] * 2.55,
                    execResult[ 4 ]
                ];
            }
        }, {
            // this regex ignores A-F because it's compared against an already lowercased string
            re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            parse: function( execResult ) {
                return [
                    parseInt( execResult[ 1 ], 16 ),
                    parseInt( execResult[ 2 ], 16 ),
                    parseInt( execResult[ 3 ], 16 )
                ];
            }
        }, {
            // this regex ignores A-F because it's compared against an already lowercased string
            re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
            parse: function( execResult ) {
                return [
                    parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
                    parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
                    parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
                ];
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            space: "hsla",
            parse: function( execResult ) {
                return [
                    execResult[ 1 ],
                    execResult[ 2 ] / 100,
                    execResult[ 3 ] / 100,
                    execResult[ 4 ]
                ];
            }
        }],

    // jQuery.Color( )
    color = jQuery.Color = function( color, green, blue, alpha ) {
        return new jQuery.Color.fn.parse( color, green, blue, alpha );
    },
    spaces = {
        rgba: {
            props: {
                red: {
                    idx: 0,
                    type: "byte"
                },
                green: {
                    idx: 1,
                    type: "byte"
                },
                blue: {
                    idx: 2,
                    type: "byte"
                }
            }
        },

        hsla: {
            props: {
                hue: {
                    idx: 0,
                    type: "degrees"
                },
                saturation: {
                    idx: 1,
                    type: "percent"
                },
                lightness: {
                    idx: 2,
                    type: "percent"
                }
            }
        }
    },
    propTypes = {
        "byte": {
            floor: true,
            max: 255
        },
        "percent": {
            max: 1
        },
        "degrees": {
            mod: 360,
            floor: true
        }
    },
    support = color.support = {},

    // element for support tests
    supportElem = jQuery( "<p>" )[ 0 ],

    // colors = jQuery.Color.names
    colors,

    // local aliases of functions called often
    each = jQuery.each;

// determine rgba support immediately
supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

// define cache name and alpha properties
// for rgba and hsla spaces
each( spaces, function( spaceName, space ) {
    space.cache = "_" + spaceName;
    space.props.alpha = {
        idx: 3,
        type: "percent",
        def: 1
    };
});

function clamp( value, prop, allowEmpty ) {
    var type = propTypes[ prop.type ] || {};

    if ( value == null ) {
        return (allowEmpty || !prop.def) ? null : prop.def;
    }

    // ~~ is an short way of doing floor for positive numbers
    value = type.floor ? ~~value : parseFloat( value );

    // IE will pass in empty strings as value for alpha,
    // which will hit this case
    if ( isNaN( value ) ) {
        return prop.def;
    }

    if ( type.mod ) {
        // we add mod before modding to make sure that negatives values
        // get converted properly: -10 -> 350
        return (value + type.mod) % type.mod;
    }

    // for now all property types without mod have min and max
    return 0 > value ? 0 : type.max < value ? type.max : value;
}

function stringParse( string ) {
    var inst = color(),
        rgba = inst._rgba = [];

    string = string.toLowerCase();

    each( stringParsers, function( i, parser ) {
        var parsed,
            match = parser.re.exec( string ),
            values = match && parser.parse( match ),
            spaceName = parser.space || "rgba";

        if ( values ) {
            parsed = inst[ spaceName ]( values );

            // if this was an rgba parse the assignment might happen twice
            // oh well....
            inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
            rgba = inst._rgba = parsed._rgba;

            // exit each( stringParsers ) here because we matched
            return false;
        }
    });

    // Found a stringParser that handled it
    if ( rgba.length ) {

        // if this came from a parsed string, force "transparent" when alpha is 0
        // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
        if ( rgba.join() === "0,0,0,0" ) {
            jQuery.extend( rgba, colors.transparent );
        }
        return inst;
    }

    // named colors
    return colors[ string ];
}

color.fn = jQuery.extend( color.prototype, {
    parse: function( red, green, blue, alpha ) {
        if ( red === undefined ) {
            this._rgba = [ null, null, null, null ];
            return this;
        }
        if ( red.jquery || red.nodeType ) {
            red = jQuery( red ).css( green );
            green = undefined;
        }

        var inst = this,
            type = jQuery.type( red ),
            rgba = this._rgba = [];

        // more than 1 argument specified - assume ( red, green, blue, alpha )
        if ( green !== undefined ) {
            red = [ red, green, blue, alpha ];
            type = "array";
        }

        if ( type === "string" ) {
            return this.parse( stringParse( red ) || colors._default );
        }

        if ( type === "array" ) {
            each( spaces.rgba.props, function( key, prop ) {
                rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
            });
            return this;
        }

        if ( type === "object" ) {
            if ( red instanceof color ) {
                each( spaces, function( spaceName, space ) {
                    if ( red[ space.cache ] ) {
                        inst[ space.cache ] = red[ space.cache ].slice();
                    }
                });
            } else {
                each( spaces, function( spaceName, space ) {
                    var cache = space.cache;
                    each( space.props, function( key, prop ) {

                        // if the cache doesn't exist, and we know how to convert
                        if ( !inst[ cache ] && space.to ) {

                            // if the value was null, we don't need to copy it
                            // if the key was alpha, we don't need to copy it either
                            if ( key === "alpha" || red[ key ] == null ) {
                                return;
                            }
                            inst[ cache ] = space.to( inst._rgba );
                        }

                        // this is the only case where we allow nulls for ALL properties.
                        // call clamp with alwaysAllowEmpty
                        inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
                    });

                    // everything defined but alpha?
                    if ( inst[ cache ] && $.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
                        // use the default of 1
                        inst[ cache ][ 3 ] = 1;
                        if ( space.from ) {
                            inst._rgba = space.from( inst[ cache ] );
                        }
                    }
                });
            }
            return this;
        }
    },
    is: function( compare ) {
        var is = color( compare ),
            same = true,
            inst = this;

        each( spaces, function( _, space ) {
            var localCache,
                isCache = is[ space.cache ];
            if (isCache) {
                localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
                each( space.props, function( _, prop ) {
                    if ( isCache[ prop.idx ] != null ) {
                        same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
                        return same;
                    }
                });
            }
            return same;
        });
        return same;
    },
    _space: function() {
        var used = [],
            inst = this;
        each( spaces, function( spaceName, space ) {
            if ( inst[ space.cache ] ) {
                used.push( spaceName );
            }
        });
        return used.pop();
    },
    transition: function( other, distance ) {
        var end = color( other ),
            spaceName = end._space(),
            space = spaces[ spaceName ],
            startColor = this.alpha() === 0 ? color( "transparent" ) : this,
            start = startColor[ space.cache ] || space.to( startColor._rgba ),
            result = start.slice();

        end = end[ space.cache ];
        each( space.props, function( key, prop ) {
            var index = prop.idx,
                startValue = start[ index ],
                endValue = end[ index ],
                type = propTypes[ prop.type ] || {};

            // if null, don't override start value
            if ( endValue === null ) {
                return;
            }
            // if null - use end
            if ( startValue === null ) {
                result[ index ] = endValue;
            } else {
                if ( type.mod ) {
                    if ( endValue - startValue > type.mod / 2 ) {
                        startValue += type.mod;
                    } else if ( startValue - endValue > type.mod / 2 ) {
                        startValue -= type.mod;
                    }
                }
                result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
            }
        });
        return this[ spaceName ]( result );
    },
    blend: function( opaque ) {
        // if we are already opaque - return ourself
        if ( this._rgba[ 3 ] === 1 ) {
            return this;
        }

        var rgb = this._rgba.slice(),
            a = rgb.pop(),
            blend = color( opaque )._rgba;

        return color( jQuery.map( rgb, function( v, i ) {
            return ( 1 - a ) * blend[ i ] + a * v;
        }));
    },
    toRgbaString: function() {
        var prefix = "rgba(",
            rgba = jQuery.map( this._rgba, function( v, i ) {
                return v == null ? ( i > 2 ? 1 : 0 ) : v;
            });

        if ( rgba[ 3 ] === 1 ) {
            rgba.pop();
            prefix = "rgb(";
        }

        return prefix + rgba.join() + ")";
    },
    toHslaString: function() {
        var prefix = "hsla(",
            hsla = jQuery.map( this.hsla(), function( v, i ) {
                if ( v == null ) {
                    v = i > 2 ? 1 : 0;
                }

                // catch 1 and 2
                if ( i && i < 3 ) {
                    v = Math.round( v * 100 ) + "%";
                }
                return v;
            });

        if ( hsla[ 3 ] === 1 ) {
            hsla.pop();
            prefix = "hsl(";
        }
        return prefix + hsla.join() + ")";
    },
    toHexString: function( includeAlpha ) {
        var rgba = this._rgba.slice(),
            alpha = rgba.pop();

        if ( includeAlpha ) {
            rgba.push( ~~( alpha * 255 ) );
        }

        return "#" + jQuery.map( rgba, function( v ) {

            // default to 0 when nulls exist
            v = ( v || 0 ).toString( 16 );
            return v.length === 1 ? "0" + v : v;
        }).join("");
    },
    toString: function() {
        return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
    }
});
color.fn.parse.prototype = color.fn;

// hsla conversions adapted from:
// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

function hue2rgb( p, q, h ) {
    h = ( h + 1 ) % 1;
    if ( h * 6 < 1 ) {
        return p + (q - p) * h * 6;
    }
    if ( h * 2 < 1) {
        return q;
    }
    if ( h * 3 < 2 ) {
        return p + (q - p) * ((2/3) - h) * 6;
    }
    return p;
}

spaces.hsla.to = function ( rgba ) {
    if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
        return [ null, null, null, rgba[ 3 ] ];
    }
    var r = rgba[ 0 ] / 255,
        g = rgba[ 1 ] / 255,
        b = rgba[ 2 ] / 255,
        a = rgba[ 3 ],
        max = Math.max( r, g, b ),
        min = Math.min( r, g, b ),
        diff = max - min,
        add = max + min,
        l = add * 0.5,
        h, s;

    if ( min === max ) {
        h = 0;
    } else if ( r === max ) {
        h = ( 60 * ( g - b ) / diff ) + 360;
    } else if ( g === max ) {
        h = ( 60 * ( b - r ) / diff ) + 120;
    } else {
        h = ( 60 * ( r - g ) / diff ) + 240;
    }

    if ( l === 0 || l === 1 ) {
        s = l;
    } else if ( l <= 0.5 ) {
        s = diff / add;
    } else {
        s = diff / ( 2 - add );
    }
    return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
};

spaces.hsla.from = function ( hsla ) {
    if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
        return [ null, null, null, hsla[ 3 ] ];
    }
    var h = hsla[ 0 ] / 360,
        s = hsla[ 1 ],
        l = hsla[ 2 ],
        a = hsla[ 3 ],
        q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
        p = 2 * l - q;

    return [
        Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
        Math.round( hue2rgb( p, q, h ) * 255 ),
        Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
        a
    ];
};


each( spaces, function( spaceName, space ) {
    var props = space.props,
        cache = space.cache,
        to = space.to,
        from = space.from;

    // makes rgba() and hsla()
    color.fn[ spaceName ] = function( value ) {

        // generate a cache for this space if it doesn't exist
        if ( to && !this[ cache ] ) {
            this[ cache ] = to( this._rgba );
        }
        if ( value === undefined ) {
            return this[ cache ].slice();
        }

        var ret,
            type = jQuery.type( value ),
            arr = ( type === "array" || type === "object" ) ? value : arguments,
            local = this[ cache ].slice();

        each( props, function( key, prop ) {
            var val = arr[ type === "object" ? key : prop.idx ];
            if ( val == null ) {
                val = local[ prop.idx ];
            }
            local[ prop.idx ] = clamp( val, prop );
        });

        if ( from ) {
            ret = color( from( local ) );
            ret[ cache ] = local;
            return ret;
        } else {
            return color( local );
        }
    };

    // makes red() green() blue() alpha() hue() saturation() lightness()
    each( props, function( key, prop ) {
        // alpha is included in more than one space
        if ( color.fn[ key ] ) {
            return;
        }
        color.fn[ key ] = function( value ) {
            var vtype = jQuery.type( value ),
                fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
                local = this[ fn ](),
                cur = local[ prop.idx ],
                match;

            if ( vtype === "undefined" ) {
                return cur;
            }

            if ( vtype === "function" ) {
                value = value.call( this, cur );
                vtype = jQuery.type( value );
            }
            if ( value == null && prop.empty ) {
                return this;
            }
            if ( vtype === "string" ) {
                match = rplusequals.exec( value );
                if ( match ) {
                    value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
                }
            }
            local[ prop.idx ] = value;
            return this[ fn ]( local );
        };
    });
});

// add .fx.step functions
each( stepHooks, function( i, hook ) {
    jQuery.cssHooks[ hook ] = {
        set: function( elem, value ) {
            var parsed, curElem,
                backgroundColor = "";

            if ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) {
                value = color( parsed || value );
                if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
                    curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                    while (
                        (backgroundColor === "" || backgroundColor === "transparent") &&
                        curElem && curElem.style
                    ) {
                        try {
                            backgroundColor = jQuery.css( curElem, "backgroundColor" );
                            curElem = curElem.parentNode;
                        } catch ( e ) {
                        }
                    }

                    value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
                        backgroundColor :
                        "_default" );
                }

                value = value.toRgbaString();
            }
            try {
                elem.style[ hook ] = value;
            } catch( error ) {
                // wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
            }
        }
    };
    jQuery.fx.step[ hook ] = function( fx ) {
        if ( !fx.colorInit ) {
            fx.start = color( fx.elem, hook );
            fx.end = color( fx.end );
            fx.colorInit = true;
        }
        jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
    };
});

jQuery.cssHooks.borderColor = {
    expand: function( value ) {
        var expanded = {};

        each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
            expanded[ "border" + part + "Color" ] = value;
        });
        return expanded;
    }
};

// Basic color names only.
// Usage of any of the other color names requires adding yourself or including
// jquery.color.svg-names.js.
colors = jQuery.Color.names = {
    // 4.1. Basic color keywords
    aqua: "#00ffff",
    black: "#000000",
    blue: "#0000ff",
    fuchsia: "#ff00ff",
    gray: "#808080",
    green: "#008000",
    lime: "#00ff00",
    maroon: "#800000",
    navy: "#000080",
    olive: "#808000",
    purple: "#800080",
    red: "#ff0000",
    silver: "#c0c0c0",
    teal: "#008080",
    white: "#ffffff",
    yellow: "#ffff00",

    // 4.2.3. "transparent" color keyword
    transparent: [ null, null, null, 0 ],

    _default: "#ffffff"
};

})( jQuery );



/******************************************************************************/
/****************************** CLASS ANIMATIONS ******************************/
/******************************************************************************/
(function() {

var classAnimationActions = [ "add", "remove", "toggle" ],
    shorthandStyles = {
        border: 1,
        borderBottom: 1,
        borderColor: 1,
        borderLeft: 1,
        borderRight: 1,
        borderTop: 1,
        borderWidth: 1,
        margin: 1,
        padding: 1
    };

$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
    $.fx.step[ prop ] = function( fx ) {
        if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
            jQuery.style( fx.elem, prop, fx.end );
            fx.setAttr = true;
        }
    };
});

function getElementStyles() {
    var style = this.ownerDocument.defaultView ?
            this.ownerDocument.defaultView.getComputedStyle( this, null ) :
            this.currentStyle,
        newStyle = {},
        key,
        len;

    // webkit enumerates style porperties
    if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
        len = style.length;
        while ( len-- ) {
            key = style[ len ];
            if ( typeof style[ key ] === "string" ) {
                newStyle[ $.camelCase( key ) ] = style[ key ];
            }
        }
    } else {
        for ( key in style ) {
            if ( typeof style[ key ] === "string" ) {
                newStyle[ key ] = style[ key ];
            }
        }
    }

    return newStyle;
}


function styleDifference( oldStyle, newStyle ) {
    var diff = {},
        name, value;

    for ( name in newStyle ) {
        value = newStyle[ name ];
        if ( oldStyle[ name ] !== value ) {
            if ( !shorthandStyles[ name ] ) {
                if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
                    diff[ name ] = value;
                }
            }
        }
    }

    return diff;
}

$.effects.animateClass = function( value, duration, easing, callback ) {
    var o = $.speed( duration, easing, callback );

    return this.queue( function() {
        var animated = $( this ),
            baseClass = animated.attr( "class" ) || "",
            applyClassChange,
            allAnimations = o.children ? animated.find( "*" ).andSelf() : animated;

        // map the animated objects to store the original styles.
        allAnimations = allAnimations.map(function() {
            var el = $( this );
            return {
                el: el,
                start: getElementStyles.call( this )
            };
        });

        // apply class change
        applyClassChange = function() {
            $.each( classAnimationActions, function(i, action) {
                if ( value[ action ] ) {
                    animated[ action + "Class" ]( value[ action ] );
                }
            });
        };
        applyClassChange();

        // map all animated objects again - calculate new styles and diff
        allAnimations = allAnimations.map(function() {
            this.end = getElementStyles.call( this.el[ 0 ] );
            this.diff = styleDifference( this.start, this.end );
            return this;
        });

        // apply original class
        animated.attr( "class", baseClass );

        // map all animated objects again - this time collecting a promise
        allAnimations = allAnimations.map(function() {
            var styleInfo = this,
                dfd = $.Deferred(),
                opts = jQuery.extend({}, o, {
                    queue: false,
                    complete: function() {
                        dfd.resolve( styleInfo );
                    }
                });

            this.el.animate( this.diff, opts );
            return dfd.promise();
        });

        // once all animations have completed:
        $.when.apply( $, allAnimations.get() ).done(function() {

            // set the final class
            applyClassChange();

            // for each animated element,
            // clear all css properties that were animated
            $.each( arguments, function() {
                var el = this.el;
                $.each( this.diff, function(key) {
                    el.css( key, '' );
                });
            });

            // this is guarnteed to be there if you use jQuery.speed()
            // it also handles dequeuing the next anim...
            o.complete.call( animated[ 0 ] );
        });
    });
};

$.fn.extend({
    _addClass: $.fn.addClass,
    addClass: function( classNames, speed, easing, callback ) {
        return speed ?
            $.effects.animateClass.call( this,
                { add: classNames }, speed, easing, callback ) :
            this._addClass( classNames );
    },

    _removeClass: $.fn.removeClass,
    removeClass: function( classNames, speed, easing, callback ) {
        return speed ?
            $.effects.animateClass.call( this,
                { remove: classNames }, speed, easing, callback ) :
            this._removeClass( classNames );
    },

    _toggleClass: $.fn.toggleClass,
    toggleClass: function( classNames, force, speed, easing, callback ) {
        if ( typeof force === "boolean" || force === undefined ) {
            if ( !speed ) {
                // without speed parameter
                return this._toggleClass( classNames, force );
            } else {
                return $.effects.animateClass.call( this,
                    (force ? { add: classNames } : { remove: classNames }),
                    speed, easing, callback );
            }
        } else {
            // without force parameter
            return $.effects.animateClass.call( this,
                { toggle: classNames }, force, speed, easing );
        }
    },

    switchClass: function( remove, add, speed, easing, callback) {
        return $.effects.animateClass.call( this, {
            add: add,
            remove: remove
        }, speed, easing, callback );
    }
});

})();

/******************************************************************************/
/*********************************** EFFECTS **********************************/
/******************************************************************************/

(function() {

$.extend( $.effects, {
    version: "1.9.2",

    // Saves a set of properties in a data storage
    save: function( element, set ) {
        for( var i=0; i < set.length; i++ ) {
            if ( set[ i ] !== null ) {
                element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
            }
        }
    },

    // Restores a set of previously saved properties from a data storage
    restore: function( element, set ) {
        var val, i;
        for( i=0; i < set.length; i++ ) {
            if ( set[ i ] !== null ) {
                val = element.data( dataSpace + set[ i ] );
                // support: jQuery 1.6.2
                // http://bugs.jquery.com/ticket/9917
                // jQuery 1.6.2 incorrectly returns undefined for any falsy value.
                // We can't differentiate between "" and 0 here, so we just assume
                // empty string since it's likely to be a more common value...
                if ( val === undefined ) {
                    val = "";
                }
                element.css( set[ i ], val );
            }
        }
    },

    setMode: function( el, mode ) {
        if (mode === "toggle") {
            mode = el.is( ":hidden" ) ? "show" : "hide";
        }
        return mode;
    },

    // Translates a [top,left] array into a baseline value
    // this should be a little more flexible in the future to handle a string & hash
    getBaseline: function( origin, original ) {
        var y, x;
        switch ( origin[ 0 ] ) {
            case "top": y = 0; break;
            case "middle": y = 0.5; break;
            case "bottom": y = 1; break;
            default: y = origin[ 0 ] / original.height;
        }
        switch ( origin[ 1 ] ) {
            case "left": x = 0; break;
            case "center": x = 0.5; break;
            case "right": x = 1; break;
            default: x = origin[ 1 ] / original.width;
        }
        return {
            x: x,
            y: y
        };
    },

    // Wraps the element around a wrapper that copies position properties
    createWrapper: function( element ) {

        // if the element is already wrapped, return it
        if ( element.parent().is( ".ui-effects-wrapper" )) {
            return element.parent();
        }

        // wrap the element
        var props = {
                width: element.outerWidth(true),
                height: element.outerHeight(true),
                "float": element.css( "float" )
            },
            wrapper = $( "<div></div>" )
                .addClass( "ui-effects-wrapper" )
                .css({
                    fontSize: "100%",
                    background: "transparent",
                    border: "none",
                    margin: 0,
                    padding: 0
                }),
            // Store the size in case width/height are defined in % - Fixes #5245
            size = {
                width: element.width(),
                height: element.height()
            },
            active = document.activeElement;

        // support: Firefox
        // Firefox incorrectly exposes anonymous content
        // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
        try {
            active.id;
        } catch( e ) {
            active = document.body;
        }

        element.wrap( wrapper );

        // Fixes #7595 - Elements lose focus when wrapped.
        if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
            $( active ).focus();
        }

        wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

        // transfer positioning properties to the wrapper
        if ( element.css( "position" ) === "static" ) {
            wrapper.css({ position: "relative" });
            element.css({ position: "relative" });
        } else {
            $.extend( props, {
                position: element.css( "position" ),
                zIndex: element.css( "z-index" )
            });
            $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                props[ pos ] = element.css( pos );
                if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
                    props[ pos ] = "auto";
                }
            });
            element.css({
                position: "relative",
                top: 0,
                left: 0,
                right: "auto",
                bottom: "auto"
            });
        }
        element.css(size);

        return wrapper.css( props ).show();
    },

    removeWrapper: function( element ) {
        var active = document.activeElement;

        if ( element.parent().is( ".ui-effects-wrapper" ) ) {
            element.parent().replaceWith( element );

            // Fixes #7595 - Elements lose focus when wrapped.
            if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
                $( active ).focus();
            }
        }


        return element;
    },

    setTransition: function( element, list, factor, value ) {
        value = value || {};
        $.each( list, function( i, x ) {
            var unit = element.cssUnit( x );
            if ( unit[ 0 ] > 0 ) {
                value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
            }
        });
        return value;
    }
});

// return an effect options object for the given parameters:
function _normalizeArguments( effect, options, speed, callback ) {

    // allow passing all options as the first parameter
    if ( $.isPlainObject( effect ) ) {
        options = effect;
        effect = effect.effect;
    }

    // convert to an object
    effect = { effect: effect };

    // catch (effect, null, ...)
    if ( options == null ) {
        options = {};
    }

    // catch (effect, callback)
    if ( $.isFunction( options ) ) {
        callback = options;
        speed = null;
        options = {};
    }

    // catch (effect, speed, ?)
    if ( typeof options === "number" || $.fx.speeds[ options ] ) {
        callback = speed;
        speed = options;
        options = {};
    }

    // catch (effect, options, callback)
    if ( $.isFunction( speed ) ) {
        callback = speed;
        speed = null;
    }

    // add options to effect
    if ( options ) {
        $.extend( effect, options );
    }

    speed = speed || options.duration;
    effect.duration = $.fx.off ? 0 :
        typeof speed === "number" ? speed :
        speed in $.fx.speeds ? $.fx.speeds[ speed ] :
        $.fx.speeds._default;

    effect.complete = callback || options.complete;

    return effect;
}

function standardSpeed( speed ) {
    // valid standard speeds
    if ( !speed || typeof speed === "number" || $.fx.speeds[ speed ] ) {
        return true;
    }

    // invalid strings - treat as "normal" speed
    if ( typeof speed === "string" && !$.effects.effect[ speed ] ) {
        // TODO: remove in 2.0 (#7115)
        if ( backCompat && $.effects[ speed ] ) {
            return false;
        }
        return true;
    }

    return false;
}

$.fn.extend({
    effect: function( /* effect, options, speed, callback */ ) {
        var args = _normalizeArguments.apply( this, arguments ),
            mode = args.mode,
            queue = args.queue,
            effectMethod = $.effects.effect[ args.effect ],

            // DEPRECATED: remove in 2.0 (#7115)
            oldEffectMethod = !effectMethod && backCompat && $.effects[ args.effect ];

        if ( $.fx.off || !( effectMethod || oldEffectMethod ) ) {
            // delegate to the original method (e.g., .show()) if possible
            if ( mode ) {
                return this[ mode ]( args.duration, args.complete );
            } else {
                return this.each( function() {
                    if ( args.complete ) {
                        args.complete.call( this );
                    }
                });
            }
        }

        function run( next ) {
            var elem = $( this ),
                complete = args.complete,
                mode = args.mode;

            function done() {
                if ( $.isFunction( complete ) ) {
                    complete.call( elem[0] );
                }
                if ( $.isFunction( next ) ) {
                    next();
                }
            }

            // if the element is hiddden and mode is hide,
            // or element is visible and mode is show
            if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
                done();
            } else {
                effectMethod.call( elem[0], args, done );
            }
        }

        // TODO: remove this check in 2.0, effectMethod will always be true
        if ( effectMethod ) {
            return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
        } else {
            // DEPRECATED: remove in 2.0 (#7115)
            return oldEffectMethod.call(this, {
                options: args,
                duration: args.duration,
                callback: args.complete,
                mode: args.mode
            });
        }
    },

    _show: $.fn.show,
    show: function( speed ) {
        if ( standardSpeed( speed ) ) {
            return this._show.apply( this, arguments );
        } else {
            var args = _normalizeArguments.apply( this, arguments );
            args.mode = "show";
            return this.effect.call( this, args );
        }
    },

    _hide: $.fn.hide,
    hide: function( speed ) {
        if ( standardSpeed( speed ) ) {
            return this._hide.apply( this, arguments );
        } else {
            var args = _normalizeArguments.apply( this, arguments );
            args.mode = "hide";
            return this.effect.call( this, args );
        }
    },

    // jQuery core overloads toggle and creates _toggle
    __toggle: $.fn.toggle,
    toggle: function( speed ) {
        if ( standardSpeed( speed ) || typeof speed === "boolean" || $.isFunction( speed ) ) {
            return this.__toggle.apply( this, arguments );
        } else {
            var args = _normalizeArguments.apply( this, arguments );
            args.mode = "toggle";
            return this.effect.call( this, args );
        }
    },

    // helper functions
    cssUnit: function(key) {
        var style = this.css( key ),
            val = [];

        $.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
            if ( style.indexOf( unit ) > 0 ) {
                val = [ parseFloat( style ), unit ];
            }
        });
        return val;
    }
});

})();

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

(function() {

// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
    baseEasings[ name ] = function( p ) {
        return Math.pow( p, i + 2 );
    };
});

$.extend( baseEasings, {
    Sine: function ( p ) {
        return 1 - Math.cos( p * Math.PI / 2 );
    },
    Circ: function ( p ) {
        return 1 - Math.sqrt( 1 - p * p );
    },
    Elastic: function( p ) {
        return p === 0 || p === 1 ? p :
            -Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
    },
    Back: function( p ) {
        return p * p * ( 3 * p - 2 );
    },
    Bounce: function ( p ) {
        var pow2,
            bounce = 4;

        while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
        return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
    }
});

$.each( baseEasings, function( name, easeIn ) {
    $.easing[ "easeIn" + name ] = easeIn;
    $.easing[ "easeOut" + name ] = function( p ) {
        return 1 - easeIn( 1 - p );
    };
    $.easing[ "easeInOut" + name ] = function( p ) {
        return p < 0.5 ?
            easeIn( p * 2 ) / 2 :
            1 - easeIn( p * -2 + 2 ) / 2;
    };
});

})();

})(jQuery));
(function( $, undefined ) {

var rvertical = /up|down|vertical/,
    rpositivemotion = /up|left|vertical|horizontal/;

$.effects.effect.blind = function( o, done ) {
    // Create element
    var el = $( this ),
        props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
        mode = $.effects.setMode( el, o.mode || "hide" ),
        direction = o.direction || "up",
        vertical = rvertical.test( direction ),
        ref = vertical ? "height" : "width",
        ref2 = vertical ? "top" : "left",
        motion = rpositivemotion.test( direction ),
        animation = {},
        show = mode === "show",
        wrapper, distance, margin;

    // if already wrapped, the wrapper's properties are my property. #6245
    if ( el.parent().is( ".ui-effects-wrapper" ) ) {
        $.effects.save( el.parent(), props );
    } else {
        $.effects.save( el, props );
    }
    el.show();
    wrapper = $.effects.createWrapper( el ).css({
        overflow: "hidden"
    });

    distance = wrapper[ ref ]();
    margin = parseFloat( wrapper.css( ref2 ) ) || 0;

    animation[ ref ] = show ? distance : 0;
    if ( !motion ) {
        el
            .css( vertical ? "bottom" : "right", 0 )
            .css( vertical ? "top" : "left", "auto" )
            .css({ position: "absolute" });

        animation[ ref2 ] = show ? margin : distance + margin;
    }

    // start at 0 if we are showing
    if ( show ) {
        wrapper.css( ref, 0 );
        if ( ! motion ) {
            wrapper.css( ref2, margin + distance );
        }
    }

    // Animate
    wrapper.animate( animation, {
        duration: o.duration,
        easing: o.easing,
        queue: false,
        complete: function() {
            if ( mode === "hide" ) {
                el.hide();
            }
            $.effects.restore( el, props );
            $.effects.removeWrapper( el );
            done();
        }
    });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.bounce = function( o, done ) {
    var el = $( this ),
        props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

        // defaults:
        mode = $.effects.setMode( el, o.mode || "effect" ),
        hide = mode === "hide",
        show = mode === "show",
        direction = o.direction || "up",
        distance = o.distance,
        times = o.times || 5,

        // number of internal animations
        anims = times * 2 + ( show || hide ? 1 : 0 ),
        speed = o.duration / anims,
        easing = o.easing,

        // utility:
        ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
        motion = ( direction === "up" || direction === "left" ),
        i,
        upAnim,
        downAnim,

        // we will need to re-assemble the queue to stack our animations in place
        queue = el.queue(),
        queuelen = queue.length;

    // Avoid touching opacity to prevent clearType and PNG issues in IE
    if ( show || hide ) {
        props.push( "opacity" );
    }

    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el ); // Create Wrapper

    // default distance for the BIGGEST bounce is the outer Distance / 3
    if ( !distance ) {
        distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
    }

    if ( show ) {
        downAnim = { opacity: 1 };
        downAnim[ ref ] = 0;

        // if we are showing, force opacity 0 and set the initial position
        // then do the "first" animation
        el.css( "opacity", 0 )
            .css( ref, motion ? -distance * 2 : distance * 2 )
            .animate( downAnim, speed, easing );
    }

    // start at the smallest distance if we are hiding
    if ( hide ) {
        distance = distance / Math.pow( 2, times - 1 );
    }

    downAnim = {};
    downAnim[ ref ] = 0;
    // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
    for ( i = 0; i < times; i++ ) {
        upAnim = {};
        upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

        el.animate( upAnim, speed, easing )
            .animate( downAnim, speed, easing );

        distance = hide ? distance * 2 : distance / 2;
    }

    // Last Bounce when Hiding
    if ( hide ) {
        upAnim = { opacity: 0 };
        upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

        el.animate( upAnim, speed, easing );
    }

    el.queue(function() {
        if ( hide ) {
            el.hide();
        }
        $.effects.restore( el, props );
        $.effects.removeWrapper( el );
        done();
    });

    // inject all the animations we just queued to be first in line (after "inprogress")
    if ( queuelen > 1) {
        queue.splice.apply( queue,
            [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
    }
    el.dequeue();

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.clip = function( o, done ) {
    // Create element
    var el = $( this ),
        props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
        mode = $.effects.setMode( el, o.mode || "hide" ),
        show = mode === "show",
        direction = o.direction || "vertical",
        vert = direction === "vertical",
        size = vert ? "height" : "width",
        position = vert ? "top" : "left",
        animation = {},
        wrapper, animate, distance;

    // Save & Show
    $.effects.save( el, props );
    el.show();

    // Create Wrapper
    wrapper = $.effects.createWrapper( el ).css({
        overflow: "hidden"
    });
    animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
    distance = animate[ size ]();

    // Shift
    if ( show ) {
        animate.css( size, 0 );
        animate.css( position, distance / 2 );
    }

    // Create Animation Object:
    animation[ size ] = show ? distance : 0;
    animation[ position ] = show ? 0 : distance / 2;

    // Animate
    animate.animate( animation, {
        queue: false,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            if ( !show ) {
                el.hide();
            }
            $.effects.restore( el, props );
            $.effects.removeWrapper( el );
            done();
        }
    });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.drop = function( o, done ) {

    var el = $( this ),
        props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
        mode = $.effects.setMode( el, o.mode || "hide" ),
        show = mode === "show",
        direction = o.direction || "left",
        ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
        motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
        animation = {
            opacity: show ? 1 : 0
        },
        distance;

    // Adjust
    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el );

    distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;

    if ( show ) {
        el
            .css( "opacity", 0 )
            .css( ref, motion === "pos" ? -distance : distance );
    }

    // Animation
    animation[ ref ] = ( show ?
        ( motion === "pos" ? "+=" : "-=" ) :
        ( motion === "pos" ? "-=" : "+=" ) ) +
        distance;

    // Animate
    el.animate( animation, {
        queue: false,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            if ( mode === "hide" ) {
                el.hide();
            }
            $.effects.restore( el, props );
            $.effects.removeWrapper( el );
            done();
        }
    });
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.explode = function( o, done ) {

    var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
        cells = rows,
        el = $( this ),
        mode = $.effects.setMode( el, o.mode || "hide" ),
        show = mode === "show",

        // show and then visibility:hidden the element before calculating offset
        offset = el.show().css( "visibility", "hidden" ).offset(),

        // width and height of a piece
        width = Math.ceil( el.outerWidth() / cells ),
        height = Math.ceil( el.outerHeight() / rows ),
        pieces = [],

        // loop
        i, j, left, top, mx, my;

    // children animate complete:
    function childComplete() {
        pieces.push( this );
        if ( pieces.length === rows * cells ) {
            animComplete();
        }
    }

    // clone the element for each row and cell.
    for( i = 0; i < rows ; i++ ) { // ===>
        top = offset.top + i * height;
        my = i - ( rows - 1 ) / 2 ;

        for( j = 0; j < cells ; j++ ) { // |||
            left = offset.left + j * width;
            mx = j - ( cells - 1 ) / 2 ;

            // Create a clone of the now hidden main element that will be absolute positioned
            // within a wrapper div off the -left and -top equal to size of our pieces
            el
                .clone()
                .appendTo( "body" )
                .wrap( "<div></div>" )
                .css({
                    position: "absolute",
                    visibility: "visible",
                    left: -j * width,
                    top: -i * height
                })

            // select the wrapper - make it overflow: hidden and absolute positioned based on
            // where the original was located +left and +top equal to the size of pieces
                .parent()
                .addClass( "ui-effects-explode" )
                .css({
                    position: "absolute",
                    overflow: "hidden",
                    width: width,
                    height: height,
                    left: left + ( show ? mx * width : 0 ),
                    top: top + ( show ? my * height : 0 ),
                    opacity: show ? 0 : 1
                }).animate({
                    left: left + ( show ? 0 : mx * width ),
                    top: top + ( show ? 0 : my * height ),
                    opacity: show ? 1 : 0
                }, o.duration || 500, o.easing, childComplete );
        }
    }

    function animComplete() {
        el.css({
            visibility: "visible"
        });
        $( pieces ).remove();
        if ( !show ) {
            el.hide();
        }
        done();
    }
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.fade = function( o, done ) {
    var el = $( this ),
        mode = $.effects.setMode( el, o.mode || "toggle" );

    el.animate({
        opacity: mode
    }, {
        queue: false,
        duration: o.duration,
        easing: o.easing,
        complete: done
    });
};

})( jQuery );
(function( $, undefined ) {

$.effects.effect.fold = function( o, done ) {

    // Create element
    var el = $( this ),
        props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
        mode = $.effects.setMode( el, o.mode || "hide" ),
        show = mode === "show",
        hide = mode === "hide",
        size = o.size || 15,
        percent = /([0-9]+)%/.exec( size ),
        horizFirst = !!o.horizFirst,
        widthFirst = show !== horizFirst,
        ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
        duration = o.duration / 2,
        wrapper, distance,
        animation1 = {},
        animation2 = {};

    $.effects.save( el, props );
    el.show();

    // Create Wrapper
    wrapper = $.effects.createWrapper( el ).css({
        overflow: "hidden"
    });
    distance = widthFirst ?
        [ wrapper.width(), wrapper.height() ] :
        [ wrapper.height(), wrapper.width() ];

    if ( percent ) {
        size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
    }
    if ( show ) {
        wrapper.css( horizFirst ? {
            height: 0,
            width: size
        } : {
            height: size,
            width: 0
        });
    }

    // Animation
    animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
    animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

    // Animate
    wrapper
        .animate( animation1, duration, o.easing )
        .animate( animation2, duration, o.easing, function() {
            if ( hide ) {
                el.hide();
            }
            $.effects.restore( el, props );
            $.effects.removeWrapper( el );
            done();
        });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.highlight = function( o, done ) {
    var elem = $( this ),
        props = [ "backgroundImage", "backgroundColor", "opacity" ],
        mode = $.effects.setMode( elem, o.mode || "show" ),
        animation = {
            backgroundColor: elem.css( "backgroundColor" )
        };

    if (mode === "hide") {
        animation.opacity = 0;
    }

    $.effects.save( elem, props );

    elem
        .show()
        .css({
            backgroundImage: "none",
            backgroundColor: o.color || "#ffff99"
        })
        .animate( animation, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: function() {
                if ( mode === "hide" ) {
                    elem.hide();
                }
                $.effects.restore( elem, props );
                done();
            }
        });
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.pulsate = function( o, done ) {
    var elem = $( this ),
        mode = $.effects.setMode( elem, o.mode || "show" ),
        show = mode === "show",
        hide = mode === "hide",
        showhide = ( show || mode === "hide" ),

        // showing or hiding leaves of the "last" animation
        anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
        duration = o.duration / anims,
        animateTo = 0,
        queue = elem.queue(),
        queuelen = queue.length,
        i;

    if ( show || !elem.is(":visible")) {
        elem.css( "opacity", 0 ).show();
        animateTo = 1;
    }

    // anims - 1 opacity "toggles"
    for ( i = 1; i < anims; i++ ) {
        elem.animate({
            opacity: animateTo
        }, duration, o.easing );
        animateTo = 1 - animateTo;
    }

    elem.animate({
        opacity: animateTo
    }, duration, o.easing);

    elem.queue(function() {
        if ( hide ) {
            elem.hide();
        }
        done();
    });

    // We just queued up "anims" animations, we need to put them next in the queue
    if ( queuelen > 1 ) {
        queue.splice.apply( queue,
            [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
    }
    elem.dequeue();
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.puff = function( o, done ) {
    var elem = $( this ),
        mode = $.effects.setMode( elem, o.mode || "hide" ),
        hide = mode === "hide",
        percent = parseInt( o.percent, 10 ) || 150,
        factor = percent / 100,
        original = {
            height: elem.height(),
            width: elem.width(),
            outerHeight: elem.outerHeight(),
            outerWidth: elem.outerWidth()
        };

    $.extend( o, {
        effect: "scale",
        queue: false,
        fade: true,
        mode: mode,
        complete: done,
        percent: hide ? percent : 100,
        from: hide ?
            original :
            {
                height: original.height * factor,
                width: original.width * factor,
                outerHeight: original.outerHeight * factor,
                outerWidth: original.outerWidth * factor
            }
    });

    elem.effect( o );
};

$.effects.effect.scale = function( o, done ) {

    // Create element
    var el = $( this ),
        options = $.extend( true, {}, o ),
        mode = $.effects.setMode( el, o.mode || "effect" ),
        percent = parseInt( o.percent, 10 ) ||
            ( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
        direction = o.direction || "both",
        origin = o.origin,
        original = {
            height: el.height(),
            width: el.width(),
            outerHeight: el.outerHeight(),
            outerWidth: el.outerWidth()
        },
        factor = {
            y: direction !== "horizontal" ? (percent / 100) : 1,
            x: direction !== "vertical" ? (percent / 100) : 1
        };

    // We are going to pass this effect to the size effect:
    options.effect = "size";
    options.queue = false;
    options.complete = done;

    // Set default origin and restore for show/hide
    if ( mode !== "effect" ) {
        options.origin = origin || ["middle","center"];
        options.restore = true;
    }

    options.from = o.from || ( mode === "show" ? {
        height: 0,
        width: 0,
        outerHeight: 0,
        outerWidth: 0
    } : original );
    options.to = {
        height: original.height * factor.y,
        width: original.width * factor.x,
        outerHeight: original.outerHeight * factor.y,
        outerWidth: original.outerWidth * factor.x
    };

    // Fade option to support puff
    if ( options.fade ) {
        if ( mode === "show" ) {
            options.from.opacity = 0;
            options.to.opacity = 1;
        }
        if ( mode === "hide" ) {
            options.from.opacity = 1;
            options.to.opacity = 0;
        }
    }

    // Animate
    el.effect( options );

};

$.effects.effect.size = function( o, done ) {

    // Create element
    var original, baseline, factor,
        el = $( this ),
        props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

        // Always restore
        props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

        // Copy for children
        props2 = [ "width", "height", "overflow" ],
        cProps = [ "fontSize" ],
        vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
        hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

        // Set options
        mode = $.effects.setMode( el, o.mode || "effect" ),
        restore = o.restore || mode !== "effect",
        scale = o.scale || "both",
        origin = o.origin || [ "middle", "center" ],
        position = el.css( "position" ),
        props = restore ? props0 : props1,
        zero = {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        };

    if ( mode === "show" ) {
        el.show();
    }
    original = {
        height: el.height(),
        width: el.width(),
        outerHeight: el.outerHeight(),
        outerWidth: el.outerWidth()
    };

    if ( o.mode === "toggle" && mode === "show" ) {
        el.from = o.to || zero;
        el.to = o.from || original;
    } else {
        el.from = o.from || ( mode === "show" ? zero : original );
        el.to = o.to || ( mode === "hide" ? zero : original );
    }

    // Set scaling factor
    factor = {
        from: {
            y: el.from.height / original.height,
            x: el.from.width / original.width
        },
        to: {
            y: el.to.height / original.height,
            x: el.to.width / original.width
        }
    };

    // Scale the css box
    if ( scale === "box" || scale === "both" ) {

        // Vertical props scaling
        if ( factor.from.y !== factor.to.y ) {
            props = props.concat( vProps );
            el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
            el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
        }

        // Horizontal props scaling
        if ( factor.from.x !== factor.to.x ) {
            props = props.concat( hProps );
            el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
            el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
        }
    }

    // Scale the content
    if ( scale === "content" || scale === "both" ) {

        // Vertical props scaling
        if ( factor.from.y !== factor.to.y ) {
            props = props.concat( cProps ).concat( props2 );
            el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
            el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
        }
    }

    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el );
    el.css( "overflow", "hidden" ).css( el.from );

    // Adjust
    if (origin) { // Calculate baseline shifts
        baseline = $.effects.getBaseline( origin, original );
        el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
        el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
        el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
        el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
    }
    el.css( el.from ); // set top & left

    // Animate
    if ( scale === "content" || scale === "both" ) { // Scale the children

        // Add margins/font-size
        vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
        hProps = hProps.concat([ "marginLeft", "marginRight" ]);
        props2 = props0.concat(vProps).concat(hProps);

        el.find( "*[width]" ).each( function(){
            var child = $( this ),
                c_original = {
                    height: child.height(),
                    width: child.width(),
                    outerHeight: child.outerHeight(),
                    outerWidth: child.outerWidth()
                };
            if (restore) {
                $.effects.save(child, props2);
            }

            child.from = {
                height: c_original.height * factor.from.y,
                width: c_original.width * factor.from.x,
                outerHeight: c_original.outerHeight * factor.from.y,
                outerWidth: c_original.outerWidth * factor.from.x
            };
            child.to = {
                height: c_original.height * factor.to.y,
                width: c_original.width * factor.to.x,
                outerHeight: c_original.height * factor.to.y,
                outerWidth: c_original.width * factor.to.x
            };

            // Vertical props scaling
            if ( factor.from.y !== factor.to.y ) {
                child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
                child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
            }

            // Horizontal props scaling
            if ( factor.from.x !== factor.to.x ) {
                child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
                child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
            }

            // Animate children
            child.css( child.from );
            child.animate( child.to, o.duration, o.easing, function() {

                // Restore children
                if ( restore ) {
                    $.effects.restore( child, props2 );
                }
            });
        });
    }

    // Animate
    el.animate( el.to, {
        queue: false,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            if ( el.to.opacity === 0 ) {
                el.css( "opacity", el.from.opacity );
            }
            if( mode === "hide" ) {
                el.hide();
            }
            $.effects.restore( el, props );
            if ( !restore ) {

                // we need to calculate our new positioning based on the scaling
                if ( position === "static" ) {
                    el.css({
                        position: "relative",
                        top: el.to.top,
                        left: el.to.left
                    });
                } else {
                    $.each([ "top", "left" ], function( idx, pos ) {
                        el.css( pos, function( _, str ) {
                            var val = parseInt( str, 10 ),
                                toRef = idx ? el.to.left : el.to.top;

                            // if original was "auto", recalculate the new value from wrapper
                            if ( str === "auto" ) {
                                return toRef + "px";
                            }

                            return val + toRef + "px";
                        });
                    });
                }
            }

            $.effects.removeWrapper( el );
            done();
        }
    });

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.shake = function( o, done ) {

    var el = $( this ),
        props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
        mode = $.effects.setMode( el, o.mode || "effect" ),
        direction = o.direction || "left",
        distance = o.distance || 20,
        times = o.times || 3,
        anims = times * 2 + 1,
        speed = Math.round(o.duration/anims),
        ref = (direction === "up" || direction === "down") ? "top" : "left",
        positiveMotion = (direction === "up" || direction === "left"),
        animation = {},
        animation1 = {},
        animation2 = {},
        i,

        // we will need to re-assemble the queue to stack our animations in place
        queue = el.queue(),
        queuelen = queue.length;

    $.effects.save( el, props );
    el.show();
    $.effects.createWrapper( el );

    // Animation
    animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
    animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
    animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

    // Animate
    el.animate( animation, speed, o.easing );

    // Shakes
    for ( i = 1; i < times; i++ ) {
        el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
    }
    el
        .animate( animation1, speed, o.easing )
        .animate( animation, speed / 2, o.easing )
        .queue(function() {
            if ( mode === "hide" ) {
                el.hide();
            }
            $.effects.restore( el, props );
            $.effects.removeWrapper( el );
            done();
        });

    // inject all the animations we just queued to be first in line (after "inprogress")
    if ( queuelen > 1) {
        queue.splice.apply( queue,
            [ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
    }
    el.dequeue();

};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.slide = function( o, done ) {

    // Create element
    var el = $( this ),
        props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
        mode = $.effects.setMode( el, o.mode || "show" ),
        show = mode === "show",
        direction = o.direction || "left",
        ref = (direction === "up" || direction === "down") ? "top" : "left",
        positiveMotion = (direction === "up" || direction === "left"),
        distance,
        animation = {};

    // Adjust
    $.effects.save( el, props );
    el.show();
    distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

    $.effects.createWrapper( el ).css({
        overflow: "hidden"
    });

    if ( show ) {
        el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
    }

    // Animation
    animation[ ref ] = ( show ?
        ( positiveMotion ? "+=" : "-=") :
        ( positiveMotion ? "-=" : "+=")) +
        distance;

    // Animate
    el.animate( animation, {
        queue: false,
        duration: o.duration,
        easing: o.easing,
        complete: function() {
            if ( mode === "hide" ) {
                el.hide();
            }
            $.effects.restore( el, props );
            $.effects.removeWrapper( el );
            done();
        }
    });
};

})(jQuery);
(function( $, undefined ) {

$.effects.effect.transfer = function( o, done ) {
    var elem = $( this ),
        target = $( o.to ),
        targetFixed = target.css( "position" ) === "fixed",
        body = $("body"),
        fixTop = targetFixed ? body.scrollTop() : 0,
        fixLeft = targetFixed ? body.scrollLeft() : 0,
        endPosition = target.offset(),
        animation = {
            top: endPosition.top - fixTop ,
            left: endPosition.left - fixLeft ,
            height: target.innerHeight(),
            width: target.innerWidth()
        },
        startPosition = elem.offset(),
        transfer = $( '<div class="ui-effects-transfer"></div>' )
            .appendTo( document.body )
            .addClass( o.className )
            .css({
                top: startPosition.top - fixTop ,
                left: startPosition.left - fixLeft ,
                height: elem.innerHeight(),
                width: elem.innerWidth(),
                position: targetFixed ? "fixed" : "absolute"
            })
            .animate( animation, o.duration, o.easing, function() {
                transfer.remove();
                done();
            });
};

})(jQuery);
(function( $, undefined ) {

var mouseHandled = false;

$.widget( "ui.menu", {
    version: "1.9.2",
    defaultElement: "<ul>",
    delay: 300,
    options: {
        icons: {
            submenu: "ui-icon-carat-1-e"
        },
        menus: "ul",
        position: {
            my: "left top",
            at: "right top"
        },
        role: "menu",

        // callbacks
        blur: null,
        focus: null,
        select: null
    },

    _create: function() {
        this.activeMenu = this.element;
        this.element
            .uniqueId()
            .addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
            .toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
            .attr({
                role: this.options.role,
                tabIndex: 0
            })
            // need to catch all clicks on disabled menu
            // not possible through _on
            .bind( "click" + this.eventNamespace, $.proxy(function( event ) {
                if ( this.options.disabled ) {
                    event.preventDefault();
                }
            }, this ));

        if ( this.options.disabled ) {
            this.element
                .addClass( "ui-state-disabled" )
                .attr( "aria-disabled", "true" );
        }

        this._on({
            // Prevent focus from sticking to links inside menu after clicking
            // them (focus should always stay on UL during navigation).
            "mousedown .ui-menu-item > a": function( event ) {
                event.preventDefault();
            },
            "click .ui-state-disabled > a": function( event ) {
                event.preventDefault();
            },
            "click .ui-menu-item:has(a)": function( event ) {
                var target = $( event.target ).closest( ".ui-menu-item" );
                if ( !mouseHandled && target.not( ".ui-state-disabled" ).length ) {
                    mouseHandled = true;

                    this.select( event );
                    // Open submenu on click
                    if ( target.has( ".ui-menu" ).length ) {
                        this.expand( event );
                    } else if ( !this.element.is( ":focus" ) ) {
                        // Redirect focus to the menu
                        this.element.trigger( "focus", [ true ] );

                        // If the active item is on the top level, let it stay active.
                        // Otherwise, blur the active item since it is no longer visible.
                        if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
                            clearTimeout( this.timer );
                        }
                    }
                }
            },
            "mouseenter .ui-menu-item": function( event ) {
                var target = $( event.currentTarget );
                // Remove ui-state-active class from siblings of the newly focused menu item
                // to avoid a jump caused by adjacent elements both having a class with a border
                target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );
                this.focus( event, target );
            },
            mouseleave: "collapseAll",
            "mouseleave .ui-menu": "collapseAll",
            focus: function( event, keepActiveItem ) {
                // If there's already an active item, keep it active
                // If not, activate the first item
                var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );

                if ( !keepActiveItem ) {
                    this.focus( event, item );
                }
            },
            blur: function( event ) {
                this._delay(function() {
                    if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
                        this.collapseAll( event );
                    }
                });
            },
            keydown: "_keydown"
        });

        this.refresh();

        // Clicks outside of a menu collapse any open menus
        this._on( this.document, {
            click: function( event ) {
                if ( !$( event.target ).closest( ".ui-menu" ).length ) {
                    this.collapseAll( event );
                }

                // Reset the mouseHandled flag
                mouseHandled = false;
            }
        });
    },

    _destroy: function() {
        // Destroy (sub)menus
        this.element
            .removeAttr( "aria-activedescendant" )
            .find( ".ui-menu" ).andSelf()
                .removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )
                .removeAttr( "role" )
                .removeAttr( "tabIndex" )
                .removeAttr( "aria-labelledby" )
                .removeAttr( "aria-expanded" )
                .removeAttr( "aria-hidden" )
                .removeAttr( "aria-disabled" )
                .removeUniqueId()
                .show();

        // Destroy menu items
        this.element.find( ".ui-menu-item" )
            .removeClass( "ui-menu-item" )
            .removeAttr( "role" )
            .removeAttr( "aria-disabled" )
            .children( "a" )
                .removeUniqueId()
                .removeClass( "ui-corner-all ui-state-hover" )
                .removeAttr( "tabIndex" )
                .removeAttr( "role" )
                .removeAttr( "aria-haspopup" )
                .children().each( function() {
                    var elem = $( this );
                    if ( elem.data( "ui-menu-submenu-carat" ) ) {
                        elem.remove();
                    }
                });

        // Destroy menu dividers
        this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
    },

    _keydown: function( event ) {
        var match, prev, character, skip, regex,
            preventDefault = true;

        function escape( value ) {
            return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
        }

        switch ( event.keyCode ) {
        case $.ui.keyCode.PAGE_UP:
            this.previousPage( event );
            break;
        case $.ui.keyCode.PAGE_DOWN:
            this.nextPage( event );
            break;
        case $.ui.keyCode.HOME:
            this._move( "first", "first", event );
            break;
        case $.ui.keyCode.END:
            this._move( "last", "last", event );
            break;
        case $.ui.keyCode.UP:
            this.previous( event );
            break;
        case $.ui.keyCode.DOWN:
            this.next( event );
            break;
        case $.ui.keyCode.LEFT:
            this.collapse( event );
            break;
        case $.ui.keyCode.RIGHT:
            if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
                this.expand( event );
            }
            break;
        case $.ui.keyCode.ENTER:
        case $.ui.keyCode.SPACE:
            this._activate( event );
            break;
        case $.ui.keyCode.ESCAPE:
            this.collapse( event );
            break;
        default:
            preventDefault = false;
            prev = this.previousFilter || "";
            character = String.fromCharCode( event.keyCode );
            skip = false;

            clearTimeout( this.filterTimer );

            if ( character === prev ) {
                skip = true;
            } else {
                character = prev + character;
            }

            regex = new RegExp( "^" + escape( character ), "i" );
            match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
                return regex.test( $( this ).children( "a" ).text() );
            });
            match = skip && match.index( this.active.next() ) !== -1 ?
                this.active.nextAll( ".ui-menu-item" ) :
                match;

            // If no matches on the current filter, reset to the last character pressed
            // to move down the menu to the first item that starts with that character
            if ( !match.length ) {
                character = String.fromCharCode( event.keyCode );
                regex = new RegExp( "^" + escape( character ), "i" );
                match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
                    return regex.test( $( this ).children( "a" ).text() );
                });
            }

            if ( match.length ) {
                this.focus( event, match );
                if ( match.length > 1 ) {
                    this.previousFilter = character;
                    this.filterTimer = this._delay(function() {
                        delete this.previousFilter;
                    }, 1000 );
                } else {
                    delete this.previousFilter;
                }
            } else {
                delete this.previousFilter;
            }
        }

        if ( preventDefault ) {
            event.preventDefault();
        }
    },

    _activate: function( event ) {
        if ( !this.active.is( ".ui-state-disabled" ) ) {
            if ( this.active.children( "a[aria-haspopup='true']" ).length ) {
                this.expand( event );
            } else {
                this.select( event );
            }
        }
    },

    refresh: function() {
        var menus,
            icon = this.options.icons.submenu,
            submenus = this.element.find( this.options.menus );

        // Initialize nested menus
        submenus.filter( ":not(.ui-menu)" )
            .addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
            .hide()
            .attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            })
            .each(function() {
                var menu = $( this ),
                    item = menu.prev( "a" ),
                    submenuCarat = $( "<span>" )
                        .addClass( "ui-menu-icon ui-icon " + icon )
                        .data( "ui-menu-submenu-carat", true );

                item
                    .attr( "aria-haspopup", "true" )
                    .prepend( submenuCarat );
                menu.attr( "aria-labelledby", item.attr( "id" ) );
            });

        menus = submenus.add( this.element );

        // Don't refresh list items that are already adapted
        menus.children( ":not(.ui-menu-item):has(a)" )
            .addClass( "ui-menu-item" )
            .attr( "role", "presentation" )
            .children( "a" )
                .uniqueId()
                .addClass( "ui-corner-all" )
                .attr({
                    tabIndex: -1,
                    role: this._itemRole()
                });

        // Initialize unlinked menu-items containing spaces and/or dashes only as dividers
        menus.children( ":not(.ui-menu-item)" ).each(function() {
            var item = $( this );
            // hyphen, em dash, en dash
            if ( !/[^\-鈥斺€揬s]/.test( item.text() ) ) {
                item.addClass( "ui-widget-content ui-menu-divider" );
            }
        });

        // Add aria-disabled attribute to any disabled menu item
        menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

        // If the active item has been removed, blur the menu
        if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
            this.blur();
        }
    },

    _itemRole: function() {
        return {
            menu: "menuitem",
            listbox: "option"
        }[ this.options.role ];
    },

    focus: function( event, item ) {
        var nested, focused;
        this.blur( event, event && event.type === "focus" );

        this._scrollIntoView( item );

        this.active = item.first();
        focused = this.active.children( "a" ).addClass( "ui-state-focus" );
        // Only update aria-activedescendant if there's a role
        // otherwise we assume focus is managed elsewhere
        if ( this.options.role ) {
            this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
        }

        // Highlight active parent menu item, if any
        this.active
            .parent()
            .closest( ".ui-menu-item" )
            .children( "a:first" )
            .addClass( "ui-state-active" );

        if ( event && event.type === "keydown" ) {
            this._close();
        } else {
            this.timer = this._delay(function() {
                this._close();
            }, this.delay );
        }

        nested = item.children( ".ui-menu" );
        if ( nested.length && ( /^mouse/.test( event.type ) ) ) {
            this._startOpening(nested);
        }
        this.activeMenu = item.parent();

        this._trigger( "focus", event, { item: item } );
    },

    _scrollIntoView: function( item ) {
        var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
        if ( this._hasScroll() ) {
            borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
            paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
            offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
            scroll = this.activeMenu.scrollTop();
            elementHeight = this.activeMenu.height();
            itemHeight = item.height();

            if ( offset < 0 ) {
                this.activeMenu.scrollTop( scroll + offset );
            } else if ( offset + itemHeight > elementHeight ) {
                this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
            }
        }
    },

    blur: function( event, fromFocus ) {
        if ( !fromFocus ) {
            clearTimeout( this.timer );
        }

        if ( !this.active ) {
            return;
        }

        this.active.children( "a" ).removeClass( "ui-state-focus" );
        this.active = null;

        this._trigger( "blur", event, { item: this.active } );
    },

    _startOpening: function( submenu ) {
        clearTimeout( this.timer );

        // Don't open if already open fixes a Firefox bug that caused a .5 pixel
        // shift in the submenu position when mousing over the carat icon
        if ( submenu.attr( "aria-hidden" ) !== "true" ) {
            return;
        }

        this.timer = this._delay(function() {
            this._close();
            this._open( submenu );
        }, this.delay );
    },

    _open: function( submenu ) {
        var position = $.extend({
            of: this.active
        }, this.options.position );

        clearTimeout( this.timer );
        this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
            .hide()
            .attr( "aria-hidden", "true" );

        submenu
            .show()
            .removeAttr( "aria-hidden" )
            .attr( "aria-expanded", "true" )
            .position( position );
    },

    collapseAll: function( event, all ) {
        clearTimeout( this.timer );
        this.timer = this._delay(function() {
            // If we were passed an event, look for the submenu that contains the event
            var currentMenu = all ? this.element :
                $( event && event.target ).closest( this.element.find( ".ui-menu" ) );

            // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
            if ( !currentMenu.length ) {
                currentMenu = this.element;
            }

            this._close( currentMenu );

            this.blur( event );
            this.activeMenu = currentMenu;
        }, this.delay );
    },

    // With no arguments, closes the currently active menu - if nothing is active
    // it closes all menus.  If passed an argument, it will search for menus BELOW
    _close: function( startMenu ) {
        if ( !startMenu ) {
            startMenu = this.active ? this.active.parent() : this.element;
        }

        startMenu
            .find( ".ui-menu" )
                .hide()
                .attr( "aria-hidden", "true" )
                .attr( "aria-expanded", "false" )
            .end()
            .find( "a.ui-state-active" )
                .removeClass( "ui-state-active" );
    },

    collapse: function( event ) {
        var newItem = this.active &&
            this.active.parent().closest( ".ui-menu-item", this.element );
        if ( newItem && newItem.length ) {
            this._close();
            this.focus( event, newItem );
        }
    },

    expand: function( event ) {
        var newItem = this.active &&
            this.active
                .children( ".ui-menu " )
                .children( ".ui-menu-item" )
                .first();

        if ( newItem && newItem.length ) {
            this._open( newItem.parent() );

            // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
            this._delay(function() {
                this.focus( event, newItem );
            });
        }
    },

    next: function( event ) {
        this._move( "next", "first", event );
    },

    previous: function( event ) {
        this._move( "prev", "last", event );
    },

    isFirstItem: function() {
        return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
    },

    isLastItem: function() {
        return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
    },

    _move: function( direction, filter, event ) {
        var next;
        if ( this.active ) {
            if ( direction === "first" || direction === "last" ) {
                next = this.active
                    [ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
                    .eq( -1 );
            } else {
                next = this.active
                    [ direction + "All" ]( ".ui-menu-item" )
                    .eq( 0 );
            }
        }
        if ( !next || !next.length || !this.active ) {
            next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();
        }

        this.focus( event, next );
    },

    nextPage: function( event ) {
        var item, base, height;

        if ( !this.active ) {
            this.next( event );
            return;
        }
        if ( this.isLastItem() ) {
            return;
        }
        if ( this._hasScroll() ) {
            base = this.active.offset().top;
            height = this.element.height();
            this.active.nextAll( ".ui-menu-item" ).each(function() {
                item = $( this );
                return item.offset().top - base - height < 0;
            });

            this.focus( event, item );
        } else {
            this.focus( event, this.activeMenu.children( ".ui-menu-item" )
                [ !this.active ? "first" : "last" ]() );
        }
    },

    previousPage: function( event ) {
        var item, base, height;
        if ( !this.active ) {
            this.next( event );
            return;
        }
        if ( this.isFirstItem() ) {
            return;
        }
        if ( this._hasScroll() ) {
            base = this.active.offset().top;
            height = this.element.height();
            this.active.prevAll( ".ui-menu-item" ).each(function() {
                item = $( this );
                return item.offset().top - base + height > 0;
            });

            this.focus( event, item );
        } else {
            this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );
        }
    },

    _hasScroll: function() {
        return this.element.outerHeight() < this.element.prop( "scrollHeight" );
    },

    select: function( event ) {
        // TODO: It should never be possible to not have an active item at this
        // point, but the tests don't trigger mouseenter before click.
        this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
        var ui = { item: this.active };
        if ( !this.active.has( ".ui-menu" ).length ) {
            this.collapseAll( event, true );
        }
        this._trigger( "select", event, ui );
    }
});

}( jQuery ));
(function( $, undefined ) {

$.widget( "ui.progressbar", {
    version: "1.9.2",
    options: {
        value: 0,
        max: 100
    },

    min: 0,

    _create: function() {
        this.element
            .addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
            .attr({
                role: "progressbar",
                "aria-valuemin": this.min,
                "aria-valuemax": this.options.max,
                "aria-valuenow": this._value()
            });

        this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
            .appendTo( this.element );

        this.oldValue = this._value();
        this._refreshValue();
    },

    _destroy: function() {
        this.element
            .removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
            .removeAttr( "role" )
            .removeAttr( "aria-valuemin" )
            .removeAttr( "aria-valuemax" )
            .removeAttr( "aria-valuenow" );

        this.valueDiv.remove();
    },

    value: function( newValue ) {
        if ( newValue === undefined ) {
            return this._value();
        }

        this._setOption( "value", newValue );
        return this;
    },

    _setOption: function( key, value ) {
        if ( key === "value" ) {
            this.options.value = value;
            this._refreshValue();
            if ( this._value() === this.options.max ) {
                this._trigger( "complete" );
            }
        }

        this._super( key, value );
    },

    _value: function() {
        var val = this.options.value;
        // normalize invalid value
        if ( typeof val !== "number" ) {
            val = 0;
        }
        return Math.min( this.options.max, Math.max( this.min, val ) );
    },

    _percentage: function() {
        return 100 * this._value() / this.options.max;
    },

    _refreshValue: function() {
        var value = this.value(),
            percentage = this._percentage();

        if ( this.oldValue !== value ) {
            this.oldValue = value;
            this._trigger( "change" );
        }

        this.valueDiv
            .toggle( value > this.min )
            .toggleClass( "ui-corner-right", value === this.options.max )
            .width( percentage.toFixed(0) + "%" );
        this.element.attr( "aria-valuenow", value );
    }
});

})( jQuery );
(function( $, undefined ) {

$.widget("ui.resizable", $.ui.mouse, {
    version: "1.9.2",
    widgetEventPrefix: "resize",
    options: {
        alsoResize: false,
        animate: false,
        animateDuration: "slow",
        animateEasing: "swing",
        aspectRatio: false,
        autoHide: false,
        containment: false,
        ghost: false,
        grid: false,
        handles: "e,s,se",
        helper: false,
        maxHeight: null,
        maxWidth: null,
        minHeight: 10,
        minWidth: 10,
        zIndex: 1000
    },
    _create: function() {

        var that = this, o = this.options;
        this.element.addClass("ui-resizable");

        $.extend(this, {
            _aspectRatio: !!(o.aspectRatio),
            aspectRatio: o.aspectRatio,
            originalElement: this.element,
            _proportionallyResizeElements: [],
            _helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null
        });

        //Wrap the element if it cannot hold child nodes
        if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

            //Create a wrapper element and set the wrapper to the new current internal element
            this.element.wrap(
                $('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                    position: this.element.css('position'),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css('top'),
                    left: this.element.css('left')
                })
            );

            //Overwrite the original this.element
            this.element = this.element.parent().data(
                "resizable", this.element.data('resizable')
            );

            this.elementIsWrapper = true;

            //Move margins to the wrapper
            this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
            this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

            //Prevent Safari textarea resize
            this.originalResizeStyle = this.originalElement.css('resize');
            this.originalElement.css('resize', 'none');

            //Push the actual element to our proportionallyResize internal array
            this._proportionallyResizeElements.push(this.originalElement.css({ position: 'static', zoom: 1, display: 'block' }));

            // avoid IE jump (hard set the margin)
            this.originalElement.css({ margin: this.originalElement.css('margin') });

            // fix handlers offset
            this._proportionallyResize();

        }

        this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? "e,s,se" : { n: '.ui-resizable-n', e: '.ui-resizable-e', s: '.ui-resizable-s', w: '.ui-resizable-w', se: '.ui-resizable-se', sw: '.ui-resizable-sw', ne: '.ui-resizable-ne', nw: '.ui-resizable-nw' });
        if(this.handles.constructor == String) {

            if(this.handles == 'all') this.handles = 'n,e,s,w,se,sw,ne,nw';
            var n = this.handles.split(","); this.handles = {};

            for(var i = 0; i < n.length; i++) {

                var handle = $.trim(n[i]), hname = 'ui-resizable-'+handle;
                var axis = $('<div class="ui-resizable-handle ' + hname + '"></div>');

                // Apply zIndex to all handles - see #7960
                axis.css({ zIndex: o.zIndex });

                //TODO : What's going on here?
                if ('se' == handle) {
                    axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                };

                //Insert into internal handles object and append to element
                this.handles[handle] = '.ui-resizable-'+handle;
                this.element.append(axis);
            }

        }

        this._renderAxis = function(target) {

            target = target || this.element;

            for(var i in this.handles) {

                if(this.handles[i].constructor == String)
                    this.handles[i] = $(this.handles[i], this.element).show();

                //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
                if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

                    var axis = $(this.handles[i], this.element), padWrapper = 0;

                    //Checking the correct pad and border
                    padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

                    //The padding type i have to apply...
                    var padPos = [ 'padding',
                        /ne|nw|n/.test(i) ? 'Top' :
                        /se|sw|s/.test(i) ? 'Bottom' :
                        /^e$/.test(i) ? 'Right' : 'Left' ].join("");

                    target.css(padPos, padWrapper);

                    this._proportionallyResize();

                }

                //TODO: What's that good for? There's not anything to be executed left
                if(!$(this.handles[i]).length)
                    continue;

            }
        };

        //TODO: make renderAxis a prototype function
        this._renderAxis(this.element);

        this._handles = $('.ui-resizable-handle', this.element)
            .disableSelection();

        //Matching axis name
        this._handles.mouseover(function() {
            if (!that.resizing) {
                if (this.className)
                    var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                //Axis, default = se
                that.axis = axis && axis[1] ? axis[1] : 'se';
            }
        });

        //If we want to auto hide the elements
        if (o.autoHide) {
            this._handles.hide();
            $(this.element)
                .addClass("ui-resizable-autohide")
                .mouseenter(function() {
                    if (o.disabled) return;
                    $(this).removeClass("ui-resizable-autohide");
                    that._handles.show();
                })
                .mouseleave(function(){
                    if (o.disabled) return;
                    if (!that.resizing) {
                        $(this).addClass("ui-resizable-autohide");
                        that._handles.hide();
                    }
                });
        }

        //Initialize the mouse interaction
        this._mouseInit();

    },

    _destroy: function() {

        this._mouseDestroy();

        var _destroy = function(exp) {
            $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
                .removeData("resizable").removeData("ui-resizable").unbind(".resizable").find('.ui-resizable-handle').remove();
        };

        //TODO: Unwrap at same DOM position
        if (this.elementIsWrapper) {
            _destroy(this.element);
            var wrapper = this.element;
            this.originalElement.css({
                position: wrapper.css('position'),
                width: wrapper.outerWidth(),
                height: wrapper.outerHeight(),
                top: wrapper.css('top'),
                left: wrapper.css('left')
            }).insertAfter( wrapper );
            wrapper.remove();
        }

        this.originalElement.css('resize', this.originalResizeStyle);
        _destroy(this.originalElement);

        return this;
    },

    _mouseCapture: function(event) {
        var handle = false;
        for (var i in this.handles) {
            if ($(this.handles[i])[0] == event.target) {
                handle = true;
            }
        }

        return !this.options.disabled && handle;
    },

    _mouseStart: function(event) {

        var o = this.options, iniPos = this.element.position(), el = this.element;

        this.resizing = true;
        this.documentScroll = { top: $(document).scrollTop(), left: $(document).scrollLeft() };

        // bugfix for http://dev.jquery.com/ticket/1749
        if (el.is('.ui-draggable') || (/absolute/).test(el.css('position'))) {
            el.css({ position: 'absolute', top: iniPos.top, left: iniPos.left });
        }

        this._renderProxy();

        var curleft = num(this.helper.css('left')), curtop = num(this.helper.css('top'));

        if (o.containment) {
            curleft += $(o.containment).scrollLeft() || 0;
            curtop += $(o.containment).scrollTop() || 0;
        }

        //Store needed variables
        this.offset = this.helper.offset();
        this.position = { left: curleft, top: curtop };
        this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
        this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
        this.originalPosition = { left: curleft, top: curtop };
        this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
        this.originalMousePosition = { left: event.pageX, top: event.pageY };

        //Aspect Ratio
        this.aspectRatio = (typeof o.aspectRatio == 'number') ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

        var cursor = $('.ui-resizable-' + this.axis).css('cursor');
        $('body').css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);

        el.addClass("ui-resizable-resizing");
        this._propagate("start", event);
        return true;
    },

    _mouseDrag: function(event) {

        //Increase performance, avoid regex
        var el = this.helper, o = this.options, props = {},
            that = this, smp = this.originalMousePosition, a = this.axis;

        var dx = (event.pageX-smp.left)||0, dy = (event.pageY-smp.top)||0;
        var trigger = this._change[a];
        if (!trigger) return false;

        // Calculate the attrs that will be change
        var data = trigger.apply(this, [event, dx, dy]);

        // Put this in the mouseDrag handler since the user can start pressing shift while resizing
        this._updateVirtualBoundaries(event.shiftKey);
        if (this._aspectRatio || event.shiftKey)
            data = this._updateRatio(data, event);

        data = this._respectSize(data, event);

        // plugins callbacks need to be called first
        this._propagate("resize", event);

        el.css({
            top: this.position.top + "px", left: this.position.left + "px",
            width: this.size.width + "px", height: this.size.height + "px"
        });

        if (!this._helper && this._proportionallyResizeElements.length)
            this._proportionallyResize();

        this._updateCache(data);

        // calling the user callback at the end
        this._trigger('resize', event, this.ui());

        return false;
    },

    _mouseStop: function(event) {

        this.resizing = false;
        var o = this.options, that = this;

        if(this._helper) {
            var pr = this._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : that.sizeDiff.height,
                soffsetw = ista ? 0 : that.sizeDiff.width;

            var s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) },
                left = (parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left)) || null,
                top = (parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top)) || null;

            if (!o.animate)
                this.element.css($.extend(s, { top: top, left: left }));

            that.helper.height(that.size.height);
            that.helper.width(that.size.width);

            if (this._helper && !o.animate) this._proportionallyResize();
        }

        $('body').css('cursor', 'auto');

        this.element.removeClass("ui-resizable-resizing");

        this._propagate("stop", event);

        if (this._helper) this.helper.remove();
        return false;

    },

    _updateVirtualBoundaries: function(forceAspectRatio) {
        var o = this.options, pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b;

        b = {
            minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
            maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
            minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
            maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
        };

        if(this._aspectRatio || forceAspectRatio) {
            // We want to create an enclosing box whose aspect ration is the requested one
            // First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
            pMinWidth = b.minHeight * this.aspectRatio;
            pMinHeight = b.minWidth / this.aspectRatio;
            pMaxWidth = b.maxHeight * this.aspectRatio;
            pMaxHeight = b.maxWidth / this.aspectRatio;

            if(pMinWidth > b.minWidth) b.minWidth = pMinWidth;
            if(pMinHeight > b.minHeight) b.minHeight = pMinHeight;
            if(pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;
            if(pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;
        }
        this._vBoundaries = b;
    },

    _updateCache: function(data) {
        var o = this.options;
        this.offset = this.helper.offset();
        if (isNumber(data.left)) this.position.left = data.left;
        if (isNumber(data.top)) this.position.top = data.top;
        if (isNumber(data.height)) this.size.height = data.height;
        if (isNumber(data.width)) this.size.width = data.width;
    },

    _updateRatio: function(data, event) {

        var o = this.options, cpos = this.position, csize = this.size, a = this.axis;

        if (isNumber(data.height)) data.width = (data.height * this.aspectRatio);
        else if (isNumber(data.width)) data.height = (data.width / this.aspectRatio);

        if (a == 'sw') {
            data.left = cpos.left + (csize.width - data.width);
            data.top = null;
        }
        if (a == 'nw') {
            data.top = cpos.top + (csize.height - data.height);
            data.left = cpos.left + (csize.width - data.width);
        }

        return data;
    },

    _respectSize: function(data, event) {

        var el = this.helper, o = this._vBoundaries, pRatio = this._aspectRatio || event.shiftKey, a = this.axis,
                ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
                    isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height);

        if (isminw) data.width = o.minWidth;
        if (isminh) data.height = o.minHeight;
        if (ismaxw) data.width = o.maxWidth;
        if (ismaxh) data.height = o.maxHeight;

        var dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height;
        var cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);

        if (isminw && cw) data.left = dw - o.minWidth;
        if (ismaxw && cw) data.left = dw - o.maxWidth;
        if (isminh && ch)   data.top = dh - o.minHeight;
        if (ismaxh && ch)   data.top = dh - o.maxHeight;

        // fixing jump error on top/left - bug #2330
        var isNotwh = !data.width && !data.height;
        if (isNotwh && !data.left && data.top) data.top = null;
        else if (isNotwh && !data.top && data.left) data.left = null;

        return data;
    },

    _proportionallyResize: function() {

        var o = this.options;
        if (!this._proportionallyResizeElements.length) return;
        var element = this.helper || this.element;

        for (var i=0; i < this._proportionallyResizeElements.length; i++) {

            var prel = this._proportionallyResizeElements[i];

            if (!this.borderDif) {
                var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')],
                    p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];

                this.borderDif = $.map(b, function(v, i) {
                    var border = parseInt(v,10)||0, padding = parseInt(p[i],10)||0;
                    return border + padding;
                });
            }

            prel.css({
                height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
                width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
            });

        };

    },

    _renderProxy: function() {

        var el = this.element, o = this.options;
        this.elementOffset = el.offset();

        if(this._helper) {

            this.helper = this.helper || $('<div style="overflow:hidden;"></div>');

            // fix ie6 offset TODO: This seems broken
            var ie6offset = ($.ui.ie6 ? 1 : 0),
            pxyoffset = ( $.ui.ie6 ? 2 : -1 );

            this.helper.addClass(this._helper).css({
                width: this.element.outerWidth() + pxyoffset,
                height: this.element.outerHeight() + pxyoffset,
                position: 'absolute',
                left: this.elementOffset.left - ie6offset +'px',
                top: this.elementOffset.top - ie6offset +'px',
                zIndex: ++o.zIndex //TODO: Don't modify option
            });

            this.helper
                .appendTo("body")
                .disableSelection();

        } else {
            this.helper = this.element;
        }

    },

    _change: {
        e: function(event, dx, dy) {
            return { width: this.originalSize.width + dx };
        },
        w: function(event, dx, dy) {
            var o = this.options, cs = this.originalSize, sp = this.originalPosition;
            return { left: sp.left + dx, width: cs.width - dx };
        },
        n: function(event, dx, dy) {
            var o = this.options, cs = this.originalSize, sp = this.originalPosition;
            return { top: sp.top + dy, height: cs.height - dy };
        },
        s: function(event, dx, dy) {
            return { height: this.originalSize.height + dy };
        },
        se: function(event, dx, dy) {
            return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
        },
        sw: function(event, dx, dy) {
            return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
        },
        ne: function(event, dx, dy) {
            return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
        },
        nw: function(event, dx, dy) {
            return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
        }
    },

    _propagate: function(n, event) {
        $.ui.plugin.call(this, n, [event, this.ui()]);
        (n != "resize" && this._trigger(n, event, this.ui()));
    },

    plugins: {},

    ui: function() {
        return {
            originalElement: this.originalElement,
            element: this.element,
            helper: this.helper,
            position: this.position,
            size: this.size,
            originalSize: this.originalSize,
            originalPosition: this.originalPosition
        };
    }

});

/*
 * Resizable Extensions
 */

$.ui.plugin.add("resizable", "alsoResize", {

    start: function (event, ui) {
        var that = $(this).data("resizable"), o = that.options;

        var _store = function (exp) {
            $(exp).each(function() {
                var el = $(this);
                el.data("resizable-alsoresize", {
                    width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
                    left: parseInt(el.css('left'), 10), top: parseInt(el.css('top'), 10)
                });
            });
        };

        if (typeof(o.alsoResize) == 'object' && !o.alsoResize.parentNode) {
            if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
            else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
        }else{
            _store(o.alsoResize);
        }
    },

    resize: function (event, ui) {
        var that = $(this).data("resizable"), o = that.options, os = that.originalSize, op = that.originalPosition;

        var delta = {
            height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
            top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
        },

        _alsoResize = function (exp, c) {
            $(exp).each(function() {
                var el = $(this), start = $(this).data("resizable-alsoresize"), style = {},
                    css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];

                $.each(css, function (i, prop) {
                    var sum = (start[prop]||0) + (delta[prop]||0);
                    if (sum && sum >= 0)
                        style[prop] = sum || null;
                });

                el.css(style);
            });
        };

        if (typeof(o.alsoResize) == 'object' && !o.alsoResize.nodeType) {
            $.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
        }else{
            _alsoResize(o.alsoResize);
        }
    },

    stop: function (event, ui) {
        $(this).removeData("resizable-alsoresize");
    }
});

$.ui.plugin.add("resizable", "animate", {

    stop: function(event, ui) {
        var that = $(this).data("resizable"), o = that.options;

        var pr = that._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                    soffseth = ista && $.ui.hasScroll(pr[0], 'left') /* TODO - jump height */ ? 0 : that.sizeDiff.height,
                        soffsetw = ista ? 0 : that.sizeDiff.width;

        var style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
                    left = (parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left)) || null,
                        top = (parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top)) || null;

        that.element.animate(
            $.extend(style, top && left ? { top: top, left: left } : {}), {
                duration: o.animateDuration,
                easing: o.animateEasing,
                step: function() {

                    var data = {
                        width: parseInt(that.element.css('width'), 10),
                        height: parseInt(that.element.css('height'), 10),
                        top: parseInt(that.element.css('top'), 10),
                        left: parseInt(that.element.css('left'), 10)
                    };

                    if (pr && pr.length) $(pr[0]).css({ width: data.width, height: data.height });

                    // propagating resize, and updating values for each animation step
                    that._updateCache(data);
                    that._propagate("resize", event);

                }
            }
        );
    }

});

$.ui.plugin.add("resizable", "containment", {

    start: function(event, ui) {
        var that = $(this).data("resizable"), o = that.options, el = that.element;
        var oc = o.containment, ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;
        if (!ce) return;

        that.containerElement = $(ce);

        if (/document/.test(oc) || oc == document) {
            that.containerOffset = { left: 0, top: 0 };
            that.containerPosition = { left: 0, top: 0 };

            that.parentData = {
                element: $(document), left: 0, top: 0,
                width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
            };
        }

        // i'm a node, so compute top, left, right, bottom
        else {
            var element = $(ce), p = [];
            $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

            that.containerOffset = element.offset();
            that.containerPosition = element.position();
            that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

            var co = that.containerOffset, ch = that.containerSize.height,  cw = that.containerSize.width,
                        width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw ), height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

            that.parentData = {
                element: ce, left: co.left, top: co.top, width: width, height: height
            };
        }
    },

    resize: function(event, ui) {
        var that = $(this).data("resizable"), o = that.options,
                ps = that.containerSize, co = that.containerOffset, cs = that.size, cp = that.position,
                pRatio = that._aspectRatio || event.shiftKey, cop = { top:0, left:0 }, ce = that.containerElement;

        if (ce[0] != document && (/static/).test(ce.css('position'))) cop = co;

        if (cp.left < (that._helper ? co.left : 0)) {
            that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
            if (pRatio) that.size.height = that.size.width / that.aspectRatio;
            that.position.left = o.helper ? co.left : 0;
        }

        if (cp.top < (that._helper ? co.top : 0)) {
            that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
            if (pRatio) that.size.width = that.size.height * that.aspectRatio;
            that.position.top = that._helper ? co.top : 0;
        }

        that.offset.left = that.parentData.left+that.position.left;
        that.offset.top = that.parentData.top+that.position.top;

        var woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width ),
                    hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

        var isParent = that.containerElement.get(0) == that.element.parent().get(0),
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css('position'));

        if(isParent && isOffsetRelative) woset -= that.parentData.left;

        if (woset + that.size.width >= that.parentData.width) {
            that.size.width = that.parentData.width - woset;
            if (pRatio) that.size.height = that.size.width / that.aspectRatio;
        }

        if (hoset + that.size.height >= that.parentData.height) {
            that.size.height = that.parentData.height - hoset;
            if (pRatio) that.size.width = that.size.height * that.aspectRatio;
        }
    },

    stop: function(event, ui){
        var that = $(this).data("resizable"), o = that.options, cp = that.position,
                co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement;

        var helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;

        if (that._helper && !o.animate && (/relative/).test(ce.css('position')))
            $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });

        if (that._helper && !o.animate && (/static/).test(ce.css('position')))
            $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });

    }
});

$.ui.plugin.add("resizable", "ghost", {

    start: function(event, ui) {

        var that = $(this).data("resizable"), o = that.options, cs = that.size;

        that.ghost = that.originalElement.clone();
        that.ghost
            .css({ opacity: .25, display: 'block', position: 'relative', height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
            .addClass('ui-resizable-ghost')
            .addClass(typeof o.ghost == 'string' ? o.ghost : '');

        that.ghost.appendTo(that.helper);

    },

    resize: function(event, ui){
        var that = $(this).data("resizable"), o = that.options;
        if (that.ghost) that.ghost.css({ position: 'relative', height: that.size.height, width: that.size.width });
    },

    stop: function(event, ui){
        var that = $(this).data("resizable"), o = that.options;
        if (that.ghost && that.helper) that.helper.get(0).removeChild(that.ghost.get(0));
    }

});

$.ui.plugin.add("resizable", "grid", {

    resize: function(event, ui) {
        var that = $(this).data("resizable"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, ratio = o._aspectRatio || event.shiftKey;
        o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;
        var ox = Math.round((cs.width - os.width) / (o.grid[0]||1)) * (o.grid[0]||1), oy = Math.round((cs.height - os.height) / (o.grid[1]||1)) * (o.grid[1]||1);

        if (/^(se|s|e)$/.test(a)) {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
        }
        else if (/^(ne)$/.test(a)) {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
            that.position.top = op.top - oy;
        }
        else if (/^(sw)$/.test(a)) {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
            that.position.left = op.left - ox;
        }
        else {
            that.size.width = os.width + ox;
            that.size.height = os.height + oy;
            that.position.top = op.top - oy;
            that.position.left = op.left - ox;
        }
    }

});

var num = function(v) {
    return parseInt(v, 10) || 0;
};

var isNumber = function(value) {
    return !isNaN(parseInt(value, 10));
};

})(jQuery);
(function( $, undefined ) {

$.widget("ui.selectable", $.ui.mouse, {
    version: "1.9.2",
    options: {
        appendTo: 'body',
        autoRefresh: true,
        distance: 0,
        filter: '*',
        tolerance: 'touch'
    },
    _create: function() {
        var that = this;

        this.element.addClass("ui-selectable");

        this.dragged = false;

        // cache selectee children based on filter
        var selectees;
        this.refresh = function() {
            selectees = $(that.options.filter, that.element[0]);
            selectees.addClass("ui-selectee");
            selectees.each(function() {
                var $this = $(this);
                var pos = $this.offset();
                $.data(this, "selectable-item", {
                    element: this,
                    $element: $this,
                    left: pos.left,
                    top: pos.top,
                    right: pos.left + $this.outerWidth(),
                    bottom: pos.top + $this.outerHeight(),
                    startselected: false,
                    selected: $this.hasClass('ui-selected'),
                    selecting: $this.hasClass('ui-selecting'),
                    unselecting: $this.hasClass('ui-unselecting')
                });
            });
        };
        this.refresh();

        this.selectees = selectees.addClass("ui-selectee");

        this._mouseInit();

        this.helper = $("<div class='ui-selectable-helper'></div>");
    },

    _destroy: function() {
        this.selectees
            .removeClass("ui-selectee")
            .removeData("selectable-item");
        this.element
            .removeClass("ui-selectable ui-selectable-disabled");
        this._mouseDestroy();
    },

    _mouseStart: function(event) {
        var that = this;

        this.opos = [event.pageX, event.pageY];

        if (this.options.disabled)
            return;

        var options = this.options;

        this.selectees = $(options.filter, this.element[0]);

        this._trigger("start", event);

        $(options.appendTo).append(this.helper);
        // position helper (lasso)
        this.helper.css({
            "left": event.clientX,
            "top": event.clientY,
            "width": 0,
            "height": 0
        });

        if (options.autoRefresh) {
            this.refresh();
        }

        this.selectees.filter('.ui-selected').each(function() {
            var selectee = $.data(this, "selectable-item");
            selectee.startselected = true;
            if (!event.metaKey && !event.ctrlKey) {
                selectee.$element.removeClass('ui-selected');
                selectee.selected = false;
                selectee.$element.addClass('ui-unselecting');
                selectee.unselecting = true;
                // selectable UNSELECTING callback
                that._trigger("unselecting", event, {
                    unselecting: selectee.element
                });
            }
        });

        $(event.target).parents().andSelf().each(function() {
            var selectee = $.data(this, "selectable-item");
            if (selectee) {
                var doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass('ui-selected');
                selectee.$element
                    .removeClass(doSelect ? "ui-unselecting" : "ui-selected")
                    .addClass(doSelect ? "ui-selecting" : "ui-unselecting");
                selectee.unselecting = !doSelect;
                selectee.selecting = doSelect;
                selectee.selected = doSelect;
                // selectable (UN)SELECTING callback
                if (doSelect) {
                    that._trigger("selecting", event, {
                        selecting: selectee.element
                    });
                } else {
                    that._trigger("unselecting", event, {
                        unselecting: selectee.element
                    });
                }
                return false;
            }
        });

    },

    _mouseDrag: function(event) {
        var that = this;
        this.dragged = true;

        if (this.options.disabled)
            return;

        var options = this.options;

        var x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
        if (x1 > x2) { var tmp = x2; x2 = x1; x1 = tmp; }
        if (y1 > y2) { var tmp = y2; y2 = y1; y1 = tmp; }
        this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

        this.selectees.each(function() {
            var selectee = $.data(this, "selectable-item");
            //prevent helper from being selected if appendTo: selectable
            if (!selectee || selectee.element == that.element[0])
                return;
            var hit = false;
            if (options.tolerance == 'touch') {
                hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
            } else if (options.tolerance == 'fit') {
                hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
            }

            if (hit) {
                // SELECT
                if (selectee.selected) {
                    selectee.$element.removeClass('ui-selected');
                    selectee.selected = false;
                }
                if (selectee.unselecting) {
                    selectee.$element.removeClass('ui-unselecting');
                    selectee.unselecting = false;
                }
                if (!selectee.selecting) {
                    selectee.$element.addClass('ui-selecting');
                    selectee.selecting = true;
                    // selectable SELECTING callback
                    that._trigger("selecting", event, {
                        selecting: selectee.element
                    });
                }
            } else {
                // UNSELECT
                if (selectee.selecting) {
                    if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                        selectee.$element.removeClass('ui-selecting');
                        selectee.selecting = false;
                        selectee.$element.addClass('ui-selected');
                        selectee.selected = true;
                    } else {
                        selectee.$element.removeClass('ui-selecting');
                        selectee.selecting = false;
                        if (selectee.startselected) {
                            selectee.$element.addClass('ui-unselecting');
                            selectee.unselecting = true;
                        }
                        // selectable UNSELECTING callback
                        that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        });
                    }
                }
                if (selectee.selected) {
                    if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                        selectee.$element.removeClass('ui-selected');
                        selectee.selected = false;

                        selectee.$element.addClass('ui-unselecting');
                        selectee.unselecting = true;
                        // selectable UNSELECTING callback
                        that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        });
                    }
                }
            }
        });

        return false;
    },

    _mouseStop: function(event) {
        var that = this;

        this.dragged = false;

        var options = this.options;

        $('.ui-unselecting', this.element[0]).each(function() {
            var selectee = $.data(this, "selectable-item");
            selectee.$element.removeClass('ui-unselecting');
            selectee.unselecting = false;
            selectee.startselected = false;
            that._trigger("unselected", event, {
                unselected: selectee.element
            });
        });
        $('.ui-selecting', this.element[0]).each(function() {
            var selectee = $.data(this, "selectable-item");
            selectee.$element.removeClass('ui-selecting').addClass('ui-selected');
            selectee.selecting = false;
            selectee.selected = true;
            selectee.startselected = true;
            that._trigger("selected", event, {
                selected: selectee.element
            });
        });
        this._trigger("stop", event);

        this.helper.remove();

        return false;
    }

});

})(jQuery);
(function( $, undefined ) {

// number of pages in a slider
// (how many times can you page up/down to go through the whole range)
var numPages = 5;

$.widget( "ui.slider", $.ui.mouse, {
    version: "1.9.2",
    widgetEventPrefix: "slide",

    options: {
        animate: false,
        distance: 0,
        max: 100,
        min: 0,
        orientation: "horizontal",
        range: false,
        step: 1,
        value: 0,
        values: null
    },

    _create: function() {
        var i, handleCount,
            o = this.options,
            existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
            handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
            handles = [];

        this._keySliding = false;
        this._mouseSliding = false;
        this._animateOff = true;
        this._handleIndex = null;
        this._detectOrientation();
        this._mouseInit();

        this.element
            .addClass( "ui-slider" +
                " ui-slider-" + this.orientation +
                " ui-widget" +
                " ui-widget-content" +
                " ui-corner-all" +
                ( o.disabled ? " ui-slider-disabled ui-disabled" : "" ) );

        this.range = $([]);

        if ( o.range ) {
            if ( o.range === true ) {
                if ( !o.values ) {
                    o.values = [ this._valueMin(), this._valueMin() ];
                }
                if ( o.values.length && o.values.length !== 2 ) {
                    o.values = [ o.values[0], o.values[0] ];
                }
            }

            this.range = $( "<div></div>" )
                .appendTo( this.element )
                .addClass( "ui-slider-range" +
                // note: this isn't the most fittingly semantic framework class for this element,
                // but worked best visually with a variety of themes
                " ui-widget-header" +
                ( ( o.range === "min" || o.range === "max" ) ? " ui-slider-range-" + o.range : "" ) );
        }

        handleCount = ( o.values && o.values.length ) || 1;

        for ( i = existingHandles.length; i < handleCount; i++ ) {
            handles.push( handle );
        }

        this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

        this.handle = this.handles.eq( 0 );

        this.handles.add( this.range ).filter( "a" )
            .click(function( event ) {
                event.preventDefault();
            })
            .mouseenter(function() {
                if ( !o.disabled ) {
                    $( this ).addClass( "ui-state-hover" );
                }
            })
            .mouseleave(function() {
                $( this ).removeClass( "ui-state-hover" );
            })
            .focus(function() {
                if ( !o.disabled ) {
                    $( ".ui-slider .ui-state-focus" ).removeClass( "ui-state-focus" );
                    $( this ).addClass( "ui-state-focus" );
                } else {
                    $( this ).blur();
                }
            })
            .blur(function() {
                $( this ).removeClass( "ui-state-focus" );
            });

        this.handles.each(function( i ) {
            $( this ).data( "ui-slider-handle-index", i );
        });

        this._on( this.handles, {
            keydown: function( event ) {
                var allowed, curVal, newVal, step,
                    index = $( event.target ).data( "ui-slider-handle-index" );

                switch ( event.keyCode ) {
                    case $.ui.keyCode.HOME:
                    case $.ui.keyCode.END:
                    case $.ui.keyCode.PAGE_UP:
                    case $.ui.keyCode.PAGE_DOWN:
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        event.preventDefault();
                        if ( !this._keySliding ) {
                            this._keySliding = true;
                            $( event.target ).addClass( "ui-state-active" );
                            allowed = this._start( event, index );
                            if ( allowed === false ) {
                                return;
                            }
                        }
                        break;
                }

                step = this.options.step;
                if ( this.options.values && this.options.values.length ) {
                    curVal = newVal = this.values( index );
                } else {
                    curVal = newVal = this.value();
                }

                switch ( event.keyCode ) {
                    case $.ui.keyCode.HOME:
                        newVal = this._valueMin();
                        break;
                    case $.ui.keyCode.END:
                        newVal = this._valueMax();
                        break;
                    case $.ui.keyCode.PAGE_UP:
                        newVal = this._trimAlignValue( curVal + ( (this._valueMax() - this._valueMin()) / numPages ) );
                        break;
                    case $.ui.keyCode.PAGE_DOWN:
                        newVal = this._trimAlignValue( curVal - ( (this._valueMax() - this._valueMin()) / numPages ) );
                        break;
                    case $.ui.keyCode.UP:
                    case $.ui.keyCode.RIGHT:
                        if ( curVal === this._valueMax() ) {
                            return;
                        }
                        newVal = this._trimAlignValue( curVal + step );
                        break;
                    case $.ui.keyCode.DOWN:
                    case $.ui.keyCode.LEFT:
                        if ( curVal === this._valueMin() ) {
                            return;
                        }
                        newVal = this._trimAlignValue( curVal - step );
                        break;
                }

                this._slide( event, index, newVal );
            },
            keyup: function( event ) {
                var index = $( event.target ).data( "ui-slider-handle-index" );

                if ( this._keySliding ) {
                    this._keySliding = false;
                    this._stop( event, index );
                    this._change( event, index );
                    $( event.target ).removeClass( "ui-state-active" );
                }
            }
        });

        this._refreshValue();

        this._animateOff = false;
    },

    _destroy: function() {
        this.handles.remove();
        this.range.remove();

        this.element
            .removeClass( "ui-slider" +
                " ui-slider-horizontal" +
                " ui-slider-vertical" +
                " ui-slider-disabled" +
                " ui-widget" +
                " ui-widget-content" +
                " ui-corner-all" );

        this._mouseDestroy();
    },

    _mouseCapture: function( event ) {
        var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
            that = this,
            o = this.options;

        if ( o.disabled ) {
            return false;
        }

        this.elementSize = {
            width: this.element.outerWidth(),
            height: this.element.outerHeight()
        };
        this.elementOffset = this.element.offset();

        position = { x: event.pageX, y: event.pageY };
        normValue = this._normValueFromMouse( position );
        distance = this._valueMax() - this._valueMin() + 1;
        this.handles.each(function( i ) {
            var thisDistance = Math.abs( normValue - that.values(i) );
            if ( distance > thisDistance ) {
                distance = thisDistance;
                closestHandle = $( this );
                index = i;
            }
        });

        // workaround for bug #3736 (if both handles of a range are at 0,
        // the first is always used as the one with least distance,
        // and moving it is obviously prevented by preventing negative ranges)
        if( o.range === true && this.values(1) === o.min ) {
            index += 1;
            closestHandle = $( this.handles[index] );
        }

        allowed = this._start( event, index );
        if ( allowed === false ) {
            return false;
        }
        this._mouseSliding = true;

        this._handleIndex = index;

        closestHandle
            .addClass( "ui-state-active" )
            .focus();

        offset = closestHandle.offset();
        mouseOverHandle = !$( event.target ).parents().andSelf().is( ".ui-slider-handle" );
        this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
            left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
            top: event.pageY - offset.top -
                ( closestHandle.height() / 2 ) -
                ( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
                ( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
                ( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
        };

        if ( !this.handles.hasClass( "ui-state-hover" ) ) {
            this._slide( event, index, normValue );
        }
        this._animateOff = true;
        return true;
    },

    _mouseStart: function() {
        return true;
    },

    _mouseDrag: function( event ) {
        var position = { x: event.pageX, y: event.pageY },
            normValue = this._normValueFromMouse( position );

        this._slide( event, this._handleIndex, normValue );

        return false;
    },

    _mouseStop: function( event ) {
        this.handles.removeClass( "ui-state-active" );
        this._mouseSliding = false;

        this._stop( event, this._handleIndex );
        this._change( event, this._handleIndex );

        this._handleIndex = null;
        this._clickOffset = null;
        this._animateOff = false;

        return false;
    },

    _detectOrientation: function() {
        this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
    },

    _normValueFromMouse: function( position ) {
        var pixelTotal,
            pixelMouse,
            percentMouse,
            valueTotal,
            valueMouse;

        if ( this.orientation === "horizontal" ) {
            pixelTotal = this.elementSize.width;
            pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
        } else {
            pixelTotal = this.elementSize.height;
            pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
        }

        percentMouse = ( pixelMouse / pixelTotal );
        if ( percentMouse > 1 ) {
            percentMouse = 1;
        }
        if ( percentMouse < 0 ) {
            percentMouse = 0;
        }
        if ( this.orientation === "vertical" ) {
            percentMouse = 1 - percentMouse;
        }

        valueTotal = this._valueMax() - this._valueMin();
        valueMouse = this._valueMin() + percentMouse * valueTotal;

        return this._trimAlignValue( valueMouse );
    },

    _start: function( event, index ) {
        var uiHash = {
            handle: this.handles[ index ],
            value: this.value()
        };
        if ( this.options.values && this.options.values.length ) {
            uiHash.value = this.values( index );
            uiHash.values = this.values();
        }
        return this._trigger( "start", event, uiHash );
    },

    _slide: function( event, index, newVal ) {
        var otherVal,
            newValues,
            allowed;

        if ( this.options.values && this.options.values.length ) {
            otherVal = this.values( index ? 0 : 1 );

            if ( ( this.options.values.length === 2 && this.options.range === true ) &&
                    ( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
                ) {
                newVal = otherVal;
            }

            if ( newVal !== this.values( index ) ) {
                newValues = this.values();
                newValues[ index ] = newVal;
                // A slide can be canceled by returning false from the slide callback
                allowed = this._trigger( "slide", event, {
                    handle: this.handles[ index ],
                    value: newVal,
                    values: newValues
                } );
                otherVal = this.values( index ? 0 : 1 );
                if ( allowed !== false ) {
                    this.values( index, newVal, true );
                }
            }
        } else {
            if ( newVal !== this.value() ) {
                // A slide can be canceled by returning false from the slide callback
                allowed = this._trigger( "slide", event, {
                    handle: this.handles[ index ],
                    value: newVal
                } );
                if ( allowed !== false ) {
                    this.value( newVal );
                }
            }
        }
    },

    _stop: function( event, index ) {
        var uiHash = {
            handle: this.handles[ index ],
            value: this.value()
        };
        if ( this.options.values && this.options.values.length ) {
            uiHash.value = this.values( index );
            uiHash.values = this.values();
        }

        this._trigger( "stop", event, uiHash );
    },

    _change: function( event, index ) {
        if ( !this._keySliding && !this._mouseSliding ) {
            var uiHash = {
                handle: this.handles[ index ],
                value: this.value()
            };
            if ( this.options.values && this.options.values.length ) {
                uiHash.value = this.values( index );
                uiHash.values = this.values();
            }

            this._trigger( "change", event, uiHash );
        }
    },

    value: function( newValue ) {
        if ( arguments.length ) {
            this.options.value = this._trimAlignValue( newValue );
            this._refreshValue();
            this._change( null, 0 );
            return;
        }

        return this._value();
    },

    values: function( index, newValue ) {
        var vals,
            newValues,
            i;

        if ( arguments.length > 1 ) {
            this.options.values[ index ] = this._trimAlignValue( newValue );
            this._refreshValue();
            this._change( null, index );
            return;
        }

        if ( arguments.length ) {
            if ( $.isArray( arguments[ 0 ] ) ) {
                vals = this.options.values;
                newValues = arguments[ 0 ];
                for ( i = 0; i < vals.length; i += 1 ) {
                    vals[ i ] = this._trimAlignValue( newValues[ i ] );
                    this._change( null, i );
                }
                this._refreshValue();
            } else {
                if ( this.options.values && this.options.values.length ) {
                    return this._values( index );
                } else {
                    return this.value();
                }
            }
        } else {
            return this._values();
        }
    },

    _setOption: function( key, value ) {
        var i,
            valsLength = 0;

        if ( $.isArray( this.options.values ) ) {
            valsLength = this.options.values.length;
        }

        $.Widget.prototype._setOption.apply( this, arguments );

        switch ( key ) {
            case "disabled":
                if ( value ) {
                    this.handles.filter( ".ui-state-focus" ).blur();
                    this.handles.removeClass( "ui-state-hover" );
                    this.handles.prop( "disabled", true );
                    this.element.addClass( "ui-disabled" );
                } else {
                    this.handles.prop( "disabled", false );
                    this.element.removeClass( "ui-disabled" );
                }
                break;
            case "orientation":
                this._detectOrientation();
                this.element
                    .removeClass( "ui-slider-horizontal ui-slider-vertical" )
                    .addClass( "ui-slider-" + this.orientation );
                this._refreshValue();
                break;
            case "value":
                this._animateOff = true;
                this._refreshValue();
                this._change( null, 0 );
                this._animateOff = false;
                break;
            case "values":
                this._animateOff = true;
                this._refreshValue();
                for ( i = 0; i < valsLength; i += 1 ) {
                    this._change( null, i );
                }
                this._animateOff = false;
                break;
            case "min":
            case "max":
                this._animateOff = true;
                this._refreshValue();
                this._animateOff = false;
                break;
        }
    },

    //internal value getter
    // _value() returns value trimmed by min and max, aligned by step
    _value: function() {
        var val = this.options.value;
        val = this._trimAlignValue( val );

        return val;
    },

    //internal values getter
    // _values() returns array of values trimmed by min and max, aligned by step
    // _values( index ) returns single value trimmed by min and max, aligned by step
    _values: function( index ) {
        var val,
            vals,
            i;

        if ( arguments.length ) {
            val = this.options.values[ index ];
            val = this._trimAlignValue( val );

            return val;
        } else {
            // .slice() creates a copy of the array
            // this copy gets trimmed by min and max and then returned
            vals = this.options.values.slice();
            for ( i = 0; i < vals.length; i+= 1) {
                vals[ i ] = this._trimAlignValue( vals[ i ] );
            }

            return vals;
        }
    },

    // returns the step-aligned value that val is closest to, between (inclusive) min and max
    _trimAlignValue: function( val ) {
        if ( val <= this._valueMin() ) {
            return this._valueMin();
        }
        if ( val >= this._valueMax() ) {
            return this._valueMax();
        }
        var step = ( this.options.step > 0 ) ? this.options.step : 1,
            valModStep = (val - this._valueMin()) % step,
            alignValue = val - valModStep;

        if ( Math.abs(valModStep) * 2 >= step ) {
            alignValue += ( valModStep > 0 ) ? step : ( -step );
        }

        // Since JavaScript has problems with large floats, round
        // the final value to 5 digits after the decimal point (see #4124)
        return parseFloat( alignValue.toFixed(5) );
    },

    _valueMin: function() {
        return this.options.min;
    },

    _valueMax: function() {
        return this.options.max;
    },

    _refreshValue: function() {
        var lastValPercent, valPercent, value, valueMin, valueMax,
            oRange = this.options.range,
            o = this.options,
            that = this,
            animate = ( !this._animateOff ) ? o.animate : false,
            _set = {};

        if ( this.options.values && this.options.values.length ) {
            this.handles.each(function( i ) {
                valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
                _set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
                $( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
                if ( that.options.range === true ) {
                    if ( that.orientation === "horizontal" ) {
                        if ( i === 0 ) {
                            that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
                        }
                        if ( i === 1 ) {
                            that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
                        }
                    } else {
                        if ( i === 0 ) {
                            that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
                        }
                        if ( i === 1 ) {
                            that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
                        }
                    }
                }
                lastValPercent = valPercent;
            });
        } else {
            value = this.value();
            valueMin = this._valueMin();
            valueMax = this._valueMax();
            valPercent = ( valueMax !== valueMin ) ?
                    ( value - valueMin ) / ( valueMax - valueMin ) * 100 :
                    0;
            _set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
            this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

            if ( oRange === "min" && this.orientation === "horizontal" ) {
                this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
            }
            if ( oRange === "max" && this.orientation === "horizontal" ) {
                this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
            }
            if ( oRange === "min" && this.orientation === "vertical" ) {
                this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
            }
            if ( oRange === "max" && this.orientation === "vertical" ) {
                this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
            }
        }
    }

});

}(jQuery));
(function( $, undefined ) {

$.widget("ui.sortable", $.ui.mouse, {
    version: "1.9.2",
    widgetEventPrefix: "sort",
    ready: false,
    options: {
        appendTo: "parent",
        axis: false,
        connectWith: false,
        containment: false,
        cursor: 'auto',
        cursorAt: false,
        dropOnEmpty: true,
        forcePlaceholderSize: false,
        forceHelperSize: false,
        grid: false,
        handle: false,
        helper: "original",
        items: '> *',
        opacity: false,
        placeholder: false,
        revert: false,
        scroll: true,
        scrollSensitivity: 20,
        scrollSpeed: 20,
        scope: "default",
        tolerance: "intersect",
        zIndex: 1000
    },
    _create: function() {

        var o = this.options;
        this.containerCache = {};
        this.element.addClass("ui-sortable");

        //Get the items
        this.refresh();

        //Let's determine if the items are being displayed horizontally
        this.floating = this.items.length ? o.axis === 'x' || (/left|right/).test(this.items[0].item.css('float')) || (/inline|table-cell/).test(this.items[0].item.css('display')) : false;

        //Let's determine the parent's offset
        this.offset = this.element.offset();

        //Initialize mouse events for interaction
        this._mouseInit();

        //We're ready to go
        this.ready = true

    },

    _destroy: function() {
        this.element
            .removeClass("ui-sortable ui-sortable-disabled");
        this._mouseDestroy();

        for ( var i = this.items.length - 1; i >= 0; i-- )
            this.items[i].item.removeData(this.widgetName + "-item");

        return this;
    },

    _setOption: function(key, value){
        if ( key === "disabled" ) {
            this.options[ key ] = value;

            this.widget().toggleClass( "ui-sortable-disabled", !!value );
        } else {
            // Don't call widget base _setOption for disable as it adds ui-state-disabled class
            $.Widget.prototype._setOption.apply(this, arguments);
        }
    },

    _mouseCapture: function(event, overrideHandle) {
        var that = this;

        if (this.reverting) {
            return false;
        }

        if(this.options.disabled || this.options.type == 'static') return false;

        //We have to refresh the items data once first
        this._refreshItems(event);

        //Find out if the clicked node (or one of its parents) is a actual item in this.items
        var currentItem = null, nodes = $(event.target).parents().each(function() {
            if($.data(this, that.widgetName + '-item') == that) {
                currentItem = $(this);
                return false;
            }
        });
        if($.data(event.target, that.widgetName + '-item') == that) currentItem = $(event.target);

        if(!currentItem) return false;
        if(this.options.handle && !overrideHandle) {
            var validHandle = false;

            $(this.options.handle, currentItem).find("*").andSelf().each(function() { if(this == event.target) validHandle = true; });
            if(!validHandle) return false;
        }

        this.currentItem = currentItem;
        this._removeCurrentsFromItems();
        return true;

    },

    _mouseStart: function(event, overrideHandle, noActivation) {

        var o = this.options;
        this.currentContainer = this;

        //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
        this.refreshPositions();

        //Create and append the visible helper
        this.helper = this._createHelper(event);

        //Cache the helper size
        this._cacheHelperProportions();

        /*
         * - Position generation -
         * This block generates everything position related - it's the core of draggables.
         */

        //Cache the margins of the original element
        this._cacheMargins();

        //Get the next scrolling parent
        this.scrollParent = this.helper.scrollParent();

        //The element's absolute position on the page minus margins
        this.offset = this.currentItem.offset();
        this.offset = {
            top: this.offset.top - this.margins.top,
            left: this.offset.left - this.margins.left
        };

        $.extend(this.offset, {
            click: { //Where the click happened, relative to the element
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            },
            parent: this._getParentOffset(),
            relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
        });

        // Only after we got the offset, we can change the helper's position to absolute
        // TODO: Still need to figure out a way to make relative sorting possible
        this.helper.css("position", "absolute");
        this.cssPosition = this.helper.css("position");

        //Generate the original position
        this.originalPosition = this._generatePosition(event);
        this.originalPageX = event.pageX;
        this.originalPageY = event.pageY;

        //Adjust the mouse offset relative to the helper if 'cursorAt' is supplied
        (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

        //Cache the former DOM position
        this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

        //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
        if(this.helper[0] != this.currentItem[0]) {
            this.currentItem.hide();
        }

        //Create the placeholder
        this._createPlaceholder();

        //Set a containment if given in the options
        if(o.containment)
            this._setContainment();

        if(o.cursor) { // cursor option
            if ($('body').css("cursor")) this._storedCursor = $('body').css("cursor");
            $('body').css("cursor", o.cursor);
        }

        if(o.opacity) { // opacity option
            if (this.helper.css("opacity")) this._storedOpacity = this.helper.css("opacity");
            this.helper.css("opacity", o.opacity);
        }

        if(o.zIndex) { // zIndex option
            if (this.helper.css("zIndex")) this._storedZIndex = this.helper.css("zIndex");
            this.helper.css("zIndex", o.zIndex);
        }

        //Prepare scrolling
        if(this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML')
            this.overflowOffset = this.scrollParent.offset();

        //Call callbacks
        this._trigger("start", event, this._uiHash());

        //Recache the helper size
        if(!this._preserveHelperProportions)
            this._cacheHelperProportions();


        //Post 'activate' events to possible containers
        if(!noActivation) {
             for (var i = this.containers.length - 1; i >= 0; i--) { this.containers[i]._trigger("activate", event, this._uiHash(this)); }
        }

        //Prepare possible droppables
        if($.ui.ddmanager)
            $.ui.ddmanager.current = this;

        if ($.ui.ddmanager && !o.dropBehaviour)
            $.ui.ddmanager.prepareOffsets(this, event);

        this.dragging = true;

        this.helper.addClass("ui-sortable-helper");
        this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
        return true;

    },

    _mouseDrag: function(event) {

        //Compute the helpers position
        this.position = this._generatePosition(event);
        this.positionAbs = this._convertPositionTo("absolute");

        if (!this.lastPositionAbs) {
            this.lastPositionAbs = this.positionAbs;
        }

        //Do scrolling
        if(this.options.scroll) {
            var o = this.options, scrolled = false;
            if(this.scrollParent[0] != document && this.scrollParent[0].tagName != 'HTML') {

                if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                    this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity)
                    this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;

                if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                    this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity)
                    this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;

            } else {

                if(event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                    scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                    scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);

                if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                    scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                    scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);

            }

            if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(this, event);
        }

        //Regenerate the absolute position used for position checks
        this.positionAbs = this._convertPositionTo("absolute");

        //Set the helper position
        if(!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left+'px';
        if(!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top+'px';

        //Rearrange
        for (var i = this.items.length - 1; i >= 0; i--) {

            //Cache variables and intersection, continue if no intersection
            var item = this.items[i], itemElement = item.item[0], intersection = this._intersectsWithPointer(item);
            if (!intersection) continue;

            // Only put the placeholder inside the current Container, skip all
            // items form other containers. This works because when moving
            // an item from one container to another the
            // currentContainer is switched before the placeholder is moved.
            //
            // Without this moving items in "sub-sortables" can cause the placeholder to jitter
            // beetween the outer and inner container.
            if (item.instance !== this.currentContainer) continue;

            if (itemElement != this.currentItem[0] //cannot intersect with itself
                &&  this.placeholder[intersection == 1 ? "next" : "prev"]()[0] != itemElement //no useless actions that have been done before
                &&  !$.contains(this.placeholder[0], itemElement) //no action if the item moved is the parent of the item checked
                && (this.options.type == 'semi-dynamic' ? !$.contains(this.element[0], itemElement) : true)
                //&& itemElement.parentNode == this.placeholder[0].parentNode // only rearrange items within the same container
            ) {

                this.direction = intersection == 1 ? "down" : "up";

                if (this.options.tolerance == "pointer" || this._intersectsWithSides(item)) {
                    this._rearrange(event, item);
                } else {
                    break;
                }

                this._trigger("change", event, this._uiHash());
                break;
            }
        }

        //Post events to containers
        this._contactContainers(event);

        //Interconnect with droppables
        if($.ui.ddmanager) $.ui.ddmanager.drag(this, event);

        //Call callbacks
        this._trigger('sort', event, this._uiHash());

        this.lastPositionAbs = this.positionAbs;
        return false;

    },

    _mouseStop: function(event, noPropagation) {

        if(!event) return;

        //If we are using droppables, inform the manager about the drop
        if ($.ui.ddmanager && !this.options.dropBehaviour)
            $.ui.ddmanager.drop(this, event);

        if(this.options.revert) {
            var that = this;
            var cur = this.placeholder.offset();

            this.reverting = true;

            $(this.helper).animate({
                left: cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollLeft),
                top: cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] == document.body ? 0 : this.offsetParent[0].scrollTop)
            }, parseInt(this.options.revert, 10) || 500, function() {
                that._clear(event);
            });
        } else {
            this._clear(event, noPropagation);
        }

        return false;

    },

    cancel: function() {

        if(this.dragging) {

            this._mouseUp({ target: null });

            if(this.options.helper == "original")
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
            else
                this.currentItem.show();

            //Post deactivating events to containers
            for (var i = this.containers.length - 1; i >= 0; i--){
                this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                if(this.containers[i].containerCache.over) {
                    this.containers[i]._trigger("out", null, this._uiHash(this));
                    this.containers[i].containerCache.over = 0;
                }
            }

        }

        if (this.placeholder) {
            //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
            if(this.placeholder[0].parentNode) this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if(this.options.helper != "original" && this.helper && this.helper[0].parentNode) this.helper.remove();

            $.extend(this, {
                helper: null,
                dragging: false,
                reverting: false,
                _noFinalSort: null
            });

            if(this.domPosition.prev) {
                $(this.domPosition.prev).after(this.currentItem);
            } else {
                $(this.domPosition.parent).prepend(this.currentItem);
            }
        }

        return this;

    },

    serialize: function(o) {

        var items = this._getItemsAsjQuery(o && o.connected);
        var str = []; o = o || {};

        $(items).each(function() {
            var res = ($(o.item || this).attr(o.attribute || 'id') || '').match(o.expression || (/(.+)[-=_](.+)/));
            if(res) str.push((o.key || res[1]+'[]')+'='+(o.key && o.expression ? res[1] : res[2]));
        });

        if(!str.length && o.key) {
            str.push(o.key + '=');
        }

        return str.join('&');

    },

    toArray: function(o) {

        var items = this._getItemsAsjQuery(o && o.connected);
        var ret = []; o = o || {};

        items.each(function() { ret.push($(o.item || this).attr(o.attribute || 'id') || ''); });
        return ret;

    },

    /* Be careful with the following core functions */
    _intersectsWith: function(item) {

        var x1 = this.positionAbs.left,
            x2 = x1 + this.helperProportions.width,
            y1 = this.positionAbs.top,
            y2 = y1 + this.helperProportions.height;

        var l = item.left,
            r = l + item.width,
            t = item.top,
            b = t + item.height;

        var dyClick = this.offset.click.top,
            dxClick = this.offset.click.left;

        var isOverElement = (y1 + dyClick) > t && (y1 + dyClick) < b && (x1 + dxClick) > l && (x1 + dxClick) < r;

        if(    this.options.tolerance == "pointer"
            || this.options.forcePointerForContainers
            || (this.options.tolerance != "pointer" && this.helperProportions[this.floating ? 'width' : 'height'] > item[this.floating ? 'width' : 'height'])
        ) {
            return isOverElement;
        } else {

            return (l < x1 + (this.helperProportions.width / 2) // Right Half
                && x2 - (this.helperProportions.width / 2) < r // Left Half
                && t < y1 + (this.helperProportions.height / 2) // Bottom Half
                && y2 - (this.helperProportions.height / 2) < b ); // Top Half

        }
    },

    _intersectsWithPointer: function(item) {

        var isOverElementHeight = (this.options.axis === 'x') || $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
            isOverElementWidth = (this.options.axis === 'y') || $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
            isOverElement = isOverElementHeight && isOverElementWidth,
            verticalDirection = this._getDragVerticalDirection(),
            horizontalDirection = this._getDragHorizontalDirection();

        if (!isOverElement)
            return false;

        return this.floating ?
            ( ((horizontalDirection && horizontalDirection == "right") || verticalDirection == "down") ? 2 : 1 )
            : ( verticalDirection && (verticalDirection == "down" ? 2 : 1) );

    },

    _intersectsWithSides: function(item) {

        var isOverBottomHalf = $.ui.isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
            isOverRightHalf = $.ui.isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
            verticalDirection = this._getDragVerticalDirection(),
            horizontalDirection = this._getDragHorizontalDirection();

        if (this.floating && horizontalDirection) {
            return ((horizontalDirection == "right" && isOverRightHalf) || (horizontalDirection == "left" && !isOverRightHalf));
        } else {
            return verticalDirection && ((verticalDirection == "down" && isOverBottomHalf) || (verticalDirection == "up" && !isOverBottomHalf));
        }

    },

    _getDragVerticalDirection: function() {
        var delta = this.positionAbs.top - this.lastPositionAbs.top;
        return delta != 0 && (delta > 0 ? "down" : "up");
    },

    _getDragHorizontalDirection: function() {
        var delta = this.positionAbs.left - this.lastPositionAbs.left;
        return delta != 0 && (delta > 0 ? "right" : "left");
    },

    refresh: function(event) {
        this._refreshItems(event);
        this.refreshPositions();
        return this;
    },

    _connectWith: function() {
        var options = this.options;
        return options.connectWith.constructor == String
            ? [options.connectWith]
            : options.connectWith;
    },

    _getItemsAsjQuery: function(connected) {

        var items = [];
        var queries = [];
        var connectWith = this._connectWith();

        if(connectWith && connected) {
            for (var i = connectWith.length - 1; i >= 0; i--){
                var cur = $(connectWith[i]);
                for (var j = cur.length - 1; j >= 0; j--){
                    var inst = $.data(cur[j], this.widgetName);
                    if(inst && inst != this && !inst.options.disabled) {
                        queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), inst]);
                    }
                };
            };
        }

        queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'), this]);

        for (var i = queries.length - 1; i >= 0; i--){
            queries[i][0].each(function() {
                items.push(this);
            });
        };

        return $(items);

    },

    _removeCurrentsFromItems: function() {

        var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

        this.items = $.grep(this.items, function (item) {
            for (var j=0; j < list.length; j++) {
                if(list[j] == item.item[0])
                    return false;
            };
            return true;
        });

    },

    _refreshItems: function(event) {

        this.items = [];
        this.containers = [this];
        var items = this.items;
        var queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]];
        var connectWith = this._connectWith();

        if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
            for (var i = connectWith.length - 1; i >= 0; i--){
                var cur = $(connectWith[i]);
                for (var j = cur.length - 1; j >= 0; j--){
                    var inst = $.data(cur[j], this.widgetName);
                    if(inst && inst != this && !inst.options.disabled) {
                        queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
                        this.containers.push(inst);
                    }
                };
            };
        }

        for (var i = queries.length - 1; i >= 0; i--) {
            var targetData = queries[i][1];
            var _queries = queries[i][0];

            for (var j=0, queriesLength = _queries.length; j < queriesLength; j++) {
                var item = $(_queries[j]);

                item.data(this.widgetName + '-item', targetData); // Data for target checking (mouse manager)

                items.push({
                    item: item,
                    instance: targetData,
                    width: 0, height: 0,
                    left: 0, top: 0
                });
            };
        };

    },

    refreshPositions: function(fast) {

        //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
        if(this.offsetParent && this.helper) {
            this.offset.parent = this._getParentOffset();
        }

        for (var i = this.items.length - 1; i >= 0; i--){
            var item = this.items[i];

            //We ignore calculating positions of all connected containers when we're not over them
            if(item.instance != this.currentContainer && this.currentContainer && item.item[0] != this.currentItem[0])
                continue;

            var t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

            if (!fast) {
                item.width = t.outerWidth();
                item.height = t.outerHeight();
            }

            var p = t.offset();
            item.left = p.left;
            item.top = p.top;
        };

        if(this.options.custom && this.options.custom.refreshContainers) {
            this.options.custom.refreshContainers.call(this);
        } else {
            for (var i = this.containers.length - 1; i >= 0; i--){
                var p = this.containers[i].element.offset();
                this.containers[i].containerCache.left = p.left;
                this.containers[i].containerCache.top = p.top;
                this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
            };
        }

        return this;
    },

    _createPlaceholder: function(that) {
        that = that || this;
        var o = that.options;

        if(!o.placeholder || o.placeholder.constructor == String) {
            var className = o.placeholder;
            o.placeholder = {
                element: function() {

                    var el = $(document.createElement(that.currentItem[0].nodeName))
                        .addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
                        .removeClass("ui-sortable-helper")[0];

                    if(!className)
                        el.style.visibility = "hidden";

                    return el;
                },
                update: function(container, p) {

                    // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
                    // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
                    if(className && !o.forcePlaceholderSize) return;

                    //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
                    if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css('paddingTop')||0, 10) - parseInt(that.currentItem.css('paddingBottom')||0, 10)); };
                    if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css('paddingLeft')||0, 10) - parseInt(that.currentItem.css('paddingRight')||0, 10)); };
                }
            };
        }

        //Create the placeholder
        that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

        //Append it after the actual current item
        that.currentItem.after(that.placeholder);

        //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
        o.placeholder.update(that, that.placeholder);

    },

    _contactContainers: function(event) {

        // get innermost container that intersects with item
        var innermostContainer = null, innermostIndex = null;


        for (var i = this.containers.length - 1; i >= 0; i--){

            // never consider a container that's located within the item itself
            if($.contains(this.currentItem[0], this.containers[i].element[0]))
                continue;

            if(this._intersectsWith(this.containers[i].containerCache)) {

                // if we've already found a container and it's more "inner" than this, then continue
                if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0]))
                    continue;

                innermostContainer = this.containers[i];
                innermostIndex = i;

            } else {
                // container doesn't intersect. trigger "out" event if necessary
                if(this.containers[i].containerCache.over) {
                    this.containers[i]._trigger("out", event, this._uiHash(this));
                    this.containers[i].containerCache.over = 0;
                }
            }

        }

        // if no intersecting containers found, return
        if(!innermostContainer) return;

        // move the item into the container if it's not there already
        if(this.containers.length === 1) {
            this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
            this.containers[innermostIndex].containerCache.over = 1;
        } else {

            //When entering a new container, we will find the item with the least distance and append our item near it
            var dist = 10000; var itemWithLeastDistance = null;
            var posProperty = this.containers[innermostIndex].floating ? 'left' : 'top';
            var sizeProperty = this.containers[innermostIndex].floating ? 'width' : 'height';
            var base = this.positionAbs[posProperty] + this.offset.click[posProperty];
            for (var j = this.items.length - 1; j >= 0; j--) {
                if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) continue;
                if(this.items[j].item[0] == this.currentItem[0]) continue;
                var cur = this.items[j].item.offset()[posProperty];
                var nearBottom = false;
                if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){
                    nearBottom = true;
                    cur += this.items[j][sizeProperty];
                }

                if(Math.abs(cur - base) < dist) {
                    dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
                    this.direction = nearBottom ? "up": "down";
                }
            }

            if(!itemWithLeastDistance && !this.options.dropOnEmpty) //Check if dropOnEmpty is enabled
                return;

            this.currentContainer = this.containers[innermostIndex];
            itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
            this._trigger("change", event, this._uiHash());
            this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));

            //Update the placeholder
            this.options.placeholder.update(this.currentContainer, this.placeholder);

            this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
            this.containers[innermostIndex].containerCache.over = 1;
        }


    },

    _createHelper: function(event) {

        var o = this.options;
        var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper == 'clone' ? this.currentItem.clone() : this.currentItem);

        if(!helper.parents('body').length) //Add the helper to the DOM if that didn't happen already
            $(o.appendTo != 'parent' ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);

        if(helper[0] == this.currentItem[0])
            this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };

        if(helper[0].style.width == '' || o.forceHelperSize) helper.width(this.currentItem.width());
        if(helper[0].style.height == '' || o.forceHelperSize) helper.height(this.currentItem.height());

        return helper;

    },

    _adjustOffsetFromHelper: function(obj) {
        if (typeof obj == 'string') {
            obj = obj.split(' ');
        }
        if ($.isArray(obj)) {
            obj = {left: +obj[0], top: +obj[1] || 0};
        }
        if ('left' in obj) {
            this.offset.click.left = obj.left + this.margins.left;
        }
        if ('right' in obj) {
            this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
        }
        if ('top' in obj) {
            this.offset.click.top = obj.top + this.margins.top;
        }
        if ('bottom' in obj) {
            this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        }
    },

    _getParentOffset: function() {


        //Get the offsetParent and cache its position
        this.offsetParent = this.helper.offsetParent();
        var po = this.offsetParent.offset();

        // This is a special case where we need to modify a offset calculated on start, since the following happened:
        // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
        // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
        //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
        if(this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
            po.left += this.scrollParent.scrollLeft();
            po.top += this.scrollParent.scrollTop();
        }

        if((this.offsetParent[0] == document.body) //This needs to be actually done for all browsers, since pageX/pageY includes this information
        || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.ui.ie)) //Ugly IE fix
            po = { top: 0, left: 0 };

        return {
            top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
            left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
        };

    },

    _getRelativeOffset: function() {

        if(this.cssPosition == "relative") {
            var p = this.currentItem.position();
            return {
                top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
                left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
            };
        } else {
            return { top: 0, left: 0 };
        }

    },

    _cacheMargins: function() {
        this.margins = {
            left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
            top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
        };
    },

    _cacheHelperProportions: function() {
        this.helperProportions = {
            width: this.helper.outerWidth(),
            height: this.helper.outerHeight()
        };
    },

    _setContainment: function() {

        var o = this.options;
        if(o.containment == 'parent') o.containment = this.helper[0].parentNode;
        if(o.containment == 'document' || o.containment == 'window') this.containment = [
            0 - this.offset.relative.left - this.offset.parent.left,
            0 - this.offset.relative.top - this.offset.parent.top,
            $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left,
            ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
        ];

        if(!(/^(document|window|parent)$/).test(o.containment)) {
            var ce = $(o.containment)[0];
            var co = $(o.containment).offset();
            var over = ($(ce).css("overflow") != 'hidden');

            this.containment = [
                co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
                co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
                co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
                co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
            ];
        }

    },

    _convertPositionTo: function(d, pos) {

        if(!pos) pos = this.position;
        var mod = d == "absolute" ? 1 : -1;
        var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

        return {
            top: (
                pos.top                                                                 // The absolute mouse position
                + this.offset.relative.top * mod                                        // Only for relative positioned nodes: Relative offset from element to offset parent
                + this.offset.parent.top * mod                                          // The offsetParent's offset without borders (offset + border)
                - ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
            ),
            left: (
                pos.left                                                                // The absolute mouse position
                + this.offset.relative.left * mod                                       // Only for relative positioned nodes: Relative offset from element to offset parent
                + this.offset.parent.left * mod                                         // The offsetParent's offset without borders (offset + border)
                - ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
            )
        };

    },

    _generatePosition: function(event) {

        var o = this.options, scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

        // This is another very weird special case that only happens for relative elements:
        // 1. If the css position is relative
        // 2. and the scroll parent is the document or similar to the offset parent
        // we have to refresh the relative offset during the scroll so there are no jumps
        if(this.cssPosition == 'relative' && !(this.scrollParent[0] != document && this.scrollParent[0] != this.offsetParent[0])) {
            this.offset.relative = this._getRelativeOffset();
        }

        var pageX = event.pageX;
        var pageY = event.pageY;

        /*
         * - Position constraining -
         * Constrain the position to a mix of grid, containment.
         */

        if(this.originalPosition) { //If we are not dragging yet, we won't check for options

            if(this.containment) {
                if(event.pageX - this.offset.click.left < this.containment[0]) pageX = this.containment[0] + this.offset.click.left;
                if(event.pageY - this.offset.click.top < this.containment[1]) pageY = this.containment[1] + this.offset.click.top;
                if(event.pageX - this.offset.click.left > this.containment[2]) pageX = this.containment[2] + this.offset.click.left;
                if(event.pageY - this.offset.click.top > this.containment[3]) pageY = this.containment[3] + this.offset.click.top;
            }

            if(o.grid) {
                var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                pageY = this.containment ? (!(top - this.offset.click.top < this.containment[1] || top - this.offset.click.top > this.containment[3]) ? top : (!(top - this.offset.click.top < this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

                var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                pageX = this.containment ? (!(left - this.offset.click.left < this.containment[0] || left - this.offset.click.left > this.containment[2]) ? left : (!(left - this.offset.click.left < this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
            }

        }

        return {
            top: (
                pageY                                                               // The absolute mouse position
                - this.offset.click.top                                                 // Click offset (relative to the element)
                - this.offset.relative.top                                              // Only for relative positioned nodes: Relative offset from element to offset parent
                - this.offset.parent.top                                                // The offsetParent's offset without borders (offset + border)
                + ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
            ),
            left: (
                pageX                                                               // The absolute mouse position
                - this.offset.click.left                                                // Click offset (relative to the element)
                - this.offset.relative.left                                             // Only for relative positioned nodes: Relative offset from element to offset parent
                - this.offset.parent.left                                               // The offsetParent's offset without borders (offset + border)
                + ( ( this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
            )
        };

    },

    _rearrange: function(event, i, a, hardRefresh) {

        a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction == 'down' ? i.item[0] : i.item[0].nextSibling));

        //Various things done here to improve the performance:
        // 1. we create a setTimeout, that calls refreshPositions
        // 2. on the instance, we have a counter variable, that get's higher after every append
        // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
        // 4. this lets only the last addition to the timeout stack through
        this.counter = this.counter ? ++this.counter : 1;
        var counter = this.counter;

        this._delay(function() {
            if(counter == this.counter) this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
        });

    },

    _clear: function(event, noPropagation) {

        this.reverting = false;
        // We delay all events that have to be triggered to after the point where the placeholder has been removed and
        // everything else normalized again
        var delayedTriggers = [];

        // We first have to update the dom position of the actual currentItem
        // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
        if(!this._noFinalSort && this.currentItem.parent().length) this.placeholder.before(this.currentItem);
        this._noFinalSort = null;

        if(this.helper[0] == this.currentItem[0]) {
            for(var i in this._storedCSS) {
                if(this._storedCSS[i] == 'auto' || this._storedCSS[i] == 'static') this._storedCSS[i] = '';
            }
            this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
        } else {
            this.currentItem.show();
        }

        if(this.fromOutside && !noPropagation) delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
        if((this.fromOutside || this.domPosition.prev != this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent != this.currentItem.parent()[0]) && !noPropagation) delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed

        // Check if the items Container has Changed and trigger appropriate
        // events.
        if (this !== this.currentContainer) {
            if(!noPropagation) {
                delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
                delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
                delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
            }
        }


        //Post events to containers
        for (var i = this.containers.length - 1; i >= 0; i--){
            if(!noPropagation) delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
            if(this.containers[i].containerCache.over) {
                delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
                this.containers[i].containerCache.over = 0;
            }
        }

        //Do what was originally in plugins
        if(this._storedCursor) $('body').css("cursor", this._storedCursor); //Reset cursor
        if(this._storedOpacity) this.helper.css("opacity", this._storedOpacity); //Reset opacity
        if(this._storedZIndex) this.helper.css("zIndex", this._storedZIndex == 'auto' ? '' : this._storedZIndex); //Reset z-index

        this.dragging = false;
        if(this.cancelHelperRemoval) {
            if(!noPropagation) {
                this._trigger("beforeStop", event, this._uiHash());
                for (var i=0; i < delayedTriggers.length; i++) { delayedTriggers[i].call(this, event); }; //Trigger all delayed events
                this._trigger("stop", event, this._uiHash());
            }

            this.fromOutside = false;
            return false;
        }

        if(!noPropagation) this._trigger("beforeStop", event, this._uiHash());

        //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
        this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

        if(this.helper[0] != this.currentItem[0]) this.helper.remove(); this.helper = null;

        if(!noPropagation) {
            for (var i=0; i < delayedTriggers.length; i++) { delayedTriggers[i].call(this, event); }; //Trigger all delayed events
            this._trigger("stop", event, this._uiHash());
        }

        this.fromOutside = false;
        return true;

    },

    _trigger: function() {
        if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
            this.cancel();
        }
    },

    _uiHash: function(_inst) {
        var inst = _inst || this;
        return {
            helper: inst.helper,
            placeholder: inst.placeholder || $([]),
            position: inst.position,
            originalPosition: inst.originalPosition,
            offset: inst.positionAbs,
            item: inst.currentItem,
            sender: _inst ? _inst.element : null
        };
    }

});

})(jQuery);
(function( $ ) {

function modifier( fn ) {
    return function() {
        var previous = this.element.val();
        fn.apply( this, arguments );
        this._refresh();
        if ( previous !== this.element.val() ) {
            this._trigger( "change" );
        }
    };
}

$.widget( "ui.spinner", {
    version: "1.9.2",
    defaultElement: "<input>",
    widgetEventPrefix: "spin",
    options: {
        culture: null,
        icons: {
            down: "ui-icon-triangle-1-s",
            up: "ui-icon-triangle-1-n"
        },
        incremental: true,
        max: null,
        min: null,
        numberFormat: null,
        page: 10,
        step: 1,

        change: null,
        spin: null,
        start: null,
        stop: null
    },

    _create: function() {
        // handle string values that need to be parsed
        this._setOption( "max", this.options.max );
        this._setOption( "min", this.options.min );
        this._setOption( "step", this.options.step );

        // format the value, but don't constrain
        this._value( this.element.val(), true );

        this._draw();
        this._on( this._events );
        this._refresh();

        // turning off autocomplete prevents the browser from remembering the
        // value when navigating through history, so we re-enable autocomplete
        // if the page is unloaded before the widget is destroyed. #7790
        this._on( this.window, {
            beforeunload: function() {
                this.element.removeAttr( "autocomplete" );
            }
        });
    },

    _getCreateOptions: function() {
        var options = {},
            element = this.element;

        $.each( [ "min", "max", "step" ], function( i, option ) {
            var value = element.attr( option );
            if ( value !== undefined && value.length ) {
                options[ option ] = value;
            }
        });

        return options;
    },

    _events: {
        keydown: function( event ) {
            if ( this._start( event ) && this._keydown( event ) ) {
                event.preventDefault();
            }
        },
        keyup: "_stop",
        focus: function() {
            this.previous = this.element.val();
        },
        blur: function( event ) {
            if ( this.cancelBlur ) {
                delete this.cancelBlur;
                return;
            }

            this._refresh();
            if ( this.previous !== this.element.val() ) {
                this._trigger( "change", event );
            }
        },
        mousewheel: function( event, delta ) {
            if ( !delta ) {
                return;
            }
            if ( !this.spinning && !this._start( event ) ) {
                return false;
            }

            this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
            clearTimeout( this.mousewheelTimer );
            this.mousewheelTimer = this._delay(function() {
                if ( this.spinning ) {
                    this._stop( event );
                }
            }, 100 );
            event.preventDefault();
        },
        "mousedown .ui-spinner-button": function( event ) {
            var previous;

            // We never want the buttons to have focus; whenever the user is
            // interacting with the spinner, the focus should be on the input.
            // If the input is focused then this.previous is properly set from
            // when the input first received focus. If the input is not focused
            // then we need to set this.previous based on the value before spinning.
            previous = this.element[0] === this.document[0].activeElement ?
                this.previous : this.element.val();
            function checkFocus() {
                var isActive = this.element[0] === this.document[0].activeElement;
                if ( !isActive ) {
                    this.element.focus();
                    this.previous = previous;
                    // support: IE
                    // IE sets focus asynchronously, so we need to check if focus
                    // moved off of the input because the user clicked on the button.
                    this._delay(function() {
                        this.previous = previous;
                    });
                }
            }

            // ensure focus is on (or stays on) the text field
            event.preventDefault();
            checkFocus.call( this );

            // support: IE
            // IE doesn't prevent moving focus even with event.preventDefault()
            // so we set a flag to know when we should ignore the blur event
            // and check (again) if focus moved off of the input.
            this.cancelBlur = true;
            this._delay(function() {
                delete this.cancelBlur;
                checkFocus.call( this );
            });

            if ( this._start( event ) === false ) {
                return;
            }

            this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
        },
        "mouseup .ui-spinner-button": "_stop",
        "mouseenter .ui-spinner-button": function( event ) {
            // button will add ui-state-active if mouse was down while mouseleave and kept down
            if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
                return;
            }

            if ( this._start( event ) === false ) {
                return false;
            }
            this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
        },
        // TODO: do we really want to consider this a stop?
        // shouldn't we just stop the repeater and wait until mouseup before
        // we trigger the stop event?
        "mouseleave .ui-spinner-button": "_stop"
    },

    _draw: function() {
        var uiSpinner = this.uiSpinner = this.element
            .addClass( "ui-spinner-input" )
            .attr( "autocomplete", "off" )
            .wrap( this._uiSpinnerHtml() )
            .parent()
                // add buttons
                .append( this._buttonHtml() );

        this.element.attr( "role", "spinbutton" );

        // button bindings
        this.buttons = uiSpinner.find( ".ui-spinner-button" )
            .attr( "tabIndex", -1 )
            .button()
            .removeClass( "ui-corner-all" );

        // IE 6 doesn't understand height: 50% for the buttons
        // unless the wrapper has an explicit height
        if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
                uiSpinner.height() > 0 ) {
            uiSpinner.height( uiSpinner.height() );
        }

        // disable spinner if element was already disabled
        if ( this.options.disabled ) {
            this.disable();
        }
    },

    _keydown: function( event ) {
        var options = this.options,
            keyCode = $.ui.keyCode;

        switch ( event.keyCode ) {
        case keyCode.UP:
            this._repeat( null, 1, event );
            return true;
        case keyCode.DOWN:
            this._repeat( null, -1, event );
            return true;
        case keyCode.PAGE_UP:
            this._repeat( null, options.page, event );
            return true;
        case keyCode.PAGE_DOWN:
            this._repeat( null, -options.page, event );
            return true;
        }

        return false;
    },

    _uiSpinnerHtml: function() {
        return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
    },

    _buttonHtml: function() {
        return "" +
            "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
                "<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
            "</a>" +
            "<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
                "<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
            "</a>";
    },

    _start: function( event ) {
        if ( !this.spinning && this._trigger( "start", event ) === false ) {
            return false;
        }

        if ( !this.counter ) {
            this.counter = 1;
        }
        this.spinning = true;
        return true;
    },

    _repeat: function( i, steps, event ) {
        i = i || 500;

        clearTimeout( this.timer );
        this.timer = this._delay(function() {
            this._repeat( 40, steps, event );
        }, i );

        this._spin( steps * this.options.step, event );
    },

    _spin: function( step, event ) {
        var value = this.value() || 0;

        if ( !this.counter ) {
            this.counter = 1;
        }

        value = this._adjustValue( value + step * this._increment( this.counter ) );

        if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
            this._value( value );
            this.counter++;
        }
    },

    _increment: function( i ) {
        var incremental = this.options.incremental;

        if ( incremental ) {
            return $.isFunction( incremental ) ?
                incremental( i ) :
                Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );
        }

        return 1;
    },

    _precision: function() {
        var precision = this._precisionOf( this.options.step );
        if ( this.options.min !== null ) {
            precision = Math.max( precision, this._precisionOf( this.options.min ) );
        }
        return precision;
    },

    _precisionOf: function( num ) {
        var str = num.toString(),
            decimal = str.indexOf( "." );
        return decimal === -1 ? 0 : str.length - decimal - 1;
    },

    _adjustValue: function( value ) {
        var base, aboveMin,
            options = this.options;

        // make sure we're at a valid step
        // - find out where we are relative to the base (min or 0)
        base = options.min !== null ? options.min : 0;
        aboveMin = value - base;
        // - round to the nearest step
        aboveMin = Math.round(aboveMin / options.step) * options.step;
        // - rounding is based on 0, so adjust back to our base
        value = base + aboveMin;

        // fix precision from bad JS floating point math
        value = parseFloat( value.toFixed( this._precision() ) );

        // clamp the value
        if ( options.max !== null && value > options.max) {
            return options.max;
        }
        if ( options.min !== null && value < options.min ) {
            return options.min;
        }

        return value;
    },

    _stop: function( event ) {
        if ( !this.spinning ) {
            return;
        }

        clearTimeout( this.timer );
        clearTimeout( this.mousewheelTimer );
        this.counter = 0;
        this.spinning = false;
        this._trigger( "stop", event );
    },

    _setOption: function( key, value ) {
        if ( key === "culture" || key === "numberFormat" ) {
            var prevValue = this._parse( this.element.val() );
            this.options[ key ] = value;
            this.element.val( this._format( prevValue ) );
            return;
        }

        if ( key === "max" || key === "min" || key === "step" ) {
            if ( typeof value === "string" ) {
                value = this._parse( value );
            }
        }

        this._super( key, value );

        if ( key === "disabled" ) {
            if ( value ) {
                this.element.prop( "disabled", true );
                this.buttons.button( "disable" );
            } else {
                this.element.prop( "disabled", false );
                this.buttons.button( "enable" );
            }
        }
    },

    _setOptions: modifier(function( options ) {
        this._super( options );
        this._value( this.element.val() );
    }),

    _parse: function( val ) {
        if ( typeof val === "string" && val !== "" ) {
            val = window.Globalize && this.options.numberFormat ?
                Globalize.parseFloat( val, 10, this.options.culture ) : +val;
        }
        return val === "" || isNaN( val ) ? null : val;
    },

    _format: function( value ) {
        if ( value === "" ) {
            return "";
        }
        return window.Globalize && this.options.numberFormat ?
            Globalize.format( value, this.options.numberFormat, this.options.culture ) :
            value;
    },

    _refresh: function() {
        this.element.attr({
            "aria-valuemin": this.options.min,
            "aria-valuemax": this.options.max,
            // TODO: what should we do with values that can't be parsed?
            "aria-valuenow": this._parse( this.element.val() )
        });
    },

    // update the value without triggering change
    _value: function( value, allowAny ) {
        var parsed;
        if ( value !== "" ) {
            parsed = this._parse( value );
            if ( parsed !== null ) {
                if ( !allowAny ) {
                    parsed = this._adjustValue( parsed );
                }
                value = this._format( parsed );
            }
        }
        this.element.val( value );
        this._refresh();
    },

    _destroy: function() {
        this.element
            .removeClass( "ui-spinner-input" )
            .prop( "disabled", false )
            .removeAttr( "autocomplete" )
            .removeAttr( "role" )
            .removeAttr( "aria-valuemin" )
            .removeAttr( "aria-valuemax" )
            .removeAttr( "aria-valuenow" );
        this.uiSpinner.replaceWith( this.element );
    },

    stepUp: modifier(function( steps ) {
        this._stepUp( steps );
    }),
    _stepUp: function( steps ) {
        this._spin( (steps || 1) * this.options.step );
    },

    stepDown: modifier(function( steps ) {
        this._stepDown( steps );
    }),
    _stepDown: function( steps ) {
        this._spin( (steps || 1) * -this.options.step );
    },

    pageUp: modifier(function( pages ) {
        this._stepUp( (pages || 1) * this.options.page );
    }),

    pageDown: modifier(function( pages ) {
        this._stepDown( (pages || 1) * this.options.page );
    }),

    value: function( newVal ) {
        if ( !arguments.length ) {
            return this._parse( this.element.val() );
        }
        modifier( this._value ).call( this, newVal );
    },

    widget: function() {
        return this.uiSpinner;
    }
});

}( jQuery ) );
(function( $, undefined ) {

var tabId = 0,
    rhash = /#.*$/;

function getNextTabId() {
    return ++tabId;
}

function isLocal( anchor ) {
    return anchor.hash.length > 1 &&
        anchor.href.replace( rhash, "" ) ===
            location.href.replace( rhash, "" )
                // support: Safari 5.1
                // Safari 5.1 doesn't encode spaces in window.location
                // but it does encode spaces from anchors (#8777)
                .replace( /\s/g, "%20" );
}

$.widget( "ui.tabs", {
    version: "1.9.2",
    delay: 300,
    options: {
        active: null,
        collapsible: false,
        event: "click",
        heightStyle: "content",
        hide: null,
        show: null,

        // callbacks
        activate: null,
        beforeActivate: null,
        beforeLoad: null,
        load: null
    },

    _create: function() {
        var that = this,
            options = this.options,
            active = options.active,
            locationHash = location.hash.substring( 1 );

        this.running = false;

        this.element
            .addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
            .toggleClass( "ui-tabs-collapsible", options.collapsible )
            // Prevent users from focusing disabled tabs via click
            .delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {
                if ( $( this ).is( ".ui-state-disabled" ) ) {
                    event.preventDefault();
                }
            })
            // support: IE <9
            // Preventing the default action in mousedown doesn't prevent IE
            // from focusing the element, so if the anchor gets focused, blur.
            // We don't have to worry about focusing the previously focused
            // element since clicking on a non-focusable element should focus
            // the body anyway.
            .delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
                    this.blur();
                }
            });

        this._processTabs();

        if ( active === null ) {
            // check the fragment identifier in the URL
            if ( locationHash ) {
                this.tabs.each(function( i, tab ) {
                    if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
                        active = i;
                        return false;
                    }
                });
            }

            // check for a tab marked active via a class
            if ( active === null ) {
                active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
            }

            // no active tab, set to false
            if ( active === null || active === -1 ) {
                active = this.tabs.length ? 0 : false;
            }
        }

        // handle numbers: negative, out of range
        if ( active !== false ) {
            active = this.tabs.index( this.tabs.eq( active ) );
            if ( active === -1 ) {
                active = options.collapsible ? false : 0;
            }
        }
        options.active = active;

        // don't allow collapsible: false and active: false
        if ( !options.collapsible && options.active === false && this.anchors.length ) {
            options.active = 0;
        }

        // Take disabling tabs via class attribute from HTML
        // into account and update option properly.
        if ( $.isArray( options.disabled ) ) {
            options.disabled = $.unique( options.disabled.concat(
                $.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
                    return that.tabs.index( li );
                })
            ) ).sort();
        }

        // check for length avoids error when initializing empty list
        if ( this.options.active !== false && this.anchors.length ) {
            this.active = this._findActive( this.options.active );
        } else {
            this.active = $();
        }

        this._refresh();

        if ( this.active.length ) {
            this.load( options.active );
        }
    },

    _getCreateEventData: function() {
        return {
            tab: this.active,
            panel: !this.active.length ? $() : this._getPanelForTab( this.active )
        };
    },

    _tabKeydown: function( event ) {
        var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
            selectedIndex = this.tabs.index( focusedTab ),
            goingForward = true;

        if ( this._handlePageNav( event ) ) {
            return;
        }

        switch ( event.keyCode ) {
            case $.ui.keyCode.RIGHT:
            case $.ui.keyCode.DOWN:
                selectedIndex++;
                break;
            case $.ui.keyCode.UP:
            case $.ui.keyCode.LEFT:
                goingForward = false;
                selectedIndex--;
                break;
            case $.ui.keyCode.END:
                selectedIndex = this.anchors.length - 1;
                break;
            case $.ui.keyCode.HOME:
                selectedIndex = 0;
                break;
            case $.ui.keyCode.SPACE:
                // Activate only, no collapsing
                event.preventDefault();
                clearTimeout( this.activating );
                this._activate( selectedIndex );
                return;
            case $.ui.keyCode.ENTER:
                // Toggle (cancel delayed activation, allow collapsing)
                event.preventDefault();
                clearTimeout( this.activating );
                // Determine if we should collapse or activate
                this._activate( selectedIndex === this.options.active ? false : selectedIndex );
                return;
            default:
                return;
        }

        // Focus the appropriate tab, based on which key was pressed
        event.preventDefault();
        clearTimeout( this.activating );
        selectedIndex = this._focusNextTab( selectedIndex, goingForward );

        // Navigating with control key will prevent automatic activation
        if ( !event.ctrlKey ) {
            // Update aria-selected immediately so that AT think the tab is already selected.
            // Otherwise AT may confuse the user by stating that they need to activate the tab,
            // but the tab will already be activated by the time the announcement finishes.
            focusedTab.attr( "aria-selected", "false" );
            this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

            this.activating = this._delay(function() {
                this.option( "active", selectedIndex );
            }, this.delay );
        }
    },

    _panelKeydown: function( event ) {
        if ( this._handlePageNav( event ) ) {
            return;
        }

        // Ctrl+up moves focus to the current tab
        if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
            event.preventDefault();
            this.active.focus();
        }
    },

    // Alt+page up/down moves focus to the previous/next tab (and activates)
    _handlePageNav: function( event ) {
        if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
            this._activate( this._focusNextTab( this.options.active - 1, false ) );
            return true;
        }
        if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
            this._activate( this._focusNextTab( this.options.active + 1, true ) );
            return true;
        }
    },

    _findNextTab: function( index, goingForward ) {
        var lastTabIndex = this.tabs.length - 1;

        function constrain() {
            if ( index > lastTabIndex ) {
                index = 0;
            }
            if ( index < 0 ) {
                index = lastTabIndex;
            }
            return index;
        }

        while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
            index = goingForward ? index + 1 : index - 1;
        }

        return index;
    },

    _focusNextTab: function( index, goingForward ) {
        index = this._findNextTab( index, goingForward );
        this.tabs.eq( index ).focus();
        return index;
    },

    _setOption: function( key, value ) {
        if ( key === "active" ) {
            // _activate() will handle invalid values and update this.options
            this._activate( value );
            return;
        }

        if ( key === "disabled" ) {
            // don't use the widget factory's disabled handling
            this._setupDisabled( value );
            return;
        }

        this._super( key, value);

        if ( key === "collapsible" ) {
            this.element.toggleClass( "ui-tabs-collapsible", value );
            // Setting collapsible: false while collapsed; open first panel
            if ( !value && this.options.active === false ) {
                this._activate( 0 );
            }
        }

        if ( key === "event" ) {
            this._setupEvents( value );
        }

        if ( key === "heightStyle" ) {
            this._setupHeightStyle( value );
        }
    },

    _tabId: function( tab ) {
        return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();
    },

    _sanitizeSelector: function( hash ) {
        return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
    },

    refresh: function() {
        var options = this.options,
            lis = this.tablist.children( ":has(a[href])" );

        // get disabled tabs from class attribute from HTML
        // this will get converted to a boolean if needed in _refresh()
        options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
            return lis.index( tab );
        });

        this._processTabs();

        // was collapsed or no tabs
        if ( options.active === false || !this.anchors.length ) {
            options.active = false;
            this.active = $();
        // was active, but active tab is gone
        } else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
            // all remaining tabs are disabled
            if ( this.tabs.length === options.disabled.length ) {
                options.active = false;
                this.active = $();
            // activate previous tab
            } else {
                this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
            }
        // was active, active tab still exists
        } else {
            // make sure active index is correct
            options.active = this.tabs.index( this.active );
        }

        this._refresh();
    },

    _refresh: function() {
        this._setupDisabled( this.options.disabled );
        this._setupEvents( this.options.event );
        this._setupHeightStyle( this.options.heightStyle );

        this.tabs.not( this.active ).attr({
            "aria-selected": "false",
            tabIndex: -1
        });
        this.panels.not( this._getPanelForTab( this.active ) )
            .hide()
            .attr({
                "aria-expanded": "false",
                "aria-hidden": "true"
            });

        // Make sure one tab is in the tab order
        if ( !this.active.length ) {
            this.tabs.eq( 0 ).attr( "tabIndex", 0 );
        } else {
            this.active
                .addClass( "ui-tabs-active ui-state-active" )
                .attr({
                    "aria-selected": "true",
                    tabIndex: 0
                });
            this._getPanelForTab( this.active )
                .show()
                .attr({
                    "aria-expanded": "true",
                    "aria-hidden": "false"
                });
        }
    },

    _processTabs: function() {
        var that = this;

        this.tablist = this._getList()
            .addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
            .attr( "role", "tablist" );

        this.tabs = this.tablist.find( "> li:has(a[href])" )
            .addClass( "ui-state-default ui-corner-top" )
            .attr({
                role: "tab",
                tabIndex: -1
            });

        this.anchors = this.tabs.map(function() {
                return $( "a", this )[ 0 ];
            })
            .addClass( "ui-tabs-anchor" )
            .attr({
                role: "presentation",
                tabIndex: -1
            });

        this.panels = $();

        this.anchors.each(function( i, anchor ) {
            var selector, panel, panelId,
                anchorId = $( anchor ).uniqueId().attr( "id" ),
                tab = $( anchor ).closest( "li" ),
                originalAriaControls = tab.attr( "aria-controls" );

            // inline tab
            if ( isLocal( anchor ) ) {
                selector = anchor.hash;
                panel = that.element.find( that._sanitizeSelector( selector ) );
            // remote tab
            } else {
                panelId = that._tabId( tab );
                selector = "#" + panelId;
                panel = that.element.find( selector );
                if ( !panel.length ) {
                    panel = that._createPanel( panelId );
                    panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
                }
                panel.attr( "aria-live", "polite" );
            }

            if ( panel.length) {
                that.panels = that.panels.add( panel );
            }
            if ( originalAriaControls ) {
                tab.data( "ui-tabs-aria-controls", originalAriaControls );
            }
            tab.attr({
                "aria-controls": selector.substring( 1 ),
                "aria-labelledby": anchorId
            });
            panel.attr( "aria-labelledby", anchorId );
        });

        this.panels
            .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
            .attr( "role", "tabpanel" );
    },

    // allow overriding how to find the list for rare usage scenarios (#7715)
    _getList: function() {
        return this.element.find( "ol,ul" ).eq( 0 );
    },

    _createPanel: function( id ) {
        return $( "<div>" )
            .attr( "id", id )
            .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
            .data( "ui-tabs-destroy", true );
    },

    _setupDisabled: function( disabled ) {
        if ( $.isArray( disabled ) ) {
            if ( !disabled.length ) {
                disabled = false;
            } else if ( disabled.length === this.anchors.length ) {
                disabled = true;
            }
        }

        // disable tabs
        for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
            if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
                $( li )
                    .addClass( "ui-state-disabled" )
                    .attr( "aria-disabled", "true" );
            } else {
                $( li )
                    .removeClass( "ui-state-disabled" )
                    .removeAttr( "aria-disabled" );
            }
        }

        this.options.disabled = disabled;
    },

    _setupEvents: function( event ) {
        var events = {
            click: function( event ) {
                event.preventDefault();
            }
        };
        if ( event ) {
            $.each( event.split(" "), function( index, eventName ) {
                events[ eventName ] = "_eventHandler";
            });
        }

        this._off( this.anchors.add( this.tabs ).add( this.panels ) );
        this._on( this.anchors, events );
        this._on( this.tabs, { keydown: "_tabKeydown" } );
        this._on( this.panels, { keydown: "_panelKeydown" } );

        this._focusable( this.tabs );
        this._hoverable( this.tabs );
    },

    _setupHeightStyle: function( heightStyle ) {
        var maxHeight, overflow,
            parent = this.element.parent();

        if ( heightStyle === "fill" ) {
            // IE 6 treats height like minHeight, so we need to turn off overflow
            // in order to get a reliable height
            // we use the minHeight support test because we assume that only
            // browsers that don't support minHeight will treat height as minHeight
            if ( !$.support.minHeight ) {
                overflow = parent.css( "overflow" );
                parent.css( "overflow", "hidden");
            }
            maxHeight = parent.height();
            this.element.siblings( ":visible" ).each(function() {
                var elem = $( this ),
                    position = elem.css( "position" );

                if ( position === "absolute" || position === "fixed" ) {
                    return;
                }
                maxHeight -= elem.outerHeight( true );
            });
            if ( overflow ) {
                parent.css( "overflow", overflow );
            }

            this.element.children().not( this.panels ).each(function() {
                maxHeight -= $( this ).outerHeight( true );
            });

            this.panels.each(function() {
                $( this ).height( Math.max( 0, maxHeight -
                    $( this ).innerHeight() + $( this ).height() ) );
            })
            .css( "overflow", "auto" );
        } else if ( heightStyle === "auto" ) {
            maxHeight = 0;
            this.panels.each(function() {
                maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
            }).height( maxHeight );
        }
    },

    _eventHandler: function( event ) {
        var options = this.options,
            active = this.active,
            anchor = $( event.currentTarget ),
            tab = anchor.closest( "li" ),
            clickedIsActive = tab[ 0 ] === active[ 0 ],
            collapsing = clickedIsActive && options.collapsible,
            toShow = collapsing ? $() : this._getPanelForTab( tab ),
            toHide = !active.length ? $() : this._getPanelForTab( active ),
            eventData = {
                oldTab: active,
                oldPanel: toHide,
                newTab: collapsing ? $() : tab,
                newPanel: toShow
            };

        event.preventDefault();

        if ( tab.hasClass( "ui-state-disabled" ) ||
                // tab is already loading
                tab.hasClass( "ui-tabs-loading" ) ||
                // can't switch durning an animation
                this.running ||
                // click on active header, but not collapsible
                ( clickedIsActive && !options.collapsible ) ||
                // allow canceling activation
                ( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
            return;
        }

        options.active = collapsing ? false : this.tabs.index( tab );

        this.active = clickedIsActive ? $() : tab;
        if ( this.xhr ) {
            this.xhr.abort();
        }

        if ( !toHide.length && !toShow.length ) {
            $.error( "jQuery UI Tabs: Mismatching fragment identifier." );
        }

        if ( toShow.length ) {
            this.load( this.tabs.index( tab ), event );
        }
        this._toggle( event, eventData );
    },

    // handles show/hide for selecting tabs
    _toggle: function( event, eventData ) {
        var that = this,
            toShow = eventData.newPanel,
            toHide = eventData.oldPanel;

        this.running = true;

        function complete() {
            that.running = false;
            that._trigger( "activate", event, eventData );
        }

        function show() {
            eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

            if ( toShow.length && that.options.show ) {
                that._show( toShow, that.options.show, complete );
            } else {
                toShow.show();
                complete();
            }
        }

        // start out by hiding, then showing, then completing
        if ( toHide.length && this.options.hide ) {
            this._hide( toHide, this.options.hide, function() {
                eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
                show();
            });
        } else {
            eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
            toHide.hide();
            show();
        }

        toHide.attr({
            "aria-expanded": "false",
            "aria-hidden": "true"
        });
        eventData.oldTab.attr( "aria-selected", "false" );
        // If we're switching tabs, remove the old tab from the tab order.
        // If we're opening from collapsed state, remove the previous tab from the tab order.
        // If we're collapsing, then keep the collapsing tab in the tab order.
        if ( toShow.length && toHide.length ) {
            eventData.oldTab.attr( "tabIndex", -1 );
        } else if ( toShow.length ) {
            this.tabs.filter(function() {
                return $( this ).attr( "tabIndex" ) === 0;
            })
            .attr( "tabIndex", -1 );
        }

        toShow.attr({
            "aria-expanded": "true",
            "aria-hidden": "false"
        });
        eventData.newTab.attr({
            "aria-selected": "true",
            tabIndex: 0
        });
    },

    _activate: function( index ) {
        var anchor,
            active = this._findActive( index );

        // trying to activate the already active panel
        if ( active[ 0 ] === this.active[ 0 ] ) {
            return;
        }

        // trying to collapse, simulate a click on the current active header
        if ( !active.length ) {
            active = this.active;
        }

        anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
        this._eventHandler({
            target: anchor,
            currentTarget: anchor,
            preventDefault: $.noop
        });
    },

    _findActive: function( index ) {
        return index === false ? $() : this.tabs.eq( index );
    },

    _getIndex: function( index ) {
        // meta-function to give users option to provide a href string instead of a numerical index.
        if ( typeof index === "string" ) {
            index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
        }

        return index;
    },

    _destroy: function() {
        if ( this.xhr ) {
            this.xhr.abort();
        }

        this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

        this.tablist
            .removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
            .removeAttr( "role" );

        this.anchors
            .removeClass( "ui-tabs-anchor" )
            .removeAttr( "role" )
            .removeAttr( "tabIndex" )
            .removeData( "href.tabs" )
            .removeData( "load.tabs" )
            .removeUniqueId();

        this.tabs.add( this.panels ).each(function() {
            if ( $.data( this, "ui-tabs-destroy" ) ) {
                $( this ).remove();
            } else {
                $( this )
                    .removeClass( "ui-state-default ui-state-active ui-state-disabled " +
                        "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
                    .removeAttr( "tabIndex" )
                    .removeAttr( "aria-live" )
                    .removeAttr( "aria-busy" )
                    .removeAttr( "aria-selected" )
                    .removeAttr( "aria-labelledby" )
                    .removeAttr( "aria-hidden" )
                    .removeAttr( "aria-expanded" )
                    .removeAttr( "role" );
            }
        });

        this.tabs.each(function() {
            var li = $( this ),
                prev = li.data( "ui-tabs-aria-controls" );
            if ( prev ) {
                li.attr( "aria-controls", prev );
            } else {
                li.removeAttr( "aria-controls" );
            }
        });

        this.panels.show();

        if ( this.options.heightStyle !== "content" ) {
            this.panels.css( "height", "" );
        }
    },

    enable: function( index ) {
        var disabled = this.options.disabled;
        if ( disabled === false ) {
            return;
        }

        if ( index === undefined ) {
            disabled = false;
        } else {
            index = this._getIndex( index );
            if ( $.isArray( disabled ) ) {
                disabled = $.map( disabled, function( num ) {
                    return num !== index ? num : null;
                });
            } else {
                disabled = $.map( this.tabs, function( li, num ) {
                    return num !== index ? num : null;
                });
            }
        }
        this._setupDisabled( disabled );
    },

    disable: function( index ) {
        var disabled = this.options.disabled;
        if ( disabled === true ) {
            return;
        }

        if ( index === undefined ) {
            disabled = true;
        } else {
            index = this._getIndex( index );
            if ( $.inArray( index, disabled ) !== -1 ) {
                return;
            }
            if ( $.isArray( disabled ) ) {
                disabled = $.merge( [ index ], disabled ).sort();
            } else {
                disabled = [ index ];
            }
        }
        this._setupDisabled( disabled );
    },

    load: function( index, event ) {
        index = this._getIndex( index );
        var that = this,
            tab = this.tabs.eq( index ),
            anchor = tab.find( ".ui-tabs-anchor" ),
            panel = this._getPanelForTab( tab ),
            eventData = {
                tab: tab,
                panel: panel
            };

        // not remote
        if ( isLocal( anchor[ 0 ] ) ) {
            return;
        }

        this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

        // support: jQuery <1.8
        // jQuery <1.8 returns false if the request is canceled in beforeSend,
        // but as of 1.8, $.ajax() always returns a jqXHR object.
        if ( this.xhr && this.xhr.statusText !== "canceled" ) {
            tab.addClass( "ui-tabs-loading" );
            panel.attr( "aria-busy", "true" );

            this.xhr
                .success(function( response ) {
                    // support: jQuery <1.8
                    // http://bugs.jquery.com/ticket/11778
                    setTimeout(function() {
                        panel.html( response );
                        that._trigger( "load", event, eventData );
                    }, 1 );
                })
                .complete(function( jqXHR, status ) {
                    // support: jQuery <1.8
                    // http://bugs.jquery.com/ticket/11778
                    setTimeout(function() {
                        if ( status === "abort" ) {
                            that.panels.stop( false, true );
                        }

                        tab.removeClass( "ui-tabs-loading" );
                        panel.removeAttr( "aria-busy" );

                        if ( jqXHR === that.xhr ) {
                            delete that.xhr;
                        }
                    }, 1 );
                });
        }
    },

    // TODO: Remove this function in 1.10 when ajaxOptions is removed
    _ajaxSettings: function( anchor, event, eventData ) {
        var that = this;
        return {
            url: anchor.attr( "href" ),
            beforeSend: function( jqXHR, settings ) {
                return that._trigger( "beforeLoad", event,
                    $.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
            }
        };
    },

    _getPanelForTab: function( tab ) {
        var id = $( tab ).attr( "aria-controls" );
        return this.element.find( this._sanitizeSelector( "#" + id ) );
    }
});

// DEPRECATED
if ( $.uiBackCompat !== false ) {

    // helper method for a lot of the back compat extensions
    $.ui.tabs.prototype._ui = function( tab, panel ) {
        return {
            tab: tab,
            panel: panel,
            index: this.anchors.index( tab )
        };
    };

    // url method
    $.widget( "ui.tabs", $.ui.tabs, {
        url: function( index, url ) {
            this.anchors.eq( index ).attr( "href", url );
        }
    });

    // TODO: Remove _ajaxSettings() method when removing this extension
    // ajaxOptions and cache options
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            ajaxOptions: null,
            cache: false
        },

        _create: function() {
            this._super();

            var that = this;

            this._on({ tabsbeforeload: function( event, ui ) {
                // tab is already cached
                if ( $.data( ui.tab[ 0 ], "cache.tabs" ) ) {
                    event.preventDefault();
                    return;
                }

                ui.jqXHR.success(function() {
                    if ( that.options.cache ) {
                        $.data( ui.tab[ 0 ], "cache.tabs", true );
                    }
                });
            }});
        },

        _ajaxSettings: function( anchor, event, ui ) {
            var ajaxOptions = this.options.ajaxOptions;
            return $.extend( {}, ajaxOptions, {
                error: function( xhr, status ) {
                    try {
                        // Passing index avoid a race condition when this method is
                        // called after the user has selected another tab.
                        // Pass the anchor that initiated this request allows
                        // loadError to manipulate the tab content panel via $(a.hash)
                        ajaxOptions.error(
                            xhr, status, ui.tab.closest( "li" ).index(), ui.tab[ 0 ] );
                    }
                    catch ( error ) {}
                }
            }, this._superApply( arguments ) );
        },

        _setOption: function( key, value ) {
            // reset cache if switching from cached to not cached
            if ( key === "cache" && value === false ) {
                this.anchors.removeData( "cache.tabs" );
            }
            this._super( key, value );
        },

        _destroy: function() {
            this.anchors.removeData( "cache.tabs" );
            this._super();
        },

        url: function( index ){
            this.anchors.eq( index ).removeData( "cache.tabs" );
            this._superApply( arguments );
        }
    });

    // abort method
    $.widget( "ui.tabs", $.ui.tabs, {
        abort: function() {
            if ( this.xhr ) {
                this.xhr.abort();
            }
        }
    });

    // spinner
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            spinner: "<em>Loading&#8230;</em>"
        },
        _create: function() {
            this._super();
            this._on({
                tabsbeforeload: function( event, ui ) {
                    // Don't react to nested tabs or tabs that don't use a spinner
                    if ( event.target !== this.element[ 0 ] ||
                            !this.options.spinner ) {
                        return;
                    }

                    var span = ui.tab.find( "span" ),
                        html = span.html();
                    span.html( this.options.spinner );
                    ui.jqXHR.complete(function() {
                        span.html( html );
                    });
                }
            });
        }
    });

    // enable/disable events
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            enable: null,
            disable: null
        },

        enable: function( index ) {
            var options = this.options,
                trigger;

            if ( index && options.disabled === true ||
                    ( $.isArray( options.disabled ) && $.inArray( index, options.disabled ) !== -1 ) ) {
                trigger = true;
            }

            this._superApply( arguments );

            if ( trigger ) {
                this._trigger( "enable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
            }
        },

        disable: function( index ) {
            var options = this.options,
                trigger;

            if ( index && options.disabled === false ||
                    ( $.isArray( options.disabled ) && $.inArray( index, options.disabled ) === -1 ) ) {
                trigger = true;
            }

            this._superApply( arguments );

            if ( trigger ) {
                this._trigger( "disable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
            }
        }
    });

    // add/remove methods and events
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            add: null,
            remove: null,
            tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>"
        },

        add: function( url, label, index ) {
            if ( index === undefined ) {
                index = this.anchors.length;
            }

            var doInsertAfter, panel,
                options = this.options,
                li = $( options.tabTemplate
                    .replace( /#\{href\}/g, url )
                    .replace( /#\{label\}/g, label ) ),
                id = !url.indexOf( "#" ) ?
                    url.replace( "#", "" ) :
                    this._tabId( li );

            li.addClass( "ui-state-default ui-corner-top" ).data( "ui-tabs-destroy", true );
            li.attr( "aria-controls", id );

            doInsertAfter = index >= this.tabs.length;

            // try to find an existing element before creating a new one
            panel = this.element.find( "#" + id );
            if ( !panel.length ) {
                panel = this._createPanel( id );
                if ( doInsertAfter ) {
                    if ( index > 0 ) {
                        panel.insertAfter( this.panels.eq( -1 ) );
                    } else {
                        panel.appendTo( this.element );
                    }
                } else {
                    panel.insertBefore( this.panels[ index ] );
                }
            }
            panel.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" ).hide();

            if ( doInsertAfter ) {
                li.appendTo( this.tablist );
            } else {
                li.insertBefore( this.tabs[ index ] );
            }

            options.disabled = $.map( options.disabled, function( n ) {
                return n >= index ? ++n : n;
            });

            this.refresh();
            if ( this.tabs.length === 1 && options.active === false ) {
                this.option( "active", 0 );
            }

            this._trigger( "add", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
            return this;
        },

        remove: function( index ) {
            index = this._getIndex( index );
            var options = this.options,
                tab = this.tabs.eq( index ).remove(),
                panel = this._getPanelForTab( tab ).remove();

            // If selected tab was removed focus tab to the right or
            // in case the last tab was removed the tab to the left.
            // We check for more than 2 tabs, because if there are only 2,
            // then when we remove this tab, there will only be one tab left
            // so we don't need to detect which tab to activate.
            if ( tab.hasClass( "ui-tabs-active" ) && this.anchors.length > 2 ) {
                this._activate( index + ( index + 1 < this.anchors.length ? 1 : -1 ) );
            }

            options.disabled = $.map(
                $.grep( options.disabled, function( n ) {
                    return n !== index;
                }),
                function( n ) {
                    return n >= index ? --n : n;
                });

            this.refresh();

            this._trigger( "remove", null, this._ui( tab.find( "a" )[ 0 ], panel[ 0 ] ) );
            return this;
        }
    });

    // length method
    $.widget( "ui.tabs", $.ui.tabs, {
        length: function() {
            return this.anchors.length;
        }
    });

    // panel ids (idPrefix option + title attribute)
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            idPrefix: "ui-tabs-"
        },

        _tabId: function( tab ) {
            var a = tab.is( "li" ) ? tab.find( "a[href]" ) : tab;
            a = a[0];
            return $( a ).closest( "li" ).attr( "aria-controls" ) ||
                a.title && a.title.replace( /\s/g, "_" ).replace( /[^\w\u00c0-\uFFFF\-]/g, "" ) ||
                this.options.idPrefix + getNextTabId();
        }
    });

    // _createPanel method
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            panelTemplate: "<div></div>"
        },

        _createPanel: function( id ) {
            return $( this.options.panelTemplate )
                .attr( "id", id )
                .addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
                .data( "ui-tabs-destroy", true );
        }
    });

    // selected option
    $.widget( "ui.tabs", $.ui.tabs, {
        _create: function() {
            var options = this.options;
            if ( options.active === null && options.selected !== undefined ) {
                options.active = options.selected === -1 ? false : options.selected;
            }
            this._super();
            options.selected = options.active;
            if ( options.selected === false ) {
                options.selected = -1;
            }
        },

        _setOption: function( key, value ) {
            if ( key !== "selected" ) {
                return this._super( key, value );
            }

            var options = this.options;
            this._super( "active", value === -1 ? false : value );
            options.selected = options.active;
            if ( options.selected === false ) {
                options.selected = -1;
            }
        },

        _eventHandler: function() {
            this._superApply( arguments );
            this.options.selected = this.options.active;
            if ( this.options.selected === false ) {
                this.options.selected = -1;
            }
        }
    });

    // show and select event
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            show: null,
            select: null
        },
        _create: function() {
            this._super();
            if ( this.options.active !== false ) {
                this._trigger( "show", null, this._ui(
                    this.active.find( ".ui-tabs-anchor" )[ 0 ],
                    this._getPanelForTab( this.active )[ 0 ] ) );
            }
        },
        _trigger: function( type, event, data ) {
            var tab, panel,
                ret = this._superApply( arguments );

            if ( !ret ) {
                return false;
            }

            if ( type === "beforeActivate" ) {
                tab = data.newTab.length ? data.newTab : data.oldTab;
                panel = data.newPanel.length ? data.newPanel : data.oldPanel;
                ret = this._super( "select", event, {
                    tab: tab.find( ".ui-tabs-anchor" )[ 0],
                    panel: panel[ 0 ],
                    index: tab.closest( "li" ).index()
                });
            } else if ( type === "activate" && data.newTab.length ) {
                ret = this._super( "show", event, {
                    tab: data.newTab.find( ".ui-tabs-anchor" )[ 0 ],
                    panel: data.newPanel[ 0 ],
                    index: data.newTab.closest( "li" ).index()
                });
            }
            return ret;
        }
    });

    // select method
    $.widget( "ui.tabs", $.ui.tabs, {
        select: function( index ) {
            index = this._getIndex( index );
            if ( index === -1 ) {
                if ( this.options.collapsible && this.options.selected !== -1 ) {
                    index = this.options.selected;
                } else {
                    return;
                }
            }
            this.anchors.eq( index ).trigger( this.options.event + this.eventNamespace );
        }
    });

    // cookie option
    (function() {

    var listId = 0;

    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            cookie: null // e.g. { expires: 7, path: '/', domain: 'jquery.com', secure: true }
        },
        _create: function() {
            var options = this.options,
                active;
            if ( options.active == null && options.cookie ) {
                active = parseInt( this._cookie(), 10 );
                if ( active === -1 ) {
                    active = false;
                }
                options.active = active;
            }
            this._super();
        },
        _cookie: function( active ) {
            var cookie = [ this.cookie ||
                ( this.cookie = this.options.cookie.name || "ui-tabs-" + (++listId) ) ];
            if ( arguments.length ) {
                cookie.push( active === false ? -1 : active );
                cookie.push( this.options.cookie );
            }
            return $.cookie.apply( null, cookie );
        },
        _refresh: function() {
            this._super();
            if ( this.options.cookie ) {
                this._cookie( this.options.active, this.options.cookie );
            }
        },
        _eventHandler: function() {
            this._superApply( arguments );
            if ( this.options.cookie ) {
                this._cookie( this.options.active, this.options.cookie );
            }
        },
        _destroy: function() {
            this._super();
            if ( this.options.cookie ) {
                this._cookie( null, this.options.cookie );
            }
        }
    });

    })();

    // load event
    $.widget( "ui.tabs", $.ui.tabs, {
        _trigger: function( type, event, data ) {
            var _data = $.extend( {}, data );
            if ( type === "load" ) {
                _data.panel = _data.panel[ 0 ];
                _data.tab = _data.tab.find( ".ui-tabs-anchor" )[ 0 ];
            }
            return this._super( type, event, _data );
        }
    });

    // fx option
    // The new animation options (show, hide) conflict with the old show callback.
    // The old fx option wins over show/hide anyway (always favor back-compat).
    // If a user wants to use the new animation API, they must give up the old API.
    $.widget( "ui.tabs", $.ui.tabs, {
        options: {
            fx: null // e.g. { height: "toggle", opacity: "toggle", duration: 200 }
        },

        _getFx: function() {
            var hide, show,
                fx = this.options.fx;

            if ( fx ) {
                if ( $.isArray( fx ) ) {
                    hide = fx[ 0 ];
                    show = fx[ 1 ];
                } else {
                    hide = show = fx;
                }
            }

            return fx ? { show: show, hide: hide } : null;
        },

        _toggle: function( event, eventData ) {
            var that = this,
                toShow = eventData.newPanel,
                toHide = eventData.oldPanel,
                fx = this._getFx();

            if ( !fx ) {
                return this._super( event, eventData );
            }

            that.running = true;

            function complete() {
                that.running = false;
                that._trigger( "activate", event, eventData );
            }

            function show() {
                eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

                if ( toShow.length && fx.show ) {
                    toShow
                        .animate( fx.show, fx.show.duration, function() {
                            complete();
                        });
                } else {
                    toShow.show();
                    complete();
                }
            }

            // start out by hiding, then showing, then completing
            if ( toHide.length && fx.hide ) {
                toHide.animate( fx.hide, fx.hide.duration, function() {
                    eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
                    show();
                });
            } else {
                eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
                toHide.hide();
                show();
            }
        }
    });
}

})( jQuery );
(function( $ ) {

var increments = 0;

function addDescribedBy( elem, id ) {
    var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
    describedby.push( id );
    elem
        .data( "ui-tooltip-id", id )
        .attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
}

function removeDescribedBy( elem ) {
    var id = elem.data( "ui-tooltip-id" ),
        describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
        index = $.inArray( id, describedby );
    if ( index !== -1 ) {
        describedby.splice( index, 1 );
    }

    elem.removeData( "ui-tooltip-id" );
    describedby = $.trim( describedby.join( " " ) );
    if ( describedby ) {
        elem.attr( "aria-describedby", describedby );
    } else {
        elem.removeAttr( "aria-describedby" );
    }
}

$.widget( "ui.tooltip", {
    version: "1.9.2",
    options: {
        content: function() {
            return $( this ).attr( "title" );
        },
        hide: true,
        // Disabled elements have inconsistent behavior across browsers (#8661)
        items: "[title]:not([disabled])",
        position: {
            my: "left top+15",
            at: "left bottom",
            collision: "flipfit flip"
        },
        show: true,
        tooltipClass: null,
        track: false,

        // callbacks
        close: null,
        open: null
    },

    _create: function() {
        this._on({
            mouseover: "open",
            focusin: "open"
        });

        // IDs of generated tooltips, needed for destroy
        this.tooltips = {};
        // IDs of parent tooltips where we removed the title attribute
        this.parents = {};

        if ( this.options.disabled ) {
            this._disable();
        }
    },

    _setOption: function( key, value ) {
        var that = this;

        if ( key === "disabled" ) {
            this[ value ? "_disable" : "_enable" ]();
            this.options[ key ] = value;
            // disable element style changes
            return;
        }

        this._super( key, value );

        if ( key === "content" ) {
            $.each( this.tooltips, function( id, element ) {
                that._updateContent( element );
            });
        }
    },

    _disable: function() {
        var that = this;

        // close open tooltips
        $.each( this.tooltips, function( id, element ) {
            var event = $.Event( "blur" );
            event.target = event.currentTarget = element[0];
            that.close( event, true );
        });

        // remove title attributes to prevent native tooltips
        this.element.find( this.options.items ).andSelf().each(function() {
            var element = $( this );
            if ( element.is( "[title]" ) ) {
                element
                    .data( "ui-tooltip-title", element.attr( "title" ) )
                    .attr( "title", "" );
            }
        });
    },

    _enable: function() {
        // restore title attributes
        this.element.find( this.options.items ).andSelf().each(function() {
            var element = $( this );
            if ( element.data( "ui-tooltip-title" ) ) {
                element.attr( "title", element.data( "ui-tooltip-title" ) );
            }
        });
    },

    open: function( event ) {
        var that = this,
            target = $( event ? event.target : this.element )
                // we need closest here due to mouseover bubbling,
                // but always pointing at the same event target
                .closest( this.options.items );

        // No element to show a tooltip for or the tooltip is already open
        if ( !target.length || target.data( "ui-tooltip-id" ) ) {
            return;
        }

        if ( target.attr( "title" ) ) {
            target.data( "ui-tooltip-title", target.attr( "title" ) );
        }

        target.data( "ui-tooltip-open", true );

        // kill parent tooltips, custom or native, for hover
        if ( event && event.type === "mouseover" ) {
            target.parents().each(function() {
                var parent = $( this ),
                    blurEvent;
                if ( parent.data( "ui-tooltip-open" ) ) {
                    blurEvent = $.Event( "blur" );
                    blurEvent.target = blurEvent.currentTarget = this;
                    that.close( blurEvent, true );
                }
                if ( parent.attr( "title" ) ) {
                    parent.uniqueId();
                    that.parents[ this.id ] = {
                        element: this,
                        title: parent.attr( "title" )
                    };
                    parent.attr( "title", "" );
                }
            });
        }

        this._updateContent( target, event );
    },

    _updateContent: function( target, event ) {
        var content,
            contentOption = this.options.content,
            that = this,
            eventType = event ? event.type : null;

        if ( typeof contentOption === "string" ) {
            return this._open( event, target, contentOption );
        }

        content = contentOption.call( target[0], function( response ) {
            // ignore async response if tooltip was closed already
            if ( !target.data( "ui-tooltip-open" ) ) {
                return;
            }
            // IE may instantly serve a cached response for ajax requests
            // delay this call to _open so the other call to _open runs first
            that._delay(function() {
                // jQuery creates a special event for focusin when it doesn't
                // exist natively. To improve performance, the native event
                // object is reused and the type is changed. Therefore, we can't
                // rely on the type being correct after the event finished
                // bubbling, so we set it back to the previous value. (#8740)
                if ( event ) {
                    event.type = eventType;
                }
                this._open( event, target, response );
            });
        });
        if ( content ) {
            this._open( event, target, content );
        }
    },

    _open: function( event, target, content ) {
        var tooltip, events, delayedShow,
            positionOption = $.extend( {}, this.options.position );

        if ( !content ) {
            return;
        }

        // Content can be updated multiple times. If the tooltip already
        // exists, then just update the content and bail.
        tooltip = this._find( target );
        if ( tooltip.length ) {
            tooltip.find( ".ui-tooltip-content" ).html( content );
            return;
        }

        // if we have a title, clear it to prevent the native tooltip
        // we have to check first to avoid defining a title if none exists
        // (we don't want to cause an element to start matching [title])
        //
        // We use removeAttr only for key events, to allow IE to export the correct
        // accessible attributes. For mouse events, set to empty string to avoid
        // native tooltip showing up (happens only when removing inside mouseover).
        if ( target.is( "[title]" ) ) {
            if ( event && event.type === "mouseover" ) {
                target.attr( "title", "" );
            } else {
                target.removeAttr( "title" );
            }
        }

        tooltip = this._tooltip( target );
        addDescribedBy( target, tooltip.attr( "id" ) );
        tooltip.find( ".ui-tooltip-content" ).html( content );

        function position( event ) {
            positionOption.of = event;
            if ( tooltip.is( ":hidden" ) ) {
                return;
            }
            tooltip.position( positionOption );
        }
        if ( this.options.track && event && /^mouse/.test( event.type ) ) {
            this._on( this.document, {
                mousemove: position
            });
            // trigger once to override element-relative positioning
            position( event );
        } else {
            tooltip.position( $.extend({
                of: target
            }, this.options.position ) );
        }

        tooltip.hide();

        this._show( tooltip, this.options.show );
        // Handle tracking tooltips that are shown with a delay (#8644). As soon
        // as the tooltip is visible, position the tooltip using the most recent
        // event.
        if ( this.options.show && this.options.show.delay ) {
            delayedShow = setInterval(function() {
                if ( tooltip.is( ":visible" ) ) {
                    position( positionOption.of );
                    clearInterval( delayedShow );
                }
            }, $.fx.interval );
        }

        this._trigger( "open", event, { tooltip: tooltip } );

        events = {
            keyup: function( event ) {
                if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
                    var fakeEvent = $.Event(event);
                    fakeEvent.currentTarget = target[0];
                    this.close( fakeEvent, true );
                }
            },
            remove: function() {
                this._removeTooltip( tooltip );
            }
        };
        if ( !event || event.type === "mouseover" ) {
            events.mouseleave = "close";
        }
        if ( !event || event.type === "focusin" ) {
            events.focusout = "close";
        }
        this._on( true, target, events );
    },

    close: function( event ) {
        var that = this,
            target = $( event ? event.currentTarget : this.element ),
            tooltip = this._find( target );

        // disabling closes the tooltip, so we need to track when we're closing
        // to avoid an infinite loop in case the tooltip becomes disabled on close
        if ( this.closing ) {
            return;
        }

        // only set title if we had one before (see comment in _open())
        if ( target.data( "ui-tooltip-title" ) ) {
            target.attr( "title", target.data( "ui-tooltip-title" ) );
        }

        removeDescribedBy( target );

        tooltip.stop( true );
        this._hide( tooltip, this.options.hide, function() {
            that._removeTooltip( $( this ) );
        });

        target.removeData( "ui-tooltip-open" );
        this._off( target, "mouseleave focusout keyup" );
        // Remove 'remove' binding only on delegated targets
        if ( target[0] !== this.element[0] ) {
            this._off( target, "remove" );
        }
        this._off( this.document, "mousemove" );

        if ( event && event.type === "mouseleave" ) {
            $.each( this.parents, function( id, parent ) {
                $( parent.element ).attr( "title", parent.title );
                delete that.parents[ id ];
            });
        }

        this.closing = true;
        this._trigger( "close", event, { tooltip: tooltip } );
        this.closing = false;
    },

    _tooltip: function( element ) {
        var id = "ui-tooltip-" + increments++,
            tooltip = $( "<div>" )
                .attr({
                    id: id,
                    role: "tooltip"
                })
                .addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
                    ( this.options.tooltipClass || "" ) );
        $( "<div>" )
            .addClass( "ui-tooltip-content" )
            .appendTo( tooltip );
        tooltip.appendTo( this.document[0].body );
        if ( $.fn.bgiframe ) {
            tooltip.bgiframe();
        }
        this.tooltips[ id ] = element;
        return tooltip;
    },

    _find: function( target ) {
        var id = target.data( "ui-tooltip-id" );
        return id ? $( "#" + id ) : $();
    },

    _removeTooltip: function( tooltip ) {
        tooltip.remove();
        delete this.tooltips[ tooltip.attr( "id" ) ];
    },

    _destroy: function() {
        var that = this;

        // close open tooltips
        $.each( this.tooltips, function( id, element ) {
            // Delegate to close method to handle common cleanup
            var event = $.Event( "blur" );
            event.target = event.currentTarget = element[0];
            that.close( event, true );

            // Remove immediately; destroying an open tooltip doesn't use the
            // hide animation
            $( "#" + id ).remove();

            // Restore the title
            if ( element.data( "ui-tooltip-title" ) ) {
                element.attr( "title", element.data( "ui-tooltip-title" ) );
                element.removeData( "ui-tooltip-title" );
            }
        });
    }
});

}( jQuery ) );
/**
 * Copyright (c) 2009 Sergiy Kovalchuk (serg472@gmail.com)
 * 
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 *  
 * Following code is based on Element.mask() implementation from ExtJS framework (http://extjs.com/)
 *
 */
;(function($){
	
	/**
	 * Displays loading mask over selected element(s). Accepts both single and multiple selectors.
	 *
	 * @param label Text message that will be displayed on top of the mask besides a spinner (optional). 
	 * 				If not provided only mask will be displayed without a label or a spinner.  	
	 * @param delay Delay in milliseconds before element is masked (optional). If unmask() is called 
	 *              before the delay times out, no mask is displayed. This can be used to prevent unnecessary 
	 *              mask display for quick processes.   	
	 */
	$.fn.mask = function(label, delay){
		$(this).each(function() {
			if(delay !== undefined && delay > 0) {
		        var element = $(this);
		        element.data("_mask_timeout", setTimeout(function() { $.maskElement(element, label)}, delay));
			} else {
				$.maskElement($(this), label);
			}
		});
	};
	
	/**
	 * Removes mask from the element(s). Accepts both single and multiple selectors.
	 */
	$.fn.unmask = function(){
		$(this).each(function() {
			$.unmaskElement($(this));
		});
	};
	
	/**
	 * Checks if a single element is masked. Returns false if mask is delayed or not displayed. 
	 */
	$.fn.isMasked = function(){
		return this.hasClass("masked");
	};

	$.maskElement = function(element, label){
	
		//if this element has delayed mask scheduled then remove it and display the new one
		if (element.data("_mask_timeout") !== undefined) {
			clearTimeout(element.data("_mask_timeout"));
			element.removeData("_mask_timeout");
		}

		if(element.isMasked()) {
			$.unmaskElement(element);
		}
		
		if(element.css("position") == "static") {
			element.addClass("masked-relative");
		}
		
		element.addClass("masked");
		
		var maskDiv = $('<div class="loadmask"></div>');
		
		//auto height fix for IE
		if(navigator.userAgent.toLowerCase().indexOf("msie") > -1){
			maskDiv.height(element.height() + parseInt(element.css("padding-top")) + parseInt(element.css("padding-bottom")));
			maskDiv.width(element.width() + parseInt(element.css("padding-left")) + parseInt(element.css("padding-right")));
		}
		
		//fix for z-index bug with selects in IE6
		if(navigator.userAgent.toLowerCase().indexOf("msie 6") > -1){
			element.find("select").addClass("masked-hidden");
		}
		
		element.append(maskDiv);
		
		if(label !== undefined) {
			var maskMsgDiv = $('<div class="loadmask-msg" style="display:none;"></div>');
			maskMsgDiv.append('<div>' + label + '</div>');
			element.append(maskMsgDiv);
			
			//calculate center position
			maskMsgDiv.css("top", Math.round(element.height() / 2 - (maskMsgDiv.height() - parseInt(maskMsgDiv.css("padding-top")) - parseInt(maskMsgDiv.css("padding-bottom"))) / 2)+"px");
			maskMsgDiv.css("left", Math.round(element.width() / 2 - (maskMsgDiv.width() - parseInt(maskMsgDiv.css("padding-left")) - parseInt(maskMsgDiv.css("padding-right"))) / 2)+"px");
			
			maskMsgDiv.show();
		}
		
	};
	
	$.unmaskElement = function(element){
		//if this element has delayed mask scheduled then remove it
		if (element.data("_mask_timeout") !== undefined) {
			clearTimeout(element.data("_mask_timeout"));
			element.removeData("_mask_timeout");
		}
		
		element.find(".loadmask-msg,.loadmask").remove();
		element.removeClass("masked");
		element.removeClass("masked-relative");
		element.find("select").removeClass("masked-hidden");
	};
 
})(jQuery);
/**
 * SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com
 *
 * mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/
 *
 * SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilz�n and Mammon Media and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */


/* ******************* */
/* Constructor & Init  */
/* ******************* */
var SWFUpload;

if (SWFUpload == undefined) {
	SWFUpload = function (settings) {
		this.initSWFUpload(settings);
	};
}

SWFUpload.prototype.initSWFUpload = function (settings) {
	try {
		this.customSettings = {};	// A container where developers can place their own settings associated with this instance.
		this.settings = settings;
		this.eventQueue = [];
		this.movieName = "SWFUpload_" + SWFUpload.movieCount++;
		this.movieElement = null;


		// Setup global control tracking
		SWFUpload.instances[this.movieName] = this;

		// Load the settings.  Load the Flash movie.
		this.initSettings();
		this.loadFlash();
		this.displayDebugInfo();
	} catch (ex) {
		delete SWFUpload.instances[this.movieName];
		throw ex;
	}
};

/* *************** */
/* Static Members  */
/* *************** */
SWFUpload.instances = {};
SWFUpload.movieCount = 0;
SWFUpload.version = "2.2.0 2009-03-25";
SWFUpload.QUEUE_ERROR = {
	QUEUE_LIMIT_EXCEEDED	  		: -100,
	FILE_EXCEEDS_SIZE_LIMIT  		: -110,
	ZERO_BYTE_FILE			  		: -120,
	INVALID_FILETYPE		  		: -130
};
SWFUpload.UPLOAD_ERROR = {
	HTTP_ERROR				  		: -200,
	MISSING_UPLOAD_URL	      		: -210,
	IO_ERROR				  		: -220,
	SECURITY_ERROR			  		: -230,
	UPLOAD_LIMIT_EXCEEDED	  		: -240,
	UPLOAD_FAILED			  		: -250,
	SPECIFIED_FILE_ID_NOT_FOUND		: -260,
	FILE_VALIDATION_FAILED	  		: -270,
	FILE_CANCELLED			  		: -280,
	UPLOAD_STOPPED					: -290
};
SWFUpload.FILE_STATUS = {
	QUEUED		 : -1,
	IN_PROGRESS	 : -2,
	ERROR		 : -3,
	COMPLETE	 : -4,
	CANCELLED	 : -5
};
SWFUpload.BUTTON_ACTION = {
	SELECT_FILE  : -100,
	SELECT_FILES : -110,
	START_UPLOAD : -120
};
SWFUpload.CURSOR = {
	ARROW : -1,
	HAND : -2
};
SWFUpload.WINDOW_MODE = {
	WINDOW : "window",
	TRANSPARENT : "transparent",
	OPAQUE : "opaque"
};

// Private: takes a URL, determines if it is relative and converts to an absolute URL
// using the current site. Only processes the URL if it can, otherwise returns the URL untouched
SWFUpload.completeURL = function(url) {
	if (typeof(url) !== "string" || url.match(/^https?:\/\//i) || url.match(/^\//)) {
		return url;
	}
	
	var currentURL = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
	
	var indexSlash = window.location.pathname.lastIndexOf("/");
	if (indexSlash <= 0) {
		path = "/";
	} else {
		path = window.location.pathname.substr(0, indexSlash) + "/";
	}
	
	return /*currentURL +*/ path + url;
	
};


/* ******************** */
/* Instance Members  */
/* ******************** */

// Private: initSettings ensures that all the
// settings are set, getting a default value if one was not assigned.
SWFUpload.prototype.initSettings = function () {
	this.ensureDefault = function (settingName, defaultValue) {
		this.settings[settingName] = (this.settings[settingName] == undefined) ? defaultValue : this.settings[settingName];
	};
	
	// Upload backend settings
	this.ensureDefault("upload_url", "");
	this.ensureDefault("preserve_relative_urls", false);
	this.ensureDefault("file_post_name", "Filedata");
	this.ensureDefault("post_params", {});
	this.ensureDefault("use_query_string", false);
	this.ensureDefault("requeue_on_error", false);
	this.ensureDefault("http_success", []);
	this.ensureDefault("assume_success_timeout", 0);
	
	// File Settings
	this.ensureDefault("file_types", "*.*");
	this.ensureDefault("file_types_description", "All Files");
	this.ensureDefault("file_size_limit", 0);	// Default zero means "unlimited"
	this.ensureDefault("file_upload_limit", 0);
	this.ensureDefault("file_queue_limit", 0);

	// Flash Settings
	this.ensureDefault("flash_url", "swfupload.swf");
	this.ensureDefault("prevent_swf_caching", true);
	
	// Button Settings
	this.ensureDefault("button_image_url", "");
	this.ensureDefault("button_width", 1);
	this.ensureDefault("button_height", 1);
	this.ensureDefault("button_text", "");
	this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;");
	this.ensureDefault("button_text_top_padding", 0);
	this.ensureDefault("button_text_left_padding", 0);
	this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES);
	this.ensureDefault("button_disabled", false);
	this.ensureDefault("button_placeholder_id", "");
	this.ensureDefault("button_placeholder", null);
	this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW);
	this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW);
	
	// Debug Settings
	this.ensureDefault("debug", false);
	this.settings.debug_enabled = this.settings.debug;	// Here to maintain v2 API
	
	// Event Handlers
	this.settings.return_upload_start_handler = this.returnUploadStart;
	this.ensureDefault("swfupload_loaded_handler", null);
	this.ensureDefault("file_dialog_start_handler", null);
	this.ensureDefault("file_queued_handler", null);
	this.ensureDefault("file_queue_error_handler", null);
	this.ensureDefault("file_dialog_complete_handler", null);
	
	this.ensureDefault("upload_start_handler", null);
	this.ensureDefault("upload_progress_handler", null);
	this.ensureDefault("upload_error_handler", null);
	this.ensureDefault("upload_success_handler", null);
	this.ensureDefault("upload_complete_handler", null);
	
	this.ensureDefault("debug_handler", this.debugMessage);

	this.ensureDefault("custom_settings", {});

	// Other settings
	this.customSettings = this.settings.custom_settings;
	
	// Update the flash url if needed
	if (!!this.settings.prevent_swf_caching) {
		this.settings.flash_url = this.settings.flash_url + (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&") + "preventswfcaching=" + new Date().getTime();
	}
	
	if (!this.settings.preserve_relative_urls) {
		//this.settings.flash_url = SWFUpload.completeURL(this.settings.flash_url);	// Don't need to do this one since flash doesn't look at it
		this.settings.upload_url = SWFUpload.completeURL(this.settings.upload_url);
		this.settings.button_image_url = SWFUpload.completeURL(this.settings.button_image_url);
	}
	
	delete this.ensureDefault;
};

// Private: loadFlash replaces the button_placeholder element with the flash movie.
SWFUpload.prototype.loadFlash = function () {
	var targetElement, tempParent;

	// Make sure an element with the ID we are going to use doesn't already exist
	if (document.getElementById(this.movieName) !== null) {
		throw "ID " + this.movieName + " is already in use. The Flash Object could not be added";
	}

	// Get the element where we will be placing the flash movie
	targetElement = document.getElementById(this.settings.button_placeholder_id) || this.settings.button_placeholder;

	if (targetElement == undefined) {
		throw "Could not find the placeholder element: " + this.settings.button_placeholder_id;
	}

	// Append the container and load the flash
	tempParent = document.createElement("div");
	tempParent.innerHTML = this.getFlashHTML();	// Using innerHTML is non-standard but the only sensible way to dynamically add Flash in IE (and maybe other browsers)
	targetElement.parentNode.replaceChild(tempParent.firstChild, targetElement);

	// Fix IE Flash/Form bug
	if (window[this.movieName] == undefined) {
		window[this.movieName] = this.getMovieElement();
	}
	
};

// Private: getFlashHTML generates the object tag needed to embed the flash in to the document
SWFUpload.prototype.getFlashHTML = function () {
	// Flash Satay object syntax: http://www.alistapart.com/articles/flashsatay
	return ['<object id="', this.movieName, '" type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload">',
				'<param name="wmode" value="', this.settings.button_window_mode, '" />',
				'<param name="movie" value="', this.settings.flash_url, '" />',
				'<param name="quality" value="high" />',
				'<param name="menu" value="false" />',
				'<param name="allowScriptAccess" value="always" />',
				'<param name="flashvars" value="' + this.getFlashVars() + '" />',
				'</object>'].join("");
};

// Private: getFlashVars builds the parameter string that will be passed
// to flash in the flashvars param.
SWFUpload.prototype.getFlashVars = function () {
	// Build a string from the post param object
	var paramString = this.buildParamString();
	var httpSuccessString = this.settings.http_success.join(",");
	
	// Build the parameter string
	return ["movieName=", encodeURIComponent(this.movieName),
			"&amp;uploadURL=", encodeURIComponent(this.settings.upload_url),
			"&amp;useQueryString=", encodeURIComponent(this.settings.use_query_string),
			"&amp;requeueOnError=", encodeURIComponent(this.settings.requeue_on_error),
			"&amp;httpSuccess=", encodeURIComponent(httpSuccessString),
			"&amp;assumeSuccessTimeout=", encodeURIComponent(this.settings.assume_success_timeout),
			"&amp;params=", encodeURIComponent(paramString),
			"&amp;filePostName=", encodeURIComponent(this.settings.file_post_name),
			"&amp;fileTypes=", encodeURIComponent(this.settings.file_types),
			"&amp;fileTypesDescription=", encodeURIComponent(this.settings.file_types_description),
			"&amp;fileSizeLimit=", encodeURIComponent(this.settings.file_size_limit),
			"&amp;fileUploadLimit=", encodeURIComponent(this.settings.file_upload_limit),
			"&amp;fileQueueLimit=", encodeURIComponent(this.settings.file_queue_limit),
			"&amp;debugEnabled=", encodeURIComponent(this.settings.debug_enabled),
			"&amp;buttonImageURL=", encodeURIComponent(this.settings.button_image_url),
			"&amp;buttonWidth=", encodeURIComponent(this.settings.button_width),
			"&amp;buttonHeight=", encodeURIComponent(this.settings.button_height),
			"&amp;buttonText=", encodeURIComponent(this.settings.button_text),
			"&amp;buttonTextTopPadding=", encodeURIComponent(this.settings.button_text_top_padding),
			"&amp;buttonTextLeftPadding=", encodeURIComponent(this.settings.button_text_left_padding),
			"&amp;buttonTextStyle=", encodeURIComponent(this.settings.button_text_style),
			"&amp;buttonAction=", encodeURIComponent(this.settings.button_action),
			"&amp;buttonDisabled=", encodeURIComponent(this.settings.button_disabled),
			"&amp;buttonCursor=", encodeURIComponent(this.settings.button_cursor)
		].join("");
};

// Public: getMovieElement retrieves the DOM reference to the Flash element added by SWFUpload
// The element is cached after the first lookup
SWFUpload.prototype.getMovieElement = function () {
	if (this.movieElement == undefined) {
		this.movieElement = document.getElementById(this.movieName);
	}

	if (this.movieElement === null) {
		throw "Could not find Flash element";
	}
	
	return this.movieElement;
};

// Private: buildParamString takes the name/value pairs in the post_params setting object
// and joins them up in to a string formatted "name=value&amp;name=value"
SWFUpload.prototype.buildParamString = function () {
	var postParams = this.settings.post_params; 
	var paramStringPairs = [];

	if (typeof(postParams) === "object") {
		for (var name in postParams) {
			if (postParams.hasOwnProperty(name)) {
				paramStringPairs.push(encodeURIComponent(name.toString()) + "=" + encodeURIComponent(postParams[name].toString()));
			}
		}
	}

	return paramStringPairs.join("&amp;");
};

// Public: Used to remove a SWFUpload instance from the page. This method strives to remove
// all references to the SWF, and other objects so memory is properly freed.
// Returns true if everything was destroyed. Returns a false if a failure occurs leaving SWFUpload in an inconsistant state.
// Credits: Major improvements provided by steffen
SWFUpload.prototype.destroy = function () {
	try {
		// Make sure Flash is done before we try to remove it
		this.cancelUpload(null, false);
		

		// Remove the SWFUpload DOM nodes
		var movieElement = null;
		movieElement = this.getMovieElement();
		
		if (movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			// Loop through all the movie's properties and remove all function references (DOM/JS IE 6/7 memory leak workaround)
			for (var i in movieElement) {
				try {
					if (typeof(movieElement[i]) === "function") {
						movieElement[i] = null;
					}
				} catch (ex1) {}
			}

			// Remove the Movie Element from the page
			try {
				movieElement.parentNode.removeChild(movieElement);
			} catch (ex) {}
		}
		
		// Remove IE form fix reference
		window[this.movieName] = null;

		// Destroy other references
		SWFUpload.instances[this.movieName] = null;
		delete SWFUpload.instances[this.movieName];

		this.movieElement = null;
		this.settings = null;
		this.customSettings = null;
		this.eventQueue = null;
		this.movieName = null;
		
		
		return true;
	} catch (ex2) {
		return false;
	}
};


// Public: displayDebugInfo prints out settings and configuration
// information about this SWFUpload instance.
// This function (and any references to it) can be deleted when placing
// SWFUpload in production.
SWFUpload.prototype.displayDebugInfo = function () {
	this.debug(
		[
			"---SWFUpload Instance Info---\n",
			"Version: ", SWFUpload.version, "\n",
			"Movie Name: ", this.movieName, "\n",
			"Settings:\n",
			"\t", "upload_url:               ", this.settings.upload_url, "\n",
			"\t", "flash_url:                ", this.settings.flash_url, "\n",
			"\t", "use_query_string:         ", this.settings.use_query_string.toString(), "\n",
			"\t", "requeue_on_error:         ", this.settings.requeue_on_error.toString(), "\n",
			"\t", "http_success:             ", this.settings.http_success.join(", "), "\n",
			"\t", "assume_success_timeout:   ", this.settings.assume_success_timeout, "\n",
			"\t", "file_post_name:           ", this.settings.file_post_name, "\n",
			"\t", "post_params:              ", this.settings.post_params.toString(), "\n",
			"\t", "file_types:               ", this.settings.file_types, "\n",
			"\t", "file_types_description:   ", this.settings.file_types_description, "\n",
			"\t", "file_size_limit:          ", this.settings.file_size_limit, "\n",
			"\t", "file_upload_limit:        ", this.settings.file_upload_limit, "\n",
			"\t", "file_queue_limit:         ", this.settings.file_queue_limit, "\n",
			"\t", "debug:                    ", this.settings.debug.toString(), "\n",

			"\t", "prevent_swf_caching:      ", this.settings.prevent_swf_caching.toString(), "\n",

			"\t", "button_placeholder_id:    ", this.settings.button_placeholder_id.toString(), "\n",
			"\t", "button_placeholder:       ", (this.settings.button_placeholder ? "Set" : "Not Set"), "\n",
			"\t", "button_image_url:         ", this.settings.button_image_url.toString(), "\n",
			"\t", "button_width:             ", this.settings.button_width.toString(), "\n",
			"\t", "button_height:            ", this.settings.button_height.toString(), "\n",
			"\t", "button_text:              ", this.settings.button_text.toString(), "\n",
			"\t", "button_text_style:        ", this.settings.button_text_style.toString(), "\n",
			"\t", "button_text_top_padding:  ", this.settings.button_text_top_padding.toString(), "\n",
			"\t", "button_text_left_padding: ", this.settings.button_text_left_padding.toString(), "\n",
			"\t", "button_action:            ", this.settings.button_action.toString(), "\n",
			"\t", "button_disabled:          ", this.settings.button_disabled.toString(), "\n",

			"\t", "custom_settings:          ", this.settings.custom_settings.toString(), "\n",
			"Event Handlers:\n",
			"\t", "swfupload_loaded_handler assigned:  ", (typeof this.settings.swfupload_loaded_handler === "function").toString(), "\n",
			"\t", "file_dialog_start_handler assigned: ", (typeof this.settings.file_dialog_start_handler === "function").toString(), "\n",
			"\t", "file_queued_handler assigned:       ", (typeof this.settings.file_queued_handler === "function").toString(), "\n",
			"\t", "file_queue_error_handler assigned:  ", (typeof this.settings.file_queue_error_handler === "function").toString(), "\n",
			"\t", "upload_start_handler assigned:      ", (typeof this.settings.upload_start_handler === "function").toString(), "\n",
			"\t", "upload_progress_handler assigned:   ", (typeof this.settings.upload_progress_handler === "function").toString(), "\n",
			"\t", "upload_error_handler assigned:      ", (typeof this.settings.upload_error_handler === "function").toString(), "\n",
			"\t", "upload_success_handler assigned:    ", (typeof this.settings.upload_success_handler === "function").toString(), "\n",
			"\t", "upload_complete_handler assigned:   ", (typeof this.settings.upload_complete_handler === "function").toString(), "\n",
			"\t", "debug_handler assigned:             ", (typeof this.settings.debug_handler === "function").toString(), "\n"
		].join("")
	);
};

/* Note: addSetting and getSetting are no longer used by SWFUpload but are included
	the maintain v2 API compatibility
*/
// Public: (Deprecated) addSetting adds a setting value. If the value given is undefined or null then the default_value is used.
SWFUpload.prototype.addSetting = function (name, value, default_value) {
    if (value == undefined) {
        return (this.settings[name] = default_value);
    } else {
        return (this.settings[name] = value);
	}
};

// Public: (Deprecated) getSetting gets a setting. Returns an empty string if the setting was not found.
SWFUpload.prototype.getSetting = function (name) {
    if (this.settings[name] != undefined) {
        return this.settings[name];
	}

    return "";
};



// Private: callFlash handles function calls made to the Flash element.
// Calls are made with a setTimeout for some functions to work around
// bugs in the ExternalInterface library.
SWFUpload.prototype.callFlash = function (functionName, argumentArray) {
	argumentArray = argumentArray || [];
	
	var movieElement = this.getMovieElement();
	var returnValue, returnString;

	// Flash's method if calling ExternalInterface methods (code adapted from MooTools).
	try {
		returnString = movieElement.CallFunction('<invoke name="' + functionName + '" returntype="javascript">' + __flash__argumentsToXML(argumentArray, 0) + '</invoke>');
		returnValue = eval(returnString);
	} catch (ex) {
		throw "Call to " + functionName + " failed";
	}
	
	// Unescape file post param values
	if (returnValue != undefined && typeof returnValue.post === "object") {
		returnValue = this.unescapeFilePostParams(returnValue);
	}

	return returnValue;
};

/* *****************************
	-- Flash control methods --
	Your UI should use these
	to operate SWFUpload
   ***************************** */

// WARNING: this function does not work in Flash Player 10
// Public: selectFile causes a File Selection Dialog window to appear.  This
// dialog only allows 1 file to be selected.
SWFUpload.prototype.selectFile = function () {
	this.callFlash("SelectFile");
};

// WARNING: this function does not work in Flash Player 10
// Public: selectFiles causes a File Selection Dialog window to appear/ This
// dialog allows the user to select any number of files
// Flash Bug Warning: Flash limits the number of selectable files based on the combined length of the file names.
// If the selection name length is too long the dialog will fail in an unpredictable manner.  There is no work-around
// for this bug.
SWFUpload.prototype.selectFiles = function () {
	this.callFlash("SelectFiles");
};


// Public: startUpload starts uploading the first file in the queue unless
// the optional parameter 'fileID' specifies the ID 
SWFUpload.prototype.startUpload = function (fileID) {
	this.callFlash("StartUpload", [fileID]);
};

// Public: cancelUpload cancels any queued file.  The fileID parameter may be the file ID or index.
// If you do not specify a fileID the current uploading file or first file in the queue is cancelled.
// If you do not want the uploadError event to trigger you can specify false for the triggerErrorEvent parameter.
SWFUpload.prototype.cancelUpload = function (fileID, triggerErrorEvent) {
	if (triggerErrorEvent !== false) {
		triggerErrorEvent = true;
	}
	this.callFlash("CancelUpload", [fileID, triggerErrorEvent]);
};

// Public: stopUpload stops the current upload and requeues the file at the beginning of the queue.
// If nothing is currently uploading then nothing happens.
SWFUpload.prototype.stopUpload = function () {
	this.callFlash("StopUpload");
};

/* ************************
 * Settings methods
 *   These methods change the SWFUpload settings.
 *   SWFUpload settings should not be changed directly on the settings object
 *   since many of the settings need to be passed to Flash in order to take
 *   effect.
 * *********************** */

// Public: getStats gets the file statistics object.
SWFUpload.prototype.getStats = function () {
	return this.callFlash("GetStats");
};

// Public: setStats changes the SWFUpload statistics.  You shouldn't need to 
// change the statistics but you can.  Changing the statistics does not
// affect SWFUpload accept for the successful_uploads count which is used
// by the upload_limit setting to determine how many files the user may upload.
SWFUpload.prototype.setStats = function (statsObject) {
	this.callFlash("SetStats", [statsObject]);
};

// Public: getFile retrieves a File object by ID or Index.  If the file is
// not found then 'null' is returned.
SWFUpload.prototype.getFile = function (fileID) {
	if (typeof(fileID) === "number") {
		return this.callFlash("GetFileByIndex", [fileID]);
	} else {
		return this.callFlash("GetFile", [fileID]);
	}
};

// Public: addFileParam sets a name/value pair that will be posted with the
// file specified by the Files ID.  If the name already exists then the
// exiting value will be overwritten.
SWFUpload.prototype.addFileParam = function (fileID, name, value) {
	return this.callFlash("AddFileParam", [fileID, name, value]);
};

// Public: removeFileParam removes a previously set (by addFileParam) name/value
// pair from the specified file.
SWFUpload.prototype.removeFileParam = function (fileID, name) {
	this.callFlash("RemoveFileParam", [fileID, name]);
};

// Public: setUploadUrl changes the upload_url setting.
SWFUpload.prototype.setUploadURL = function (url) {
	this.settings.upload_url = url.toString();
	this.callFlash("SetUploadURL", [url]);
};

// Public: setPostParams changes the post_params setting
SWFUpload.prototype.setPostParams = function (paramsObject) {
	this.settings.post_params = paramsObject;
	this.callFlash("SetPostParams", [paramsObject]);
};

// Public: addPostParam adds post name/value pair.  Each name can have only one value.
SWFUpload.prototype.addPostParam = function (name, value) {
	this.settings.post_params[name] = value;
	this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: removePostParam deletes post name/value pair.
SWFUpload.prototype.removePostParam = function (name) {
	delete this.settings.post_params[name];
	this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: setFileTypes changes the file_types setting and the file_types_description setting
SWFUpload.prototype.setFileTypes = function (types, description) {
	this.settings.file_types = types;
	this.settings.file_types_description = description;
	this.callFlash("SetFileTypes", [types, description]);
};

// Public: setFileSizeLimit changes the file_size_limit setting
SWFUpload.prototype.setFileSizeLimit = function (fileSizeLimit) {
	this.settings.file_size_limit = fileSizeLimit;
	this.callFlash("SetFileSizeLimit", [fileSizeLimit]);
};

// Public: setFileUploadLimit changes the file_upload_limit setting
SWFUpload.prototype.setFileUploadLimit = function (fileUploadLimit) {
	this.settings.file_upload_limit = fileUploadLimit;
	this.callFlash("SetFileUploadLimit", [fileUploadLimit]);
};

// Public: setFileQueueLimit changes the file_queue_limit setting
SWFUpload.prototype.setFileQueueLimit = function (fileQueueLimit) {
	this.settings.file_queue_limit = fileQueueLimit;
	this.callFlash("SetFileQueueLimit", [fileQueueLimit]);
};

// Public: setFilePostName changes the file_post_name setting
SWFUpload.prototype.setFilePostName = function (filePostName) {
	this.settings.file_post_name = filePostName;
	this.callFlash("SetFilePostName", [filePostName]);
};

// Public: setUseQueryString changes the use_query_string setting
SWFUpload.prototype.setUseQueryString = function (useQueryString) {
	this.settings.use_query_string = useQueryString;
	this.callFlash("SetUseQueryString", [useQueryString]);
};

// Public: setRequeueOnError changes the requeue_on_error setting
SWFUpload.prototype.setRequeueOnError = function (requeueOnError) {
	this.settings.requeue_on_error = requeueOnError;
	this.callFlash("SetRequeueOnError", [requeueOnError]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setHTTPSuccess = function (http_status_codes) {
	if (typeof http_status_codes === "string") {
		http_status_codes = http_status_codes.replace(" ", "").split(",");
	}
	
	this.settings.http_success = http_status_codes;
	this.callFlash("SetHTTPSuccess", [http_status_codes]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setAssumeSuccessTimeout = function (timeout_seconds) {
	this.settings.assume_success_timeout = timeout_seconds;
	this.callFlash("SetAssumeSuccessTimeout", [timeout_seconds]);
};

// Public: setDebugEnabled changes the debug_enabled setting
SWFUpload.prototype.setDebugEnabled = function (debugEnabled) {
	this.settings.debug_enabled = debugEnabled;
	this.callFlash("SetDebugEnabled", [debugEnabled]);
};

// Public: setButtonImageURL loads a button image sprite
SWFUpload.prototype.setButtonImageURL = function (buttonImageURL) {
	if (buttonImageURL == undefined) {
		buttonImageURL = "";
	}
	
	this.settings.button_image_url = buttonImageURL;
	this.callFlash("SetButtonImageURL", [buttonImageURL]);
};

// Public: setButtonDimensions resizes the Flash Movie and button
SWFUpload.prototype.setButtonDimensions = function (width, height) {
	this.settings.button_width = width;
	this.settings.button_height = height;
	
	var movie = this.getMovieElement();
	if (movie != undefined) {
		movie.style.width = width + "px";
		movie.style.height = height + "px";
	}
	
	this.callFlash("SetButtonDimensions", [width, height]);
};
// Public: setButtonText Changes the text overlaid on the button
SWFUpload.prototype.setButtonText = function (html) {
	this.settings.button_text = html;
	this.callFlash("SetButtonText", [html]);
};
// Public: setButtonTextPadding changes the top and left padding of the text overlay
SWFUpload.prototype.setButtonTextPadding = function (left, top) {
	this.settings.button_text_top_padding = top;
	this.settings.button_text_left_padding = left;
	this.callFlash("SetButtonTextPadding", [left, top]);
};

// Public: setButtonTextStyle changes the CSS used to style the HTML/Text overlaid on the button
SWFUpload.prototype.setButtonTextStyle = function (css) {
	this.settings.button_text_style = css;
	this.callFlash("SetButtonTextStyle", [css]);
};
// Public: setButtonDisabled disables/enables the button
SWFUpload.prototype.setButtonDisabled = function (isDisabled) {
	this.settings.button_disabled = isDisabled;
	this.callFlash("SetButtonDisabled", [isDisabled]);
};
// Public: setButtonAction sets the action that occurs when the button is clicked
SWFUpload.prototype.setButtonAction = function (buttonAction) {
	this.settings.button_action = buttonAction;
	this.callFlash("SetButtonAction", [buttonAction]);
};

// Public: setButtonCursor changes the mouse cursor displayed when hovering over the button
SWFUpload.prototype.setButtonCursor = function (cursor) {
	this.settings.button_cursor = cursor;
	this.callFlash("SetButtonCursor", [cursor]);
};

/* *******************************
	Flash Event Interfaces
	These functions are used by Flash to trigger the various
	events.
	
	All these functions a Private.
	
	Because the ExternalInterface library is buggy the event calls
	are added to a queue and the queue then executed by a setTimeout.
	This ensures that events are executed in a determinate order and that
	the ExternalInterface bugs are avoided.
******************************* */

SWFUpload.prototype.queueEvent = function (handlerName, argumentArray) {
	// Warning: Don't call this.debug inside here or you'll create an infinite loop
	
	if (argumentArray == undefined) {
		argumentArray = [];
	} else if (!(argumentArray instanceof Array)) {
		argumentArray = [argumentArray];
	}
	
	var self = this;
	if (typeof this.settings[handlerName] === "function") {
		// Queue the event
		this.eventQueue.push(function () {
			this.settings[handlerName].apply(this, argumentArray);
		});
		
		// Execute the next queued event
		setTimeout(function () {
			self.executeNextEvent();
		}, 0);
		
	} else if (this.settings[handlerName] !== null) {
		throw "Event handler " + handlerName + " is unknown or is not a function";
	}
};

// Private: Causes the next event in the queue to be executed.  Since events are queued using a setTimeout
// we must queue them in order to garentee that they are executed in order.
SWFUpload.prototype.executeNextEvent = function () {
	// Warning: Don't call this.debug inside here or you'll create an infinite loop

	var  f = this.eventQueue ? this.eventQueue.shift() : null;
	if (typeof(f) === "function") {
		f.apply(this);
	}
};

// Private: unescapeFileParams is part of a workaround for a flash bug where objects passed through ExternalInterface cannot have
// properties that contain characters that are not valid for JavaScript identifiers. To work around this
// the Flash Component escapes the parameter names and we must unescape again before passing them along.
SWFUpload.prototype.unescapeFilePostParams = function (file) {
	var reg = /[$]([0-9a-f]{4})/i;
	var unescapedPost = {};
	var uk;

	if (file != undefined) {
		for (var k in file.post) {
			if (file.post.hasOwnProperty(k)) {
				uk = k;
				var match;
				while ((match = reg.exec(uk)) !== null) {
					uk = uk.replace(match[0], String.fromCharCode(parseInt("0x" + match[1], 16)));
				}
				unescapedPost[uk] = file.post[k];
			}
		}

		file.post = unescapedPost;
	}

	return file;
};

// Private: Called by Flash to see if JS can call in to Flash (test if External Interface is working)
SWFUpload.prototype.testExternalInterface = function () {
	try {
		return this.callFlash("TestExternalInterface");
	} catch (ex) {
		return false;
	}
};

// Private: This event is called by Flash when it has finished loading. Don't modify this.
// Use the swfupload_loaded_handler event setting to execute custom code when SWFUpload has loaded.
SWFUpload.prototype.flashReady = function () {
	// Check that the movie element is loaded correctly with its ExternalInterface methods defined
	var movieElement = this.getMovieElement();

	if (!movieElement) {
		this.debug("Flash called back ready but the flash movie can't be found.");
		return;
	}

	this.cleanUp(movieElement);
	
	this.queueEvent("swfupload_loaded_handler");
};

// Private: removes Flash added fuctions to the DOM node to prevent memory leaks in IE.
// This function is called by Flash each time the ExternalInterface functions are created.
SWFUpload.prototype.cleanUp = function (movieElement) {
	// Pro-actively unhook all the Flash functions
	try {
		if (this.movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");
			for (var key in movieElement) {
				try {
					if (typeof(movieElement[key]) === "function") {
						movieElement[key] = null;
					}
				} catch (ex) {
				}
			}
		}
	} catch (ex1) {
	
	}

	// Fix Flashes own cleanup code so if the SWFMovie was removed from the page
	// it doesn't display errors.
	window["__flash__removeCallback"] = function (instance, name) {
		try {
			if (instance) {
				instance[name] = null;
			}
		} catch (flashEx) {
		
		}
	};

};


/* This is a chance to do something before the browse window opens */
SWFUpload.prototype.fileDialogStart = function () {
	this.queueEvent("file_dialog_start_handler");
};


/* Called when a file is successfully added to the queue. */
SWFUpload.prototype.fileQueued = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("file_queued_handler", file);
};


/* Handle errors that occur when an attempt to queue a file fails. */
SWFUpload.prototype.fileQueueError = function (file, errorCode, message) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("file_queue_error_handler", [file, errorCode, message]);
};

/* Called after the file dialog has closed and the selected files have been queued.
	You could call startUpload here if you want the queued files to begin uploading immediately. */
SWFUpload.prototype.fileDialogComplete = function (numFilesSelected, numFilesQueued, numFilesInQueue) {
	this.queueEvent("file_dialog_complete_handler", [numFilesSelected, numFilesQueued, numFilesInQueue]);
};

SWFUpload.prototype.uploadStart = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("return_upload_start_handler", file);
};

SWFUpload.prototype.returnUploadStart = function (file) {
	var returnValue;
	if (typeof this.settings.upload_start_handler === "function") {
		file = this.unescapeFilePostParams(file);
		returnValue = this.settings.upload_start_handler.call(this, file);
	} else if (this.settings.upload_start_handler != undefined) {
		throw "upload_start_handler must be a function";
	}

	// Convert undefined to true so if nothing is returned from the upload_start_handler it is
	// interpretted as 'true'.
	if (returnValue === undefined) {
		returnValue = true;
	}
	
	returnValue = !!returnValue;
	
	this.callFlash("ReturnUploadStart", [returnValue]);
};



SWFUpload.prototype.uploadProgress = function (file, bytesComplete, bytesTotal) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_progress_handler", [file, bytesComplete, bytesTotal]);
};

SWFUpload.prototype.uploadError = function (file, errorCode, message) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_error_handler", [file, errorCode, message]);
};

SWFUpload.prototype.uploadSuccess = function (file, serverData, responseReceived) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_success_handler", [file, serverData, responseReceived]);
};

SWFUpload.prototype.uploadComplete = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_complete_handler", file);
};

/* Called by SWFUpload JavaScript and Flash functions when debug is enabled. By default it writes messages to the
   internal debug console.  You can override this event and have messages written where you want. */
SWFUpload.prototype.debug = function (message) {
	this.queueEvent("debug_handler", message);
};


/* **********************************
	Debug Console
	The debug console is a self contained, in page location
	for debug message to be sent.  The Debug Console adds
	itself to the body if necessary.

	The console is automatically scrolled as messages appear.
	
	If you are using your own debug handler or when you deploy to production and
	have debug disabled you can remove these functions to reduce the file size
	and complexity.
********************************** */
   
// Private: debugMessage is the default debug_handler.  If you want to print debug messages
// call the debug() function.  When overriding the function your own function should
// check to see if the debug setting is true before outputting debug information.
SWFUpload.prototype.debugMessage = function (message) {
	if (this.settings.debug) {
		var exceptionMessage, exceptionValues = [];

		// Check for an exception object and print it nicely
		if (typeof message === "object" && typeof message.name === "string" && typeof message.message === "string") {
			for (var key in message) {
				if (message.hasOwnProperty(key)) {
					exceptionValues.push(key + ": " + message[key]);
				}
			}
			exceptionMessage = exceptionValues.join("\n") || "";
			exceptionValues = exceptionMessage.split("\n");
			exceptionMessage = "EXCEPTION: " + exceptionValues.join("\nEXCEPTION: ");
			SWFUpload.Console.writeLine(exceptionMessage);
		} else {
			SWFUpload.Console.writeLine(message);
		}
	}
};

SWFUpload.Console = {};
SWFUpload.Console.writeLine = function (message) {
	var console, documentForm;

	try {
		console = document.getElementById("SWFUpload_Console");

		if (!console) {
			documentForm = document.createElement("form");
			document.getElementsByTagName("body")[0].appendChild(documentForm);

			console = document.createElement("textarea");
			console.id = "SWFUpload_Console";
			console.style.fontFamily = "monospace";
			console.setAttribute("wrap", "off");
			console.wrap = "off";
			console.style.overflow = "auto";
			console.style.width = "700px";
			console.style.height = "350px";
			console.style.margin = "5px";
			documentForm.appendChild(console);
		}

		console.value += message + "\n";

		console.scrollTop = console.scrollHeight - console.clientHeight;
	} catch (ex) {
		alert("Exception: " + ex.name + " Message: " + ex.message);
	}
};

/*
	Cookie Plug-in
	
	This plug in automatically gets all the cookies for this site and adds them to the post_params.
	Cookies are loaded only on initialization.  The refreshCookies function can be called to update the post_params.
	The cookies will override any other post params with the same name.
*/

var SWFUpload;
if (typeof(SWFUpload) === "function") {
	SWFUpload.prototype.initSettings = function (oldInitSettings) {
		return function () {
			if (typeof(oldInitSettings) === "function") {
				oldInitSettings.call(this);
			}
			
			this.refreshCookies(false);	// The false parameter must be sent since SWFUpload has not initialzed at this point
		};
	}(SWFUpload.prototype.initSettings);
	
	// refreshes the post_params and updates SWFUpload.  The sendToFlash parameters is optional and defaults to True
	SWFUpload.prototype.refreshCookies = function (sendToFlash) {
		if (sendToFlash === undefined) {
			sendToFlash = true;
		}
		sendToFlash = !!sendToFlash;
		
		// Get the post_params object
		var postParams = this.settings.post_params;
		
		// Get the cookies
		var i, cookieArray = document.cookie.split(';'), caLength = cookieArray.length, c, eqIndex, name, value;
		for (i = 0; i < caLength; i++) {
			c = cookieArray[i];
			
			// Left Trim spaces
			while (c.charAt(0) === " ") {
				c = c.substring(1, c.length);
			}
			eqIndex = c.indexOf("=");
			if (eqIndex > 0) {
				name = c.substring(0, eqIndex);
				value = c.substring(eqIndex + 1);
				postParams[name] = value;
			}
		}
		
		if (sendToFlash) {
			this.setPostParams(postParams);
		}
	};

}

/*
	Queue Plug-in
	
	Features:
		*Adds a cancelQueue() method for cancelling the entire queue.
		*All queued files are uploaded when startUpload() is called.
		*If false is returned from uploadComplete then the queue upload is stopped.
		 If false is not returned (strict comparison) then the queue upload is continued.
		*Adds a QueueComplete event that is fired when all the queued files have finished uploading.
		 Set the event handler with the queue_complete_handler setting.
		
	*/

var SWFUpload;
if (typeof(SWFUpload) === "function") {
	SWFUpload.queue = {};
	
	SWFUpload.prototype.initSettings = (function (oldInitSettings) {
		return function () {
			if (typeof(oldInitSettings) === "function") {
				oldInitSettings.call(this);
			}
			
			this.queueSettings = {};
			
			this.queueSettings.queue_cancelled_flag = false;
			this.queueSettings.queue_upload_count = 0;
			
			this.queueSettings.user_upload_complete_handler = this.settings.upload_complete_handler;
			this.queueSettings.user_upload_start_handler = this.settings.upload_start_handler;
			this.settings.upload_complete_handler = SWFUpload.queue.uploadCompleteHandler;
			this.settings.upload_start_handler = SWFUpload.queue.uploadStartHandler;
			
			this.settings.queue_complete_handler = this.settings.queue_complete_handler || null;
		};
	})(SWFUpload.prototype.initSettings);

	SWFUpload.prototype.startUpload = function (fileID) {
		this.queueSettings.queue_cancelled_flag = false;
		this.callFlash("StartUpload", [fileID]);
	};

	SWFUpload.prototype.cancelQueue = function () {
		this.queueSettings.queue_cancelled_flag = true;
		this.stopUpload();
		
		var stats = this.getStats();
		while (stats.files_queued > 0) {
			this.cancelUpload();
			stats = this.getStats();
		}
	};
	
	SWFUpload.queue.uploadStartHandler = function (file) {
		var returnValue;
		if (typeof(this.queueSettings.user_upload_start_handler) === "function") {
			returnValue = this.queueSettings.user_upload_start_handler.call(this, file);
		}
		
		// To prevent upload a real "FALSE" value must be returned, otherwise default to a real "TRUE" value.
		returnValue = (returnValue === false) ? false : true;
		
		this.queueSettings.queue_cancelled_flag = !returnValue;

		return returnValue;
	};
	
	SWFUpload.queue.uploadCompleteHandler = function (file) {
		var user_upload_complete_handler = this.queueSettings.user_upload_complete_handler;
		var continueUpload;
		
		if (file.filestatus === SWFUpload.FILE_STATUS.COMPLETE) {
			this.queueSettings.queue_upload_count++;
		}

		if (typeof(user_upload_complete_handler) === "function") {
			continueUpload = (user_upload_complete_handler.call(this, file) === false) ? false : true;
		} else if (file.filestatus === SWFUpload.FILE_STATUS.QUEUED) {
			// If the file was stopped and re-queued don't restart the upload
			continueUpload = false;
		} else {
			continueUpload = true;
		}
		
		if (continueUpload) {
			var stats = this.getStats();
			if (stats.files_queued > 0 && this.queueSettings.queue_cancelled_flag === false) {
				this.startUpload();
			} else if (this.queueSettings.queue_cancelled_flag === false) {
				this.queueEvent("queue_complete_handler", [this.queueSettings.queue_upload_count]);
				this.queueSettings.queue_upload_count = 0;
			} else {
				this.queueSettings.queue_cancelled_flag = false;
				this.queueSettings.queue_upload_count = 0;
			}
		}
	};
}
/*
	Speed Plug-in
	
	Features:
		*Adds several properties to the 'file' object indicated upload speed, time left, upload time, etc.
			- currentSpeed -- String indicating the upload speed, bytes per second
			- averageSpeed -- Overall average upload speed, bytes per second
			- movingAverageSpeed -- Speed over averaged over the last several measurements, bytes per second
			- timeRemaining -- Estimated remaining upload time in seconds
			- timeElapsed -- Number of seconds passed for this upload
			- percentUploaded -- Percentage of the file uploaded (0 to 100)
			- sizeUploaded -- Formatted size uploaded so far, bytes
		
		*Adds setting 'moving_average_history_size' for defining the window size used to calculate the moving average speed.
		
		*Adds several Formatting functions for formatting that values provided on the file object.
			- SWFUpload.speed.formatBPS(bps) -- outputs string formatted in the best units (Gbps, Mbps, Kbps, bps)
			- SWFUpload.speed.formatTime(seconds) -- outputs string formatted in the best units (x Hr y M z S)
			- SWFUpload.speed.formatSize(bytes) -- outputs string formatted in the best units (w GB x MB y KB z B )
			- SWFUpload.speed.formatPercent(percent) -- outputs string formatted with a percent sign (x.xx %)
			- SWFUpload.speed.formatUnits(baseNumber, divisionArray, unitLabelArray, fractionalBoolean)
				- Formats a number using the division array to determine how to apply the labels in the Label Array
				- factionalBoolean indicates whether the number should be returned as a single fractional number with a unit (speed)
				    or as several numbers labeled with units (time)
	*/

var SWFUpload;
if (typeof(SWFUpload) === "function") {
	SWFUpload.speed = {};
	
	SWFUpload.prototype.initSettings = (function (oldInitSettings) {
		return function () {
			if (typeof(oldInitSettings) === "function") {
				oldInitSettings.call(this);
			}
			
			this.ensureDefault = function (settingName, defaultValue) {
				this.settings[settingName] = (this.settings[settingName] == undefined) ? defaultValue : this.settings[settingName];
			};

			// List used to keep the speed stats for the files we are tracking
			this.fileSpeedStats = {};
			this.speedSettings = {};

			this.ensureDefault("moving_average_history_size", "10");
			
			this.speedSettings.user_file_queued_handler = this.settings.file_queued_handler;
			this.speedSettings.user_file_queue_error_handler = this.settings.file_queue_error_handler;
			this.speedSettings.user_upload_start_handler = this.settings.upload_start_handler;
			this.speedSettings.user_upload_error_handler = this.settings.upload_error_handler;
			this.speedSettings.user_upload_progress_handler = this.settings.upload_progress_handler;
			this.speedSettings.user_upload_success_handler = this.settings.upload_success_handler;
			this.speedSettings.user_upload_complete_handler = this.settings.upload_complete_handler;
			
			this.settings.file_queued_handler = SWFUpload.speed.fileQueuedHandler;
			this.settings.file_queue_error_handler = SWFUpload.speed.fileQueueErrorHandler;
			this.settings.upload_start_handler = SWFUpload.speed.uploadStartHandler;
			this.settings.upload_error_handler = SWFUpload.speed.uploadErrorHandler;
			this.settings.upload_progress_handler = SWFUpload.speed.uploadProgressHandler;
			this.settings.upload_success_handler = SWFUpload.speed.uploadSuccessHandler;
			this.settings.upload_complete_handler = SWFUpload.speed.uploadCompleteHandler;
			
			delete this.ensureDefault;
		};
	})(SWFUpload.prototype.initSettings);

	
	SWFUpload.speed.fileQueuedHandler = function (file) {
		if (typeof this.speedSettings.user_file_queued_handler === "function") {
			file = SWFUpload.speed.extendFile(file);
			
			return this.speedSettings.user_file_queued_handler.call(this, file);
		}
	};
	
	SWFUpload.speed.fileQueueErrorHandler = function (file, errorCode, message) {
		if (typeof this.speedSettings.user_file_queue_error_handler === "function") {
			file = SWFUpload.speed.extendFile(file);
			
			return this.speedSettings.user_file_queue_error_handler.call(this, file, errorCode, message);
		}
	};

	SWFUpload.speed.uploadStartHandler = function (file) {
		if (typeof this.speedSettings.user_upload_start_handler === "function") {
			file = SWFUpload.speed.extendFile(file, this.fileSpeedStats);
			return this.speedSettings.user_upload_start_handler.call(this, file);
		}
	};
	
	SWFUpload.speed.uploadErrorHandler = function (file, errorCode, message) {
		file = SWFUpload.speed.extendFile(file, this.fileSpeedStats);
		SWFUpload.speed.removeTracking(file, this.fileSpeedStats);

		if (typeof this.speedSettings.user_upload_error_handler === "function") {
			return this.speedSettings.user_upload_error_handler.call(this, file, errorCode, message);
		}
	};
	SWFUpload.speed.uploadProgressHandler = function (file, bytesComplete, bytesTotal) {
		this.updateTracking(file, bytesComplete);
		file = SWFUpload.speed.extendFile(file, this.fileSpeedStats);

		if (typeof this.speedSettings.user_upload_progress_handler === "function") {
			return this.speedSettings.user_upload_progress_handler.call(this, file, bytesComplete, bytesTotal);
		}
	};
	
	SWFUpload.speed.uploadSuccessHandler = function (file, serverData) {
		if (typeof this.speedSettings.user_upload_success_handler === "function") {
			file = SWFUpload.speed.extendFile(file, this.fileSpeedStats);
			return this.speedSettings.user_upload_success_handler.call(this, file, serverData);
		}
	};
	SWFUpload.speed.uploadCompleteHandler = function (file) {
		file = SWFUpload.speed.extendFile(file, this.fileSpeedStats);
		SWFUpload.speed.removeTracking(file, this.fileSpeedStats);

		if (typeof this.speedSettings.user_upload_complete_handler === "function") {
			return this.speedSettings.user_upload_complete_handler.call(this, file);
		}
	};
	
	// Private: extends the file object with the speed plugin values
	SWFUpload.speed.extendFile = function (file, trackingList) {
		var tracking;
		
		if (trackingList) {
			tracking = trackingList[file.id];
		}
		
		if (tracking) {
			file.currentSpeed = tracking.currentSpeed;
			file.averageSpeed = tracking.averageSpeed;
			file.movingAverageSpeed = tracking.movingAverageSpeed;
			file.timeRemaining = tracking.timeRemaining;
			file.timeElapsed = tracking.timeElapsed;
			file.percentUploaded = tracking.percentUploaded;
			file.sizeUploaded = tracking.bytesUploaded;

		} else {
			file.currentSpeed = 0;
			file.averageSpeed = 0;
			file.movingAverageSpeed = 0;
			file.timeRemaining = 0;
			file.timeElapsed = 0;
			file.percentUploaded = 0;
			file.sizeUploaded = 0;
		}
		
		return file;
	};
	
	// Private: Updates the speed tracking object, or creates it if necessary
	SWFUpload.prototype.updateTracking = function (file, bytesUploaded) {
		var tracking = this.fileSpeedStats[file.id];
		if (!tracking) {
			this.fileSpeedStats[file.id] = tracking = {};
		}
		
		// Sanity check inputs
		bytesUploaded = bytesUploaded || tracking.bytesUploaded || 0;
		if (bytesUploaded < 0) {
			bytesUploaded = 0;
		}
		if (bytesUploaded > file.size) {
			bytesUploaded = file.size;
		}
		
		var tickTime = (new Date()).getTime();
		if (!tracking.startTime) {
			tracking.startTime = (new Date()).getTime();
			tracking.lastTime = tracking.startTime;
			tracking.currentSpeed = 0;
			tracking.averageSpeed = 0;
			tracking.movingAverageSpeed = 0;
			tracking.movingAverageHistory = [];
			tracking.timeRemaining = 0;
			tracking.timeElapsed = 0;
			tracking.percentUploaded = bytesUploaded / file.size;
			tracking.bytesUploaded = bytesUploaded;
		} else if (tracking.startTime > tickTime) {
			this.debug("When backwards in time");
		} else {
			// Get time and deltas
			var now = (new Date()).getTime();
			var lastTime = tracking.lastTime;
			var deltaTime = now - lastTime;
			var deltaBytes = bytesUploaded - tracking.bytesUploaded;
			
			if (deltaBytes === 0 || deltaTime === 0) {
				return tracking;
			}
			
			// Update tracking object
			tracking.lastTime = now;
			tracking.bytesUploaded = bytesUploaded;
			
			// Calculate speeds
			tracking.currentSpeed = (deltaBytes * 8 ) / (deltaTime / 1000);
			tracking.averageSpeed = (tracking.bytesUploaded * 8) / ((now - tracking.startTime) / 1000);

			// Calculate moving average
			tracking.movingAverageHistory.push(tracking.currentSpeed);
			if (tracking.movingAverageHistory.length > this.settings.moving_average_history_size) {
				tracking.movingAverageHistory.shift();
			}
			
			tracking.movingAverageSpeed = SWFUpload.speed.calculateMovingAverage(tracking.movingAverageHistory);
			
			// Update times
			tracking.timeRemaining = (file.size - tracking.bytesUploaded) * 8 / tracking.movingAverageSpeed;
			tracking.timeElapsed = (now - tracking.startTime) / 1000;
			
			// Update percent
			tracking.percentUploaded = (tracking.bytesUploaded / file.size * 100);
		}
		
		return tracking;
	};
	SWFUpload.speed.removeTracking = function (file, trackingList) {
		try {
			trackingList[file.id] = null;
			delete trackingList[file.id];
		} catch (ex) {
		}
	};
	
	SWFUpload.speed.formatUnits = function (baseNumber, unitDivisors, unitLabels, singleFractional) {
		var i, unit, unitDivisor, unitLabel;

		if (baseNumber === 0) {
			return "0 " + unitLabels[unitLabels.length - 1];
		}
		
		if (singleFractional) {
			unit = baseNumber;
			unitLabel = unitLabels.length >= unitDivisors.length ? unitLabels[unitDivisors.length - 1] : "";
			for (i = 0; i < unitDivisors.length; i++) {
				if (baseNumber >= unitDivisors[i]) {
					unit = (baseNumber / unitDivisors[i]).toFixed(2);
					unitLabel = unitLabels.length >= i ? " " + unitLabels[i] : "";
					break;
				}
			}
			
			return unit + unitLabel;
		} else {
			var formattedStrings = [];
			var remainder = baseNumber;
			
			for (i = 0; i < unitDivisors.length; i++) {
				unitDivisor = unitDivisors[i];
				unitLabel = unitLabels.length > i ? " " + unitLabels[i] : "";
				
				unit = remainder / unitDivisor;
				if (i < unitDivisors.length -1) {
					unit = Math.floor(unit);
				} else {
					unit = unit.toFixed(2);
				}
				if (unit > 0) {
					remainder = remainder % unitDivisor;
					
					formattedStrings.push(unit + unitLabel);
				}
			}
			
			return formattedStrings.join(" ");
		}
	};
	
	SWFUpload.speed.formatBPS = function (baseNumber) {
		var bpsUnits = [1073741824, 1048576, 1024, 1], bpsUnitLabels = ["Gbps", "Mbps", "Kbps", "bps"];
		return SWFUpload.speed.formatUnits(baseNumber, bpsUnits, bpsUnitLabels, true);
	
	};
	SWFUpload.speed.formatTime = function (baseNumber) {
		var timeUnits = [86400, 3600, 60, 1], timeUnitLabels = ["d", "h", "m", "s"];
		return SWFUpload.speed.formatUnits(baseNumber, timeUnits, timeUnitLabels, false);
	
	};
	SWFUpload.speed.formatBytes = function (baseNumber) {
		var sizeUnits = [1073741824, 1048576, 1024, 1], sizeUnitLabels = ["GB", "MB", "KB", "bytes"];
		return SWFUpload.speed.formatUnits(baseNumber, sizeUnits, sizeUnitLabels, true);
	
	};
	SWFUpload.speed.formatPercent = function (baseNumber) {
		return baseNumber.toFixed(2) + " %";
	};
	
	SWFUpload.speed.calculateMovingAverage = function (history) {
		var vals = [], size, sum = 0.0, mean = 0.0, varianceTemp = 0.0, variance = 0.0, standardDev = 0.0;
		var i;
		var mSum = 0, mCount = 0;
		
		size = history.length;
		
		// Check for sufficient data
		if (size >= 8) {
			// Clone the array and Calculate sum of the values 
			for (i = 0; i < size; i++) {
				vals[i] = history[i];
				sum += vals[i];
			}

			mean = sum / size;

			// Calculate variance for the set
			for (i = 0; i < size; i++) {
				varianceTemp += Math.pow((vals[i] - mean), 2);
			}

			variance = varianceTemp / size;
			standardDev = Math.sqrt(variance);
			
			//Standardize the Data
			for (i = 0; i < size; i++) {
				vals[i] = (vals[i] - mean) / standardDev;
			}

			// Calculate the average excluding outliers
			var deviationRange = 2.0;
			for (i = 0; i < size; i++) {
				
				if (vals[i] <= deviationRange && vals[i] >= -deviationRange) {
					mCount++;
					mSum += history[i];
				}
			}
			
		} else {
			// Calculate the average (not enough data points to remove outliers)
			mCount = size;
			for (i = 0; i < size; i++) {
				mSum += history[i];
			}
		}

		return mSum / mCount;
	};
	
}
/*
	SWFUpload.SWFObject Plugin

	Summary:
		This plugin uses SWFObject to embed SWFUpload dynamically in the page.  SWFObject provides accurate Flash Player detection and DOM Ready loading.
		This plugin replaces the Graceful Degradation plugin.

	Features:
		* swfupload_load_failed_hander event
		* swfupload_pre_load_handler event
		* minimum_flash_version setting (default: "9.0.28")
		* SWFUpload.onload event for early loading

	Usage:
		Provide handlers and settings as needed.  When using the SWFUpload.SWFObject plugin you should initialize SWFUploading
		in SWFUpload.onload rather than in window.onload.  When initialized this way SWFUpload can load earlier preventing the UI flicker
		that was seen using the Graceful Degradation plugin.

		<script type="text/javascript">
			var swfu;
			SWFUpload.onload = function () {
				swfu = new SWFUpload({
					minimum_flash_version: "9.0.28",
					swfupload_pre_load_handler: swfuploadPreLoad,
					swfupload_load_failed_handler: swfuploadLoadFailed
				});
			};
		</script>
		
	Notes:
		You must provide set minimum_flash_version setting to "8" if you are using SWFUpload for Flash Player 8.
		The swfuploadLoadFailed event is only fired if the minimum version of Flash Player is not met.  Other issues such as missing SWF files, browser bugs
		 or corrupt Flash Player installations will not trigger this event.
		The swfuploadPreLoad event is fired as soon as the minimum version of Flash Player is found.  It does not wait for SWFUpload to load and can
		 be used to prepare the SWFUploadUI and hide alternate content.
		swfobject's onDomReady event is cross-browser safe but will default to the window.onload event when DOMReady is not supported by the browser.
		 Early DOM Loading is supported in major modern browsers but cannot be guaranteed for every browser ever made.
*/


/* SWFObject v2.1 <http://code.google.com/p/swfobject/>
	Copyright (c) 2007-2008 Geoff Stearns, Michael Williams, and Bobby van der Sluis
	This software is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
*/
var swfobject=function(){var b="undefined",Q="object",n="Shockwave Flash",p="ShockwaveFlash.ShockwaveFlash",P="application/x-shockwave-flash",m="SWFObjectExprInst",j=window,K=document,T=navigator,o=[],N=[],i=[],d=[],J,Z=null,M=null,l=null,e=false,A=false;var h=function(){var v=typeof K.getElementById!=b&&typeof K.getElementsByTagName!=b&&typeof K.createElement!=b,AC=[0,0,0],x=null;if(typeof T.plugins!=b&&typeof T.plugins[n]==Q){x=T.plugins[n].description;if(x&&!(typeof T.mimeTypes!=b&&T.mimeTypes[P]&&!T.mimeTypes[P].enabledPlugin)){x=x.replace(/^.*\s+(\S+\s+\S+$)/,"$1");AC[0]=parseInt(x.replace(/^(.*)\..*$/,"$1"),10);AC[1]=parseInt(x.replace(/^.*\.(.*)\s.*$/,"$1"),10);AC[2]=/r/.test(x)?parseInt(x.replace(/^.*r(.*)$/,"$1"),10):0}}else{if(typeof j.ActiveXObject!=b){var y=null,AB=false;try{y=new ActiveXObject(p+".7")}catch(t){try{y=new ActiveXObject(p+".6");AC=[6,0,21];y.AllowScriptAccess="always"}catch(t){if(AC[0]==6){AB=true}}if(!AB){try{y=new ActiveXObject(p)}catch(t){}}}if(!AB&&y){try{x=y.GetVariable("$version");if(x){x=x.split(" ")[1].split(",");AC=[parseInt(x[0],10),parseInt(x[1],10),parseInt(x[2],10)]}}catch(t){}}}}var AD=T.userAgent.toLowerCase(),r=T.platform.toLowerCase(),AA=/webkit/.test(AD)?parseFloat(AD.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,q=false,z=r?/win/.test(r):/win/.test(AD),w=r?/mac/.test(r):/mac/.test(AD);/*@cc_on q=true;@if(@_win32)z=true;@elif(@_mac)w=true;@end@*/return{w3cdom:v,pv:AC,webkit:AA,ie:q,win:z,mac:w}}();var L=function(){if(!h.w3cdom){return }f(H);if(h.ie&&h.win){try{K.write("<script id=__ie_ondomload defer=true src=//:><\/script>");J=C("__ie_ondomload");if(J){I(J,"onreadystatechange",S)}}catch(q){}}if(h.webkit&&typeof K.readyState!=b){Z=setInterval(function(){if(/loaded|complete/.test(K.readyState)){E()}},10)}if(typeof K.addEventListener!=b){K.addEventListener("DOMContentLoaded",E,null)}R(E)}();function S(){if(J.readyState=="complete"){J.parentNode.removeChild(J);E()}}function E(){if(e){return }if(h.ie&&h.win){var v=a("span");try{var u=K.getElementsByTagName("body")[0].appendChild(v);u.parentNode.removeChild(u)}catch(w){return }}e=true;if(Z){clearInterval(Z);Z=null}var q=o.length;for(var r=0;r<q;r++){o[r]()}}function f(q){if(e){q()}else{o[o.length]=q}}function R(r){if(typeof j.addEventListener!=b){j.addEventListener("load",r,false)}else{if(typeof K.addEventListener!=b){K.addEventListener("load",r,false)}else{if(typeof j.attachEvent!=b){I(j,"onload",r)}else{if(typeof j.onload=="function"){var q=j.onload;j.onload=function(){q();r()}}else{j.onload=r}}}}}function H(){var t=N.length;for(var q=0;q<t;q++){var u=N[q].id;if(h.pv[0]>0){var r=C(u);if(r){N[q].width=r.getAttribute("width")?r.getAttribute("width"):"0";N[q].height=r.getAttribute("height")?r.getAttribute("height"):"0";if(c(N[q].swfVersion)){if(h.webkit&&h.webkit<312){Y(r)}W(u,true)}else{if(N[q].expressInstall&&!A&&c("6.0.65")&&(h.win||h.mac)){k(N[q])}else{O(r)}}}}else{W(u,true)}}}function Y(t){var q=t.getElementsByTagName(Q)[0];if(q){var w=a("embed"),y=q.attributes;if(y){var v=y.length;for(var u=0;u<v;u++){if(y[u].nodeName=="DATA"){w.setAttribute("src",y[u].nodeValue)}else{w.setAttribute(y[u].nodeName,y[u].nodeValue)}}}var x=q.childNodes;if(x){var z=x.length;for(var r=0;r<z;r++){if(x[r].nodeType==1&&x[r].nodeName=="PARAM"){w.setAttribute(x[r].getAttribute("name"),x[r].getAttribute("value"))}}}t.parentNode.replaceChild(w,t)}}function k(w){A=true;var u=C(w.id);if(u){if(w.altContentId){var y=C(w.altContentId);if(y){M=y;l=w.altContentId}}else{M=G(u)}if(!(/%$/.test(w.width))&&parseInt(w.width,10)<310){w.width="310"}if(!(/%$/.test(w.height))&&parseInt(w.height,10)<137){w.height="137"}K.title=K.title.slice(0,47)+" - Flash Player Installation";var z=h.ie&&h.win?"ActiveX":"PlugIn",q=K.title,r="MMredirectURL="+j.location+"&MMplayerType="+z+"&MMdoctitle="+q,x=w.id;if(h.ie&&h.win&&u.readyState!=4){var t=a("div");x+="SWFObjectNew";t.setAttribute("id",x);u.parentNode.insertBefore(t,u);u.style.display="none";var v=function(){u.parentNode.removeChild(u)};I(j,"onload",v)}U({data:w.expressInstall,id:m,width:w.width,height:w.height},{flashvars:r},x)}}function O(t){if(h.ie&&h.win&&t.readyState!=4){var r=a("div");t.parentNode.insertBefore(r,t);r.parentNode.replaceChild(G(t),r);t.style.display="none";var q=function(){t.parentNode.removeChild(t)};I(j,"onload",q)}else{t.parentNode.replaceChild(G(t),t)}}function G(v){var u=a("div");if(h.win&&h.ie){u.innerHTML=v.innerHTML}else{var r=v.getElementsByTagName(Q)[0];if(r){var w=r.childNodes;if(w){var q=w.length;for(var t=0;t<q;t++){if(!(w[t].nodeType==1&&w[t].nodeName=="PARAM")&&!(w[t].nodeType==8)){u.appendChild(w[t].cloneNode(true))}}}}}return u}function U(AG,AE,t){var q,v=C(t);if(v){if(typeof AG.id==b){AG.id=t}if(h.ie&&h.win){var AF="";for(var AB in AG){if(AG[AB]!=Object.prototype[AB]){if(AB.toLowerCase()=="data"){AE.movie=AG[AB]}else{if(AB.toLowerCase()=="styleclass"){AF+=' class="'+AG[AB]+'"'}else{if(AB.toLowerCase()!="classid"){AF+=" "+AB+'="'+AG[AB]+'"'}}}}}var AD="";for(var AA in AE){if(AE[AA]!=Object.prototype[AA]){AD+='<param name="'+AA+'" value="'+AE[AA]+'" />'}}v.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+AF+">"+AD+"</object>";i[i.length]=AG.id;q=C(AG.id)}else{if(h.webkit&&h.webkit<312){var AC=a("embed");AC.setAttribute("type",P);for(var z in AG){if(AG[z]!=Object.prototype[z]){if(z.toLowerCase()=="data"){AC.setAttribute("src",AG[z])}else{if(z.toLowerCase()=="styleclass"){AC.setAttribute("class",AG[z])}else{if(z.toLowerCase()!="classid"){AC.setAttribute(z,AG[z])}}}}}for(var y in AE){if(AE[y]!=Object.prototype[y]){if(y.toLowerCase()!="movie"){AC.setAttribute(y,AE[y])}}}v.parentNode.replaceChild(AC,v);q=AC}else{var u=a(Q);u.setAttribute("type",P);for(var x in AG){if(AG[x]!=Object.prototype[x]){if(x.toLowerCase()=="styleclass"){u.setAttribute("class",AG[x])}else{if(x.toLowerCase()!="classid"){u.setAttribute(x,AG[x])}}}}for(var w in AE){if(AE[w]!=Object.prototype[w]&&w.toLowerCase()!="movie"){F(u,w,AE[w])}}v.parentNode.replaceChild(u,v);q=u}}}return q}function F(t,q,r){var u=a("param");u.setAttribute("name",q);u.setAttribute("value",r);t.appendChild(u)}function X(r){var q=C(r);if(q&&(q.nodeName=="OBJECT"||q.nodeName=="EMBED")){if(h.ie&&h.win){if(q.readyState==4){B(r)}else{j.attachEvent("onload",function(){B(r)})}}else{q.parentNode.removeChild(q)}}}function B(t){var r=C(t);if(r){for(var q in r){if(typeof r[q]=="function"){r[q]=null}}r.parentNode.removeChild(r)}}function C(t){var q=null;try{q=K.getElementById(t)}catch(r){}return q}function a(q){return K.createElement(q)}function I(t,q,r){t.attachEvent(q,r);d[d.length]=[t,q,r]}function c(t){var r=h.pv,q=t.split(".");q[0]=parseInt(q[0],10);q[1]=parseInt(q[1],10)||0;q[2]=parseInt(q[2],10)||0;return(r[0]>q[0]||(r[0]==q[0]&&r[1]>q[1])||(r[0]==q[0]&&r[1]==q[1]&&r[2]>=q[2]))?true:false}function V(v,r){if(h.ie&&h.mac){return }var u=K.getElementsByTagName("head")[0],t=a("style");t.setAttribute("type","text/css");t.setAttribute("media","screen");if(!(h.ie&&h.win)&&typeof K.createTextNode!=b){t.appendChild(K.createTextNode(v+" {"+r+"}"))}u.appendChild(t);if(h.ie&&h.win&&typeof K.styleSheets!=b&&K.styleSheets.length>0){var q=K.styleSheets[K.styleSheets.length-1];if(typeof q.addRule==Q){q.addRule(v,r)}}}function W(t,q){var r=q?"visible":"hidden";if(e&&C(t)){C(t).style.visibility=r}else{V("#"+t,"visibility:"+r)}}function g(s){var r=/[\\\"<>\.;]/;var q=r.exec(s)!=null;return q?encodeURIComponent(s):s}var D=function(){if(h.ie&&h.win){window.attachEvent("onunload",function(){var w=d.length;for(var v=0;v<w;v++){d[v][0].detachEvent(d[v][1],d[v][2])}var t=i.length;for(var u=0;u<t;u++){X(i[u])}for(var r in h){h[r]=null}h=null;for(var q in swfobject){swfobject[q]=null}swfobject=null})}}();return{registerObject:function(u,q,t){if(!h.w3cdom||!u||!q){return }var r={};r.id=u;r.swfVersion=q;r.expressInstall=t?t:false;N[N.length]=r;W(u,false)},getObjectById:function(v){var q=null;if(h.w3cdom){var t=C(v);if(t){var u=t.getElementsByTagName(Q)[0];if(!u||(u&&typeof t.SetVariable!=b)){q=t}else{if(typeof u.SetVariable!=b){q=u}}}}return q},embedSWF:function(x,AE,AB,AD,q,w,r,z,AC){if(!h.w3cdom||!x||!AE||!AB||!AD||!q){return }AB+="";AD+="";if(c(q)){W(AE,false);var AA={};if(AC&&typeof AC===Q){for(var v in AC){if(AC[v]!=Object.prototype[v]){AA[v]=AC[v]}}}AA.data=x;AA.width=AB;AA.height=AD;var y={};if(z&&typeof z===Q){for(var u in z){if(z[u]!=Object.prototype[u]){y[u]=z[u]}}}if(r&&typeof r===Q){for(var t in r){if(r[t]!=Object.prototype[t]){if(typeof y.flashvars!=b){y.flashvars+="&"+t+"="+r[t]}else{y.flashvars=t+"="+r[t]}}}}f(function(){U(AA,y,AE);if(AA.id==AE){W(AE,true)}})}else{if(w&&!A&&c("6.0.65")&&(h.win||h.mac)){A=true;W(AE,false);f(function(){var AF={};AF.id=AF.altContentId=AE;AF.width=AB;AF.height=AD;AF.expressInstall=w;k(AF)})}}},getFlashPlayerVersion:function(){return{major:h.pv[0],minor:h.pv[1],release:h.pv[2]}},hasFlashPlayerVersion:c,createSWF:function(t,r,q){if(h.w3cdom){return U(t,r,q)}else{return undefined}},removeSWF:function(q){if(h.w3cdom){X(q)}},createCSS:function(r,q){if(h.w3cdom){V(r,q)}},addDomLoadEvent:f,addLoadEvent:R,getQueryParamValue:function(v){var u=K.location.search||K.location.hash;if(v==null){return g(u)}if(u){var t=u.substring(1).split("&");for(var r=0;r<t.length;r++){if(t[r].substring(0,t[r].indexOf("="))==v){return g(t[r].substring((t[r].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(A&&M){var q=C(m);if(q){q.parentNode.replaceChild(M,q);if(l){W(l,true);if(h.ie&&h.win){M.style.display="block"}}M=null;l=null;A=false}}}}}();


	
var SWFUpload;
if (typeof(SWFUpload) === "function") {
	SWFUpload.onload = function () {};
	
	swfobject.addDomLoadEvent(function () {
		if (typeof(SWFUpload.onload) === "function") {
			SWFUpload.onload.call(window);
		}
	});
	
	SWFUpload.prototype.initSettings = (function (oldInitSettings) {
		return function () {
			if (typeof(oldInitSettings) === "function") {
				oldInitSettings.call(this);
			}

			this.ensureDefault = function (settingName, defaultValue) {
				this.settings[settingName] = (this.settings[settingName] == undefined) ? defaultValue : this.settings[settingName];
			};

			this.ensureDefault("minimum_flash_version", "9.0.28");
			this.ensureDefault("swfupload_pre_load_handler", null);
			this.ensureDefault("swfupload_load_failed_handler", null);

			delete this.ensureDefault;

		};
	})(SWFUpload.prototype.initSettings);


	SWFUpload.prototype.loadFlash = function (oldLoadFlash) {
		return function () {
			var hasFlash = swfobject.hasFlashPlayerVersion(this.settings.minimum_flash_version);
			
			if (hasFlash) {
				this.queueEvent("swfupload_pre_load_handler");
				if (typeof(oldLoadFlash) === "function") {
					oldLoadFlash.call(this);
				}
			} else {
				this.queueEvent("swfupload_load_failed_handler");
			}
		};
		
	}(SWFUpload.prototype.loadFlash);
			
	SWFUpload.prototype.displayDebugInfo = function (oldDisplayDebugInfo) {
		return function () {
			if (typeof(oldDisplayDebugInfo) === "function") {
				oldDisplayDebugInfo.call(this);
			}
			
			this.debug(
				[
					"SWFUpload.SWFObject Plugin settings:", "\n",
					"\t", "minimum_flash_version:                      ", this.settings.minimum_flash_version, "\n",
					"\t", "swfupload_pre_load_handler assigned:     ", (typeof(this.settings.swfupload_pre_load_handler) === "function").toString(), "\n",
					"\t", "swfupload_load_failed_handler assigned:     ", (typeof(this.settings.swfupload_load_failed_handler) === "function").toString(), "\n",
				].join("")
			);
		};	
	}(SWFUpload.prototype.displayDebugInfo);
}

/**
 * @preserve
 * jquery.layout 1.3.0 - Release Candidate 30.79
 * $Date: 2013-01-12 08:00:00 (Sat, 12 Jan 2013) $
 * $Rev: 303007 $
 *
 * Copyright (c) 2013 Kevin Dalman (http://allpro.net)
 * Based on work by Fabrizio Balliano (http://www.fabrizioballiano.net)
 *
 * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
 * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.
 *
 * SEE: http://layout.jquery-dev.net/LICENSE.txt
 * 
 * Changelog: http://layout.jquery-dev.net/changelog.cfm#1.3.0.rc30.79
 *
 * Docs: http://layout.jquery-dev.net/documentation.html
 * Tips: http://layout.jquery-dev.net/tips.html
 * Help: http://groups.google.com/group/jquery-ui-layout
 */

/* JavaDoc Info: http://code.google.com/closure/compiler/docs/js-for-compiler.html
 * {!Object}    non-nullable type (never NULL)
 * {?string}    nullable type (sometimes NULL) - default for {Object}
 * {number=}    optional parameter
 * {*}          ALL types
 */
/*  TODO for jQ 2.0 
 *  change .andSelf() to .addBack()
 *  $.fn.disableSelection won't work
 */

// NOTE: For best readability, view with a fixed-width font and tabs equal to 4-chars

;(function ($) {

// alias Math methods - used a lot!
var min     = Math.min
,   max     = Math.max
,   round   = Math.floor

,   isStr   =  function (v) { return $.type(v) === "string"; }

    /**
    * @param {!Object}          Instance
    * @param {Array.<string>}   a_fn
    */
,   runPluginCallbacks = function (Instance, a_fn) {
        if ($.isArray(a_fn))
            for (var i=0, c=a_fn.length; i<c; i++) {
                var fn = a_fn[i];
                try {
                    if (isStr(fn)) // 'name' of a function
                        fn = eval(fn);
                    if ($.isFunction(fn))
                        g(fn)( Instance );
                } catch (ex) {}
            }
        function g (f) { return f; }; // compiler hack
    }
;

/*
 *  GENERIC $.layout METHODS - used by all layouts
 */
$.layout = {

    version:    "1.3.rc30.79"
,   revision:   0.033007 // 1.3.0 final = 1.0300 - major(n+).minor(nn)+patch(nn+)

    // $.layout.browser REPLACES $.browser
,   browser:    {} // set below

    // *PREDEFINED* EFFECTS & DEFAULTS 
    // MUST list effect here - OR MUST set an fxSettings option (can be an empty hash: {})
,   effects: {

    //  Pane Open/Close Animations
        slide: {
            all:    { duration:  "fast" } // eg: duration: 1000, easing: "easeOutBounce"
        ,   north:  { direction: "up"   }
        ,   south:  { direction: "down" }
        ,   east:   { direction: "right"}
        ,   west:   { direction: "left" }
        }
    ,   drop: {
            all:    { duration:  "slow" }
        ,   north:  { direction: "up"   }
        ,   south:  { direction: "down" }
        ,   east:   { direction: "right"}
        ,   west:   { direction: "left" }
        }
    ,   scale: {
            all:    { duration: "fast"  }
        }
    //  these are not recommended, but can be used
    ,   blind:      {}
    ,   clip:       {}
    ,   explode:    {}
    ,   fade:       {}
    ,   fold:       {}
    ,   puff:       {}

    //  Pane Resize Animations
    ,   size: {
            all:    { easing:   "swing" }
        }
    }

    // INTERNAL CONFIG DATA - DO NOT CHANGE THIS!
,   config: {
        optionRootKeys: "effects,panes,north,south,west,east,center".split(",")
    ,   allPanes:       "north,south,west,east,center".split(",")
    ,   borderPanes:    "north,south,west,east".split(",")
    ,   oppositeEdge: {
            north:  "south"
        ,   south:  "north"
        ,   east:   "west"
        ,   west:   "east"
        }
    //  offscreen data
    ,   offscreenCSS:   { left: "-99999px", right: "auto" } // used by hide/close if useOffscreenClose=true
    ,   offscreenReset: "offscreenReset" // key used for data
    //  CSS used in multiple places
    ,   hidden:     { visibility: "hidden" }
    ,   visible:    { visibility: "visible" }
    //  layout element settings
    ,   resizers: {
            cssReq: {
                position:   "absolute"
            ,   padding:    0
            ,   margin:     0
            ,   fontSize:   "1px"
            ,   textAlign:  "left"  // to counter-act "center" alignment!
            ,   overflow:   "hidden" // prevent toggler-button from overflowing
            //  SEE $.layout.defaults.zIndexes.resizer_normal
            }
        ,   cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                background: "#DDD"
            ,   border:     "none"
            }
        }
    ,   togglers: {
            cssReq: {
                position:   "absolute"
            ,   display:    "block"
            ,   padding:    0
            ,   margin:     0
            ,   overflow:   "hidden"
            ,   textAlign:  "center"
            ,   fontSize:   "1px"
            ,   cursor:     "pointer"
            ,   zIndex:     1
            }
        ,   cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                background: "#AAA"
            }
        }
    ,   content: {
            cssReq: {
                position:   "relative" /* contain floated or positioned elements */
            }
        ,   cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                overflow:   "auto"
            ,   padding:    "10px"
            }
        ,   cssDemoPane: { // DEMO CSS - REMOVE scrolling from 'pane' when it has a content-div
                overflow:   "hidden"
            ,   padding:    0
            }
        }
    ,   panes: { // defaults for ALL panes - overridden by 'per-pane settings' below
            cssReq: {
                position:   "absolute"
            ,   margin:     0
            //  $.layout.defaults.zIndexes.pane_normal
            }
        ,   cssDemo: { // DEMO CSS - applied if: options.PANE.applyDemoStyles=true
                padding:    "10px"
            ,   background: "#FFF"
            ,   border:     "1px solid #BBB"
            ,   overflow:   "auto"
            }
        }
    ,   north: {
            side:           "top"
        ,   sizeType:       "Height"
        ,   dir:            "horz"
        ,   cssReq: {
                top:        0
            ,   bottom:     "auto"
            ,   left:       0
            ,   right:      0
            ,   width:      "auto"
            //  height:     DYNAMIC
            }
        }
    ,   south: {
            side:           "bottom"
        ,   sizeType:       "Height"
        ,   dir:            "horz"
        ,   cssReq: {
                top:        "auto"
            ,   bottom:     0
            ,   left:       0
            ,   right:      0
            ,   width:      "auto"
            //  height:     DYNAMIC
            }
        }
    ,   east: {
            side:           "right"
        ,   sizeType:       "Width"
        ,   dir:            "vert"
        ,   cssReq: {
                left:       "auto"
            ,   right:      0
            ,   top:        "auto" // DYNAMIC
            ,   bottom:     "auto" // DYNAMIC
            ,   height:     "auto"
            //  width:      DYNAMIC
            }
        }
    ,   west: {
            side:           "left"
        ,   sizeType:       "Width"
        ,   dir:            "vert"
        ,   cssReq: {
                left:       0
            ,   right:      "auto"
            ,   top:        "auto" // DYNAMIC
            ,   bottom:     "auto" // DYNAMIC
            ,   height:     "auto"
            //  width:      DYNAMIC
            }
        }
    ,   center: {
            dir:            "center"
        ,   cssReq: {
                left:       "auto" // DYNAMIC
            ,   right:      "auto" // DYNAMIC
            ,   top:        "auto" // DYNAMIC
            ,   bottom:     "auto" // DYNAMIC
            ,   height:     "auto"
            ,   width:      "auto"
            }
        }
    }

    // CALLBACK FUNCTION NAMESPACE - used to store reusable callback functions
,   callbacks: {}

,   getParentPaneElem: function (el) {
        // must pass either a container or pane element
        var $el = $(el)
        ,   layout = $el.data("layout") || $el.data("parentLayout");
        if (layout) {
            var $cont = layout.container;
            // see if this container is directly-nested inside an outer-pane
            if ($cont.data("layoutPane")) return $cont;
            var $pane = $cont.closest("."+ $.layout.defaults.panes.paneClass);
            // if a pane was found, return it
            if ($pane.data("layoutPane")) return $pane;
        }
        return null;
    }

,   getParentPaneInstance: function (el) {
        // must pass either a container or pane element
        var $pane = $.layout.getParentPaneElem(el);
        return $pane ? $pane.data("layoutPane") : null;
    }

,   getParentLayoutInstance: function (el) {
        // must pass either a container or pane element
        var $pane = $.layout.getParentPaneElem(el);
        return $pane ? $pane.data("parentLayout") : null;
    }

,   getEventObject: function (evt) {
        return typeof evt === "object" && evt.stopPropagation ? evt : null;
    }
,   parsePaneName: function (evt_or_pane) {
        var evt = $.layout.getEventObject( evt_or_pane )
        ,   pane = evt_or_pane;
        if (evt) {
            // ALWAYS stop propagation of events triggered in Layout!
            evt.stopPropagation();
            pane = $(this).data("layoutEdge");
        }
        if (pane && !/^(west|east|north|south|center)$/.test(pane)) {
            $.layout.msg('LAYOUT ERROR - Invalid pane-name: "'+ pane +'"');
            pane = "error";
        }
        return pane;
    }


    // LAYOUT-PLUGIN REGISTRATION
    // more plugins can added beyond this default list
,   plugins: {
        draggable:      !!$.fn.draggable // resizing
    ,   effects: {
            core:       !!$.effects     // animimations (specific effects tested by initOptions)
        ,   slide:      $.effects && ($.effects.slide || ($.effects.effect && $.effects.effect.slide)) // default effect
        }
    }

//  arrays of plugin or other methods to be triggered for events in *each layout* - will be passed 'Instance'
,   onCreate:   []  // runs when layout is just starting to be created - right after options are set
,   onLoad:     []  // runs after layout container and global events init, but before initPanes is called
,   onReady:    []  // runs after initialization *completes* - ie, after initPanes completes successfully
,   onDestroy:  []  // runs after layout is destroyed
,   onUnload:   []  // runs after layout is destroyed OR when page unloads
,   afterOpen:  []  // runs after setAsOpen() completes
,   afterClose: []  // runs after setAsClosed() completes

    /*
    *   GENERIC UTILITY METHODS
    */

    // calculate and return the scrollbar width, as an integer
,   scrollbarWidth:     function () { return window.scrollbarWidth  || $.layout.getScrollbarSize('width'); }
,   scrollbarHeight:    function () { return window.scrollbarHeight || $.layout.getScrollbarSize('height'); }
,   getScrollbarSize:   function (dim) {
        var $c  = $('<div style="position: absolute; top: -10000px; left: -10000px; width: 100px; height: 100px; overflow: scroll;"></div>').appendTo("body");
        var d   = { width: $c.css("width") - $c[0].clientWidth, height: $c.height() - $c[0].clientHeight };
        $c.remove();
        window.scrollbarWidth   = d.width;
        window.scrollbarHeight  = d.height;
        return dim.match(/^(width|height)$/) ? d[dim] : d;
    }


    /**
    * Returns hash container 'display' and 'visibility'
    *
    * @see  $.swap() - swaps CSS, runs callback, resets CSS
    * @param  {!Object}     $E              jQuery element
    * @param  {boolean=}    [force=false]   Run even if display != none
    * @return {!Object}                     Returns current style props, if applicable
    */
,   showInvisibly: function ($E, force) {
        if ($E && $E.length && (force || $E.css("display") === "none")) { // only if not *already hidden*
            var s = $E[0].style
                // save ONLY the 'style' props because that is what we must restore
            ,   CSS = { display: s.display || '', visibility: s.visibility || '' };
            // show element 'invisibly' so can be measured
            $E.css({ display: "block", visibility: "hidden" });
            return CSS;
        }
        return {};
    }

    /**
    * Returns data for setting size of an element (container or a pane).
    *
    * @see  _create(), onWindowResize() for container, plus others for pane
    * @return JSON  Returns a hash of all dimensions: top, bottom, left, right, outerWidth, innerHeight, etc
    */
,   getElementDimensions: function ($E, inset) {
        var
        //  dimensions hash - start with current data IF passed
            d   = { css: {}, inset: {} }
        ,   x   = d.css         // CSS hash
        ,   i   = { bottom: 0 } // TEMP insets (bottom = complier hack)
        ,   N   = $.layout.cssNum
        ,   off = $E.offset()
        ,   b, p, ei            // TEMP border, padding
        ;
        d.offsetLeft = off.left;
        d.offsetTop  = off.top;

        if (!inset) inset = {}; // simplify logic below

        $.each("Left,Right,Top,Bottom".split(","), function (idx, e) { // e = edge
            b = x["border" + e] = $.layout.borderWidth($E, e);
            p = x["padding"+ e] = $.layout.cssNum($E, "padding"+e);
            ei = e.toLowerCase();
            d.inset[ei] = inset[ei] >= 0 ? inset[ei] : p; // any missing insetX value = paddingX
            i[ei] = d.inset[ei] + b; // total offset of content from outer side
        });

        x.width     = $E.width();
        x.height    = $E.height();
        x.top       = N($E,"top",true);
        x.bottom    = N($E,"bottom",true);
        x.left      = N($E,"left",true);
        x.right     = N($E,"right",true);

        d.outerWidth    = $E.outerWidth();
        d.outerHeight   = $E.outerHeight();
        // calc the TRUE inner-dimensions, even in quirks-mode!
        d.innerWidth    = max(0, d.outerWidth  - i.left - i.right);
        d.innerHeight   = max(0, d.outerHeight - i.top  - i.bottom);
        // layoutWidth/Height is used in calcs for manual resizing
        // layoutW/H only differs from innerW/H when in quirks-mode - then is like outerW/H
        d.layoutWidth   = $E.innerWidth();
        d.layoutHeight  = $E.innerHeight();

        //if ($E.prop('tagName') === 'BODY') { debugData( d, $E.prop('tagName') ); } // DEBUG

        //d.visible = $E.is(":visible");// && x.width > 0 && x.height > 0;

        return d;
    }

,   getElementStyles: function ($E, list) {
        var
            CSS = {}
        ,   style   = $E[0].style
        ,   props   = list.split(",")
        ,   sides   = "Top,Bottom,Left,Right".split(",")
        ,   attrs   = "Color,Style,Width".split(",")
        ,   p, s, a, i, j, k
        ;
        for (i=0; i < props.length; i++) {
            p = props[i];
            if (p.match(/(border|padding|margin)$/))
                for (j=0; j < 4; j++) {
                    s = sides[j];
                    if (p === "border")
                        for (k=0; k < 3; k++) {
                            a = attrs[k];
                            CSS[p+s+a] = style[p+s+a];
                        }
                    else
                        CSS[p+s] = style[p+s];
                }
            else
                CSS[p] = style[p];
        };
        return CSS
    }

    /**
    * Return the innerWidth for the current browser/doctype
    *
    * @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()
    * @param  {Array.<Object>}  $E  Must pass a jQuery object - first element is processed
    * @param  {number=}         outerWidth (optional) Can pass a width, allowing calculations BEFORE element is resized
    * @return {number}          Returns the innerWidth of the elem by subtracting padding and borders
    */
,   cssWidth: function ($E, outerWidth) {
        // a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed
        if (outerWidth <= 0) return 0;

        var bs  = !$.layout.browser.boxModel ? "border-box" : $.support.boxSizing ? $E.css("boxSizing") : "content-box"
        ,   b   = $.layout.borderWidth
        ,   n   = $.layout.cssNum
        ,   W   = outerWidth
        ;
        // strip border and/or padding from outerWidth to get CSS Width
        if (bs !== "border-box")
            W -= (b($E, "Left") + b($E, "Right"));
        if (bs === "content-box")
            W -= (n($E, "paddingLeft") + n($E, "paddingRight"));
        return max(0,W);
    }

    /**
    * Return the innerHeight for the current browser/doctype
    *
    * @see  initPanes(), sizeMidPanes(), initHandles(), sizeHandles()
    * @param  {Array.<Object>}  $E  Must pass a jQuery object - first element is processed
    * @param  {number=}         outerHeight  (optional) Can pass a width, allowing calculations BEFORE element is resized
    * @return {number}          Returns the innerHeight of the elem by subtracting padding and borders
    */
,   cssHeight: function ($E, outerHeight) {
        // a 'calculated' outerHeight can be passed so borders and/or padding are removed if needed
        if (outerHeight <= 0) return 0;

        var bs  = !$.layout.browser.boxModel ? "border-box" : $.support.boxSizing ? $E.css("boxSizing") : "content-box"
        ,   b   = $.layout.borderWidth
        ,   n   = $.layout.cssNum
        ,   H   = outerHeight
        ;
        // strip border and/or padding from outerHeight to get CSS Height
        if (bs !== "border-box")
            H -= (b($E, "Top") + b($E, "Bottom"));
        if (bs === "content-box")
            H -= (n($E, "paddingTop") + n($E, "paddingBottom"));
        return max(0,H);
    }

    /**
    * Returns the 'current CSS numeric value' for a CSS property - 0 if property does not exist
    *
    * @see  Called by many methods
    * @param {Array.<Object>}   $E                  Must pass a jQuery object - first element is processed
    * @param {string}           prop                The name of the CSS property, eg: top, width, etc.
    * @param {boolean=}         [allowAuto=false]   true = return 'auto' if that is value; false = return 0
    * @return {(string|number)}                     Usually used to get an integer value for position (top, left) or size (height, width)
    */
,   cssNum: function ($E, prop, allowAuto) {
        if (!$E.jquery) $E = $($E);
        var CSS = $.layout.showInvisibly($E)
        ,   p   = $.css($E[0], prop, true)
        ,   v   = allowAuto && p=="auto" ? p : Math.round(parseFloat(p) || 0);
        $E.css( CSS ); // RESET
        return v;
    }

,   borderWidth: function (el, side) {
        if (el.jquery) el = el[0];
        var b = "border"+ side.substr(0,1).toUpperCase() + side.substr(1); // left => Left
        return $.css(el, b+"Style", true) === "none" ? 0 : Math.round(parseFloat($.css(el, b+"Width", true)) || 0);
    }

    /**
    * Mouse-tracking utility - FUTURE REFERENCE
    *
    * init: if (!window.mouse) {
    *           window.mouse = { x: 0, y: 0 };
    *           $(document).mousemove( $.layout.trackMouse );
    *       }
    *
    * @param {Object}       evt
    *
,   trackMouse: function (evt) {
        window.mouse = { x: evt.clientX, y: evt.clientY };
    }
    */

    /**
    * SUBROUTINE for preventPrematureSlideClose option
    *
    * @param {Object}       evt
    * @param {Object=}      el
    */
,   isMouseOverElem: function (evt, el) {
        var
            $E  = $(el || this)
        ,   d   = $E.offset()
        ,   T   = d.top
        ,   L   = d.left
        ,   R   = L + $E.outerWidth()
        ,   B   = T + $E.outerHeight()
        ,   x   = evt.pageX // evt.clientX ?
        ,   y   = evt.pageY // evt.clientY ?
        ;
        // if X & Y are < 0, probably means is over an open SELECT
        return ($.layout.browser.msie && x < 0 && y < 0) || ((x >= L && x <= R) && (y >= T && y <= B));
    }

    /**
    * Message/Logging Utility
    *
    * @example $.layout.msg("My message");              // log text
    * @example $.layout.msg("My message", true);        // alert text
    * @example $.layout.msg({ foo: "bar" }, "Title");   // log hash-data, with custom title
    * @example $.layout.msg({ foo: "bar" }, true, "Title", { sort: false }); -OR-
    * @example $.layout.msg({ foo: "bar" }, "Title", { sort: false, display: true }); // alert hash-data
    *
    * @param {(Object|string)}          info            String message OR Hash/Array
    * @param {(Boolean|string|Object)=} [popup=false]   True means alert-box - can be skipped
    * @param {(Object|string)=}         [debugTitle=""] Title for Hash data - can be skipped
    * @param {Object=}                  [debugOpts]     Extra options for debug output
    */
,   msg: function (info, popup, debugTitle, debugOpts) {
        if ($.isPlainObject(info) && window.debugData) {
            if (typeof popup === "string") {
                debugOpts   = debugTitle;
                debugTitle  = popup;
            }
            else if (typeof debugTitle === "object") {
                debugOpts   = debugTitle;
                debugTitle  = null;
            }
            var t = debugTitle || "log( <object> )"
            ,   o = $.extend({ sort: false, returnHTML: false, display: false }, debugOpts);
            if (popup === true || o.display)
                debugData( info, t, o );
            else if (window.console)
                console.log(debugData( info, t, o ));
        }
        else if (popup)
            alert(info);
        else if (window.console)
            console.log(info);
        else {
            var id  = "#layoutLogger"
            ,   $l = $(id);
            if (!$l.length)
                $l = createLog();
            $l.children("ul").append('<li style="padding: 4px 10px; margin: 0; border-top: 1px solid #CCC;">'+ info.replace(/\</g,"&lt;").replace(/\>/g,"&gt;") +'</li>');
        }

        function createLog () {
            var pos = $.support.fixedPosition ? 'fixed' : 'absolute'
            ,   $e = $('<div id="layoutLogger" style="position: '+ pos +'; top: 5px; z-index: 999999; max-width: 25%; overflow: hidden; border: 1px solid #000; border-radius: 5px; background: #FBFBFB; box-shadow: 0 2px 10px rgba(0,0,0,0.3);">'
                +   '<div style="font-size: 13px; font-weight: bold; padding: 5px 10px; background: #F6F6F6; border-radius: 5px 5px 0 0; cursor: move;">'
                +   '<span style="float: right; padding-left: 7px; cursor: pointer;" title="Remove Console" onclick="$(this).closest(\'#layoutLogger\').remove()">X</span>Layout console.log</div>'
                +   '<ul style="font-size: 13px; font-weight: none; list-style: none; margin: 0; padding: 0 0 2px;"></ul>'
                + '</div>'
                ).appendTo("body");
            $e.css('left', $(window).width() - $e.outerWidth() - 5)
            if ($.ui.draggable) $e.draggable({ handle: ':first-child' });
            return $e;
        };
    }

};


/*
 *  $.layout.browser REPLACES removed $.browser, with extra data
 *  Parsing code here adapted from jQuery 1.8 $.browse
 */
var u = navigator.userAgent.toLowerCase()
,   m = /(chrome)[ \/]([\w.]+)/.exec( u )
    ||  /(webkit)[ \/]([\w.]+)/.exec( u )
    ||  /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( u )
    ||  /(msie) ([\w.]+)/.exec( u )
    ||  u.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( u )
    ||  []
,   b = m[1] || ""
,   v = m[2] || 0
,   ie = b === "msie"
;
$.layout.browser = {
    version:    v
,   safari:     b === "webkit"  // webkit (NOT chrome) = safari
,   webkit:     b === "chrome"  // chrome = webkit
,   msie:       ie
,   isIE6:      ie && v == 6
    // ONLY IE reverts to old box-model - update for older jQ onReady
,   boxModel:   !ie || $.support.boxModel !== false
};
if (b) $.layout.browser[b] = true; // set CURRENT browser
/*  OLD versions of jQuery only set $.support.boxModel after page is loaded
 *  so if this is IE, use support.boxModel to test for quirks-mode (ONLY IE changes boxModel) */
if (ie) $(function(){ $.layout.browser.boxModel = $.support.boxModel; });


// DEFAULT OPTIONS
$.layout.defaults = {
/*
 *  LAYOUT & LAYOUT-CONTAINER OPTIONS
 *  - none of these options are applicable to individual panes
 */
    name:                       ""          // Not required, but useful for buttons and used for the state-cookie
,   containerClass:             "ui-layout-container" // layout-container element
,   inset:                      null        // custom container-inset values (override padding)
,   scrollToBookmarkOnLoad:     true        // after creating a layout, scroll to bookmark in URL (.../page.htm#myBookmark)
,   resizeWithWindow:           true        // bind thisLayout.resizeAll() to the window.resize event
,   resizeWithWindowDelay:      200         // delay calling resizeAll because makes window resizing very jerky
,   resizeWithWindowMaxDelay:   0           // 0 = none - force resize every XX ms while window is being resized
,   maskPanesEarly:             false       // true = create pane-masks on resizer.mouseDown instead of waiting for resizer.dragstart
,   onresizeall_start:          null        // CALLBACK when resizeAll() STARTS - NOT pane-specific
,   onresizeall_end:            null        // CALLBACK when resizeAll() ENDS   - NOT pane-specific
,   onload_start:               null        // CALLBACK when Layout inits - after options initialized, but before elements
,   onload_end:                 null        // CALLBACK when Layout inits - after EVERYTHING has been initialized
,   onunload_start:             null        // CALLBACK when Layout is destroyed OR onWindowUnload
,   onunload_end:               null        // CALLBACK when Layout is destroyed OR onWindowUnload
,   initPanes:                  true        // false = DO NOT initialize the panes onLoad - will init later
,   showErrorMessages:          true        // enables fatal error messages to warn developers of common errors
,   showDebugMessages:          false       // display console-and-alert debug msgs - IF this Layout version _has_ debugging code!
//  Changing this zIndex value will cause other zIndex values to automatically change
,   zIndex:                     null        // the PANE zIndex - resizers and masks will be +1
//  DO NOT CHANGE the zIndex values below unless you clearly understand their relationships
,   zIndexes: {                             // set _default_ z-index values here...
        pane_normal:            0           // normal z-index for panes
    ,   content_mask:           1           // applied to overlays used to mask content INSIDE panes during resizing
    ,   resizer_normal:         2           // normal z-index for resizer-bars
    ,   pane_sliding:           100         // applied to *BOTH* the pane and its resizer when a pane is 'slid open'
    ,   pane_animate:           1000        // applied to the pane when being animated - not applied to the resizer
    ,   resizer_drag:           10000       // applied to the CLONED resizer-bar when being 'dragged'
    }
,   errors: {
        pane:                   "pane"      // description of "layout pane element" - used only in error messages
    ,   selector:               "selector"  // description of "jQuery-selector" - used only in error messages
    ,   addButtonError:         "Error Adding Button\nInvalid "
    ,   containerMissing:       "UI Layout Initialization Error\nThe specified layout-container does not exist."
    ,   centerPaneMissing:      "UI Layout Initialization Error\nThe center-pane element does not exist.\nThe center-pane is a required element."
    ,   noContainerHeight:      "UI Layout Initialization Warning\nThe layout-container \"CONTAINER\" has no height.\nTherefore the layout is 0-height and hence 'invisible'!"
    ,   callbackError:          "UI Layout Callback Error\nThe EVENT callback is not a valid function."
    }
/*
 *  PANE DEFAULT SETTINGS
 *  - settings under the 'panes' key become the default settings for *all panes*
 *  - ALL pane-options can also be set specifically for each panes, which will override these 'default values'
 */
,   panes: { // default options for 'all panes' - will be overridden by 'per-pane settings'
        applyDemoStyles:        false       // NOTE: renamed from applyDefaultStyles for clarity
    ,   closable:               true        // pane can open & close
    ,   resizable:              true        // when open, pane can be resized 
    ,   slidable:               true        // when closed, pane can 'slide open' over other panes - closes on mouse-out
    ,   initClosed:             false       // true = init pane as 'closed'
    ,   initHidden:             false       // true = init pane as 'hidden' - no resizer-bar/spacing
    //  SELECTORS
    //, paneSelector:           ""          // MUST be pane-specific - jQuery selector for pane
    ,   contentSelector:        ".ui-layout-content" // INNER div/element to auto-size so only it scrolls, not the entire pane!
    ,   contentIgnoreSelector:  ".ui-layout-ignore" // element(s) to 'ignore' when measuring 'content'
    ,   findNestedContent:      false       // true = $P.find(contentSelector), false = $P.children(contentSelector)
    //  GENERIC ROOT-CLASSES - for auto-generated classNames
    ,   paneClass:              "ui-layout-pane"    // Layout Pane
    ,   resizerClass:           "ui-layout-resizer" // Resizer Bar
    ,   togglerClass:           "ui-layout-toggler" // Toggler Button
    ,   buttonClass:            "ui-layout-button"  // CUSTOM Buttons   - eg: '[ui-layout-button]-toggle/-open/-close/-pin'
    //  ELEMENT SIZE & SPACING
    //, size:                   100         // MUST be pane-specific -initial size of pane
    ,   minSize:                0           // when manually resizing a pane
    ,   maxSize:                0           // ditto, 0 = no limit
    ,   spacing_open:           6           // space between pane and adjacent panes - when pane is 'open'
    ,   spacing_closed:         6           // ditto - when pane is 'closed'
    ,   togglerLength_open:     50          // Length = WIDTH of toggler button on north/south sides - HEIGHT on east/west sides
    ,   togglerLength_closed:   50          // 100% OR -1 means 'full height/width of resizer bar' - 0 means 'hidden'
    ,   togglerAlign_open:      "center"    // top/left, bottom/right, center, OR...
    ,   togglerAlign_closed:    "center"    // 1 => nn = offset from top/left, -1 => -nn == offset from bottom/right
    ,   togglerContent_open:    ""          // text or HTML to put INSIDE the toggler
    ,   togglerContent_closed:  ""          // ditto
    //  RESIZING OPTIONS
    ,   resizerDblClickToggle:  true        // 
    ,   autoResize:             true        // IF size is 'auto' or a percentage, then recalc 'pixel size' whenever the layout resizes
    ,   autoReopen:             true        // IF a pane was auto-closed due to noRoom, reopen it when there is room? False = leave it closed
    ,   resizerDragOpacity:     1           // option for ui.draggable
    //, resizerCursor:          ""          // MUST be pane-specific - cursor when over resizer-bar
    ,   maskContents:           false       // true = add DIV-mask over-or-inside this pane so can 'drag' over IFRAMES
    ,   maskObjects:            false       // true = add IFRAME-mask over-or-inside this pane to cover objects/applets - content-mask will overlay this mask
    ,   maskZindex:             null        // will override zIndexes.content_mask if specified - not applicable to iframe-panes
    ,   resizingGrid:           false       // grid size that the resizers will snap-to during resizing, eg: [20,20]
    ,   livePaneResizing:       false       // true = LIVE Resizing as resizer is dragged
    ,   liveContentResizing:    false       // true = re-measure header/footer heights as resizer is dragged
    ,   liveResizingTolerance:  1           // how many px change before pane resizes, to control performance
    //  SLIDING OPTIONS
    ,   sliderCursor:           "pointer"   // cursor when resizer-bar will trigger 'sliding'
    ,   slideTrigger_open:      "click"     // click, dblclick, mouseenter
    ,   slideTrigger_close:     "mouseleave"// click, mouseleave
    ,   slideDelay_open:        300         // applies only for mouseenter event - 0 = instant open
    ,   slideDelay_close:       300         // applies only for mouseleave event (300ms is the minimum!)
    ,   hideTogglerOnSlide:     false       // when pane is slid-open, should the toggler show?
    ,   preventQuickSlideClose: $.layout.browser.webkit // Chrome triggers slideClosed as it is opening
    ,   preventPrematureSlideClose: false   // handle incorrect mouseleave trigger, like when over a SELECT-list in IE
    //  PANE-SPECIFIC TIPS & MESSAGES
    ,   tips: {
            Open:               "Open"      // eg: "Open Pane"
        ,   Close:              "Close"
        ,   Resize:             "Resize"
        ,   Slide:              "Slide Open"
        ,   Pin:                "Pin"
        ,   Unpin:              "Un-Pin"
        ,   noRoomToOpen:       "Not enough room to show this panel."   // alert if user tries to open a pane that cannot
        ,   minSizeWarning:     "Panel has reached its minimum size"    // displays in browser statusbar
        ,   maxSizeWarning:     "Panel has reached its maximum size"    // ditto
        }
    //  HOT-KEYS & MISC
    ,   showOverflowOnHover:    false       // will bind allowOverflow() utility to pane.onMouseOver
    ,   enableCursorHotkey:     true        // enabled 'cursor' hotkeys
    //, customHotkey:           ""          // MUST be pane-specific - EITHER a charCode OR a character
    ,   customHotkeyModifier:   "SHIFT"     // either 'SHIFT', 'CTRL' or 'CTRL+SHIFT' - NOT 'ALT'
    //  PANE ANIMATION
    //  NOTE: fxSss_open, fxSss_close & fxSss_size options (eg: fxName_open) are auto-generated if not passed
    ,   fxName:                 "slide"     // ('none' or blank), slide, drop, scale -- only relevant to 'open' & 'close', NOT 'size'
    ,   fxSpeed:                null        // slow, normal, fast, 200, nnn - if passed, will OVERRIDE fxSettings.duration
    ,   fxSettings:             {}          // can be passed, eg: { easing: "easeOutBounce", duration: 1500 }
    ,   fxOpacityFix:           true        // tries to fix opacity in IE to restore anti-aliasing after animation
    ,   animatePaneSizing:      false       // true = animate resizing after dragging resizer-bar OR sizePane() is called
    /*  NOTE: Action-specific FX options are auto-generated from the options above if not specifically set:
        fxName_open:            "slide"     // 'Open' pane animation
        fnName_close:           "slide"     // 'Close' pane animation
        fxName_size:            "slide"     // 'Size' pane animation - when animatePaneSizing = true
        fxSpeed_open:           null
        fxSpeed_close:          null
        fxSpeed_size:           null
        fxSettings_open:        {}
        fxSettings_close:       {}
        fxSettings_size:        {}
    */
    //  CHILD/NESTED LAYOUTS
    ,   children:               null        // Layout-options for nested/child layout - even {} is valid as options
    ,   containerSelector:      ''          // if child is NOT 'directly nested', a selector to find it/them (can have more than one child layout!)
    ,   initChildren:           true        // true = child layout will be created as soon as _this_ layout completes initialization
    ,   destroyChildren:        true        // true = destroy child-layout if this pane is destroyed
    ,   resizeChildren:         true        // true = trigger child-layout.resizeAll() when this pane is resized
    //  EVENT TRIGGERING
    ,   triggerEventsOnLoad:    false       // true = trigger onopen OR onclose callbacks when layout initializes
    ,   triggerEventsDuringLiveResize: true // true = trigger onresize callback REPEATEDLY if livePaneResizing==true
    //  PANE CALLBACKS
    ,   onshow_start:           null        // CALLBACK when pane STARTS to Show    - BEFORE onopen/onhide_start
    ,   onshow_end:             null        // CALLBACK when pane ENDS being Shown  - AFTER  onopen/onhide_end
    ,   onhide_start:           null        // CALLBACK when pane STARTS to Close   - BEFORE onclose_start
    ,   onhide_end:             null        // CALLBACK when pane ENDS being Closed - AFTER  onclose_end
    ,   onopen_start:           null        // CALLBACK when pane STARTS to Open
    ,   onopen_end:             null        // CALLBACK when pane ENDS being Opened
    ,   onclose_start:          null        // CALLBACK when pane STARTS to Close
    ,   onclose_end:            null        // CALLBACK when pane ENDS being Closed
    ,   onresize_start:         null        // CALLBACK when pane STARTS being Resized ***FOR ANY REASON***
    ,   onresize_end:           null        // CALLBACK when pane ENDS being Resized ***FOR ANY REASON***
    ,   onsizecontent_start:    null        // CALLBACK when sizing of content-element STARTS
    ,   onsizecontent_end:      null        // CALLBACK when sizing of content-element ENDS
    ,   onswap_start:           null        // CALLBACK when pane STARTS to Swap
    ,   onswap_end:             null        // CALLBACK when pane ENDS being Swapped
    ,   ondrag_start:           null        // CALLBACK when pane STARTS being ***MANUALLY*** Resized
    ,   ondrag_end:             null        // CALLBACK when pane ENDS being ***MANUALLY*** Resized
    }
/*
 *  PANE-SPECIFIC SETTINGS
 *  - options listed below MUST be specified per-pane - they CANNOT be set under 'panes'
 *  - all options under the 'panes' key can also be set specifically for any pane
 *  - most options under the 'panes' key apply only to 'border-panes' - NOT the the center-pane
 */
,   north: {
        paneSelector:           ".ui-layout-north"
    ,   size:                   "auto"      // eg: "auto", "30%", .30, 200
    ,   resizerCursor:          "n-resize"  // custom = url(myCursor.cur)
    ,   customHotkey:           ""          // EITHER a charCode (43) OR a character ("o")
    }
,   south: {
        paneSelector:           ".ui-layout-south"
    ,   size:                   "auto"
    ,   resizerCursor:          "s-resize"
    ,   customHotkey:           ""
    }
,   east: {
        paneSelector:           ".ui-layout-east"
    ,   size:                   200
    ,   resizerCursor:          "e-resize"
    ,   customHotkey:           ""
    }
,   west: {
        paneSelector:           ".ui-layout-west"
    ,   size:                   200
    ,   resizerCursor:          "w-resize"
    ,   customHotkey:           ""
    }
,   center: {
        paneSelector:           ".ui-layout-center"
    ,   minWidth:               0
    ,   minHeight:              0
    }
};

$.layout.optionsMap = {
    // layout/global options - NOT pane-options
    layout: ("name,instanceKey,stateManagement,effects,inset,zIndexes,errors,"
    +   "zIndex,scrollToBookmarkOnLoad,showErrorMessages,maskPanesEarly,"
    +   "outset,resizeWithWindow,resizeWithWindowDelay,resizeWithWindowMaxDelay,"
    +   "onresizeall,onresizeall_start,onresizeall_end,onload,onload_start,onload_end,onunload,onunload_start,onunload_end").split(",")
//  borderPanes: [ ALL options that are NOT specified as 'layout' ]
    // default.panes options that apply to the center-pane (most options apply _only_ to border-panes)
,   center: ("paneClass,contentSelector,contentIgnoreSelector,findNestedContent,applyDemoStyles,triggerEventsOnLoad,"
    +   "showOverflowOnHover,maskContents,maskObjects,liveContentResizing,"
    +   "containerSelector,children,initChildren,resizeChildren,destroyChildren,"
    +   "onresize,onresize_start,onresize_end,onsizecontent,onsizecontent_start,onsizecontent_end").split(",")
    // options that MUST be specifically set 'per-pane' - CANNOT set in the panes (defaults) key
,   noDefault: ("paneSelector,resizerCursor,customHotkey").split(",")
};

/**
 * Processes options passed in converts flat-format data into subkey (JSON) format
 * In flat-format, subkeys are _currently_ separated with 2 underscores, like north__optName
 * Plugins may also call this method so they can transform their own data
 *
 * @param  {!Object}    hash            Data/options passed by user - may be a single level or nested levels
 * @param  {boolean=}   [addKeys=false] Should the primary layout.options keys be added if they do not exist?
 * @return {Object}                     Returns hash of minWidth & minHeight
 */
$.layout.transformData = function (hash, addKeys) {
    var json = addKeys ? { panes: {}, center: {} } : {} // init return object
    ,   branch, optKey, keys, key, val, i, c;

    if (typeof hash !== "object") return json; // no options passed

    // convert all 'flat-keys' to 'sub-key' format
    for (optKey in hash) {
        branch  = json;
        val     = hash[ optKey ];
        keys    = optKey.split("__"); // eg: west__size or north__fxSettings__duration
        c       = keys.length - 1;
        // convert underscore-delimited to subkeys
        for (i=0; i <= c; i++) {
            key = keys[i];
            if (i === c) {  // last key = value
                if ($.isPlainObject( val ))
                    branch[key] = $.layout.transformData( val ); // RECURSE
                else
                    branch[key] = val;
            }
            else {
                if (!branch[key])
                    branch[key] = {}; // create the subkey
                // recurse to sub-key for next loop - if not done
                branch = branch[key];
            }
        }
    }
    return json;
};

// INTERNAL CONFIG DATA - DO NOT CHANGE THIS!
$.layout.backwardCompatibility = {
    // data used by renameOldOptions()
    map: {
    //  OLD Option Name:            NEW Option Name
        applyDefaultStyles:         "applyDemoStyles"
    //  CHILD/NESTED LAYOUTS
    ,   childOptions:               "children"
    ,   initChildLayout:            "initChildren"
    ,   destroyChildLayout:         "destroyChildren"
    ,   resizeChildLayout:          "resizeChildren"
    ,   resizeNestedLayout:         "resizeChildren"
    //  MISC Options
    ,   resizeWhileDragging:        "livePaneResizing"
    ,   resizeContentWhileDragging: "liveContentResizing"
    ,   triggerEventsWhileDragging: "triggerEventsDuringLiveResize"
    ,   maskIframesOnResize:        "maskContents"
    //  STATE MANAGEMENT
    ,   useStateCookie:             "stateManagement.enabled"
    ,   "cookie.autoLoad":          "stateManagement.autoLoad"
    ,   "cookie.autoSave":          "stateManagement.autoSave"
    ,   "cookie.keys":              "stateManagement.stateKeys"
    ,   "cookie.name":              "stateManagement.cookie.name"
    ,   "cookie.domain":            "stateManagement.cookie.domain"
    ,   "cookie.path":              "stateManagement.cookie.path"
    ,   "cookie.expires":           "stateManagement.cookie.expires"
    ,   "cookie.secure":            "stateManagement.cookie.secure"
    //  OLD Language options
    ,   noRoomToOpenTip:            "tips.noRoomToOpen"
    ,   togglerTip_open:            "tips.Close"    // open   = Close
    ,   togglerTip_closed:          "tips.Open"     // closed = Open
    ,   resizerTip:                 "tips.Resize"
    ,   sliderTip:                  "tips.Slide"
    }

/**
* @param {Object}   opts
*/
,   renameOptions: function (opts) {
        var map = $.layout.backwardCompatibility.map
        ,   oldData, newData, value
        ;
        for (var itemPath in map) {
            oldData = getBranch( itemPath );
            value   = oldData.branch[ oldData.key ];
            if (value !== undefined) {
                newData = getBranch( map[itemPath], true );
                newData.branch[ newData.key ] = value;
                delete oldData.branch[ oldData.key ];
            }
        }

        /**
        * @param {string}   path
        * @param {boolean=} [create=false]  Create path if does not exist
        */
        function getBranch (path, create) {
            var a = path.split(".") // split keys into array
            ,   c = a.length - 1
            ,   D = { branch: opts, key: a[c] } // init branch at top & set key (last item)
            ,   i = 0, k, undef;
            for (; i<c; i++) { // skip the last key (data)
                k = a[i];
                if (D.branch[ k ] == undefined) { // child-key does not exist
                    if (create) {
                        D.branch = D.branch[ k ] = {}; // create child-branch
                    }
                    else // can't go any farther
                        D.branch = {}; // branch is undefined
                }
                else
                    D.branch = D.branch[ k ]; // get child-branch
            }
            return D;
        };
    }

/**
* @param {Object}   opts
*/
,   renameAllOptions: function (opts) {
        var ren = $.layout.backwardCompatibility.renameOptions;
        // rename root (layout) options
        ren( opts );
        // rename 'defaults' to 'panes'
        if (opts.defaults) {
            if (typeof opts.panes !== "object")
                opts.panes = {};
            $.extend(true, opts.panes, opts.defaults);
            delete opts.defaults;
        }
        // rename options in the the options.panes key
        if (opts.panes) ren( opts.panes );
        // rename options inside *each pane key*, eg: options.west
        $.each($.layout.config.allPanes, function (i, pane) {
            if (opts[pane]) ren( opts[pane] );
        }); 
        return opts;
    }
};




/*  ============================================================
 *  BEGIN WIDGET: $( selector ).layout( {options} );
 *  ============================================================
 */
$.fn.layout = function (opts) {
    var

    // local aliases to global data
    browser = $.layout.browser
,   _c      = $.layout.config

    // local aliases to utlity methods
,   cssW    = $.layout.cssWidth
,   cssH    = $.layout.cssHeight
,   elDims  = $.layout.getElementDimensions
,   styles  = $.layout.getElementStyles
,   evtObj  = $.layout.getEventObject
,   evtPane = $.layout.parsePaneName

/**
 * options - populated by initOptions()
 */
,   options = $.extend(true, {}, $.layout.defaults)
,   effects = options.effects = $.extend(true, {}, $.layout.effects)

/**
 * layout-state object
 */
,   state = {
        // generate unique ID to use for event.namespace so can unbind only events added by 'this layout'
        id:             "layout"+ $.now()   // code uses alias: sID
    ,   initialized:    false
    ,   paneResizing:   false
    ,   panesSliding:   {}
    ,   container:  {   // list all keys referenced in code to avoid compiler error msgs
            innerWidth:     0
        ,   innerHeight:    0
        ,   outerWidth:     0
        ,   outerHeight:    0
        ,   layoutWidth:    0
        ,   layoutHeight:   0
        }
    ,   north:      { childIdx: 0 }
    ,   south:      { childIdx: 0 }
    ,   east:       { childIdx: 0 }
    ,   west:       { childIdx: 0 }
    ,   center:     { childIdx: 0 }
    }

/**
 * parent/child-layout pointers
 */
//, hasParentLayout = false - exists ONLY inside Instance so can be set externally
,   children = {
        north:      null
    ,   south:      null
    ,   east:       null
    ,   west:       null
    ,   center:     null
    }

/*
 * ###########################
 *  INTERNAL HELPER FUNCTIONS
 * ###########################
 */

    /**
    * Manages all internal timers
    */
,   timer = {
        data:   {}
    ,   set:    function (s, fn, ms) { timer.clear(s); timer.data[s] = setTimeout(fn, ms); }
    ,   clear:  function (s) { var t=timer.data; if (t[s]) {clearTimeout(t[s]); delete t[s];} }
    }

    /**
    * Alert or console.log a message - IF option is enabled.
    *
    * @param {(string|!Object)} msg             Message (or debug-data) to display
    * @param {boolean=}         [popup=false]   True by default, means 'alert', false means use console.log
    * @param {boolean=}         [debug=false]   True means is a widget debugging message
    */
,   _log = function (msg, popup, debug) {
        var o = options;
        if ((o.showErrorMessages && !debug) || (debug && o.showDebugMessages))
            $.layout.msg( o.name +' / '+ msg, (popup !== false) );
        return false;
    }

    /**
    * Executes a Callback function after a trigger event, like resize, open or close
    *
    * @param {string}               evtName                 Name of the layout callback, eg "onresize_start"
    * @param {(string|boolean)=}    [pane=""]               This is passed only so we can pass the 'pane object' to the callback
    * @param {(string|boolean)=}    [skipBoundEvents=false] True = do not run events bound to the elements - only the callbacks set in options
    */
,   _runCallbacks = function (evtName, pane, skipBoundEvents) {
        var hasPane = pane && isStr(pane)
        ,   s       = hasPane ? state[pane] : state
        ,   o       = hasPane ? options[pane] : options
        ,   lName   = options.name
            // names like onopen and onopen_end separate are interchangeable in options...
        ,   lng     = evtName + (evtName.match(/_/) ? "" : "_end")
        ,   shrt    = lng.match(/_end$/) ? lng.substr(0, lng.length - 4) : ""
        ,   fn      = o[lng] || o[shrt]
        ,   retVal  = "NC" // NC = No Callback
        ,   args    = []
        ,   $P
        ;
        if ( !hasPane && $.type(pane) === 'boolean' ) {
            skipBoundEvents = pane; // allow pane param to be skipped for Layout callback
            pane = "";
        }

        // first trigger the callback set in the options
        if (fn) {
            try {
                // convert function name (string) to function object
                if (isStr( fn )) {
                    if (fn.match(/,/)) {
                        // function name cannot contain a comma, 
                        // so must be a function name AND a parameter to pass
                        args = fn.split(",")
                        ,   fn = eval(args[0]);
                    }
                    else // just the name of an external function?
                        fn = eval(fn);
                }
                // execute the callback, if exists
                if ($.isFunction( fn )) {
                    if (args.length)
                        retVal = g(fn)(args[1]); // pass the argument parsed from 'list'
                    else if ( hasPane )
                        // pass data: pane-name, pane-element, pane-state, pane-options, and layout-name
                        retVal = g(fn)( pane, $Ps[pane], s, o, lName );
                    else // must be a layout/container callback - pass suitable info
                        retVal = g(fn)( Instance, s, o, lName );
                }
            }
            catch (ex) {
                _log( options.errors.callbackError.replace(/EVENT/, $.trim((pane || "") +" "+ lng)), false );
                if ($.type(ex) === 'string' && string.length)
                    _log('Exception:  '+ ex, false );
            }
        }

        // trigger additional events bound directly to the pane
        if (!skipBoundEvents && retVal !== false) {
            if ( hasPane ) { // PANE events can be bound to each pane-elements
                $P  = $Ps[pane];
                o   = options[pane];
                s   = state[pane];
                $P.triggerHandler('layoutpane'+ lng, [ pane, $P, s, o, lName ]);
                if (shrt)
                    $P.triggerHandler('layoutpane'+ shrt, [ pane, $P, s, o, lName ]);
            }
            else { // LAYOUT events can be bound to the container-element
                $N.triggerHandler('layout'+ lng, [ Instance, s, o, lName ]);
                if (shrt)
                    $N.triggerHandler('layout'+ shrt, [ Instance, s, o, lName ]);
            }
        }

        // ALWAYS resizeChildren after an onresize_end event - even during initialization
        // IGNORE onsizecontent_end event because causes child-layouts to resize TWICE
        if (hasPane && evtName === "onresize_end") // BAD: || evtName === "onsizecontent_end"
            resizeChildren(pane+"", true); // compiler hack -force string

        return retVal;

        function g (f) { return f; }; // compiler hack
    }


    /**
    * cure iframe display issues in IE & other browsers
    */
,   _fixIframe = function (pane) {
        if (browser.mozilla) return; // skip FireFox - it auto-refreshes iframes onShow
        var $P = $Ps[pane];
        // if the 'pane' is an iframe, do it
        if (state[pane].tagName === "IFRAME")
            $P.css(_c.hidden).css(_c.visible); 
        else // ditto for any iframes INSIDE the pane
            $P.find('IFRAME').css(_c.hidden).css(_c.visible);
    }

    /**
    * @param  {string}      pane        Can accept ONLY a 'pane' (east, west, etc)
    * @param  {number=}     outerSize   (optional) Can pass a width, allowing calculations BEFORE element is resized
    * @return {number}      Returns the innerHeight/Width of el by subtracting padding and borders
    */
,   cssSize = function (pane, outerSize) {
        var fn = _c[pane].dir=="horz" ? cssH : cssW;
        return fn($Ps[pane], outerSize);
    }

    /**
    * @param  {string}      pane        Can accept ONLY a 'pane' (east, west, etc)
    * @return {Object}      Returns hash of minWidth & minHeight
    */
,   cssMinDims = function (pane) {
        // minWidth/Height means CSS width/height = 1px
        var $P  = $Ps[pane]
        ,   dir = _c[pane].dir
        ,   d   = {
                minWidth:   1001 - cssW($P, 1000)
            ,   minHeight:  1001 - cssH($P, 1000)
            }
        ;
        if (dir === "horz") d.minSize = d.minHeight;
        if (dir === "vert") d.minSize = d.minWidth;
        return d;
    }

    // TODO: see if these methods can be made more useful...
    // TODO: *maybe* return cssW/H from these so caller can use this info

    /**
    * @param {(string|!Object)}     el
    * @param {number=}              outerWidth
    * @param {boolean=}             [autoHide=false]
    */
,   setOuterWidth = function (el, outerWidth, autoHide) {
        var $E = el, w;
        if (isStr(el)) $E = $Ps[el]; // west
        else if (!el.jquery) $E = $(el);
        w = cssW($E, outerWidth);
        $E.css({ width: w });
        if (w > 0) {
            if (autoHide && $E.data('autoHidden') && $E.innerHeight() > 0) {
                $E.show().data('autoHidden', false);
                if (!browser.mozilla) // FireFox refreshes iframes - IE does not
                    // make hidden, then visible to 'refresh' display after animation
                    $E.css(_c.hidden).css(_c.visible);
            }
        }
        else if (autoHide && !$E.data('autoHidden'))
            $E.hide().data('autoHidden', true);
    }

    /**
    * @param {(string|!Object)}     el
    * @param {number=}              outerHeight
    * @param {boolean=}             [autoHide=false]
    */
,   setOuterHeight = function (el, outerHeight, autoHide) {
        var $E = el, h;
        if (isStr(el)) $E = $Ps[el]; // west
        else if (!el.jquery) $E = $(el);
        h = cssH($E, outerHeight);
        $E.css({ height: h, visibility: "visible" }); // may have been 'hidden' by sizeContent
        if (h > 0 && $E.innerWidth() > 0) {
            if (autoHide && $E.data('autoHidden')) {
                $E.show().data('autoHidden', false);
                if (!browser.mozilla) // FireFox refreshes iframes - IE does not
                    $E.css(_c.hidden).css(_c.visible);
            }
        }
        else if (autoHide && !$E.data('autoHidden'))
            $E.hide().data('autoHidden', true);
    }


    /**
    * Converts any 'size' params to a pixel/integer size, if not already
    * If 'auto' or a decimal/percentage is passed as 'size', a pixel-size is calculated
    *
    /**
    * @param  {string}              pane
    * @param  {(string|number)=}    size
    * @param  {string=}             [dir]
    * @return {number}
    */
,   _parseSize = function (pane, size, dir) {
        if (!dir) dir = _c[pane].dir;

        if (isStr(size) && size.match(/%/))
            size = (size === '100%') ? -1 : parseInt(size, 10) / 100; // convert % to decimal

        if (size === 0)
            return 0;
        else if (size >= 1)
            return parseInt(size, 10);

        var o = options, avail = 0;
        if (dir=="horz") // north or south or center.minHeight
            avail = sC.innerHeight - ($Ps.north ? o.north.spacing_open : 0) - ($Ps.south ? o.south.spacing_open : 0);
        else if (dir=="vert") // east or west or center.minWidth
            avail = sC.innerWidth - ($Ps.west ? o.west.spacing_open : 0) - ($Ps.east ? o.east.spacing_open : 0);

        if (size === -1) // -1 == 100%
            return avail;
        else if (size > 0) // percentage, eg: .25
            return round(avail * size);
        else if (pane=="center")
            return 0;
        else { // size < 0 || size=='auto' || size==Missing || size==Invalid
            // auto-size the pane
            var dim = (dir === "horz" ? "height" : "width")
            ,   $P  = $Ps[pane]
            ,   $C  = dim === 'height' ? $Cs[pane] : false
            ,   vis = $.layout.showInvisibly($P) // show pane invisibly if hidden
            ,   szP = $P.css(dim) // SAVE current pane size
            ,   szC = $C ? $C.css(dim) : 0 // SAVE current content size
            ;
            $P.css(dim, "auto");
            if ($C) $C.css(dim, "auto");
            size = (dim === "height") ? $P.outerHeight() : $P.outerWidth(); // MEASURE
            $P.css(dim, szP).css(vis); // RESET size & visibility
            if ($C) $C.css(dim, szC);
            return size;
        }
    }

    /**
    * Calculates current 'size' (outer-width or outer-height) of a border-pane - optionally with 'pane-spacing' added
    *
    * @param  {(string|!Object)}    pane
    * @param  {boolean=}            [inclSpace=false]
    * @return {number}              Returns EITHER Width for east/west panes OR Height for north/south panes
    */
,   getPaneSize = function (pane, inclSpace) {
        var 
            $P  = $Ps[pane]
        ,   o   = options[pane]
        ,   s   = state[pane]
        ,   oSp = (inclSpace ? o.spacing_open : 0)
        ,   cSp = (inclSpace ? o.spacing_closed : 0)
        ;
        if (!$P || s.isHidden)
            return 0;
        else if (s.isClosed || (s.isSliding && inclSpace))
            return cSp;
        else if (_c[pane].dir === "horz")
            return $P.outerHeight() + oSp;
        else // dir === "vert"
            return $P.outerWidth() + oSp;
    }

    /**
    * Calculate min/max pane dimensions and limits for resizing
    *
    * @param  {string}      pane
    * @param  {boolean=}    [slide=false]
    */
,   setSizeLimits = function (pane, slide) {
        if (!isInitialized()) return;
        var 
            o               = options[pane]
        ,   s               = state[pane]
        ,   c               = _c[pane]
        ,   dir             = c.dir
        ,   type            = c.sizeType.toLowerCase()
        ,   isSliding       = (slide != undefined ? slide : s.isSliding) // only open() passes 'slide' param
        ,   $P              = $Ps[pane]
        ,   paneSpacing     = o.spacing_open
        //  measure the pane on the *opposite side* from this pane
        ,   altPane         = _c.oppositeEdge[pane]
        ,   altS            = state[altPane]
        ,   $altP           = $Ps[altPane]
        ,   altPaneSize     = (!$altP || altS.isVisible===false || altS.isSliding ? 0 : (dir=="horz" ? $altP.outerHeight() : $altP.outerWidth()))
        ,   altPaneSpacing  = ((!$altP || altS.isHidden ? 0 : options[altPane][ altS.isClosed !== false ? "spacing_closed" : "spacing_open" ]) || 0)
        //  limitSize prevents this pane from 'overlapping' opposite pane
        ,   containerSize   = (dir=="horz" ? sC.innerHeight : sC.innerWidth)
        ,   minCenterDims   = cssMinDims("center")
        ,   minCenterSize   = dir=="horz" ? max(options.center.minHeight, minCenterDims.minHeight) : max(options.center.minWidth, minCenterDims.minWidth)
        //  if pane is 'sliding', then ignore center and alt-pane sizes - because 'overlays' them
        ,   limitSize       = (containerSize - paneSpacing - (isSliding ? 0 : (_parseSize("center", minCenterSize, dir) + altPaneSize + altPaneSpacing)))
        ,   minSize         = s.minSize = max( _parseSize(pane, o.minSize), cssMinDims(pane).minSize )
        ,   maxSize         = s.maxSize = min( (o.maxSize ? _parseSize(pane, o.maxSize) : 100000), limitSize )
        ,   r               = s.resizerPosition = {} // used to set resizing limits
        ,   top             = sC.inset.top
        ,   left            = sC.inset.left
        ,   W               = sC.innerWidth
        ,   H               = sC.innerHeight
        ,   rW              = o.spacing_open // subtract resizer-width to get top/left position for south/east
        ;
        switch (pane) {
            case "north":   r.min = top + minSize;
                            r.max = top + maxSize;
                            break;
            case "west":    r.min = left + minSize;
                            r.max = left + maxSize;
                            break;
            case "south":   r.min = top + H - maxSize - rW;
                            r.max = top + H - minSize - rW;
                            break;
            case "east":    r.min = left + W - maxSize - rW;
                            r.max = left + W - minSize - rW;
                            break;
        };
    }

    /**
    * Returns data for setting the size/position of center pane. Also used to set Height for east/west panes
    *
    * @return JSON  Returns a hash of all dimensions: top, bottom, left, right, (outer) width and (outer) height
    */
,   calcNewCenterPaneDims = function () {
        var d = {
            top:    getPaneSize("north", true) // true = include 'spacing' value for pane
        ,   bottom: getPaneSize("south", true)
        ,   left:   getPaneSize("west", true)
        ,   right:  getPaneSize("east", true)
        ,   width:  0
        ,   height: 0
        };

        // NOTE: sC = state.container
        // calc center-pane outer dimensions
        d.width     = sC.innerWidth - d.left - d.right;  // outerWidth
        d.height    = sC.innerHeight - d.bottom - d.top; // outerHeight
        // add the 'container border/padding' to get final positions relative to the container
        d.top       += sC.inset.top;
        d.bottom    += sC.inset.bottom;
        d.left      += sC.inset.left;
        d.right     += sC.inset.right;

        return d;
    }


    /**
    * @param {!Object}      el
    * @param {boolean=}     [allStates=false]
    */
,   getHoverClasses = function (el, allStates) {
        var
            $El     = $(el)
        ,   type    = $El.data("layoutRole")
        ,   pane    = $El.data("layoutEdge")
        ,   o       = options[pane]
        ,   root    = o[type +"Class"]
        ,   _pane   = "-"+ pane // eg: "-west"
        ,   _open   = "-open"
        ,   _closed = "-closed"
        ,   _slide  = "-sliding"
        ,   _hover  = "-hover " // NOTE the trailing space
        ,   _state  = $El.hasClass(root+_closed) ? _closed : _open
        ,   _alt    = _state === _closed ? _open : _closed
        ,   classes = (root+_hover) + (root+_pane+_hover) + (root+_state+_hover) + (root+_pane+_state+_hover)
        ;
        if (allStates) // when 'removing' classes, also remove alternate-state classes
            classes += (root+_alt+_hover) + (root+_pane+_alt+_hover);

        if (type=="resizer" && $El.hasClass(root+_slide))
            classes += (root+_slide+_hover) + (root+_pane+_slide+_hover);

        return $.trim(classes);
    }
,   addHover    = function (evt, el) {
        var $E = $(el || this);
        if (evt && $E.data("layoutRole") === "toggler")
            evt.stopPropagation(); // prevent triggering 'slide' on Resizer-bar
        $E.addClass( getHoverClasses($E) );
    }
,   removeHover = function (evt, el) {
        var $E = $(el || this);
        $E.removeClass( getHoverClasses($E, true) );
    }

,   onResizerEnter  = function (evt) { // ALSO called by toggler.mouseenter
        var pane    = $(this).data("layoutEdge")
        ,   s       = state[pane]
        ;
        // ignore closed-panes and mouse moving back & forth over resizer!
        // also ignore if ANY pane is currently resizing
        if ( s.isClosed || s.isResizing || state.paneResizing ) return;

        if ($.fn.disableSelection)
            $("body").disableSelection();
        if (options.maskPanesEarly)
            showMasks( pane, { resizing: true });
    }
,   onResizerLeave  = function (evt, el) {
        var e       = el || this // el is only passed when called by the timer
        ,   pane    = $(e).data("layoutEdge")
        ,   name    = pane +"ResizerLeave"
        ;
        timer.clear(pane+"_openSlider"); // cancel slideOpen timer, if set
        timer.clear(name); // cancel enableSelection timer - may re/set below
        // this method calls itself on a timer because it needs to allow
        // enough time for dragging to kick-in and set the isResizing flag
        // dragging has a 100ms delay set, so this delay must be >100
        if (!el) // 1st call - mouseleave event
            timer.set(name, function(){ onResizerLeave(evt, e); }, 200);
        // if user is resizing, then dragStop will enableSelection(), so can skip it here
        else if ( !state.paneResizing ) { // 2nd call - by timer
            if ($.fn.enableSelection)
                $("body").enableSelection();
            if (options.maskPanesEarly)
                hideMasks();
        }
    }

/*
 * ###########################
 *   INITIALIZATION METHODS
 * ###########################
 */

    /**
    * Initialize the layout - called automatically whenever an instance of layout is created
    *
    * @see  none - triggered onInit
    * @return  mixed    true = fully initialized | false = panes not initialized (yet) | 'cancel' = abort
    */
,   _create = function () {
        // initialize config/options
        initOptions();
        var o = options
        ,   s = state;

        // TEMP state so isInitialized returns true during init process
        s.creatingLayout = true;

        // init plugins for this layout, if there are any (eg: stateManagement)
        runPluginCallbacks( Instance, $.layout.onCreate );

        // options & state have been initialized, so now run beforeLoad callback
        // onload will CANCEL layout creation if it returns false
        if (false === _runCallbacks("onload_start"))
            return 'cancel';

        // initialize the container element
        _initContainer();

        // bind hotkey function - keyDown - if required
        initHotkeys();

        // bind window.onunload
        $(window).bind("unload."+ sID, unload);

        // init plugins for this layout, if there are any (eg: customButtons)
        runPluginCallbacks( Instance, $.layout.onLoad );

        // if layout elements are hidden, then layout WILL NOT complete initialization!
        // initLayoutElements will set initialized=true and run the onload callback IF successful
        if (o.initPanes) _initLayoutElements();

        delete s.creatingLayout;

        return state.initialized;
    }

    /**
    * Initialize the layout IF not already
    *
    * @see  All methods in Instance run this test
    * @return  boolean  true = layoutElements have been initialized | false = panes are not initialized (yet)
    */
,   isInitialized = function () {
        if (state.initialized || state.creatingLayout) return true; // already initialized
        else return _initLayoutElements();  // try to init panes NOW
    }

    /**
    * Initialize the layout - called automatically whenever an instance of layout is created
    *
    * @see  _create() & isInitialized
    * @param {boolean=}     [retry=false]   // indicates this is a 2nd try
    * @return  An object pointer to the instance created
    */
,   _initLayoutElements = function (retry) {
        // initialize config/options
        var o = options;
        // CANNOT init panes inside a hidden container!
        if (!$N.is(":visible")) {
            // handle Chrome bug where popup window 'has no height'
            // if layout is BODY element, try again in 50ms
            // SEE: http://layout.jquery-dev.net/samples/test_popup_window.html
            if ( !retry && browser.webkit && $N[0].tagName === "BODY" )
                setTimeout(function(){ _initLayoutElements(true); }, 50);
            return false;
        }

        // a center pane is required, so make sure it exists
        if (!getPane("center").length) {
            return _log( o.errors.centerPaneMissing );
        }

        // TEMP state so isInitialized returns true during init process
        state.creatingLayout = true;

        // update Container dims
        $.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT include insetX values

        // initialize all layout elements
        initPanes();    // size & position panes - calls initHandles() - which calls initResizable()

        if (o.scrollToBookmarkOnLoad) {
            var l = self.location;
            if (l.hash) l.replace( l.hash ); // scrollTo Bookmark
        }

        // check to see if this layout 'nested' inside a pane
        if (Instance.hasParentLayout)
            o.resizeWithWindow = false;
        // bind resizeAll() for 'this layout instance' to window.resize event
        else if (o.resizeWithWindow)
            $(window).bind("resize."+ sID, windowResize);

        delete state.creatingLayout;
        state.initialized = true;

        // init plugins for this layout, if there are any
        runPluginCallbacks( Instance, $.layout.onReady );

        // now run the onload callback, if exists
        _runCallbacks("onload_end");

        return true; // elements initialized successfully
    }

    /**
    * Initialize nested layouts for a specific pane - can optionally pass layout-options
    *
    * @param {(string|Object)}  evt_or_pane The pane being opened, ie: north, south, east, or west
    * @param {Object=}          [opts]      Layout-options - if passed, will OVERRRIDE options[pane].children
    * @return  An object pointer to the layout instance created - or null
    */
,   createChildren = function (evt_or_pane, opts) {
        var pane = evtPane.call(this, evt_or_pane)
        ,   $P  = $Ps[pane]
        ;
        if (!$P) return;
        var $C  = $Cs[pane]
        ,   s   = state[pane]
        ,   o   = options[pane]
        ,   sm  = options.stateManagement || {}
        ,   cos = opts ? (o.children = opts) : o.children
        ;
        if ( $.isPlainObject( cos ) )
            cos = [ cos ]; // convert a hash to a 1-elem array
        else if (!cos || !$.isArray( cos ))
            return;

        $.each( cos, function (idx, co) {
            if ( !$.isPlainObject( co ) ) return;

            // determine which element is supposed to be the 'child container'
            // if pane has a 'containerSelector' OR a 'content-div', use those instead of the pane
            var $containers = co.containerSelector ? $P.find( co.containerSelector ) : ($C || $P);

            $containers.each(function(){
                var $cont   = $(this)
                ,   child   = $cont.data("layout") //   see if a child-layout ALREADY exists on this element
                ;
                // if no layout exists, but children are set, try to create the layout now
                if (!child) {
                    // TODO: see about moving this to the stateManagement plugin, as a method
                    // set a unique child-instance key for this layout, if not already set
                    setInstanceKey({ container: $cont, options: co }, s );
                    // If THIS layout has a hash in stateManagement.autoLoad,
                    // then see if it also contains state-data for this child-layout
                    // If so, copy the stateData to child.options.stateManagement.autoLoad
                    if ( sm.includeChildren && state.stateData[pane] ) {
                        //  THIS layout's state was cached when its state was loaded
                        var paneChildren = state.stateData[pane].children || {}
                        ,   childState  = paneChildren[ co.instanceKey ]
                        ,   co_sm       = co.stateManagement || (co.stateManagement = { autoLoad: true })
                        ;
                        // COPY the stateData into the autoLoad key
                        if ( co_sm.autoLoad === true && childState ) {
                            co_sm.autoSave          = false; // disable autoSave because saving handled by parent-layout
                            co_sm.includeChildren   = true;  // cascade option - FOR NOW
                            co_sm.autoLoad = $.extend(true, {}, childState); // COPY the state-hash
                        }
                    }

                    // create the layout
                    child = $cont.layout( co );

                    // if successful, update data
                    if (child) {
                        // add the child and update all layout-pointers
                        // MAY have already been done by child-layout calling parent.refreshChildren()
                        refreshChildren( pane, child );
                    }
                }
            });
        });
    }

,   setInstanceKey = function (child, parentPaneState) {
        // create a named key for use in state and instance branches
        var $c  = child.container
        ,   o   = child.options
        ,   sm  = o.stateManagement
        ,   key = o.instanceKey || $c.data("layoutInstanceKey")
        ;
        if (!key) key = (sm && sm.cookie ? sm.cookie.name : '') || o.name; // look for a name/key
        if (!key) key = "layout"+ (++parentPaneState.childIdx); // if no name/key found, generate one
        else key = key.replace(/[^\w-]/gi, '_').replace(/_{2,}/g, '_');  // ensure is valid as a hash key
        o.instanceKey = key;
        $c.data("layoutInstanceKey", key); // useful if layout is destroyed and then recreated
        return key;
    }

    /**
    * @param {string}       pane        The pane being opened, ie: north, south, east, or west
    * @param {Object=}      newChild    New child-layout Instance to add to this pane
    */
,   refreshChildren = function (pane, newChild) {
        var $P  = $Ps[pane]
        ,   pC  = children[pane]
        ,   s   = state[pane]
        ,   o
        ;
        // check for destroy()ed layouts and update the child pointers & arrays
        if ($.isPlainObject( pC )) {
            $.each( pC, function (key, child) {
                if (child.destroyed) delete pC[key]
            });
            // if no more children, remove the children hash
            if ($.isEmptyObject( pC ))
                pC = children[pane] = null; // clear children hash
        }

        // see if there is a directly-nested layout inside this pane
        // if there is, then there can be only ONE child-layout, so check that...
        if (!newChild && !pC) {
            newChild = $P.data("layout");
        }

        // if a newChild instance was passed, add it to children[pane]
        if (newChild) {
            // update child.state
            newChild.hasParentLayout = true; // set parent-flag in child
            // instanceKey is a key-name used in both state and children
            o = newChild.options;
            // set a unique child-instance key for this layout, if not already set
            setInstanceKey( newChild, s );
            // add pointer to pane.children hash
            if (!pC) pC = children[pane] = {}; // create an empty children hash
            pC[ o.instanceKey ] = newChild.container.data("layout"); // add childLayout instance
        }

        // ALWAYS refresh the pane.children alias, even if null
        Instance[pane].children = children[pane];

        // if newChild was NOT passed - see if there is a child layout NOW
        if (!newChild) {
            createChildren(pane); // MAY create a child and re-call this method
        }
    }

,   windowResize = function () {
        var o = options
        ,   delay = Number(o.resizeWithWindowDelay);
        if (delay < 10) delay = 100; // MUST have a delay!
        // resizing uses a delay-loop because the resize event fires repeatly - except in FF, but delay anyway
        timer.clear("winResize"); // if already running
        timer.set("winResize", function(){
            timer.clear("winResize");
            timer.clear("winResizeRepeater");
            var dims = elDims( $N, o.inset );
            // only trigger resizeAll() if container has changed size
            if (dims.innerWidth !== sC.innerWidth || dims.innerHeight !== sC.innerHeight)
                resizeAll();
        }, delay);
        // ALSO set fixed-delay timer, if not already running
        if (!timer.data["winResizeRepeater"]) setWindowResizeRepeater();
    }

,   setWindowResizeRepeater = function () {
        var delay = Number(options.resizeWithWindowMaxDelay);
        if (delay > 0)
            timer.set("winResizeRepeater", function(){ setWindowResizeRepeater(); resizeAll(); }, delay);
    }

,   unload = function () {
        var o = options;

        _runCallbacks("onunload_start");

        // trigger plugin callabacks for this layout (eg: stateManagement)
        runPluginCallbacks( Instance, $.layout.onUnload );

        _runCallbacks("onunload_end");
    }

    /**
    * Validate and initialize container CSS and events
    *
    * @see  _create()
    */
,   _initContainer = function () {
        var
            N       = $N[0] 
        ,   $H      = $("html")
        ,   tag     = sC.tagName = N.tagName
        ,   id      = sC.id = N.id
        ,   cls     = sC.className = N.className
        ,   o       = options
        ,   name    = o.name
        ,   props   = "position,margin,padding,border"
        ,   css     = "layoutCSS"
        ,   CSS     = {}
        ,   hid     = "hidden" // used A LOT!
        //  see if this container is a 'pane' inside an outer-layout
        ,   parent  = $N.data("parentLayout")   // parent-layout Instance
        ,   pane    = $N.data("layoutEdge")     // pane-name in parent-layout
        ,   isChild = parent && pane
        ,   num     = $.layout.cssNum
        ,   $parent, n
        ;
        // sC = state.container
        sC.selector = $N.selector.split(".slice")[0];
        sC.ref      = (o.name ? o.name +' layout / ' : '') + tag + (id ? "#"+id : cls ? '.['+cls+']' : ''); // used in messages
        sC.isBody   = (tag === "BODY");

        // try to find a parent-layout
        if (!isChild && !sC.isBody) {
            $parent = $N.closest("."+ $.layout.defaults.panes.paneClass);
            parent  = $parent.data("parentLayout");
            pane    = $parent.data("layoutEdge");
            isChild = parent && pane;
        }

        $N  .data({
                layout: Instance
            ,   layoutContainer: sID // FLAG to indicate this is a layout-container - contains unique internal ID
            })
            .addClass(o.containerClass)
        ;
        var layoutMethods = {
            destroy:    ''
        ,   initPanes:  ''
        ,   resizeAll:  'resizeAll'
        ,   resize:     'resizeAll'
        };
        // loop hash and bind all methods - include layoutID namespacing
        for (name in layoutMethods) {
            $N.bind("layout"+ name.toLowerCase() +"."+ sID, Instance[ layoutMethods[name] || name ]);
        }

        // if this container is another layout's 'pane', then set child/parent pointers
        if (isChild) {
            // update parent flag
            Instance.hasParentLayout = true;
            // set pointers to THIS child-layout (Instance) in parent-layout
            parent.refreshChildren( pane, Instance );
        }

        // SAVE original container CSS for use in destroy()
        if (!$N.data(css)) {
            // handle props like overflow different for BODY & HTML - has 'system default' values
            if (sC.isBody) {
                // SAVE <BODY> CSS
                $N.data(css, $.extend( styles($N, props), {
                    height:     $N.css("height")
                ,   overflow:   $N.css("overflow")
                ,   overflowX:  $N.css("overflowX")
                ,   overflowY:  $N.css("overflowY")
                }));
                // ALSO SAVE <HTML> CSS
                $H.data(css, $.extend( styles($H, 'padding'), {
                    height:     "auto" // FF would return a fixed px-size!
                ,   overflow:   $H.css("overflow")
                ,   overflowX:  $H.css("overflowX")
                ,   overflowY:  $H.css("overflowY")
                }));
            }
            else // handle props normally for non-body elements
                $N.data(css, styles($N, props+",top,bottom,left,right,width,height,overflow,overflowX,overflowY") );
        }

        try {
            // common container CSS
            CSS = {
                overflow:   hid
            ,   overflowX:  hid
            ,   overflowY:  hid
            };
            $N.css( CSS );

            if (o.inset && !$.isPlainObject(o.inset)) {
                // can specify a single number for equal outset all-around
                n = parseInt(o.inset, 10) || 0
                o.inset = {
                    top:    n
                ,   bottom: n
                ,   left:   n
                ,   right:  n
                };
            }

            // format html & body if this is a full page layout
            if (sC.isBody) {
                // if HTML has padding, use this as an outer-spacing around BODY
                if (!o.outset) {
                    // use padding from parent-elem (HTML) as outset
                    o.outset = {
                        top:    num($H, "paddingTop")
                    ,   bottom: num($H, "paddingBottom")
                    ,   left:   num($H, "paddingLeft")
                    ,   right:  num($H, "paddingRight")
                    };
                }
                else if (!$.isPlainObject(o.outset)) {
                    // can specify a single number for equal outset all-around
                    n = parseInt(o.outset, 10) || 0
                    o.outset = {
                        top:    n
                    ,   bottom: n
                    ,   left:   n
                    ,   right:  n
                    };
                }
                // HTML
                $H.css( CSS ).css({
                    height:     "100%"
                ,   border:     "none"  // no border or padding allowed when using height = 100%
                ,   padding:    0       // ditto
                ,   margin:     0
                });
                // BODY
                if (browser.isIE6) {
                    // IE6 CANNOT use the trick of setting absolute positioning on all 4 sides - must have 'height'
                    $N.css({
                        width:      "100%"
                    ,   height:     "100%"
                    ,   border:     "none"  // no border or padding allowed when using height = 100%
                    ,   padding:    0       // ditto
                    ,   margin:     0
                    ,   position:   "relative"
                    });
                    // convert body padding to an inset option - the border cannot be measured in IE6!
                    if (!o.inset) o.inset = elDims( $N ).inset;
                }
                else { // use absolute positioning for BODY to allow borders & padding without overflow
                    $N.css({
                        width:      "auto"
                    ,   height:     "auto"
                    ,   margin:     0
                    ,   position:   "absolute"  // allows for border and padding on BODY
                    });
                    // apply edge-positioning created above
                    $N.css( o.outset );
                }
                // set current layout-container dimensions
                $.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT include insetX values
            }
            else {
                // container MUST have 'position'
                var p = $N.css("position");
                if (!p || !p.match(/(fixed|absolute|relative)/))
                    $N.css("position","relative");

                // set current layout-container dimensions
                if ( $N.is(":visible") ) {
                    $.extend(sC, elDims( $N, o.inset )); // passing inset means DO NOT change insetX (padding) values
                    if (sC.innerHeight < 1) // container has no 'height' - warn developer
                        _log( o.errors.noContainerHeight.replace(/CONTAINER/, sC.ref) );
                }
            }

            // if container has min-width/height, then enable scrollbar(s)
            if ( num($N, "minWidth")  ) $N.parent().css("overflowX","auto");
            if ( num($N, "minHeight") ) $N.parent().css("overflowY","auto");

        } catch (ex) {}
    }

    /**
    * Bind layout hotkeys - if options enabled
    *
    * @see  _create() and addPane()
    * @param {string=}  [panes=""]  The edge(s) to process
    */
,   initHotkeys = function (panes) {
        panes = panes ? panes.split(",") : _c.borderPanes;
        // bind keyDown to capture hotkeys, if option enabled for ANY pane
        $.each(panes, function (i, pane) {
            var o = options[pane];
            if (o.enableCursorHotkey || o.customHotkey) {
                $(document).bind("keydown."+ sID, keyDown); // only need to bind this ONCE
                return false; // BREAK - binding was done
            }
        });
    }

    /**
    * Build final OPTIONS data
    *
    * @see  _create()
    */
,   initOptions = function () {
        var data, d, pane, key, val, i, c, o;

        // reprocess user's layout-options to have correct options sub-key structure
        opts = $.layout.transformData( opts, true ); // panes = default subkey

        // auto-rename old options for backward compatibility
        opts = $.layout.backwardCompatibility.renameAllOptions( opts );

        // if user-options has 'panes' key (pane-defaults), clean it...
        if (!$.isEmptyObject(opts.panes)) {
            // REMOVE any pane-defaults that MUST be set per-pane
            data = $.layout.optionsMap.noDefault;
            for (i=0, c=data.length; i<c; i++) {
                key = data[i];
                delete opts.panes[key]; // OK if does not exist
            }
            // REMOVE any layout-options specified under opts.panes
            data = $.layout.optionsMap.layout;
            for (i=0, c=data.length; i<c; i++) {
                key = data[i];
                delete opts.panes[key]; // OK if does not exist
            }
        }

        // MOVE any NON-layout-options from opts-root to opts.panes
        data = $.layout.optionsMap.layout;
        var rootKeys = $.layout.config.optionRootKeys;
        for (key in opts) {
            val = opts[key];
            if ($.inArray(key, rootKeys) < 0 && $.inArray(key, data) < 0) {
                if (!opts.panes[key])
                    opts.panes[key] = $.isPlainObject(val) ? $.extend(true, {}, val) : val;
                delete opts[key]
            }
        }

        // START by updating ALL options from opts
        $.extend(true, options, opts);

        // CREATE final options (and config) for EACH pane
        $.each(_c.allPanes, function (i, pane) {

            // apply 'pane-defaults' to CONFIG.[PANE]
            _c[pane] = $.extend(true, {}, _c.panes, _c[pane]);

            d = options.panes;
            o = options[pane];

            // center-pane uses SOME keys in defaults.panes branch
            if (pane === 'center') {
                // ONLY copy keys from opts.panes listed in: $.layout.optionsMap.center
                data = $.layout.optionsMap.center;      // list of 'center-pane keys'
                for (i=0, c=data.length; i<c; i++) {    // loop the list...
                    key = data[i];
                    // only need to use pane-default if pane-specific value not set
                    if (!opts.center[key] && (opts.panes[key] || !o[key]))
                        o[key] = d[key]; // pane-default
                }
            }
            else {
                // border-panes use ALL keys in defaults.panes branch
                o = options[pane] = $.extend(true, {}, d, o); // re-apply pane-specific opts AFTER pane-defaults
                createFxOptions( pane );
                // ensure all border-pane-specific base-classes exist
                if (!o.resizerClass)    o.resizerClass  = "ui-layout-resizer";
                if (!o.togglerClass)    o.togglerClass  = "ui-layout-toggler";
            }
            // ensure we have base pane-class (ALL panes)
            if (!o.paneClass) o.paneClass = "ui-layout-pane";
        });

        // update options.zIndexes if a zIndex-option specified
        var zo  = opts.zIndex
        ,   z   = options.zIndexes;
        if (zo > 0) {
            z.pane_normal       = zo;
            z.content_mask      = max(zo+1, z.content_mask);    // MIN = +1
            z.resizer_normal    = max(zo+2, z.resizer_normal);  // MIN = +2
        }

        // DELETE 'panes' key now that we are done - values were copied to EACH pane
        delete options.panes;


        function createFxOptions ( pane ) {
            var o = options[pane]
            ,   d = options.panes;
            // ensure fxSettings key to avoid errors
            if (!o.fxSettings) o.fxSettings = {};
            if (!d.fxSettings) d.fxSettings = {};

            $.each(["_open","_close","_size"], function (i,n) { 
                var
                    sName       = "fxName"+ n
                ,   sSpeed      = "fxSpeed"+ n
                ,   sSettings   = "fxSettings"+ n
                    // recalculate fxName according to specificity rules
                ,   fxName = o[sName] =
                        o[sName]    // options.west.fxName_open
                    ||  d[sName]    // options.panes.fxName_open
                    ||  o.fxName    // options.west.fxName
                    ||  d.fxName    // options.panes.fxName
                    ||  "none"      // MEANS $.layout.defaults.panes.fxName == "" || false || null || 0
                ,   fxExists    = $.effects && ($.effects[fxName] || ($.effects.effect && $.effects.effect[fxName]))
                ;
                // validate fxName to ensure is valid effect - MUST have effect-config data in options.effects
                if (fxName === "none" || !options.effects[fxName] || !fxExists)
                    fxName = o[sName] = "none"; // effect not loaded OR unrecognized fxName

                // set vars for effects subkeys to simplify logic
                var fx      = options.effects[fxName] || {} // effects.slide
                ,   fx_all  = fx.all    || null             // effects.slide.all
                ,   fx_pane = fx[pane]  || null             // effects.slide.west
                ;
                // create fxSpeed[_open|_close|_size]
                o[sSpeed] =
                    o[sSpeed]               // options.west.fxSpeed_open
                ||  d[sSpeed]               // options.west.fxSpeed_open
                ||  o.fxSpeed               // options.west.fxSpeed
                ||  d.fxSpeed               // options.panes.fxSpeed
                ||  null                    // DEFAULT - let fxSetting.duration control speed
                ;
                // create fxSettings[_open|_close|_size]
                o[sSettings] = $.extend(
                    true
                ,   {}
                ,   fx_all                  // effects.slide.all
                ,   fx_pane                 // effects.slide.west
                ,   d.fxSettings            // options.panes.fxSettings
                ,   o.fxSettings            // options.west.fxSettings
                ,   d[sSettings]            // options.panes.fxSettings_open
                ,   o[sSettings]            // options.west.fxSettings_open
                );
            });

            // DONE creating action-specific-settings for this pane,
            // so DELETE generic options - are no longer meaningful
            delete o.fxName;
            delete o.fxSpeed;
            delete o.fxSettings;
        }
    }

    /**
    * Initialize module objects, styling, size and position for all panes
    *
    * @see  _initElements()
    * @param {string}   pane        The pane to process
    */
,   getPane = function (pane) {
        var sel = options[pane].paneSelector
        if (sel.substr(0,1)==="#") // ID selector
            // NOTE: elements selected 'by ID' DO NOT have to be 'children'
            return $N.find(sel).eq(0);
        else { // class or other selector
            var $P = $N.children(sel).eq(0);
            // look for the pane nested inside a 'form' element
            return $P.length ? $P : $N.children("form:first").children(sel).eq(0);
        }
    }

    /**
    * @param {Object=}      evt
    */
,   initPanes = function (evt) {
        // stopPropagation if called by trigger("layoutinitpanes") - use evtPane utility 
        evtPane(evt);

        // NOTE: do north & south FIRST so we can measure their height - do center LAST
        $.each(_c.allPanes, function (idx, pane) {
            addPane( pane, true );
        });

        // init the pane-handles NOW in case we have to hide or close the pane below
        initHandles();

        // now that all panes have been initialized and initially-sized,
        // make sure there is really enough space available for each pane
        $.each(_c.borderPanes, function (i, pane) {
            if ($Ps[pane] && state[pane].isVisible) { // pane is OPEN
                setSizeLimits(pane);
                makePaneFit(pane); // pane may be Closed, Hidden or Resized by makePaneFit()
            }
        });
        // size center-pane AGAIN in case we 'closed' a border-pane in loop above
        sizeMidPanes("center");

        //  Chrome/Webkit sometimes fires callbacks BEFORE it completes resizing!
        //  Before RC30.3, there was a 10ms delay here, but that caused layout 
        //  to load asynchrously, which is BAD, so try skipping delay for now

        // process pane contents and callbacks, and init/resize child-layout if exists
        $.each(_c.allPanes, function (idx, pane) {
            afterInitPane(pane);
        });
    }

    /**
    * Add a pane to the layout - subroutine of initPanes()
    *
    * @see  initPanes()
    * @param {string}   pane            The pane to process
    * @param {boolean=} [force=false]   Size content after init
    */
,   addPane = function (pane, force) {
        if (!force && !isInitialized()) return;
        var
            o       = options[pane]
        ,   s       = state[pane]
        ,   c       = _c[pane]
        ,   dir     = c.dir
        ,   fx      = s.fx
        ,   spacing = o.spacing_open || 0
        ,   isCenter = (pane === "center")
        ,   CSS     = {}
        ,   $P      = $Ps[pane]
        ,   size, minSize, maxSize, child
        ;
        // if pane-pointer already exists, remove the old one first
        if ($P)
            removePane( pane, false, true, false );
        else
            $Cs[pane] = false; // init

        $P = $Ps[pane] = getPane(pane);
        if (!$P.length) {
            $Ps[pane] = false; // logic
            return;
        }

        // SAVE original Pane CSS
        if (!$P.data("layoutCSS")) {
            var props = "position,top,left,bottom,right,width,height,overflow,zIndex,display,backgroundColor,padding,margin,border";
            $P.data("layoutCSS", styles($P, props));
        }

        // create alias for pane data in Instance - initHandles will add more
        Instance[pane] = {
            name:       pane
        ,   pane:       $Ps[pane]
        ,   content:    $Cs[pane]
        ,   options:    options[pane]
        ,   state:      state[pane]
        ,   children:   children[pane]
        };

        // add classes, attributes & events
        $P  .data({
                parentLayout:   Instance        // pointer to Layout Instance
            ,   layoutPane:     Instance[pane]  // NEW pointer to pane-alias-object
            ,   layoutEdge:     pane
            ,   layoutRole:     "pane"
            })
            .css(c.cssReq).css("zIndex", options.zIndexes.pane_normal)
            .css(o.applyDemoStyles ? c.cssDemo : {}) // demo styles
            .addClass( o.paneClass +" "+ o.paneClass+"-"+pane ) // default = "ui-layout-pane ui-layout-pane-west" - may be a dupe of 'paneSelector'
            .bind("mouseenter."+ sID, addHover )
            .bind("mouseleave."+ sID, removeHover )
            ;
        var paneMethods = {
                hide:               ''
            ,   show:               ''
            ,   toggle:             ''
            ,   close:              ''
            ,   open:               ''
            ,   slideOpen:          ''
            ,   slideClose:         ''
            ,   slideToggle:        ''
            ,   size:               'sizePane'
            ,   sizePane:           'sizePane'
            ,   sizeContent:        ''
            ,   sizeHandles:        ''
            ,   enableClosable:     ''
            ,   disableClosable:    ''
            ,   enableSlideable:    ''
            ,   disableSlideable:   ''
            ,   enableResizable:    ''
            ,   disableResizable:   ''
            ,   swapPanes:          'swapPanes'
            ,   swap:               'swapPanes'
            ,   move:               'swapPanes'
            ,   removePane:         'removePane'
            ,   remove:             'removePane'
            ,   createChildren:     ''
            ,   resizeChildren:     ''
            ,   resizeAll:          'resizeAll'
            ,   resizeLayout:       'resizeAll'
            }
        ,   name;
        // loop hash and bind all methods - include layoutID namespacing
        for (name in paneMethods) {
            $P.bind("layoutpane"+ name.toLowerCase() +"."+ sID, Instance[ paneMethods[name] || name ]);
        }

        // see if this pane has a 'scrolling-content element'
        initContent(pane, false); // false = do NOT sizeContent() - called later

        if (!isCenter) {
            // call _parseSize AFTER applying pane classes & styles - but before making visible (if hidden)
            // if o.size is auto or not valid, then MEASURE the pane and use that as its 'size'
            size    = s.size = _parseSize(pane, o.size);
            minSize = _parseSize(pane,o.minSize) || 1;
            maxSize = _parseSize(pane,o.maxSize) || 100000;
            if (size > 0) size = max(min(size, maxSize), minSize);
            s.autoResize = o.autoResize; // used with percentage sizes

            // state for border-panes
            s.isClosed  = false; // true = pane is closed
            s.isSliding = false; // true = pane is currently open by 'sliding' over adjacent panes
            s.isResizing= false; // true = pane is in process of being resized
            s.isHidden  = false; // true = pane is hidden - no spacing, resizer or toggler is visible!

            // array for 'pin buttons' whose classNames are auto-updated on pane-open/-close
            if (!s.pins) s.pins = [];
        }
        //  states common to ALL panes
        s.tagName   = $P[0].tagName;
        s.edge      = pane;     // useful if pane is (or about to be) 'swapped' - easy find out where it is (or is going)
        s.noRoom    = false;    // true = pane 'automatically' hidden due to insufficient room - will unhide automatically
        s.isVisible = true;     // false = pane is invisible - closed OR hidden - simplify logic

        // init pane positioning
        setPanePosition( pane );

        // if pane is not visible, 
        if (dir === "horz") // north or south pane
            CSS.height = cssH($P, size);
        else if (dir === "vert") // east or west pane
            CSS.width = cssW($P, size);
        //else if (isCenter) {}

        $P.css(CSS); // apply size -- top, bottom & height will be set by sizeMidPanes
        if (dir != "horz") sizeMidPanes(pane, true); // true = skipCallback

        // if manually adding a pane AFTER layout initialization, then...
        if (state.initialized) {
            initHandles( pane );
            initHotkeys( pane );
        }

        // close or hide the pane if specified in settings
        if (o.initClosed && o.closable && !o.initHidden)
            close(pane, true, true); // true, true = force, noAnimation
        else if (o.initHidden || o.initClosed)
            hide(pane); // will be completely invisible - no resizer or spacing
        else if (!s.noRoom)
            // make the pane visible - in case was initially hidden
            $P.css("display","block");
        // ELSE setAsOpen() - called later by initHandles()

        // RESET visibility now - pane will appear IF display:block
        $P.css("visibility","visible");

        // check option for auto-handling of pop-ups & drop-downs
        if (o.showOverflowOnHover)
            $P.hover( allowOverflow, resetOverflow );

        // if manually adding a pane AFTER layout initialization, then...
        if (state.initialized) {
            afterInitPane( pane );
        }
    }

,   afterInitPane = function (pane) {
        var $P  = $Ps[pane]
        ,   s   = state[pane]
        ,   o   = options[pane]
        ;
        if (!$P) return;

        // see if there is a directly-nested layout inside this pane
        if ($P.data("layout"))
            refreshChildren( pane, $P.data("layout") );

        // process pane contents and callbacks, and init/resize child-layout if exists
        if (s.isVisible) { // pane is OPEN
            if (state.initialized) // this pane was added AFTER layout was created
                resizeAll(); // will also sizeContent
            else
                sizeContent(pane);

            if (o.triggerEventsOnLoad)
                _runCallbacks("onresize_end", pane);
            else // automatic if onresize called, otherwise call it specifically
                // resize child - IF inner-layout already exists (created before this layout)
                resizeChildren(pane, true); // a previously existing childLayout
        }

        // init childLayouts - even if pane is not visible
        if (o.initChildren && o.children)
            createChildren(pane);
    }

    /**
    * @param {string=}  panes       The pane(s) to process
    */
,   setPanePosition = function (panes) {
        panes = panes ? panes.split(",") : _c.borderPanes;

        // create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV
        $.each(panes, function (i, pane) {
            var $P  = $Ps[pane]
            ,   $R  = $Rs[pane]
            ,   o   = options[pane]
            ,   s   = state[pane]
            ,   side =  _c[pane].side
            ,   CSS = {}
            ;
            if (!$P) return; // pane does not exist - skip

            // set css-position to account for container borders & padding
            switch (pane) {
                case "north":   CSS.top     = sC.inset.top;
                                CSS.left    = sC.inset.left;
                                CSS.right   = sC.inset.right;
                                break;
                case "south":   CSS.bottom  = sC.inset.bottom;
                                CSS.left    = sC.inset.left;
                                CSS.right   = sC.inset.right;
                                break;
                case "west":    CSS.left    = sC.inset.left; // top, bottom & height set by sizeMidPanes()
                                break;
                case "east":    CSS.right   = sC.inset.right; // ditto
                                break;
                case "center":  // top, left, width & height set by sizeMidPanes()
            }
            // apply position
            $P.css(CSS); 

            // update resizer position
            if ($R && s.isClosed)
                $R.css(side, sC.inset[side]);
            else if ($R && !s.isHidden)
                $R.css(side, sC.inset[side] + getPaneSize(pane));
        });
    }

    /**
    * Initialize module objects, styling, size and position for all resize bars and toggler buttons
    *
    * @see  _create()
    * @param {string=}  [panes=""]  The edge(s) to process
    */
,   initHandles = function (panes) {
        panes = panes ? panes.split(",") : _c.borderPanes;

        // create toggler DIVs for each pane, and set object pointers for them, eg: $R.north = north toggler DIV
        $.each(panes, function (i, pane) {
            var $P      = $Ps[pane];
            $Rs[pane]   = false; // INIT
            $Ts[pane]   = false;
            if (!$P) return; // pane does not exist - skip

            var o       = options[pane]
            ,   s       = state[pane]
            ,   c       = _c[pane]
            ,   paneId  = o.paneSelector.substr(0,1) === "#" ? o.paneSelector.substr(1) : ""
            ,   rClass  = o.resizerClass
            ,   tClass  = o.togglerClass
            ,   spacing = (s.isVisible ? o.spacing_open : o.spacing_closed)
            ,   _pane   = "-"+ pane // used for classNames
            ,   _state  = (s.isVisible ? "-open" : "-closed") // used for classNames
            ,   I       = Instance[pane]
                // INIT RESIZER BAR
            ,   $R      = I.resizer = $Rs[pane] = $("<div></div>")
                // INIT TOGGLER BUTTON
            ,   $T      = I.toggler = (o.closable ? $Ts[pane] = $("<div></div>") : false)
            ;

            //if (s.isVisible && o.resizable) ... handled by initResizable
            if (!s.isVisible && o.slidable)
                $R.attr("title", o.tips.Slide).css("cursor", o.sliderCursor);

            $R  // if paneSelector is an ID, then create a matching ID for the resizer, eg: "#paneLeft" => "paneLeft-resizer"
                .attr("id", paneId ? paneId +"-resizer" : "" )
                .data({
                    parentLayout:   Instance
                ,   layoutPane:     Instance[pane]  // NEW pointer to pane-alias-object
                ,   layoutEdge:     pane
                ,   layoutRole:     "resizer"
                })
                .css(_c.resizers.cssReq).css("zIndex", options.zIndexes.resizer_normal)
                .css(o.applyDemoStyles ? _c.resizers.cssDemo : {}) // add demo styles
                .addClass(rClass +" "+ rClass+_pane)
                .hover(addHover, removeHover) // ALWAYS add hover-classes, even if resizing is not enabled - handle with CSS instead
                .hover(onResizerEnter, onResizerLeave) // ALWAYS NEED resizer.mouseleave to balance toggler.mouseenter
                .appendTo($N) // append DIV to container
            ;
            if (o.resizerDblClickToggle)
                $R.bind("dblclick."+ sID, toggle );

            if ($T) {
                $T  // if paneSelector is an ID, then create a matching ID for the resizer, eg: "#paneLeft" => "#paneLeft-toggler"
                    .attr("id", paneId ? paneId +"-toggler" : "" )
                    .data({
                        parentLayout:   Instance
                    ,   layoutPane:     Instance[pane]  // NEW pointer to pane-alias-object
                    ,   layoutEdge:     pane
                    ,   layoutRole:     "toggler"
                    })
                    .css(_c.togglers.cssReq) // add base/required styles
                    .css(o.applyDemoStyles ? _c.togglers.cssDemo : {}) // add demo styles
                    .addClass(tClass +" "+ tClass+_pane)
                    .hover(addHover, removeHover) // ALWAYS add hover-classes, even if toggling is not enabled - handle with CSS instead
                    .bind("mouseenter", onResizerEnter) // NEED toggler.mouseenter because mouseenter MAY NOT fire on resizer
                    .appendTo($R) // append SPAN to resizer DIV
                ;
                // ADD INNER-SPANS TO TOGGLER
                if (o.togglerContent_open) // ui-layout-open
                    $("<span>"+ o.togglerContent_open +"</span>")
                        .data({
                            layoutEdge:     pane
                        ,   layoutRole:     "togglerContent"
                        })
                        .data("layoutRole", "togglerContent")
                        .data("layoutEdge", pane)
                        .addClass("content content-open")
                        .css("display","none")
                        .appendTo( $T )
                        //.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-open instead!
                    ;
                if (o.togglerContent_closed) // ui-layout-closed
                    $("<span>"+ o.togglerContent_closed +"</span>")
                        .data({
                            layoutEdge:     pane
                        ,   layoutRole:     "togglerContent"
                        })
                        .addClass("content content-closed")
                        .css("display","none")
                        .appendTo( $T )
                        //.hover( addHover, removeHover ) // use ui-layout-toggler-west-hover .content-closed instead!
                    ;
                // ADD TOGGLER.click/.hover
                enableClosable(pane);
            }

            // add Draggable events
            initResizable(pane);

            // ADD CLASSNAMES & SLIDE-BINDINGS - eg: class="resizer resizer-west resizer-open"
            if (s.isVisible)
                setAsOpen(pane);    // onOpen will be called, but NOT onResize
            else {
                setAsClosed(pane);  // onClose will be called
                bindStartSlidingEvents(pane, true); // will enable events IF option is set
            }

        });

        // SET ALL HANDLE DIMENSIONS
        sizeHandles();
    }


    /**
    * Initialize scrolling ui-layout-content div - if exists
    *
    * @see  initPane() - or externally after an Ajax injection
    * @param {string}   pane            The pane to process
    * @param {boolean=} [resize=true]   Size content after init
    */
,   initContent = function (pane, resize) {
        if (!isInitialized()) return;
        var 
            o   = options[pane]
        ,   sel = o.contentSelector
        ,   I   = Instance[pane]
        ,   $P  = $Ps[pane]
        ,   $C
        ;
        if (sel) $C = I.content = $Cs[pane] = (o.findNestedContent)
            ? $P.find(sel).eq(0) // match 1-element only
            : $P.children(sel).eq(0)
        ;
        if ($C && $C.length) {
            $C.data("layoutRole", "content");
            // SAVE original Content CSS
            if (!$C.data("layoutCSS"))
                $C.data("layoutCSS", styles($C, "height"));
            $C.css( _c.content.cssReq );
            if (o.applyDemoStyles) {
                $C.css( _c.content.cssDemo ); // add padding & overflow: auto to content-div
                $P.css( _c.content.cssDemoPane ); // REMOVE padding/scrolling from pane
            }
            // ensure no vertical scrollbar on pane - will mess up measurements
            if ($P.css("overflowX").match(/(scroll|auto)/)) {
                $P.css("overflow", "hidden");
            }
            state[pane].content = {}; // init content state
            if (resize !== false) sizeContent(pane);
            // sizeContent() is called AFTER init of all elements
        }
        else
            I.content = $Cs[pane] = false;
    }


    /**
    * Add resize-bars to all panes that specify it in options
    * -dependancy: $.fn.resizable - will skip if not found
    *
    * @see  _create()
    * @param {string=}  [panes=""]  The edge(s) to process
    */
,   initResizable = function (panes) {
        var draggingAvailable = $.layout.plugins.draggable
        ,   side // set in start()
        ;
        panes = panes ? panes.split(",") : _c.borderPanes;

        $.each(panes, function (idx, pane) {
            var o = options[pane];
            if (!draggingAvailable || !$Ps[pane] || !o.resizable) {
                o.resizable = false;
                return true; // skip to next
            }

            var s       = state[pane]
            ,   z       = options.zIndexes
            ,   c       = _c[pane]
            ,   side    = c.dir=="horz" ? "top" : "left"
            ,   $P      = $Ps[pane]
            ,   $R      = $Rs[pane]
            ,   base    = o.resizerClass
            ,   lastPos = 0 // used when live-resizing
            ,   r, live // set in start because may change
            //  'drag' classes are applied to the ORIGINAL resizer-bar while dragging is in process
            ,   resizerClass        = base+"-drag"              // resizer-drag
            ,   resizerPaneClass    = base+"-"+pane+"-drag"     // resizer-north-drag
            //  'helper' class is applied to the CLONED resizer-bar while it is being dragged
            ,   helperClass         = base+"-dragging"          // resizer-dragging
            ,   helperPaneClass     = base+"-"+pane+"-dragging" // resizer-north-dragging
            ,   helperLimitClass    = base+"-dragging-limit"    // resizer-drag
            ,   helperPaneLimitClass = base+"-"+pane+"-dragging-limit"  // resizer-north-drag
            ,   helperClassesSet    = false                     // logic var
            ;

            if (!s.isClosed)
                $R.attr("title", o.tips.Resize)
                  .css("cursor", o.resizerCursor); // n-resize, s-resize, etc

            $R.draggable({
                containment:    $N[0] // limit resizing to layout container
            ,   axis:           (c.dir=="horz" ? "y" : "x") // limit resizing to horz or vert axis
            ,   delay:          0
            ,   distance:       1
            ,   grid:           o.resizingGrid
            //  basic format for helper - style it using class: .ui-draggable-dragging
            ,   helper:         "clone"
            ,   opacity:        o.resizerDragOpacity
            ,   addClasses:     false // avoid ui-state-disabled class when disabled
            //, iframeFix:      o.draggableIframeFix // TODO: consider using when bug is fixed
            ,   zIndex:         z.resizer_drag

            ,   start: function (e, ui) {
                    // REFRESH options & state pointers in case we used swapPanes
                    o = options[pane];
                    s = state[pane];
                    // re-read options
                    live = o.livePaneResizing;

                    // ondrag_start callback - will CANCEL hide if returns false
                    // TODO: dragging CANNOT be cancelled like this, so see if there is a way?
                    if (false === _runCallbacks("ondrag_start", pane)) return false;

                    s.isResizing        = true; // prevent pane from closing while resizing
                    state.paneResizing  = pane; // easy to see if ANY pane is resizing
                    timer.clear(pane+"_closeSlider"); // just in case already triggered

                    // SET RESIZER LIMITS - used in drag()
                    setSizeLimits(pane); // update pane/resizer state
                    r = s.resizerPosition;
                    lastPos = ui.position[ side ]

                    $R.addClass( resizerClass +" "+ resizerPaneClass ); // add drag classes
                    helperClassesSet = false; // reset logic var - see drag()

                    // DISABLE TEXT SELECTION (probably already done by resizer.mouseOver)
                    $('body').disableSelection(); 

                    // MASK PANES CONTAINING IFRAMES, APPLETS OR OTHER TROUBLESOME ELEMENTS
                    showMasks( pane, { resizing: true });
                }

            ,   drag: function (e, ui) {
                    if (!helperClassesSet) { // can only add classes after clone has been added to the DOM
                        //$(".ui-draggable-dragging")
                        ui.helper
                            .addClass( helperClass +" "+ helperPaneClass ) // add helper classes
                            .css({ right: "auto", bottom: "auto" }) // fix dir="rtl" issue
                            .children().css("visibility","hidden")  // hide toggler inside dragged resizer-bar
                        ;
                        helperClassesSet = true;
                        // draggable bug!? RE-SET zIndex to prevent E/W resize-bar showing through N/S pane!
                        if (s.isSliding) $Ps[pane].css("zIndex", z.pane_sliding);
                    }
                    // CONTAIN RESIZER-BAR TO RESIZING LIMITS
                    var limit = 0;
                    if (ui.position[side] < r.min) {
                        ui.position[side] = r.min;
                        limit = -1;
                    }
                    else if (ui.position[side] > r.max) {
                        ui.position[side] = r.max;
                        limit = 1;
                    }
                    // ADD/REMOVE dragging-limit CLASS
                    if (limit) {
                        ui.helper.addClass( helperLimitClass +" "+ helperPaneLimitClass ); // at dragging-limit
                        window.defaultStatus = (limit>0 && pane.match(/(north|west)/)) || (limit<0 && pane.match(/(south|east)/)) ? o.tips.maxSizeWarning : o.tips.minSizeWarning;
                    }
                    else {
                        ui.helper.removeClass( helperLimitClass +" "+ helperPaneLimitClass ); // not at dragging-limit
                        window.defaultStatus = "";
                    }
                    // DYNAMICALLY RESIZE PANES IF OPTION ENABLED
                    // won't trigger unless resizer has actually moved!
                    if (live && Math.abs(ui.position[side] - lastPos) >= o.liveResizingTolerance) {
                        lastPos = ui.position[side];
                        resizePanes(e, ui, pane)
                    }
                }

            ,   stop: function (e, ui) {
                    $('body').enableSelection(); // RE-ENABLE TEXT SELECTION
                    window.defaultStatus = ""; // clear 'resizing limit' message from statusbar
                    $R.removeClass( resizerClass +" "+ resizerPaneClass ); // remove drag classes from Resizer
                    s.isResizing        = false;
                    state.paneResizing  = false; // easy to see if ANY pane is resizing
                    resizePanes(e, ui, pane, true); // true = resizingDone
                }

            });
        });

        /**
        * resizePanes
        *
        * Sub-routine called from stop() - and drag() if livePaneResizing
        *
        * @param {!Object}      evt
        * @param {!Object}      ui
        * @param {string}       pane
        * @param {boolean=}     [resizingDone=false]
        */
        var resizePanes = function (evt, ui, pane, resizingDone) {
            var dragPos = ui.position
            ,   c       = _c[pane]
            ,   o       = options[pane]
            ,   s       = state[pane]
            ,   resizerPos
            ;
            switch (pane) {
                case "north":   resizerPos = dragPos.top; break;
                case "west":    resizerPos = dragPos.left; break;
                case "south":   resizerPos = sC.layoutHeight - dragPos.top  - o.spacing_open; break;
                case "east":    resizerPos = sC.layoutWidth  - dragPos.left - o.spacing_open; break;
            };
            // remove container margin from resizer position to get the pane size
            var newSize = resizerPos - sC.inset[c.side];

            // Disable OR Resize Mask(s) created in drag.start
            if (!resizingDone) {
                // ensure we meet liveResizingTolerance criteria
                if (Math.abs(newSize - s.size) < o.liveResizingTolerance)
                    return; // SKIP resize this time
                // resize the pane
                manualSizePane(pane, newSize, false, true); // true = noAnimation
                sizeMasks(); // resize all visible masks
            }
            else { // resizingDone
                // ondrag_end callback
                if (false !== _runCallbacks("ondrag_end", pane))
                    manualSizePane(pane, newSize, false, true); // true = noAnimation
                hideMasks(true); // true = force hiding all masks even if one is 'sliding'
                if (s.isSliding) // RE-SHOW 'object-masks' so objects won't show through sliding pane
                    showMasks( pane, { resizing: true });
            }
        };
    }

    /**
    *   sizeMask
    *
    *   Needed to overlay a DIV over an IFRAME-pane because mask CANNOT be *inside* the pane
    *   Called when mask created, and during livePaneResizing
    */
,   sizeMask = function () {
        var $M      = $(this)
        ,   pane    = $M.data("layoutMask") // eg: "west"
        ,   s       = state[pane]
        ;
        // only masks over an IFRAME-pane need manual resizing
        if (s.tagName == "IFRAME" && s.isVisible) // no need to mask closed/hidden panes
            $M.css({
                top:    s.offsetTop
            ,   left:   s.offsetLeft
            ,   width:  s.outerWidth
            ,   height: s.outerHeight
            });
        /* ALT Method...
        var $P = $Ps[pane];
        $M.css( $P.position() ).css({ width: $P[0].offsetWidth, height: $P[0].offsetHeight });
        */
    }
,   sizeMasks = function () {
        $Ms.each( sizeMask ); // resize all 'visible' masks
    }

    /**
    * @param {string}   pane        The pane being resized, animated or isSliding
    * @param {Object=}  [args]      (optional) Options: which masks to apply, and to which panes
    */
,   showMasks = function (pane, args) {
        var c       = _c[pane]
        ,   panes   =  ["center"]
        ,   z       = options.zIndexes
        ,   a       = $.extend({
                        objectsOnly:    false
                    ,   animation:      false
                    ,   resizing:       true
                    ,   sliding:        state[pane].isSliding
                    },  args )
        ,   o, s
        ;
        if (a.resizing)
            panes.push( pane );
        if (a.sliding)
            panes.push( _c.oppositeEdge[pane] ); // ADD the oppositeEdge-pane

        if (c.dir === "horz") {
            panes.push("west");
            panes.push("east");
        }

        $.each(panes, function(i,p){
            s = state[p];
            o = options[p];
            if (s.isVisible && ( o.maskObjects || (!a.objectsOnly && o.maskContents) )) {
                getMasks(p).each(function(){
                    sizeMask.call(this);
                    this.style.zIndex = s.isSliding ? z.pane_sliding+1 : z.pane_normal+1
                    this.style.display = "block";
                });
            }
        });
    }

    /**
    * @param {boolean=} force       Hide masks even if a pane is sliding
    */
,   hideMasks = function (force) {
        // ensure no pane is resizing - could be a timing issue
        if (force || !state.paneResizing) {
            $Ms.hide(); // hide ALL masks
        }
        // if ANY pane is sliding, then DO NOT remove masks from panes with maskObjects enabled
        else if (!force && !$.isEmptyObject( state.panesSliding )) {
            var i = $Ms.length - 1
            ,   p, $M;
            for (; i >= 0; i--) {
                $M  = $Ms.eq(i);
                p   = $M.data("layoutMask");
                if (!options[p].maskObjects) {
                    $M.hide();
                }
            }
        }
    }

    /**
    * @param {string}   pane
    */
,   getMasks = function (pane) {
        var $Masks  = $([])
        ,   $M, i = 0, c = $Ms.length
        ;
        for (; i<c; i++) {
            $M = $Ms.eq(i);
            if ($M.data("layoutMask") === pane)
                $Masks = $Masks.add( $M );
        }
        if ($Masks.length)
            return $Masks;
        else
            return createMasks(pane);
    }

    /**
    * createMasks
    *
    * Generates both DIV (ALWAYS used) and IFRAME (optional) elements as masks
    * An IFRAME mask is created *under* the DIV when maskObjects=true, because a DIV cannot mask an applet
    *
    * @param {string}   pane
    */
,   createMasks = function (pane) {
        var
            $P      = $Ps[pane]
        ,   s       = state[pane]
        ,   o       = options[pane]
        ,   z       = options.zIndexes
        //, objMask = o.maskObjects && s.tagName != "IFRAME" // check for option
        ,   $Masks  = $([])
        ,   isIframe, el, $M, css, i
        ;
        if (!o.maskContents && !o.maskObjects) return $Masks;
        // if o.maskObjects=true, then loop TWICE to create BOTH kinds of mask, else only create a DIV
        for (i=0; i < (o.maskObjects ? 2 : 1); i++) {
            isIframe = o.maskObjects && i==0;
            el = document.createElement( isIframe ? "iframe" : "div" );
            $M = $(el).data("layoutMask", pane); // add data to relate mask to pane
            el.className = "ui-layout-mask ui-layout-mask-"+ pane; // for user styling
            css = el.style;
            // styles common to both DIVs and IFRAMES
            css.display     = "block";
            css.position    = "absolute";
            css.background  = "#FFF";
            if (isIframe) { // IFRAME-only props
                el.frameborder = 0;
                el.src      = "about:blank";
                //el.allowTransparency = true; - for IE, but breaks masking ability!
                css.opacity = 0;
                css.filter  = "Alpha(Opacity='0')";
                css.border  = 0;
            }
            // if pane is an IFRAME, then must mask the pane itself
            if (s.tagName == "IFRAME") {
                // NOTE sizing done by a subroutine so can be called during live-resizing
                css.zIndex  = z.pane_normal+1; // 1-higher than pane
                $N.append( el ); // append to LAYOUT CONTAINER
            }
            // otherwise put masks *inside the pane* to mask its contents
            else {
                $M.addClass("ui-layout-mask-inside-pane");
                css.zIndex  = o.maskZindex || z.content_mask; // usually 1, but customizable
                css.top     = 0;
                css.left    = 0;
                css.width   = "100%";
                css.height  = "100%";
                $P.append( el ); // append INSIDE pane element
            }
            // add to return object
            $Masks = $Masks.add( el );
            // add Mask to cached array so can be resized & reused
            $Ms = $Ms.add( el );
        }
        return $Masks;
    }


    /**
    * Destroy this layout and reset all elements
    *
    * @param {boolean=} [destroyChildren=false]     Destory Child-Layouts first?
    */
,   destroy = function (evt_or_destroyChildren, destroyChildren) {
        // UNBIND layout events and remove global object
        $(window).unbind("."+ sID);     // resize & unload
        $(document).unbind("."+ sID);   // keyDown (hotkeys)

        if (typeof evt_or_destroyChildren === "object")
            // stopPropagation if called by trigger("layoutdestroy") - use evtPane utility 
            evtPane(evt_or_destroyChildren);
        else // no event, so transfer 1st param to destroyChildren param
            destroyChildren = evt_or_destroyChildren;

        // need to look for parent layout BEFORE we remove the container data, else skips a level
        //var parentPane = Instance.hasParentLayout ? $.layout.getParentPaneInstance( $N ) : null;

        // reset layout-container
        $N  .clearQueue()
            .removeData("layout")
            .removeData("layoutContainer")
            .removeClass(options.containerClass)
            .unbind("."+ sID) // remove ALL Layout events
        ;

        // remove all mask elements that have been created
        $Ms.remove();

        // loop all panes to remove layout classes, attributes and bindings
        $.each(_c.allPanes, function (i, pane) {
            removePane( pane, false, true, destroyChildren ); // true = skipResize
        });

        // do NOT reset container CSS if is a 'pane' (or 'content') in an outer-layout - ie, THIS layout is 'nested'
        var css = "layoutCSS";
        if ($N.data(css) && !$N.data("layoutRole")) // RESET CSS
            $N.css( $N.data(css) ).removeData(css);

        // for full-page layouts, also reset the <HTML> CSS
        if (sC.tagName === "BODY" && ($N = $("html")).data(css)) // RESET <HTML> CSS
            $N.css( $N.data(css) ).removeData(css);

        // trigger plugins for this layout, if there are any
        runPluginCallbacks( Instance, $.layout.onDestroy );

        // trigger state-management and onunload callback
        unload();

        // clear the Instance of everything except for container & options (so could recreate)
        // RE-CREATE: myLayout = myLayout.container.layout( myLayout.options );
        for (var n in Instance)
            if (!n.match(/^(container|options)$/)) delete Instance[ n ];
        // add a 'destroyed' flag to make it easy to check
        Instance.destroyed = true;

        // if this is a child layout, CLEAR the child-pointer in the parent
        /* for now the pointer REMAINS, but with only container, options and destroyed keys
        if (parentPane) {
            var layout  = parentPane.pane.data("parentLayout")
            ,   key     = layout.options.instanceKey || 'error';
            // THIS SYNTAX MAY BE WRONG!
            parentPane.children[key] = layout.children[ parentPane.name ].children[key] = null;
        }
        */

        return Instance; // for coding convenience
    }

    /**
    * Remove a pane from the layout - subroutine of destroy()
    *
    * @see  destroy()
    * @param {(string|Object)}  evt_or_pane         The pane to process
    * @param {boolean=}         [remove=false]      Remove the DOM element?
    * @param {boolean=}         [skipResize=false]  Skip calling resizeAll()?
    * @param {boolean=}         [destroyChild=true] Destroy Child-layouts? If not passed, obeys options setting
    */
,   removePane = function (evt_or_pane, remove, skipResize, destroyChild) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $P  = $Ps[pane]
        ,   $C  = $Cs[pane]
        ,   $R  = $Rs[pane]
        ,   $T  = $Ts[pane]
        ;
        // NOTE: elements can still exist even after remove()
        //      so check for missing data(), which is cleared by removed()
        if ($P && $.isEmptyObject( $P.data() )) $P = false;
        if ($C && $.isEmptyObject( $C.data() )) $C = false;
        if ($R && $.isEmptyObject( $R.data() )) $R = false;
        if ($T && $.isEmptyObject( $T.data() )) $T = false;

        if ($P) $P.stop(true, true);

        var o   = options[pane]
        ,   s   = state[pane]
        ,   d   = "layout"
        ,   css = "layoutCSS"
        ,   pC  = children[pane]
        ,   hasChildren = $.isPlainObject( pC ) && !$.isEmptyObject( pC )
        ,   destroy     = destroyChild !== undefined ? destroyChild : o.destroyChildren
        ;
        // FIRST destroy the child-layout(s)
        if (hasChildren && destroy) {
            $.each( pC, function (key, child) {
                if (!child.destroyed)
                    child.destroy(true);// tell child-layout to destroy ALL its child-layouts too
                if (child.destroyed)    // destroy was successful
                    delete pC[key];
            });
            // if no more children, remove the children hash
            if ($.isEmptyObject( pC )) {
                pC = children[pane] = null; // clear children hash
                hasChildren = false;
            }
        }

        // Note: can't 'remove' a pane element with non-destroyed children
        if ($P && remove && !hasChildren)
            $P.remove(); // remove the pane-element and everything inside it
        else if ($P && $P[0]) {
            //  create list of ALL pane-classes that need to be removed
            var root    = o.paneClass // default="ui-layout-pane"
            ,   pRoot   = root +"-"+ pane // eg: "ui-layout-pane-west"
            ,   _open   = "-open"
            ,   _sliding= "-sliding"
            ,   _closed = "-closed"
            ,   classes = [ root, root+_open, root+_closed, root+_sliding,      // generic classes
                            pRoot, pRoot+_open, pRoot+_closed, pRoot+_sliding ] // pane-specific classes
            ;
            $.merge(classes, getHoverClasses($P, true)); // ADD hover-classes
            // remove all Layout classes from pane-element
            $P  .removeClass( classes.join(" ") ) // remove ALL pane-classes
                .removeData("parentLayout")
                .removeData("layoutPane")
                .removeData("layoutRole")
                .removeData("layoutEdge")
                .removeData("autoHidden")   // in case set
                .unbind("."+ sID) // remove ALL Layout events
                // TODO: remove these extra unbind commands when jQuery is fixed
                //.unbind("mouseenter"+ sID)
                //.unbind("mouseleave"+ sID)
            ;
            // do NOT reset CSS if this pane/content is STILL the container of a nested layout!
            // the nested layout will reset its 'container' CSS when/if it is destroyed
            if (hasChildren && $C) {
                // a content-div may not have a specific width, so give it one to contain the Layout
                $C.width( $C.width() );
                $.each( pC, function (key, child) {
                    child.resizeAll(); // resize the Layout
                });
            }
            else if ($C)
                $C.css( $C.data(css) ).removeData(css).removeData("layoutRole");
            // remove pane AFTER content in case there was a nested layout
            if (!$P.data(d))
                $P.css( $P.data(css) ).removeData(css);
        }

        // REMOVE pane resizer and toggler elements
        if ($T) $T.remove();
        if ($R) $R.remove();

        // CLEAR all pointers and state data
        Instance[pane] = $Ps[pane] = $Cs[pane] = $Rs[pane] = $Ts[pane] = false;
        s = { removed: true };

        if (!skipResize)
            resizeAll();
    }


/*
 * ###########################
 *     ACTION METHODS
 * ###########################
 */

    /**
    * @param {string}   pane
    */
,   _hidePane = function (pane) {
        var $P  = $Ps[pane]
        ,   o   = options[pane]
        ,   s   = $P[0].style
        ;
        if (o.useOffscreenClose) {
            if (!$P.data(_c.offscreenReset))
                $P.data(_c.offscreenReset, { left: s.left, right: s.right });
            $P.css( _c.offscreenCSS );
        }
        else
            $P.hide().removeData(_c.offscreenReset);
    }

    /**
    * @param {string}   pane
    */
,   _showPane = function (pane) {
        var $P  = $Ps[pane]
        ,   o   = options[pane]
        ,   off = _c.offscreenCSS
        ,   old = $P.data(_c.offscreenReset)
        ,   s   = $P[0].style
        ;
        $P  .show() // ALWAYS show, just in case
            .removeData(_c.offscreenReset);
        if (o.useOffscreenClose && old) {
            if (s.left == off.left)
                s.left = old.left;
            if (s.right == off.right)
                s.right = old.right;
        }
    }


    /**
    * Completely 'hides' a pane, including its spacing - as if it does not exist
    * The pane is not actually 'removed' from the source, so can use 'show' to un-hide it
    *
    * @param {(string|Object)}  evt_or_pane         The pane being hidden, ie: north, south, east, or west
    * @param {boolean=}         [noAnimation=false] 
    */
,   hide = function (evt_or_pane, noAnimation) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   o   = options[pane]
        ,   s   = state[pane]
        ,   $P  = $Ps[pane]
        ,   $R  = $Rs[pane]
        ;
        if (!$P || s.isHidden) return; // pane does not exist OR is already hidden

        // onhide_start callback - will CANCEL hide if returns false
        if (state.initialized && false === _runCallbacks("onhide_start", pane)) return;

        s.isSliding = false; // just in case
        delete state.panesSliding[pane];

        // now hide the elements
        if ($R) $R.hide(); // hide resizer-bar
        if (!state.initialized || s.isClosed) {
            s.isClosed = true; // to trigger open-animation on show()
            s.isHidden  = true;
            s.isVisible = false;
            if (!state.initialized)
                _hidePane(pane); // no animation when loading page
            sizeMidPanes(_c[pane].dir === "horz" ? "" : "center");
            if (state.initialized || o.triggerEventsOnLoad)
                _runCallbacks("onhide_end", pane);
        }
        else {
            s.isHiding = true; // used by onclose
            close(pane, false, noAnimation); // adjust all panes to fit
        }
    }

    /**
    * Show a hidden pane - show as 'closed' by default unless openPane = true
    *
    * @param {(string|Object)}  evt_or_pane         The pane being opened, ie: north, south, east, or west
    * @param {boolean=}         [openPane=false]
    * @param {boolean=}         [noAnimation=false]
    * @param {boolean=}         [noAlert=false]
    */
,   show = function (evt_or_pane, openPane, noAnimation, noAlert) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   o   = options[pane]
        ,   s   = state[pane]
        ,   $P  = $Ps[pane]
        ,   $R  = $Rs[pane]
        ;
        if (!$P || !s.isHidden) return; // pane does not exist OR is not hidden

        // onshow_start callback - will CANCEL show if returns false
        if (false === _runCallbacks("onshow_start", pane)) return;

        s.isShowing = true; // used by onopen/onclose
        //s.isHidden  = false; - will be set by open/close - if not cancelled
        s.isSliding = false; // just in case
        delete state.panesSliding[pane];

        // now show the elements
        //if ($R) $R.show(); - will be shown by open/close
        if (openPane === false)
            close(pane, true); // true = force
        else
            open(pane, false, noAnimation, noAlert); // adjust all panes to fit
    }


    /**
    * Toggles a pane open/closed by calling either open or close
    *
    * @param {(string|Object)}  evt_or_pane     The pane being toggled, ie: north, south, east, or west
    * @param {boolean=}         [slide=false]
    */
,   toggle = function (evt_or_pane, slide) {
        if (!isInitialized()) return;
        var evt     = evtObj(evt_or_pane)
        ,   pane    = evtPane.call(this, evt_or_pane)
        ,   s       = state[pane]
        ;
        if (evt) // called from to $R.dblclick OR triggerPaneEvent
            evt.stopImmediatePropagation();
        if (s.isHidden)
            show(pane); // will call 'open' after unhiding it
        else if (s.isClosed)
            open(pane, !!slide);
        else
            close(pane);
    }


    /**
    * Utility method used during init or other auto-processes
    *
    * @param {string}   pane   The pane being closed
    * @param {boolean=} [setHandles=false]
    */
,   _closePane = function (pane, setHandles) {
        var
            $P  = $Ps[pane]
        ,   s   = state[pane]
        ;
        _hidePane(pane);
        s.isClosed = true;
        s.isVisible = false;
        if (setHandles) setAsClosed(pane);
    }

    /**
    * Close the specified pane (animation optional), and resize all other panes as needed
    *
    * @param {(string|Object)}  evt_or_pane         The pane being closed, ie: north, south, east, or west
    * @param {boolean=}         [force=false]
    * @param {boolean=}         [noAnimation=false]
    * @param {boolean=}         [skipCallback=false]
    */
,   close = function (evt_or_pane, force, noAnimation, skipCallback) {
        var pane = evtPane.call(this, evt_or_pane);
        // if pane has been initialized, but NOT the complete layout, close pane instantly
        if (!state.initialized && $Ps[pane]) {
            _closePane(pane, true); // INIT pane as closed
            return;
        }
        if (!isInitialized()) return;

        var
            $P  = $Ps[pane]
        ,   $R  = $Rs[pane]
        ,   $T  = $Ts[pane]
        ,   o   = options[pane]
        ,   s   = state[pane]
        ,   c   = _c[pane]
        ,   doFX, isShowing, isHiding, wasSliding;

        // QUEUE in case another action/animation is in progress
        $N.queue(function( queueNext ){

            if ( !$P
            ||  (!o.closable && !s.isShowing && !s.isHiding)    // invalid request // (!o.resizable && !o.closable) ???
            ||  (!force && s.isClosed && !s.isShowing)          // already closed
            ) return queueNext();

            // onclose_start callback - will CANCEL hide if returns false
            // SKIP if just 'showing' a hidden pane as 'closed'
            var abort = !s.isShowing && false === _runCallbacks("onclose_start", pane);

            // transfer logic vars to temp vars
            isShowing   = s.isShowing;
            isHiding    = s.isHiding;
            wasSliding  = s.isSliding;
            // now clear the logic vars (REQUIRED before aborting)
            delete s.isShowing;
            delete s.isHiding;

            if (abort) return queueNext();

            doFX        = !noAnimation && !s.isClosed && (o.fxName_close != "none");
            s.isMoving  = true;
            s.isClosed  = true;
            s.isVisible = false;
            // update isHidden BEFORE sizing panes
            if (isHiding) s.isHidden = true;
            else if (isShowing) s.isHidden = false;

            if (s.isSliding) // pane is being closed, so UNBIND trigger events
                bindStopSlidingEvents(pane, false); // will set isSliding=false
            else // resize panes adjacent to this one
                sizeMidPanes(_c[pane].dir === "horz" ? "" : "center", false); // false = NOT skipCallback

            // if this pane has a resizer bar, move it NOW - before animation
            setAsClosed(pane);

            // CLOSE THE PANE
            if (doFX) { // animate the close
                lockPaneForFX(pane, true);  // need to set left/top so animation will work
                $P.hide( o.fxName_close, o.fxSettings_close, o.fxSpeed_close, function () {
                    lockPaneForFX(pane, false); // undo
                    if (s.isClosed) close_2();
                    queueNext();
                });
            }
            else { // hide the pane without animation
                _hidePane(pane);
                close_2();
                queueNext();
            };
        });

        // SUBROUTINE
        function close_2 () {
            s.isMoving  = false;
            bindStartSlidingEvents(pane, true); // will enable if o.slidable = true

            // if opposite-pane was autoClosed, see if it can be autoOpened now
            var altPane = _c.oppositeEdge[pane];
            if (state[ altPane ].noRoom) {
                setSizeLimits( altPane );
                makePaneFit( altPane );
            }

            if (!skipCallback && (state.initialized || o.triggerEventsOnLoad)) {
                // onclose callback - UNLESS just 'showing' a hidden pane as 'closed'
                if (!isShowing) _runCallbacks("onclose_end", pane);
                // onhide OR onshow callback
                if (isShowing)  _runCallbacks("onshow_end", pane);
                if (isHiding)   _runCallbacks("onhide_end", pane);
            }
        }
    }

    /**
    * @param {string}   pane    The pane just closed, ie: north, south, east, or west
    */
,   setAsClosed = function (pane) {
        if (!$Rs[pane]) return; // handles not initialized yet!
        var
            $P      = $Ps[pane]
        ,   $R      = $Rs[pane]
        ,   $T      = $Ts[pane]
        ,   o       = options[pane]
        ,   s       = state[pane]
        ,   side    = _c[pane].side
        ,   rClass  = o.resizerClass
        ,   tClass  = o.togglerClass
        ,   _pane   = "-"+ pane // used for classNames
        ,   _open   = "-open"
        ,   _sliding= "-sliding"
        ,   _closed = "-closed"
        ;
        $R
            .css(side, sC.inset[side]) // move the resizer
            .removeClass( rClass+_open +" "+ rClass+_pane+_open )
            .removeClass( rClass+_sliding +" "+ rClass+_pane+_sliding )
            .addClass( rClass+_closed +" "+ rClass+_pane+_closed )
        ;
        // DISABLE 'resizing' when closed - do this BEFORE bindStartSlidingEvents?
        if (o.resizable && $.layout.plugins.draggable)
            $R
                .draggable("disable")
                .removeClass("ui-state-disabled") // do NOT apply disabled styling - not suitable here
                .css("cursor", "default")
                .attr("title","")
            ;

        // if pane has a toggler button, adjust that too
        if ($T) {
            $T
                .removeClass( tClass+_open +" "+ tClass+_pane+_open )
                .addClass( tClass+_closed +" "+ tClass+_pane+_closed )
                .attr("title", o.tips.Open) // may be blank
            ;
            // toggler-content - if exists
            $T.children(".content-open").hide();
            $T.children(".content-closed").css("display","block");
        }

        // sync any 'pin buttons'
        syncPinBtns(pane, false);

        if (state.initialized) {
            // resize 'length' and position togglers for adjacent panes
            sizeHandles();
        }
    }

    /**
    * Open the specified pane (animation optional), and resize all other panes as needed
    *
    * @param {(string|Object)}  evt_or_pane         The pane being opened, ie: north, south, east, or west
    * @param {boolean=}         [slide=false]
    * @param {boolean=}         [noAnimation=false]
    * @param {boolean=}         [noAlert=false]
    */
,   open = function (evt_or_pane, slide, noAnimation, noAlert) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $P  = $Ps[pane]
        ,   $R  = $Rs[pane]
        ,   $T  = $Ts[pane]
        ,   o   = options[pane]
        ,   s   = state[pane]
        ,   c   = _c[pane]
        ,   doFX, isShowing
        ;
        // QUEUE in case another action/animation is in progress
        $N.queue(function( queueNext ){

            if ( !$P
            ||  (!o.resizable && !o.closable && !s.isShowing)   // invalid request
            ||  (s.isVisible && !s.isSliding)                   // already open
            ) return queueNext();

            // pane can ALSO be unhidden by just calling show(), so handle this scenario
            if (s.isHidden && !s.isShowing) {
                queueNext(); // call before show() because it needs the queue free
                show(pane, true);
                return;
            }

            if (s.autoResize && s.size != o.size) // resize pane to original size set in options
                sizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize
            else
                // make sure there is enough space available to open the pane
                setSizeLimits(pane, slide);

            // onopen_start callback - will CANCEL open if returns false
            var cbReturn = _runCallbacks("onopen_start", pane);

            if (cbReturn === "abort")
                return queueNext();

            // update pane-state again in case options were changed in onopen_start
            if (cbReturn !== "NC") // NC = "No Callback"
                setSizeLimits(pane, slide);

            if (s.minSize > s.maxSize) { // INSUFFICIENT ROOM FOR PANE TO OPEN!
                syncPinBtns(pane, false); // make sure pin-buttons are reset
                if (!noAlert && o.tips.noRoomToOpen)
                    alert(o.tips.noRoomToOpen);
                return queueNext(); // ABORT
            }

            if (slide) // START Sliding - will set isSliding=true
                bindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane
            else if (s.isSliding) // PIN PANE (stop sliding) - open pane 'normally' instead
                bindStopSlidingEvents(pane, false); // UNBIND trigger events - will set isSliding=false
            else if (o.slidable)
                bindStartSlidingEvents(pane, false); // UNBIND trigger events

            s.noRoom = false; // will be reset by makePaneFit if 'noRoom'
            makePaneFit(pane);

            // transfer logic var to temp var
            isShowing = s.isShowing;
            // now clear the logic var
            delete s.isShowing;

            doFX        = !noAnimation && s.isClosed && (o.fxName_open != "none");
            s.isMoving  = true;
            s.isVisible = true;
            s.isClosed  = false;
            // update isHidden BEFORE sizing panes - WHY??? Old?
            if (isShowing) s.isHidden = false;

            if (doFX) { // ANIMATE
                // mask adjacent panes with objects
                lockPaneForFX(pane, true);  // need to set left/top so animation will work
                    $P.show( o.fxName_open, o.fxSettings_open, o.fxSpeed_open, function() {
                    lockPaneForFX(pane, false); // undo
                    if (s.isVisible) open_2(); // continue
                    queueNext();
                });
            }
            else { // no animation
                _showPane(pane);// just show pane and...
                open_2();       // continue
                queueNext();
            };
        });

        // SUBROUTINE
        function open_2 () {
            s.isMoving  = false;

            // cure iframe display issues
            _fixIframe(pane);

            // NOTE: if isSliding, then other panes are NOT 'resized'
            if (!s.isSliding) { // resize all panes adjacent to this one
                sizeMidPanes(_c[pane].dir=="vert" ? "center" : "", false); // false = NOT skipCallback
            }

            // set classes, position handles and execute callbacks...
            setAsOpen(pane);
        };
    
    }

    /**
    * @param {string}   pane        The pane just opened, ie: north, south, east, or west
    * @param {boolean=} [skipCallback=false]
    */
,   setAsOpen = function (pane, skipCallback) {
        var 
            $P      = $Ps[pane]
        ,   $R      = $Rs[pane]
        ,   $T      = $Ts[pane]
        ,   o       = options[pane]
        ,   s       = state[pane]
        ,   side    = _c[pane].side
        ,   rClass  = o.resizerClass
        ,   tClass  = o.togglerClass
        ,   _pane   = "-"+ pane // used for classNames
        ,   _open   = "-open"
        ,   _closed = "-closed"
        ,   _sliding= "-sliding"
        ;
        $R
            .css(side, sC.inset[side] + getPaneSize(pane)) // move the resizer
            .removeClass( rClass+_closed +" "+ rClass+_pane+_closed )
            .addClass( rClass+_open +" "+ rClass+_pane+_open )
        ;
        if (s.isSliding)
            $R.addClass( rClass+_sliding +" "+ rClass+_pane+_sliding )
        else // in case 'was sliding'
            $R.removeClass( rClass+_sliding +" "+ rClass+_pane+_sliding )

        removeHover( 0, $R ); // remove hover classes
        if (o.resizable && $.layout.plugins.draggable)
            $R  .draggable("enable")
                .css("cursor", o.resizerCursor)
                .attr("title", o.tips.Resize);
        else if (!s.isSliding)
            $R.css("cursor", "default"); // n-resize, s-resize, etc

        // if pane also has a toggler button, adjust that too
        if ($T) {
            $T  .removeClass( tClass+_closed +" "+ tClass+_pane+_closed )
                .addClass( tClass+_open +" "+ tClass+_pane+_open )
                .attr("title", o.tips.Close); // may be blank
            removeHover( 0, $T ); // remove hover classes
            // toggler-content - if exists
            $T.children(".content-closed").hide();
            $T.children(".content-open").css("display","block");
        }

        // sync any 'pin buttons'
        syncPinBtns(pane, !s.isSliding);

        // update pane-state dimensions - BEFORE resizing content
        $.extend(s, elDims($P));

        if (state.initialized) {
            // resize resizer & toggler sizes for all panes
            sizeHandles();
            // resize content every time pane opens - to be sure
            sizeContent(pane, true); // true = remeasure headers/footers, even if 'pane.isMoving'
        }

        if (!skipCallback && (state.initialized || o.triggerEventsOnLoad) && $P.is(":visible")) {
            // onopen callback
            _runCallbacks("onopen_end", pane);
            // onshow callback - TODO: should this be here?
            if (s.isShowing) _runCallbacks("onshow_end", pane);

            // ALSO call onresize because layout-size *may* have changed while pane was closed
            if (state.initialized)
                _runCallbacks("onresize_end", pane);
        }

        // TODO: Somehow sizePane("north") is being called after this point???
    }


    /**
    * slideOpen / slideClose / slideToggle
    *
    * Pass-though methods for sliding
    */
,   slideOpen = function (evt_or_pane) {
        if (!isInitialized()) return;
        var evt     = evtObj(evt_or_pane)
        ,   pane    = evtPane.call(this, evt_or_pane)
        ,   s       = state[pane]
        ,   delay   = options[pane].slideDelay_open
        ;
        // prevent event from triggering on NEW resizer binding created below
        if (evt) evt.stopImmediatePropagation();

        if (s.isClosed && evt && evt.type === "mouseenter" && delay > 0)
            // trigger = mouseenter - use a delay
            timer.set(pane+"_openSlider", open_NOW, delay);
        else
            open_NOW(); // will unbind events if is already open

        /**
        * SUBROUTINE for timed open
        */
        function open_NOW () {
            if (!s.isClosed) // skip if no longer closed!
                bindStopSlidingEvents(pane, true); // BIND trigger events to close sliding-pane
            else if (!s.isMoving)
                open(pane, true); // true = slide - open() will handle binding
        };
    }

,   slideClose = function (evt_or_pane) {
        if (!isInitialized()) return;
        var evt     = evtObj(evt_or_pane)
        ,   pane    = evtPane.call(this, evt_or_pane)
        ,   o       = options[pane]
        ,   s       = state[pane]
        ,   delay   = s.isMoving ? 1000 : 300 // MINIMUM delay - option may override
        ;
        if (s.isClosed || s.isResizing)
            return; // skip if already closed OR in process of resizing
        else if (o.slideTrigger_close === "click")
            close_NOW(); // close immediately onClick
        else if (o.preventQuickSlideClose && s.isMoving)
            return; // handle Chrome quick-close on slide-open
        else if (o.preventPrematureSlideClose && evt && $.layout.isMouseOverElem(evt, $Ps[pane]))
            return; // handle incorrect mouseleave trigger, like when over a SELECT-list in IE
        else if (evt) // trigger = mouseleave - use a delay
            // 1 sec delay if 'opening', else .3 sec
            timer.set(pane+"_closeSlider", close_NOW, max(o.slideDelay_close, delay));
        else // called programically
            close_NOW();

        /**
        * SUBROUTINE for timed close
        */
        function close_NOW () {
            if (s.isClosed) // skip 'close' if already closed!
                bindStopSlidingEvents(pane, false); // UNBIND trigger events - TODO: is this needed here?
            else if (!s.isMoving)
                close(pane); // close will handle unbinding
        };
    }

    /**
    * @param {(string|Object)}  evt_or_pane     The pane being opened, ie: north, south, east, or west
    */
,   slideToggle = function (evt_or_pane) {
        var pane = evtPane.call(this, evt_or_pane);
        toggle(pane, true);
    }


    /**
    * Must set left/top on East/South panes so animation will work properly
    *
    * @param {string}   pane    The pane to lock, 'east' or 'south' - any other is ignored!
    * @param {boolean}  doLock  true = set left/top, false = remove
    */
,   lockPaneForFX = function (pane, doLock) {
        var $P  = $Ps[pane]
        ,   s   = state[pane]
        ,   o   = options[pane]
        ,   z   = options.zIndexes
        ;
        if (doLock) {
            showMasks( pane, { animation: true, objectsOnly: true });
            $P.css({ zIndex: z.pane_animate }); // overlay all elements during animation
            if (pane=="south")
                $P.css({ top: sC.inset.top + sC.innerHeight - $P.outerHeight() });
            else if (pane=="east")
                $P.css({ left: sC.inset.left + sC.innerWidth - $P.outerWidth() });
        }
        else { // animation DONE - RESET CSS
            hideMasks();
            $P.css({ zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal) });
            if (pane=="south")
                $P.css({ top: "auto" });
            // if pane is positioned 'off-screen', then DO NOT screw with it!
            else if (pane=="east" && !$P.css("left").match(/\-99999/))
                $P.css({ left: "auto" });
            // fix anti-aliasing in IE - only needed for animations that change opacity
            if (browser.msie && o.fxOpacityFix && o.fxName_open != "slide" && $P.css("filter") && $P.css("opacity") == 1)
                $P[0].style.removeAttribute('filter');
        }
    }


    /**
    * Toggle sliding functionality of a specific pane on/off by adding removing 'slide open' trigger
    *
    * @see  open(), close()
    * @param {string}   pane    The pane to enable/disable, 'north', 'south', etc.
    * @param {boolean}  enable  Enable or Disable sliding?
    */
,   bindStartSlidingEvents = function (pane, enable) {
        var o       = options[pane]
        ,   $P      = $Ps[pane]
        ,   $R      = $Rs[pane]
        ,   evtName = o.slideTrigger_open.toLowerCase()
        ;
        if (!$R || (enable && !o.slidable)) return;

        // make sure we have a valid event
        if (evtName.match(/mouseover/))
            evtName = o.slideTrigger_open = "mouseenter";
        else if (!evtName.match(/(click|dblclick|mouseenter)/)) 
            evtName = o.slideTrigger_open = "click";

        // must remove double-click-toggle when using dblclick-slide
        if (o.resizerDblClickToggle && evtName.match(/click/)) {
            $R[enable ? "unbind" : "bind"]('dblclick.'+ sID, toggle)
        }

        $R
            // add or remove event
            [enable ? "bind" : "unbind"](evtName +'.'+ sID, slideOpen)
            // set the appropriate cursor & title/tip
            .css("cursor", enable ? o.sliderCursor : "default")
            .attr("title", enable ? o.tips.Slide : "")
        ;
    }

    /**
    * Add or remove 'mouseleave' events to 'slide close' when pane is 'sliding' open or closed
    * Also increases zIndex when pane is sliding open
    * See bindStartSlidingEvents for code to control 'slide open'
    *
    * @see  slideOpen(), slideClose()
    * @param {string}   pane    The pane to process, 'north', 'south', etc.
    * @param {boolean}  enable  Enable or Disable events?
    */
,   bindStopSlidingEvents = function (pane, enable) {
        var o       = options[pane]
        ,   s       = state[pane]
        ,   c       = _c[pane]
        ,   z       = options.zIndexes
        ,   evtName = o.slideTrigger_close.toLowerCase()
        ,   action  = (enable ? "bind" : "unbind")
        ,   $P      = $Ps[pane]
        ,   $R      = $Rs[pane]
        ;
        timer.clear(pane+"_closeSlider"); // just in case

        if (enable) {
            s.isSliding = true;
            state.panesSliding[pane] = true;
            // remove 'slideOpen' event from resizer
            // ALSO will raise the zIndex of the pane & resizer
            bindStartSlidingEvents(pane, false);
        }
        else {
            s.isSliding = false;
            delete state.panesSliding[pane];
        }

        // RE/SET zIndex - increases when pane is sliding-open, resets to normal when not
        $P.css("zIndex", enable ? z.pane_sliding : z.pane_normal);
        $R.css("zIndex", enable ? z.pane_sliding+2 : z.resizer_normal); // NOTE: mask = pane_sliding+1

        // make sure we have a valid event
        if (!evtName.match(/(click|mouseleave)/))
            evtName = o.slideTrigger_close = "mouseleave"; // also catches 'mouseout'

        // add/remove slide triggers
        $R[action](evtName, slideClose); // base event on resize
        // need extra events for mouseleave
        if (evtName === "mouseleave") {
            // also close on pane.mouseleave
            $P[action]("mouseleave."+ sID, slideClose);
            // cancel timer when mouse moves between 'pane' and 'resizer'
            $R[action]("mouseenter."+ sID, cancelMouseOut);
            $P[action]("mouseenter."+ sID, cancelMouseOut);
        }

        if (!enable)
            timer.clear(pane+"_closeSlider");
        else if (evtName === "click" && !o.resizable) {
            // IF pane is not resizable (which already has a cursor and tip) 
            // then set the a cursor & title/tip on resizer when sliding
            $R.css("cursor", enable ? o.sliderCursor : "default");
            $R.attr("title", enable ? o.tips.Close : ""); // use Toggler-tip, eg: "Close Pane"
        }

        // SUBROUTINE for mouseleave timer clearing
        function cancelMouseOut (evt) {
            timer.clear(pane+"_closeSlider");
            evt.stopPropagation();
        }
    }


    /**
    * Hides/closes a pane if there is insufficient room - reverses this when there is room again
    * MUST have already called setSizeLimits() before calling this method
    *
    * @param {string}   pane                    The pane being resized
    * @param {boolean=} [isOpening=false]       Called from onOpen?
    * @param {boolean=} [skipCallback=false]    Should the onresize callback be run?
    * @param {boolean=} [force=false]
    */
,   makePaneFit = function (pane, isOpening, skipCallback, force) {
        var o   = options[pane]
        ,   s   = state[pane]
        ,   c   = _c[pane]
        ,   $P  = $Ps[pane]
        ,   $R  = $Rs[pane]
        ,   isSidePane  = c.dir==="vert"
        ,   hasRoom     = false
        ;
        // special handling for center & east/west panes
        if (pane === "center" || (isSidePane && s.noVerticalRoom)) {
            // see if there is enough room to display the pane
            // ERROR: hasRoom = s.minHeight <= s.maxHeight && (isSidePane || s.minWidth <= s.maxWidth);
            hasRoom = (s.maxHeight >= 0);
            if (hasRoom && s.noRoom) { // previously hidden due to noRoom, so show now
                _showPane(pane);
                if ($R) $R.show();
                s.isVisible = true;
                s.noRoom = false;
                if (isSidePane) s.noVerticalRoom = false;
                _fixIframe(pane);
            }
            else if (!hasRoom && !s.noRoom) { // not currently hidden, so hide now
                _hidePane(pane);
                if ($R) $R.hide();
                s.isVisible = false;
                s.noRoom = true;
            }
        }

        // see if there is enough room to fit the border-pane
        if (pane === "center") {
            // ignore center in this block
        }
        else if (s.minSize <= s.maxSize) { // pane CAN fit
            hasRoom = true;
            if (s.size > s.maxSize) // pane is too big - shrink it
                sizePane(pane, s.maxSize, skipCallback, true, force); // true = noAnimation
            else if (s.size < s.minSize) // pane is too small - enlarge it
                sizePane(pane, s.minSize, skipCallback, true, force); // true = noAnimation
            // need s.isVisible because new pseudoClose method keeps pane visible, but off-screen
            else if ($R && s.isVisible && $P.is(":visible")) {
                // make sure resizer-bar is positioned correctly
                // handles situation where nested layout was 'hidden' when initialized
                var pos = s.size + sC.inset[c.side];
                if ($.layout.cssNum( $R, c.side ) != pos) $R.css( c.side, pos );
            }

            // if was previously hidden due to noRoom, then RESET because NOW there is room
            if (s.noRoom) {
                // s.noRoom state will be set by open or show
                if (s.wasOpen && o.closable) {
                    if (o.autoReopen)
                        open(pane, false, true, true); // true = noAnimation, true = noAlert
                    else // leave the pane closed, so just update state
                        s.noRoom = false;
                }
                else
                    show(pane, s.wasOpen, true, true); // true = noAnimation, true = noAlert
            }
        }
        else { // !hasRoom - pane CANNOT fit
            if (!s.noRoom) { // pane not set as noRoom yet, so hide or close it now...
                s.noRoom = true; // update state
                s.wasOpen = !s.isClosed && !s.isSliding;
                if (s.isClosed){} // SKIP
                else if (o.closable) // 'close' if possible
                    close(pane, true, true); // true = force, true = noAnimation
                else // 'hide' pane if cannot just be closed
                    hide(pane, true); // true = noAnimation
            }
        }
    }


    /**
    * manualSizePane is an exposed flow-through method allowing extra code when pane is 'manually resized'
    *
    * @param {(string|Object)}  evt_or_pane             The pane being resized
    * @param {number}           size                    The *desired* new size for this pane - will be validated
    * @param {boolean=}         [skipCallback=false]    Should the onresize callback be run?
    * @param {boolean=}         [noAnimation=false]
    * @param {boolean=}         [force=false]           Force resizing even if does not seem necessary
    */
,   manualSizePane = function (evt_or_pane, size, skipCallback, noAnimation, force) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   o   = options[pane]
        ,   s   = state[pane]
        //  if resizing callbacks have been delayed and resizing is now DONE, force resizing to complete...
        ,   forceResize = force || (o.livePaneResizing && !s.isResizing)
        ;
        // ANY call to manualSizePane disables autoResize - ie, percentage sizing
        s.autoResize = false;
        // flow-through...
        sizePane(pane, size, skipCallback, noAnimation, forceResize); // will animate resize if option enabled
    }

    /**
    * sizePane is called only by internal methods whenever a pane needs to be resized
    *
    * @param {(string|Object)}  evt_or_pane             The pane being resized
    * @param {number}           size                    The *desired* new size for this pane - will be validated
    * @param {boolean=}         [skipCallback=false]    Should the onresize callback be run?
    * @param {boolean=}         [noAnimation=false]
    * @param {boolean=}         [force=false]           Force resizing even if does not seem necessary
    */
,   sizePane = function (evt_or_pane, size, skipCallback, noAnimation, force) {
        if (!isInitialized()) return;
        var pane    = evtPane.call(this, evt_or_pane) // probably NEVER called from event?
        ,   o       = options[pane]
        ,   s       = state[pane]
        ,   $P      = $Ps[pane]
        ,   $R      = $Rs[pane]
        ,   side    = _c[pane].side
        ,   dimName = _c[pane].sizeType.toLowerCase()
        ,   skipResizeWhileDragging = s.isResizing && !o.triggerEventsDuringLiveResize
        ,   doFX    = noAnimation !== true && o.animatePaneSizing
        ,   oldSize, newSize
        ;
        // QUEUE in case another action/animation is in progress
        $N.queue(function( queueNext ){
            // calculate 'current' min/max sizes
            setSizeLimits(pane); // update pane-state
            oldSize = s.size;
            size = _parseSize(pane, size); // handle percentages & auto
            size = max(size, _parseSize(pane, o.minSize));
            size = min(size, s.maxSize);
            if (size < s.minSize) { // not enough room for pane!
                queueNext(); // call before makePaneFit() because it needs the queue free
                makePaneFit(pane, false, skipCallback); // will hide or close pane
                return;
            }

            // IF newSize is same as oldSize, then nothing to do - abort
            if (!force && size === oldSize)
                return queueNext();

            s.newSize = size;

            // onresize_start callback CANNOT cancel resizing because this would break the layout!
            if (!skipCallback && state.initialized && s.isVisible)
                _runCallbacks("onresize_start", pane);

            // resize the pane, and make sure its visible
            newSize = cssSize(pane, size);

            if (doFX && $P.is(":visible")) { // ANIMATE
                var fx      = $.layout.effects.size[pane] || $.layout.effects.size.all
                ,   easing  = o.fxSettings_size.easing || fx.easing
                ,   z       = options.zIndexes
                ,   props   = {};
                props[ dimName ] = newSize +'px';
                s.isMoving = true;
                // overlay all elements during animation
                $P.css({ zIndex: z.pane_animate })
                  .show().animate( props, o.fxSpeed_size, easing, function(){
                    // reset zIndex after animation
                    $P.css({ zIndex: (s.isSliding ? z.pane_sliding : z.pane_normal) });
                    s.isMoving = false;
                    delete s.newSize;
                    sizePane_2(); // continue
                    queueNext();
                });
            }
            else { // no animation
                $P.css( dimName, newSize ); // resize pane
                delete s.newSize;
                // if pane is visible, then 
                if ($P.is(":visible"))
                    sizePane_2(); // continue
                else {
                    // pane is NOT VISIBLE, so just update state data...
                    // when pane is *next opened*, it will have the new size
                    s.size = size;              // update state.size
                    $.extend(s, elDims($P));    // update state dimensions
                }
                queueNext();
            };

        });

        // SUBROUTINE
        function sizePane_2 () {
            /*  Panes are sometimes not sized precisely in some browsers!?
             *  This code will resize the pane up to 3 times to nudge the pane to the correct size
             */
            var actual  = dimName==='width' ? $P.outerWidth() : $P.outerHeight()
            ,   tries   = [{
                            pane:       pane
                        ,   count:      1
                        ,   target:     size
                        ,   actual:     actual
                        ,   correct:    (size === actual)
                        ,   attempt:    size
                        ,   cssSize:    newSize
                        }]
            ,   lastTry = tries[0]
            ,   thisTry = {}
            ,   msg     = 'Inaccurate size after resizing the '+ pane +'-pane.'
            ;
            while ( !lastTry.correct ) {
                thisTry = { pane: pane, count: lastTry.count+1, target: size };

                if (lastTry.actual > size)
                    thisTry.attempt = max(0, lastTry.attempt - (lastTry.actual - size));
                else // lastTry.actual < size
                    thisTry.attempt = max(0, lastTry.attempt + (size - lastTry.actual));

                thisTry.cssSize = cssSize(pane, thisTry.attempt);
                $P.css( dimName, thisTry.cssSize );

                thisTry.actual  = dimName=='width' ? $P.outerWidth() : $P.outerHeight();
                thisTry.correct = (size === thisTry.actual);

                // log attempts and alert the user of this *non-fatal error* (if showDebugMessages)
                if ( tries.length === 1) {
                    _log(msg, false, true);
                    _log(lastTry, false, true);
                }
                _log(thisTry, false, true);
                // after 4 tries, is as close as its gonna get!
                if (tries.length > 3) break;

                tries.push( thisTry );
                lastTry = tries[ tries.length - 1 ];
            }
            // END TESTING CODE

            // update pane-state dimensions
            s.size  = size;
            $.extend(s, elDims($P));

            if (s.isVisible && $P.is(":visible")) {
                // reposition the resizer-bar
                if ($R) $R.css( side, size + sC.inset[side] );
                // resize the content-div
                sizeContent(pane);
            }

            if (!skipCallback && !skipResizeWhileDragging && state.initialized && s.isVisible)
                _runCallbacks("onresize_end", pane);

            // resize all the adjacent panes, and adjust their toggler buttons
            // when skipCallback passed, it means the controlling method will handle 'other panes'
            if (!skipCallback) {
                // also no callback if live-resize is in progress and NOT triggerEventsDuringLiveResize
                if (!s.isSliding) sizeMidPanes(_c[pane].dir=="horz" ? "" : "center", skipResizeWhileDragging, force);
                sizeHandles();
            }

            // if opposite-pane was autoClosed, see if it can be autoOpened now
            var altPane = _c.oppositeEdge[pane];
            if (size < oldSize && state[ altPane ].noRoom) {
                setSizeLimits( altPane );
                makePaneFit( altPane, false, skipCallback );
            }

            // DEBUG - ALERT user/developer so they know there was a sizing problem
            if (tries.length > 1)
                _log(msg +'\nSee the Error Console for details.', true, true);
        }
    }

    /**
    * @see  initPanes(), sizePane(),    resizeAll(), open(), close(), hide()
    * @param {(Array.<string>|string)}  panes                   The pane(s) being resized, comma-delmited string
    * @param {boolean=}                 [skipCallback=false]    Should the onresize callback be run?
    * @param {boolean=}                 [force=false]
    */
,   sizeMidPanes = function (panes, skipCallback, force) {
        panes = (panes ? panes : "east,west,center").split(",");

        $.each(panes, function (i, pane) {
            if (!$Ps[pane]) return; // NO PANE - skip
            var 
                o       = options[pane]
            ,   s       = state[pane]
            ,   $P      = $Ps[pane]
            ,   $R      = $Rs[pane]
            ,   isCenter= (pane=="center")
            ,   hasRoom = true
            ,   CSS     = {}
            //  if pane is not visible, show it invisibly NOW rather than for *each call* in this script
            ,   visCSS  = $.layout.showInvisibly($P)

            ,   newCenter   = calcNewCenterPaneDims()
            ;

            // update pane-state dimensions
            $.extend(s, elDims($P));

            if (pane === "center") {
                if (!force && s.isVisible && newCenter.width === s.outerWidth && newCenter.height === s.outerHeight) {
                    $P.css(visCSS);
                    return true; // SKIP - pane already the correct size
                }
                // set state for makePaneFit() logic
                $.extend(s, cssMinDims(pane), {
                    maxWidth:   newCenter.width
                ,   maxHeight:  newCenter.height
                });
                CSS = newCenter;
                s.newWidth  = CSS.width;
                s.newHeight = CSS.height;
                // convert OUTER width/height to CSS width/height 
                CSS.width   = cssW($P, CSS.width);
                // NEW - allow pane to extend 'below' visible area rather than hide it
                CSS.height  = cssH($P, CSS.height);
                hasRoom     = CSS.width >= 0 && CSS.height >= 0; // height >= 0 = ALWAYS TRUE NOW

                // during layout init, try to shrink east/west panes to make room for center
                if (!state.initialized && o.minWidth > newCenter.width) {
                    var
                        reqPx   = o.minWidth - s.outerWidth
                    ,   minE    = options.east.minSize || 0
                    ,   minW    = options.west.minSize || 0
                    ,   sizeE   = state.east.size
                    ,   sizeW   = state.west.size
                    ,   newE    = sizeE
                    ,   newW    = sizeW
                    ;
                    if (reqPx > 0 && state.east.isVisible && sizeE > minE) {
                        newE = max( sizeE-minE, sizeE-reqPx );
                        reqPx -= sizeE-newE;
                    }
                    if (reqPx > 0 && state.west.isVisible && sizeW > minW) {
                        newW = max( sizeW-minW, sizeW-reqPx );
                        reqPx -= sizeW-newW;
                    }
                    // IF we found enough extra space, then resize the border panes as calculated
                    if (reqPx === 0) {
                        if (sizeE && sizeE != minE)
                            sizePane('east', newE, true, true, force); // true = skipCallback/noAnimation - initPanes will handle when done
                        if (sizeW && sizeW != minW)
                            sizePane('west', newW, true, true, force); // true = skipCallback/noAnimation
                        // now start over!
                        sizeMidPanes('center', skipCallback, force);
                        $P.css(visCSS);
                        return; // abort this loop
                    }
                }
            }
            else { // for east and west, set only the height, which is same as center height
                // set state.min/maxWidth/Height for makePaneFit() logic
                if (s.isVisible && !s.noVerticalRoom)
                    $.extend(s, elDims($P), cssMinDims(pane))
                if (!force && !s.noVerticalRoom && newCenter.height === s.outerHeight) {
                    $P.css(visCSS);
                    return true; // SKIP - pane already the correct size
                }
                // east/west have same top, bottom & height as center
                CSS.top     = newCenter.top;
                CSS.bottom  = newCenter.bottom;
                s.newSize   = newCenter.height
                // NEW - allow pane to extend 'below' visible area rather than hide it
                CSS.height  = cssH($P, newCenter.height);
                s.maxHeight = CSS.height;
                hasRoom     = (s.maxHeight >= 0); // ALWAYS TRUE NOW
                if (!hasRoom) s.noVerticalRoom = true; // makePaneFit() logic
            }

            if (hasRoom) {
                // resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized
                if (!skipCallback && state.initialized)
                    _runCallbacks("onresize_start", pane);

                $P.css(CSS); // apply the CSS to pane
                if (pane !== "center")
                    sizeHandles(pane); // also update resizer length
                if (s.noRoom && !s.isClosed && !s.isHidden)
                    makePaneFit(pane); // will re-open/show auto-closed/hidden pane
                if (s.isVisible) {
                    $.extend(s, elDims($P)); // update pane dimensions
                    if (state.initialized) sizeContent(pane); // also resize the contents, if exists
                }
            }
            else if (!s.noRoom && s.isVisible) // no room for pane
                makePaneFit(pane); // will hide or close pane

            // reset visibility, if necessary
            $P.css(visCSS);

            delete s.newSize;
            delete s.newWidth;
            delete s.newHeight;

            if (!s.isVisible)
                return true; // DONE - next pane

            /*
            * Extra CSS for IE6 or IE7 in Quirks-mode - add 'width' to NORTH/SOUTH panes
            * Normally these panes have only 'left' & 'right' positions so pane auto-sizes
            * ALSO required when pane is an IFRAME because will NOT default to 'full width'
            *   TODO: Can I use width:100% for a north/south iframe?
            *   TODO: Sounds like a job for $P.outerWidth( sC.innerWidth ) SETTER METHOD
            */
            if (pane === "center") { // finished processing midPanes
                var fix = browser.isIE6 || !browser.boxModel;
                if ($Ps.north && (fix || state.north.tagName=="IFRAME")) 
                    $Ps.north.css("width", cssW($Ps.north, sC.innerWidth));
                if ($Ps.south && (fix || state.south.tagName=="IFRAME"))
                    $Ps.south.css("width", cssW($Ps.south, sC.innerWidth));
            }

            // resizeAll passes skipCallback because it triggers callbacks after ALL panes are resized
            if (!skipCallback && state.initialized)
                _runCallbacks("onresize_end", pane);
        });
    }


    /**
    * @see  window.onresize(), callbacks or custom code
    * @param {(Object|boolean)=}    evt_or_refresh  If 'true', then also reset pane-positioning
    */
,   resizeAll = function (evt_or_refresh) {
        var oldW    = sC.innerWidth
        ,   oldH    = sC.innerHeight
        ;
        // stopPropagation if called by trigger("layoutdestroy") - use evtPane utility 
        evtPane(evt_or_refresh);

        // cannot size layout when 'container' is hidden or collapsed
        if (!$N.is(":visible")) return;

        if (!state.initialized) {
            _initLayoutElements();
            return; // no need to resize since we just initialized!
        }

        if (evt_or_refresh === true && $.isPlainObject(options.outset)) {
            // update container CSS in case outset option has changed
            $N.css( options.outset );
        }
        // UPDATE container dimensions
        $.extend(sC, elDims( $N, options.inset ));
        if (!sC.outerHeight) return;

        // if 'true' passed, refresh pane & handle positioning too
        if (evt_or_refresh === true) {
            setPanePosition();
        }

        // onresizeall_start will CANCEL resizing if returns false
        // state.container has already been set, so user can access this info for calcuations
        if (false === _runCallbacks("onresizeall_start")) return false;

        var // see if container is now 'smaller' than before
            shrunkH = (sC.innerHeight < oldH)
        ,   shrunkW = (sC.innerWidth < oldW)
        ,   $P, o, s
        ;
        // NOTE special order for sizing: S-N-E-W
        $.each(["south","north","east","west"], function (i, pane) {
            if (!$Ps[pane]) return; // no pane - SKIP
            o = options[pane];
            s = state[pane];
            if (s.autoResize && s.size != o.size) // resize pane to original size set in options
                sizePane(pane, o.size, true, true, true); // true=skipCallback/noAnimation/forceResize
            else {
                setSizeLimits(pane);
                makePaneFit(pane, false, true, true); // true=skipCallback/forceResize
            }
        });

        sizeMidPanes("", true, true); // true=skipCallback/forceResize
        sizeHandles(); // reposition the toggler elements

        // trigger all individual pane callbacks AFTER layout has finished resizing
        $.each(_c.allPanes, function (i, pane) {
            $P = $Ps[pane];
            if (!$P) return; // SKIP
            if (state[pane].isVisible) // undefined for non-existent panes
                _runCallbacks("onresize_end", pane); // callback - if exists
        });

        _runCallbacks("onresizeall_end");
        //_triggerLayoutEvent(pane, 'resizeall');
    }

    /**
    * Whenever a pane resizes or opens that has a nested layout, trigger resizeAll
    *
    * @param {(string|Object)}  evt_or_pane     The pane just resized or opened
    */
,   resizeChildren = function (evt_or_pane, skipRefresh) {
        var pane = evtPane.call(this, evt_or_pane);

        if (!options[pane].resizeChildren) return;

        // ensure the pane-children are up-to-date
        if (!skipRefresh) refreshChildren( pane );
        var pC = children[pane];
        if ($.isPlainObject( pC )) {
            // resize one or more children
            $.each( pC, function (key, child) {
                if (!child.destroyed) child.resizeAll();
            });
        }
    }

    /**
    * IF pane has a content-div, then resize all elements inside pane to fit pane-height
    *
    * @param {(string|Object)}  evt_or_panes        The pane(s) being resized
    * @param {boolean=}         [remeasure=false]   Should the content (header/footer) be remeasured?
    */
,   sizeContent = function (evt_or_panes, remeasure) {
        if (!isInitialized()) return;

        var panes = evtPane.call(this, evt_or_panes);
        panes = panes ? panes.split(",") : _c.allPanes;

        $.each(panes, function (idx, pane) {
            var
                $P  = $Ps[pane]
            ,   $C  = $Cs[pane]
            ,   o   = options[pane]
            ,   s   = state[pane]
            ,   m   = s.content // m = measurements
            ;
            if (!$P || !$C || !$P.is(":visible")) return true; // NOT VISIBLE - skip

            // if content-element was REMOVED, update OR remove the pointer
            if (!$C.length) {
                initContent(pane, false);   // false = do NOT sizeContent() - already there!
                if (!$C) return;            // no replacement element found - pointer have been removed
            }

            // onsizecontent_start will CANCEL resizing if returns false
            if (false === _runCallbacks("onsizecontent_start", pane)) return;

            // skip re-measuring offsets if live-resizing
            if ((!s.isMoving && !s.isResizing) || o.liveContentResizing || remeasure || m.top == undefined) {
                _measure();
                // if any footers are below pane-bottom, they may not measure correctly,
                // so allow pane overflow and re-measure
                if (m.hiddenFooters > 0 && $P.css("overflow") === "hidden") {
                    $P.css("overflow", "visible");
                    _measure(); // remeasure while overflowing
                    $P.css("overflow", "hidden");
                }
            }
            // NOTE: spaceAbove/Below *includes* the pane paddingTop/Bottom, but not pane.borders
            var newH = s.innerHeight - (m.spaceAbove - s.css.paddingTop) - (m.spaceBelow - s.css.paddingBottom);

            if (!$C.is(":visible") || m.height != newH) {
                // size the Content element to fit new pane-size - will autoHide if not enough room
                setOuterHeight($C, newH, true); // true=autoHide
                m.height = newH; // save new height
            };

            if (state.initialized)
                _runCallbacks("onsizecontent_end", pane);

            function _below ($E) {
                return max(s.css.paddingBottom, (parseInt($E.css("marginBottom"), 10) || 0));
            };

            function _measure () {
                var
                    ignore  = options[pane].contentIgnoreSelector
                ,   $Fs     = $C.nextAll().not(".ui-layout-mask").not(ignore || ":lt(0)") // not :lt(0) = ALL
                ,   $Fs_vis = $Fs.filter(':visible')
                ,   $F      = $Fs_vis.filter(':last')
                ;
                m = {
                    top:            $C[0].offsetTop
                ,   height:         $C.outerHeight()
                ,   numFooters:     $Fs.length
                ,   hiddenFooters:  $Fs.length - $Fs_vis.length
                ,   spaceBelow:     0 // correct if no content footer ($E)
                }
                    m.spaceAbove    = m.top; // just for state - not used in calc
                    m.bottom        = m.top + m.height;
                if ($F.length)
                    //spaceBelow = (LastFooter.top + LastFooter.height) [footerBottom] - Content.bottom + max(LastFooter.marginBottom, pane.paddingBotom)
                    m.spaceBelow = ($F[0].offsetTop + $F.outerHeight()) - m.bottom + _below($F);
                else // no footer - check marginBottom on Content element itself
                    m.spaceBelow = _below($C);
            };
        });
    }


    /**
    * Called every time a pane is opened, closed, or resized to slide the togglers to 'center' and adjust their length if necessary
    *
    * @see  initHandles(), open(), close(), resizeAll()
    * @param {(string|Object)=}     evt_or_panes    The pane(s) being resized
    */
,   sizeHandles = function (evt_or_panes) {
        var panes = evtPane.call(this, evt_or_panes)
        panes = panes ? panes.split(",") : _c.borderPanes;

        $.each(panes, function (i, pane) {
            var 
                o   = options[pane]
            ,   s   = state[pane]
            ,   $P  = $Ps[pane]
            ,   $R  = $Rs[pane]
            ,   $T  = $Ts[pane]
            ,   $TC
            ;
            if (!$P || !$R) return;

            var
                dir         = _c[pane].dir
            ,   _state      = (s.isClosed ? "_closed" : "_open")
            ,   spacing     = o["spacing"+ _state]
            ,   togAlign    = o["togglerAlign"+ _state]
            ,   togLen      = o["togglerLength"+ _state]
            ,   paneLen
            ,   left
            ,   offset
            ,   CSS = {}
            ;

            if (spacing === 0) {
                $R.hide();
                return;
            }
            else if (!s.noRoom && !s.isHidden) // skip if resizer was hidden for any reason
                $R.show(); // in case was previously hidden

            // Resizer Bar is ALWAYS same width/height of pane it is attached to
            if (dir === "horz") { // north/south
                //paneLen = $P.outerWidth(); // s.outerWidth || 
                paneLen = sC.innerWidth; // handle offscreen-panes
                s.resizerLength = paneLen;
                left = $.layout.cssNum($P, "left")
                $R.css({
                    width:  cssW($R, paneLen) // account for borders & padding
                ,   height: cssH($R, spacing) // ditto
                ,   left:   left > -9999 ? left : sC.inset.left // handle offscreen-panes
                });
            }
            else { // east/west
                paneLen = $P.outerHeight(); // s.outerHeight || 
                s.resizerLength = paneLen;
                $R.css({
                    height: cssH($R, paneLen) // account for borders & padding
                ,   width:  cssW($R, spacing) // ditto
                ,   top:    sC.inset.top + getPaneSize("north", true) // TODO: what if no North pane?
                //, top:    $.layout.cssNum($Ps["center"], "top")
                });
            }

            // remove hover classes
            removeHover( o, $R );

            if ($T) {
                if (togLen === 0 || (s.isSliding && o.hideTogglerOnSlide)) {
                    $T.hide(); // always HIDE the toggler when 'sliding'
                    return;
                }
                else
                    $T.show(); // in case was previously hidden

                if (!(togLen > 0) || togLen === "100%" || togLen > paneLen) {
                    togLen = paneLen;
                    offset = 0;
                }
                else { // calculate 'offset' based on options.PANE.togglerAlign_open/closed
                    if (isStr(togAlign)) {
                        switch (togAlign) {
                            case "top":
                            case "left":    offset = 0;
                                            break;
                            case "bottom":
                            case "right":   offset = paneLen - togLen;
                                            break;
                            case "middle":
                            case "center":
                            default:        offset = round((paneLen - togLen) / 2); // 'default' catches typos
                        }
                    }
                    else { // togAlign = number
                        var x = parseInt(togAlign, 10); //
                        if (togAlign >= 0) offset = x;
                        else offset = paneLen - togLen + x; // NOTE: x is negative!
                    }
                }

                if (dir === "horz") { // north/south
                    var width = cssW($T, togLen);
                    $T.css({
                        width:  width  // account for borders & padding
                    ,   height: cssH($T, spacing) // ditto
                    ,   left:   offset // TODO: VERIFY that toggler  positions correctly for ALL values
                    ,   top:    0
                    });
                    // CENTER the toggler content SPAN
                    $T.children(".content").each(function(){
                        $TC = $(this);
                        $TC.css("marginLeft", round((width-$TC.outerWidth())/2)); // could be negative
                    });
                }
                else { // east/west
                    var height = cssH($T, togLen);
                    $T.css({
                        height: height // account for borders & padding
                    ,   width:  cssW($T, spacing) // ditto
                    ,   top:    offset // POSITION the toggler
                    ,   left:   0
                    });
                    // CENTER the toggler content SPAN
                    $T.children(".content").each(function(){
                        $TC = $(this);
                        $TC.css("marginTop", round((height-$TC.outerHeight())/2)); // could be negative
                    });
                }

                // remove ALL hover classes
                removeHover( 0, $T );
            }

            // DONE measuring and sizing this resizer/toggler, so can be 'hidden' now
            if (!state.initialized && (o.initHidden || s.isHidden)) {
                $R.hide();
                if ($T) $T.hide();
            }
        });
    }


    /**
    * @param {(string|Object)}  evt_or_pane
    */
,   enableClosable = function (evt_or_pane) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $T  = $Ts[pane]
        ,   o   = options[pane]
        ;
        if (!$T) return;
        o.closable = true;
        $T  .bind("click."+ sID, function(evt){ evt.stopPropagation(); toggle(pane); })
            .css("visibility", "visible")
            .css("cursor", "pointer")
            .attr("title", state[pane].isClosed ? o.tips.Open : o.tips.Close) // may be blank
            .show();
    }
    /**
    * @param {(string|Object)}  evt_or_pane
    * @param {boolean=}         [hide=false]
    */
,   disableClosable = function (evt_or_pane, hide) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $T  = $Ts[pane]
        ;
        if (!$T) return;
        options[pane].closable = false;
        // is closable is disable, then pane MUST be open!
        if (state[pane].isClosed) open(pane, false, true);
        $T  .unbind("."+ sID)
            .css("visibility", hide ? "hidden" : "visible") // instead of hide(), which creates logic issues
            .css("cursor", "default")
            .attr("title", "");
    }


    /**
    * @param {(string|Object)}  evt_or_pane
    */
,   enableSlidable = function (evt_or_pane) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $R  = $Rs[pane]
        ;
        if (!$R || !$R.data('draggable')) return;
        options[pane].slidable = true; 
        if (state[pane].isClosed)
            bindStartSlidingEvents(pane, true);
    }
    /**
    * @param {(string|Object)}  evt_or_pane
    */
,   disableSlidable = function (evt_or_pane) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $R  = $Rs[pane]
        ;
        if (!$R) return;
        options[pane].slidable = false; 
        if (state[pane].isSliding)
            close(pane, false, true);
        else {
            bindStartSlidingEvents(pane, false);
            $R  .css("cursor", "default")
                .attr("title", "");
            removeHover(null, $R[0]); // in case currently hovered
        }
    }


    /**
    * @param {(string|Object)}  evt_or_pane
    */
,   enableResizable = function (evt_or_pane) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $R  = $Rs[pane]
        ,   o   = options[pane]
        ;
        if (!$R || !$R.data('draggable')) return;
        o.resizable = true; 
        $R.draggable("enable");
        if (!state[pane].isClosed)
            $R  .css("cursor", o.resizerCursor)
                .attr("title", o.tips.Resize);
    }
    /**
    * @param {(string|Object)}  evt_or_pane
    */
,   disableResizable = function (evt_or_pane) {
        if (!isInitialized()) return;
        var pane = evtPane.call(this, evt_or_pane)
        ,   $R  = $Rs[pane]
        ;
        if (!$R || !$R.data('draggable')) return;
        options[pane].resizable = false; 
        $R  .draggable("disable")
            .css("cursor", "default")
            .attr("title", "");
        removeHover(null, $R[0]); // in case currently hovered
    }


    /**
    * Move a pane from source-side (eg, west) to target-side (eg, east)
    * If pane exists on target-side, move that to source-side, ie, 'swap' the panes
    *
    * @param {(string|Object)}  evt_or_pane1    The pane/edge being swapped
    * @param {string}           pane2           ditto
    */
,   swapPanes = function (evt_or_pane1, pane2) {
        if (!isInitialized()) return;
        var pane1 = evtPane.call(this, evt_or_pane1);
        // change state.edge NOW so callbacks can know where pane is headed...
        state[pane1].edge = pane2;
        state[pane2].edge = pane1;
        // run these even if NOT state.initialized
        if (false === _runCallbacks("onswap_start", pane1)
         || false === _runCallbacks("onswap_start", pane2)
        ) {
            state[pane1].edge = pane1; // reset
            state[pane2].edge = pane2;
            return;
        }

        var
            oPane1  = copy( pane1 )
        ,   oPane2  = copy( pane2 )
        ,   sizes   = {}
        ;
        sizes[pane1] = oPane1 ? oPane1.state.size : 0;
        sizes[pane2] = oPane2 ? oPane2.state.size : 0;

        // clear pointers & state
        $Ps[pane1] = false; 
        $Ps[pane2] = false;
        state[pane1] = {};
        state[pane2] = {};
        
        // ALWAYS remove the resizer & toggler elements
        if ($Ts[pane1]) $Ts[pane1].remove();
        if ($Ts[pane2]) $Ts[pane2].remove();
        if ($Rs[pane1]) $Rs[pane1].remove();
        if ($Rs[pane2]) $Rs[pane2].remove();
        $Rs[pane1] = $Rs[pane2] = $Ts[pane1] = $Ts[pane2] = false;

        // transfer element pointers and data to NEW Layout keys
        move( oPane1, pane2 );
        move( oPane2, pane1 );

        // cleanup objects
        oPane1 = oPane2 = sizes = null;

        // make panes 'visible' again
        if ($Ps[pane1]) $Ps[pane1].css(_c.visible);
        if ($Ps[pane2]) $Ps[pane2].css(_c.visible);

        // fix any size discrepancies caused by swap
        resizeAll();

        // run these even if NOT state.initialized
        _runCallbacks("onswap_end", pane1);
        _runCallbacks("onswap_end", pane2);

        return;

        function copy (n) { // n = pane
            var
                $P  = $Ps[n]
            ,   $C  = $Cs[n]
            ;
            return !$P ? false : {
                pane:       n
            ,   P:          $P ? $P[0] : false
            ,   C:          $C ? $C[0] : false
            ,   state:      $.extend(true, {}, state[n])
            ,   options:    $.extend(true, {}, options[n])
            }
        };

        function move (oPane, pane) {
            if (!oPane) return;
            var
                P       = oPane.P
            ,   C       = oPane.C
            ,   oldPane = oPane.pane
            ,   c       = _c[pane]
            //  save pane-options that should be retained
            ,   s       = $.extend(true, {}, state[pane])
            ,   o       = options[pane]
            //  RETAIN side-specific FX Settings - more below
            ,   fx      = { resizerCursor: o.resizerCursor }
            ,   re, size, pos
            ;
            $.each("fxName,fxSpeed,fxSettings".split(","), function (i, k) {
                fx[k +"_open"]  = o[k +"_open"];
                fx[k +"_close"] = o[k +"_close"];
                fx[k +"_size"]  = o[k +"_size"];
            });

            // update object pointers and attributes
            $Ps[pane] = $(P)
                .data({
                    layoutPane:     Instance[pane]  // NEW pointer to pane-alias-object
                ,   layoutEdge:     pane
                })
                .css(_c.hidden)
                .css(c.cssReq)
            ;
            $Cs[pane] = C ? $(C) : false;

            // set options and state
            options[pane]   = $.extend(true, {}, oPane.options, fx);
            state[pane]     = $.extend(true, {}, oPane.state);

            // change classNames on the pane, eg: ui-layout-pane-east ==> ui-layout-pane-west
            re = new RegExp(o.paneClass +"-"+ oldPane, "g");
            P.className = P.className.replace(re, o.paneClass +"-"+ pane);

            // ALWAYS regenerate the resizer & toggler elements
            initHandles(pane); // create the required resizer & toggler

            // if moving to different orientation, then keep 'target' pane size
            if (c.dir != _c[oldPane].dir) {
                size = sizes[pane] || 0;
                setSizeLimits(pane); // update pane-state
                size = max(size, state[pane].minSize);
                // use manualSizePane to disable autoResize - not useful after panes are swapped
                manualSizePane(pane, size, true, true); // true/true = skipCallback/noAnimation
            }
            else // move the resizer here
                $Rs[pane].css(c.side, sC.inset[c.side] + (state[pane].isVisible ? getPaneSize(pane) : 0));


            // ADD CLASSNAMES & SLIDE-BINDINGS
            if (oPane.state.isVisible && !s.isVisible)
                setAsOpen(pane, true); // true = skipCallback
            else {
                setAsClosed(pane);
                bindStartSlidingEvents(pane, true); // will enable events IF option is set
            }

            // DESTROY the object
            oPane = null;
        };
    }


    /**
    * INTERNAL method to sync pin-buttons when pane is opened or closed
    * Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes
    *
    * @see  open(), setAsOpen(), setAsClosed()
    * @param {string}   pane   These are the params returned to callbacks by layout()
    * @param {boolean}  doPin  True means set the pin 'down', False means 'up'
    */
,   syncPinBtns = function (pane, doPin) {
        if ($.layout.plugins.buttons)
            $.each(state[pane].pins, function (i, selector) {
                $.layout.buttons.setPinState(Instance, $(selector), pane, doPin);
            });
    }

;   // END var DECLARATIONS

    /**
    * Capture keys when enableCursorHotkey - toggle pane if hotkey pressed
    *
    * @see  document.keydown()
    */
    function keyDown (evt) {
        if (!evt) return true;
        var code = evt.keyCode;
        if (code < 33) return true; // ignore special keys: ENTER, TAB, etc

        var
            PANE = {
                38: "north" // Up Cursor    - $.ui.keyCode.UP
            ,   40: "south" // Down Cursor  - $.ui.keyCode.DOWN
            ,   37: "west"  // Left Cursor  - $.ui.keyCode.LEFT
            ,   39: "east"  // Right Cursor - $.ui.keyCode.RIGHT
            }
        ,   ALT     = evt.altKey // no worky!
        ,   SHIFT   = evt.shiftKey
        ,   CTRL    = evt.ctrlKey
        ,   CURSOR  = (CTRL && code >= 37 && code <= 40)
        ,   o, k, m, pane
        ;

        if (CURSOR && options[PANE[code]].enableCursorHotkey) // valid cursor-hotkey
            pane = PANE[code];
        else if (CTRL || SHIFT) // check to see if this matches a custom-hotkey
            $.each(_c.borderPanes, function (i, p) { // loop each pane to check its hotkey
                o = options[p];
                k = o.customHotkey;
                m = o.customHotkeyModifier; // if missing or invalid, treated as "CTRL+SHIFT"
                if ((SHIFT && m=="SHIFT") || (CTRL && m=="CTRL") || (CTRL && SHIFT)) { // Modifier matches
                    if (k && code === (isNaN(k) || k <= 9 ? k.toUpperCase().charCodeAt(0) : k)) { // Key matches
                        pane = p;
                        return false; // BREAK
                    }
                }
            });

        // validate pane
        if (!pane || !$Ps[pane] || !options[pane].closable || state[pane].isHidden)
            return true;

        toggle(pane);

        evt.stopPropagation();
        evt.returnValue = false; // CANCEL key
        return false;
    };


/*
 * ######################################
 *  UTILITY METHODS
 *  called externally or by initButtons
 * ######################################
 */

    /**
    * Change/reset a pane overflow setting & zIndex to allow popups/drop-downs to work
    *
    * @param {Object=}   [el]   (optional) Can also be 'bound' to a click, mouseOver, or other event
    */
    function allowOverflow (el) {
        if (!isInitialized()) return;
        if (this && this.tagName) el = this; // BOUND to element
        var $P;
        if (isStr(el))
            $P = $Ps[el];
        else if ($(el).data("layoutRole"))
            $P = $(el);
        else
            $(el).parents().each(function(){
                if ($(this).data("layoutRole")) {
                    $P = $(this);
                    return false; // BREAK
                }
            });
        if (!$P || !$P.length) return; // INVALID

        var
            pane    = $P.data("layoutEdge")
        ,   s       = state[pane]
        ;

        // if pane is already raised, then reset it before doing it again!
        // this would happen if allowOverflow is attached to BOTH the pane and an element 
        if (s.cssSaved)
            resetOverflow(pane); // reset previous CSS before continuing

        // if pane is raised by sliding or resizing, or its closed, then abort
        if (s.isSliding || s.isResizing || s.isClosed) {
            s.cssSaved = false;
            return;
        }

        var
            newCSS  = { zIndex: (options.zIndexes.resizer_normal + 1) }
        ,   curCSS  = {}
        ,   of      = $P.css("overflow")
        ,   ofX     = $P.css("overflowX")
        ,   ofY     = $P.css("overflowY")
        ;
        // determine which, if any, overflow settings need to be changed
        if (of != "visible") {
            curCSS.overflow = of;
            newCSS.overflow = "visible";
        }
        if (ofX && !ofX.match(/(visible|auto)/)) {
            curCSS.overflowX = ofX;
            newCSS.overflowX = "visible";
        }
        if (ofY && !ofY.match(/(visible|auto)/)) {
            curCSS.overflowY = ofX;
            newCSS.overflowY = "visible";
        }

        // save the current overflow settings - even if blank!
        s.cssSaved = curCSS;

        // apply new CSS to raise zIndex and, if necessary, make overflow 'visible'
        $P.css( newCSS );

        // make sure the zIndex of all other panes is normal
        $.each(_c.allPanes, function(i, p) {
            if (p != pane) resetOverflow(p);
        });

    };
    /**
    * @param {Object=}   [el]   (optional) Can also be 'bound' to a click, mouseOver, or other event
    */
    function resetOverflow (el) {
        if (!isInitialized()) return;
        if (this && this.tagName) el = this; // BOUND to element
        var $P;
        if (isStr(el))
            $P = $Ps[el];
        else if ($(el).data("layoutRole"))
            $P = $(el);
        else
            $(el).parents().each(function(){
                if ($(this).data("layoutRole")) {
                    $P = $(this);
                    return false; // BREAK
                }
            });
        if (!$P || !$P.length) return; // INVALID

        var
            pane    = $P.data("layoutEdge")
        ,   s       = state[pane]
        ,   CSS     = s.cssSaved || {}
        ;
        // reset the zIndex
        if (!s.isSliding && !s.isResizing)
            $P.css("zIndex", options.zIndexes.pane_normal);

        // reset Overflow - if necessary
        $P.css( CSS );

        // clear var
        s.cssSaved = false;
    };

/*
 * #####################
 * CREATE/RETURN LAYOUT
 * #####################
 */

    // validate that container exists
    var $N = $(this).eq(0); // FIRST matching Container element
    if (!$N.length) {
        return _log( options.errors.containerMissing );
    };

    // Users retrieve Instance of a layout with: $N.layout() OR $N.data("layout")
    // return the Instance-pointer if layout has already been initialized
    if ($N.data("layoutContainer") && $N.data("layout"))
        return $N.data("layout"); // cached pointer

    // init global vars
    var 
        $Ps = {}    // Panes x5     - set in initPanes()
    ,   $Cs = {}    // Content x5   - set in initPanes()
    ,   $Rs = {}    // Resizers x4  - set in initHandles()
    ,   $Ts = {}    // Togglers x4  - set in initHandles()
    ,   $Ms = $([]) // Masks - up to 2 masks per pane (IFRAME + DIV)
    //  aliases for code brevity
    ,   sC  = state.container // alias for easy access to 'container dimensions'
    ,   sID = state.id // alias for unique layout ID/namespace - eg: "layout435"
    ;

    // create Instance object to expose data & option Properties, and primary action Methods
    var Instance = {
    //  layout data
        options:            options         // property - options hash
    ,   state:              state           // property - dimensions hash
    //  object pointers
    ,   container:          $N              // property - object pointers for layout container
    ,   panes:              $Ps             // property - object pointers for ALL Panes: panes.north, panes.center
    ,   contents:           $Cs             // property - object pointers for ALL Content: contents.north, contents.center
    ,   resizers:           $Rs             // property - object pointers for ALL Resizers, eg: resizers.north
    ,   togglers:           $Ts             // property - object pointers for ALL Togglers, eg: togglers.north
    //  border-pane open/close
    ,   hide:               hide            // method - ditto
    ,   show:               show            // method - ditto
    ,   toggle:             toggle          // method - pass a 'pane' ("north", "west", etc)
    ,   open:               open            // method - ditto
    ,   close:              close           // method - ditto
    ,   slideOpen:          slideOpen       // method - ditto
    ,   slideClose:         slideClose      // method - ditto
    ,   slideToggle:        slideToggle     // method - ditto
    //  pane actions
    ,   setSizeLimits:      setSizeLimits   // method - pass a 'pane' - update state min/max data
    ,   _sizePane:          sizePane        // method -intended for user by plugins only!
    ,   sizePane:           manualSizePane  // method - pass a 'pane' AND an 'outer-size' in pixels or percent, or 'auto'
    ,   sizeContent:        sizeContent     // method - pass a 'pane'
    ,   swapPanes:          swapPanes       // method - pass TWO 'panes' - will swap them
    ,   showMasks:          showMasks       // method - pass a 'pane' OR list of panes - default = all panes with mask option set
    ,   hideMasks:          hideMasks       // method - ditto'
    //  pane element methods
    ,   initContent:        initContent     // method - ditto
    ,   addPane:            addPane         // method - pass a 'pane'
    ,   removePane:         removePane      // method - pass a 'pane' to remove from layout, add 'true' to delete the pane-elem
    ,   createChildren:     createChildren  // method - pass a 'pane' and (optional) layout-options (OVERRIDES options[pane].children
    ,   refreshChildren:    refreshChildren // method - pass a 'pane' and a layout-instance
    //  special pane option setting
    ,   enableClosable:     enableClosable  // method - pass a 'pane'
    ,   disableClosable:    disableClosable // method - ditto
    ,   enableSlidable:     enableSlidable  // method - ditto
    ,   disableSlidable:    disableSlidable // method - ditto
    ,   enableResizable:    enableResizable // method - ditto
    ,   disableResizable:   disableResizable// method - ditto
    //  utility methods for panes
    ,   allowOverflow:      allowOverflow   // utility - pass calling element (this)
    ,   resetOverflow:      resetOverflow   // utility - ditto
    //  layout control
    ,   destroy:            destroy         // method - no parameters
    ,   initPanes:          isInitialized   // method - no parameters
    ,   resizeAll:          resizeAll       // method - no parameters
    //  callback triggering
    ,   runCallbacks:       _runCallbacks   // method - pass evtName & pane (if a pane-event), eg: trigger("onopen", "west")
    //  alias collections of options, state and children - created in addPane and extended elsewhere
    ,   hasParentLayout:    false           // set by initContainer()
    ,   children:           children        // pointers to child-layouts, eg: Instance.children.west.layoutName
    ,   north:              false           // alias group: { name: pane, pane: $Ps[pane], options: options[pane], state: state[pane], children: children[pane] }
    ,   south:              false           // ditto
    ,   west:               false           // ditto
    ,   east:               false           // ditto
    ,   center:             false           // ditto
    };

    // create the border layout NOW
    if (_create() === 'cancel') // onload_start callback returned false to CANCEL layout creation
        return null;
    else // true OR false -- if layout-elements did NOT init (hidden or do not exist), can auto-init later
        return Instance; // return the Instance object

}


})( jQuery );
// END Layout - keep internal vars internal!



// START Plugins - shared wrapper, no global vars
(function ($) {


/**
 * jquery.layout.state 1.0
 * $Date: 2011-07-16 08:00:00 (Sat, 16 July 2011) $
 *
 * Copyright (c) 2012 
 *   Kevin Dalman (http://allpro.net)
 *
 * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
 * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.
 *
 * @requires: UI Layout 1.3.0.rc30.1 or higher
 * @requires: $.ui.cookie (above)
 *
 * @see: http://groups.google.com/group/jquery-ui-layout
 */
/*
 *  State-management options stored in options.stateManagement, which includes a .cookie hash
 *  Default options saves ALL KEYS for ALL PANES, ie: pane.size, pane.isClosed, pane.isHidden
 *
 *  // STATE/COOKIE OPTIONS
 *  @example $(el).layout({
                stateManagement: {
                    enabled:    true
                ,   stateKeys:  "east.size,west.size,east.isClosed,west.isClosed"
                ,   cookie:     { name: "appLayout", path: "/" }
                }
            })
 *  @example $(el).layout({ stateManagement__enabled: true }) // enable auto-state-management using cookies
 *  @example $(el).layout({ stateManagement__cookie: { name: "appLayout", path: "/" } })
 *  @example $(el).layout({ stateManagement__cookie__name: "appLayout", stateManagement__cookie__path: "/" })
 *
 *  // STATE/COOKIE METHODS
 *  @example myLayout.saveCookie( "west.isClosed,north.size,south.isHidden", {expires: 7} );
 *  @example myLayout.loadCookie();
 *  @example myLayout.deleteCookie();
 *  @example var JSON = myLayout.readState();   // CURRENT Layout State
 *  @example var JSON = myLayout.readCookie();  // SAVED Layout State (from cookie)
 *  @example var JSON = myLayout.state.stateData;   // LAST LOADED Layout State (cookie saved in layout.state hash)
 *
 *  CUSTOM STATE-MANAGEMENT (eg, saved in a database)
 *  @example var JSON = myLayout.readState( "west.isClosed,north.size,south.isHidden" );
 *  @example myLayout.loadState( JSON );
 */

/**
 *  UI COOKIE UTILITY
 *
 *  A $.cookie OR $.ui.cookie namespace *should be standard*, but until then...
 *  This creates $.ui.cookie so Layout does not need the cookie.jquery.js plugin
 *  NOTE: This utility is REQUIRED by the layout.state plugin
 *
 *  Cookie methods in Layout are created as part of State Management 
 */
if (!$.ui) $.ui = {};
$.ui.cookie = {

    // cookieEnabled is not in DOM specs, but DOES works in all browsers,including IE6
    acceptsCookies: !!navigator.cookieEnabled

,   read: function (name) {
        var c       = document.cookie
        ,   cs      = c ? c.split(';') : []
        ,   pair    // loop var
        ;
        for (var i=0, n=cs.length; i < n; i++) {
            pair = $.trim(cs[i]).split('='); // name=value pair
            if (pair[0] == name) // found the layout cookie
                return decodeURIComponent(pair[1]);
        }
        return null;
    }

,   write: function (name, val, cookieOpts) {
        var params  = ""
        ,   date    = ""
        ,   clear   = false
        ,   o       = cookieOpts || {}
        ,   x       = o.expires  || null
        ,   t       = $.type(x)
        ;
        if (t === "date")
            date = x;
        else if (t === "string" && x > 0) {
            x = parseInt(x,10);
            t = "number";
        }
        if (t === "number") {
            date = new Date();
            if (x > 0)
                date.setDate(date.getDate() + x);
            else {
                date.setFullYear(1970);
                clear = true;
            }
        }
        if (date)       params += ";expires="+ date.toUTCString();
        if (o.path)     params += ";path="+ o.path;
        if (o.domain)   params += ";domain="+ o.domain;
        if (o.secure)   params += ";secure";
        document.cookie = name +"="+ (clear ? "" : encodeURIComponent( val )) + params; // write or clear cookie
    }

,   clear: function (name) {
        $.ui.cookie.write(name, "", {expires: -1});
    }

};
// if cookie.jquery.js is not loaded, create an alias to replicate it
// this may be useful to other plugins or code dependent on that plugin
if (!$.cookie) $.cookie = function (k, v, o) {
    var C = $.ui.cookie;
    if (v === null)
        C.clear(k);
    else if (v === undefined)
        return C.read(k);
    else
        C.write(k, v, o);
};


// tell Layout that the state plugin is available
$.layout.plugins.stateManagement = true;

//  Add State-Management options to layout.defaults
$.layout.config.optionRootKeys.push("stateManagement");
$.layout.defaults.stateManagement = {
    enabled:        false   // true = enable state-management, even if not using cookies
,   autoSave:       true    // Save a state-cookie when page exits?
,   autoLoad:       true    // Load the state-cookie when Layout inits?
,   animateLoad:    true    // animate panes when loading state into an active layout
,   includeChildren: true   // recurse into child layouts to include their state as well
    // List state-data to save - must be pane-specific
,   stateKeys:  "north.size,south.size,east.size,west.size,"+
                "north.isClosed,south.isClosed,east.isClosed,west.isClosed,"+
                "north.isHidden,south.isHidden,east.isHidden,west.isHidden"
,   cookie: {
        name:   ""  // If not specified, will use Layout.name, else just "Layout"
    ,   domain: ""  // blank = current domain
    ,   path:   ""  // blank = current page, "/" = entire website
    ,   expires: "" // 'days' to keep cookie - leave blank for 'session cookie'
    ,   secure: false
    }
};
// Set stateManagement as a layout-option, NOT a pane-option
$.layout.optionsMap.layout.push("stateManagement");

/*
 *  State Management methods
 */
$.layout.state = {

    /**
     * Get the current layout state and save it to a cookie
     *
     * myLayout.saveCookie( keys, cookieOpts )
     *
     * @param {Object}          inst
     * @param {(string|Array)=} keys
     * @param {Object=}         cookieOpts
     */
    saveCookie: function (inst, keys, cookieOpts) {
        var o   = inst.options
        ,   sm  = o.stateManagement
        ,   oC  = $.extend(true, {}, sm.cookie, cookieOpts || null)
        ,   data = inst.state.stateData = inst.readState( keys || sm.stateKeys ) // read current panes-state
        ;
        $.ui.cookie.write( oC.name || o.name || "Layout", $.layout.state.encodeJSON(data), oC );
        return $.extend(true, {}, data); // return COPY of state.stateData data
    }

    /**
     * Remove the state cookie
     *
     * @param {Object}  inst
     */
,   deleteCookie: function (inst) {
        var o = inst.options;
        $.ui.cookie.clear( o.stateManagement.cookie.name || o.name || "Layout" );
    }

    /**
     * Read & return data from the cookie - as JSON
     *
     * @param {Object}  inst
     */
,   readCookie: function (inst) {
        var o = inst.options;
        var c = $.ui.cookie.read( o.stateManagement.cookie.name || o.name || "Layout" );
        // convert cookie string back to a hash and return it
        return c ? $.layout.state.decodeJSON(c) : {};
    }

    /**
     * Get data from the cookie and USE IT to loadState
     *
     * @param {Object}  inst
     */
,   loadCookie: function (inst) {
        var c = $.layout.state.readCookie(inst); // READ the cookie
        if (c) {
            inst.state.stateData = $.extend(true, {}, c); // SET state.stateData
            inst.loadState(c); // LOAD the retrieved state
        }
        return c;
    }

    /**
     * Update layout options from the cookie, if one exists
     *
     * @param {Object}      inst
     * @param {Object=}     stateData
     * @param {boolean=}    animate
     */
,   loadState: function (inst, data, opts) {
        if (!$.isPlainObject( data ) || $.isEmptyObject( data )) return;

        // normalize data & cache in the state object
        data = inst.state.stateData = $.layout.transformData( data ); // panes = default subkey

        // add missing/default state-restore options
        var smo = inst.options.stateManagement;
        opts = $.extend({
            animateLoad:        false //smo.animateLoad
        ,   includeChildren:    smo.includeChildren
        }, opts );

        if (!inst.state.initialized) {
            /*
             *  layout NOT initialized, so just update its options
             */
            // MUST remove pane.children keys before applying to options
            // use a copy so we don't remove keys from original data
            var o = $.extend(true, {}, data);
            //delete o.center; // center has no state-data - only children
            $.each($.layout.config.allPanes, function (idx, pane) {
                if (o[pane]) delete o[pane].children;          
             });
            // update CURRENT layout-options with saved state data
            $.extend(true, inst.options, o);
        }
        else {
            /*
             *  layout already initialized, so modify layout's configuration
             */
            var noAnimate = !opts.animateLoad
            ,   o, c, h, state, open
            ;
            $.each($.layout.config.borderPanes, function (idx, pane) {
                o = data[ pane ];
                if (!$.isPlainObject( o )) return; // no key, skip pane

                s   = o.size;
                c   = o.initClosed;
                h   = o.initHidden;
                ar  = o.autoResize
                state   = inst.state[pane];
                open    = state.isVisible;

                // reset autoResize
                if (ar)
                    state.autoResize = ar;
                // resize BEFORE opening
                if (!open)
                    inst._sizePane(pane, s, false, false, false); // false=skipCallback/noAnimation/forceResize
                // open/close as necessary - DO NOT CHANGE THIS ORDER!
                if (h === true)         inst.hide(pane, noAnimate);
                else if (c === true)    inst.close(pane, false, noAnimate);
                else if (c === false)   inst.open (pane, false, noAnimate);
                else if (h === false)   inst.show (pane, false, noAnimate);
                // resize AFTER any other actions
                if (open)
                    inst._sizePane(pane, s, false, false, noAnimate); // animate resize if option passed
            });

            /*
             *  RECURSE INTO CHILD-LAYOUTS
             */
            if (opts.includeChildren) {
                var paneStateChildren, childState;
                $.each(inst.children, function (pane, paneChildren) {
                    paneStateChildren = data[pane] ? data[pane].children : 0;
                    if (paneStateChildren && paneChildren) {
                        $.each(paneChildren, function (stateKey, child) {
                            childState = paneStateChildren[stateKey];
                            if (child && childState)
                                child.loadState( childState );
                        });
                    }
                });
            }
        }
    }

    /**
     * Get the *current layout state* and return it as a hash
     *
     * @param {Object=}     inst    // Layout instance to get state for
     * @param {object=}     [opts]  // State-Managements override options
     */
,   readState: function (inst, opts) {
        // backward compatility
        if ($.type(opts) === 'string') opts = { keys: opts };
        if (!opts) opts = {};
        var sm      = inst.options.stateManagement
        ,   ic      = opts.includeChildren
        ,   recurse = ic !== undefined ? ic : sm.includeChildren
        ,   keys    = opts.stateKeys || sm.stateKeys
        ,   alt     = { isClosed: 'initClosed', isHidden: 'initHidden' }
        ,   state   = inst.state
        ,   panes   = $.layout.config.allPanes
        ,   data    = {}
        ,   pair, pane, key, val
        ,   ps, pC, child, array, count, branch
        ;
        if ($.isArray(keys)) keys = keys.join(",");
        // convert keys to an array and change delimiters from '__' to '.'
        keys = keys.replace(/__/g, ".").split(',');
        // loop keys and create a data hash
        for (var i=0, n=keys.length; i < n; i++) {
            pair = keys[i].split(".");
            pane = pair[0];
            key  = pair[1];
            if ($.inArray(pane, panes) < 0) continue; // bad pane!
            val = state[ pane ][ key ];
            if (val == undefined) continue;
            if (key=="isClosed" && state[pane]["isSliding"])
                val = true; // if sliding, then *really* isClosed
            ( data[pane] || (data[pane]={}) )[ alt[key] ? alt[key] : key ] = val;
        }

        // recurse into the child-layouts for each pane
        if (recurse) {
            $.each(panes, function (idx, pane) {
                pC = inst.children[pane];
                ps = state.stateData[pane];
                if ($.isPlainObject( pC ) && !$.isEmptyObject( pC )) {
                    // ensure a key exists for this 'pane', eg: branch = data.center
                    branch = data[pane] || (data[pane] = {});
                    if (!branch.children) branch.children = {};
                    $.each( pC, function (key, child) {
                        // ONLY read state from an initialize layout
                        if ( child.state.initialized )
                            branch.children[ key ] = $.layout.state.readState( child );
                        // if we have PREVIOUS (onLoad) state for this child-layout, KEEP IT!
                        else if ( ps && ps.children && ps.children[ key ] ) {
                            branch.children[ key ] = $.extend(true, {}, ps.children[ key ] );
                        }
                    });
                }
            });
        }

        return data;
    }

    /**
     *  Stringify a JSON hash so can save in a cookie or db-field
     */
,   encodeJSON: function (JSON) {
        return parse(JSON);
        function parse (h) {
            var D=[], i=0, k, v, t // k = key, v = value
            ,   a = $.isArray(h)
            ;
            for (k in h) {
                v = h[k];
                t = typeof v;
                if (t == 'string')      // STRING - add quotes
                    v = '"'+ v +'"';
                else if (t == 'object') // SUB-KEY - recurse into it
                    v = parse(v);
                D[i++] = (!a ? '"'+ k +'":' : '') + v;
            }
            return (a ? '[' : '{') + D.join(',') + (a ? ']' : '}');
        };
    }

    /**
     *  Convert stringified JSON back to a hash object
     *  @see        $.parseJSON(), adding in jQuery 1.4.1
     */
,   decodeJSON: function (str) {
        try { return $.parseJSON ? $.parseJSON(str) : window["eval"]("("+ str +")") || {}; }
        catch (e) { return {}; }
    }


,   _create: function (inst) {
        var _   = $.layout.state
        ,   o   = inst.options
        ,   sm  = o.stateManagement
        ;
        //  ADD State-Management plugin methods to inst
         $.extend( inst, {
        //  readCookie - update options from cookie - returns hash of cookie data
            readCookie:     function () { return _.readCookie(inst); }
        //  deleteCookie
        ,   deleteCookie:   function () { _.deleteCookie(inst); }
        //  saveCookie - optionally pass keys-list and cookie-options (hash)
        ,   saveCookie:     function (keys, cookieOpts) { return _.saveCookie(inst, keys, cookieOpts); }
        //  loadCookie - readCookie and use to loadState() - returns hash of cookie data
        ,   loadCookie:     function () { return _.loadCookie(inst); }
        //  loadState - pass a hash of state to use to update options
        ,   loadState:      function (stateData, opts) { _.loadState(inst, stateData, opts); }
        //  readState - returns hash of current layout-state
        ,   readState:      function (keys) { return _.readState(inst, keys); }
        //  add JSON utility methods too...
        ,   encodeJSON:     _.encodeJSON
        ,   decodeJSON:     _.decodeJSON
        });

        // init state.stateData key, even if plugin is initially disabled
        inst.state.stateData = {};

        // autoLoad MUST BE one of: data-array, data-hash, callback-function, or TRUE
        if ( !sm.autoLoad ) return;

        //  When state-data exists in the autoLoad key USE IT,
        //  even if stateManagement.enabled == false
        if ($.isPlainObject( sm.autoLoad )) {
            if (!$.isEmptyObject( sm.autoLoad )) {
                inst.loadState( sm.autoLoad );
            }
        }
        else if ( sm.enabled ) {
            // update the options from cookie or callback
            // if options is a function, call it to get stateData
            if ($.isFunction( sm.autoLoad )) {
                var d = {};
                try {
                    d = sm.autoLoad( inst, inst.state, inst.options, inst.options.name || '' ); // try to get data from fn
                } catch (e) {}
                if (d && $.isPlainObject( d ) && !$.isEmptyObject( d ))
                    inst.loadState(d);
            }
            else // any other truthy value will trigger loadCookie
                inst.loadCookie();
        }
    }

,   _unload: function (inst) {
        var sm = inst.options.stateManagement;
        if (sm.enabled && sm.autoSave) {
            // if options is a function, call it to save the stateData
            if ($.isFunction( sm.autoSave )) {
                try {
                    sm.autoSave( inst, inst.state, inst.options, inst.options.name || '' ); // try to get data from fn
                } catch (e) {}
            }
            else // any truthy value will trigger saveCookie
                inst.saveCookie();
        }
    }

};

// add state initialization method to Layout's onCreate array of functions
$.layout.onCreate.push( $.layout.state._create );
$.layout.onUnload.push( $.layout.state._unload );




/**
 * jquery.layout.buttons 1.0
 * $Date: 2011-07-16 08:00:00 (Sat, 16 July 2011) $
 *
 * Copyright (c) 2012 
 *   Kevin Dalman (http://allpro.net)
 *
 * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
 * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.
 *
 * @requires: UI Layout 1.3.0.rc30.1 or higher
 *
 * @see: http://groups.google.com/group/jquery-ui-layout
 *
 * Docs: [ to come ]
 * Tips: [ to come ]
 */

// tell Layout that the state plugin is available
$.layout.plugins.buttons = true;

//  Add buttons options to layout.defaults
$.layout.defaults.autoBindCustomButtons = false;
// Specify autoBindCustomButtons as a layout-option, NOT a pane-option
$.layout.optionsMap.layout.push("autoBindCustomButtons");

/*
 *  Button methods
 */
$.layout.buttons = {

    /**
    * Searches for .ui-layout-button-xxx elements and auto-binds them as layout-buttons
    *
    * @see  _create()
    *
    * @param  {Object}      inst    Layout Instance object
    */
    init: function (inst) {
        var pre     = "ui-layout-button-"
        ,   layout  = inst.options.name || ""
        ,   name;
        $.each("toggle,open,close,pin,toggle-slide,open-slide".split(","), function (i, action) {
            $.each($.layout.config.borderPanes, function (ii, pane) {
                $("."+pre+action+"-"+pane).each(function(){
                    // if button was previously 'bound', data.layoutName was set, but is blank if layout has no 'name'
                    name = $(this).data("layoutName") || $(this).attr("layoutName");
                    if (name == undefined || name === layout)
                        inst.bindButton(this, action, pane);
                });
            });
        });
    }

    /**
    * Helper function to validate params received by addButton utilities
    *
    * Two classes are added to the element, based on the buttonClass...
    * The type of button is appended to create the 2nd className:
    *  - ui-layout-button-pin       // action btnClass
    *  - ui-layout-button-pin-west  // action btnClass + pane
    *  - ui-layout-button-toggle
    *  - ui-layout-button-open
    *  - ui-layout-button-close
    *
    * @param {Object}           inst        Layout Instance object
    * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
    * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
    *
    * @return {Array.<Object>}  If both params valid, the element matching 'selector' in a jQuery wrapper - otherwise returns null
    */
,   get: function (inst, selector, pane, action) {
        var $E  = $(selector)
        ,   o   = inst.options
        ,   err = o.errors.addButtonError
        ;
        if (!$E.length) { // element not found
            $.layout.msg(err +" "+ o.errors.selector +": "+ selector, true);
        }
        else if ($.inArray(pane, $.layout.config.borderPanes) < 0) { // invalid 'pane' sepecified
            $.layout.msg(err +" "+ o.errors.pane +": "+ pane, true);
            $E = $("");  // NO BUTTON
        }
        else { // VALID
            var btn = o[pane].buttonClass +"-"+ action;
            $E  .addClass( btn +" "+ btn +"-"+ pane )
                .data("layoutName", o.name); // add layout identifier - even if blank!
        }
        return $E;
    }


    /**
    * NEW syntax for binding layout-buttons - will eventually replace addToggle, addOpen, etc.
    *
    * @param {Object}           inst        Layout Instance object
    * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
    * @param {string}           action
    * @param {string}           pane
    */
,   bind: function (inst, selector, action, pane) {
        var _ = $.layout.buttons;
        switch (action.toLowerCase()) {
            case "toggle":          _.addToggle (inst, selector, pane); break;  
            case "open":            _.addOpen   (inst, selector, pane); break;
            case "close":           _.addClose  (inst, selector, pane); break;
            case "pin":             _.addPin    (inst, selector, pane); break;
            case "toggle-slide":    _.addToggle (inst, selector, pane, true); break;    
            case "open-slide":      _.addOpen   (inst, selector, pane, true); break;
        }
        return inst;
    }

    /**
    * Add a custom Toggler button for a pane
    *
    * @param {Object}           inst        Layout Instance object
    * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
    * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
    * @param {boolean=}         slide       true = slide-open, false = pin-open
    */
,   addToggle: function (inst, selector, pane, slide) {
        $.layout.buttons.get(inst, selector, pane, "toggle")
            .click(function(evt){
                inst.toggle(pane, !!slide);
                evt.stopPropagation();
            });
        return inst;
    }

    /**
    * Add a custom Open button for a pane
    *
    * @param {Object}           inst        Layout Instance object
    * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
    * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
    * @param {boolean=}         slide       true = slide-open, false = pin-open
    */
,   addOpen: function (inst, selector, pane, slide) {
        $.layout.buttons.get(inst, selector, pane, "open")
            .attr("title", inst.options[pane].tips.Open)
            .click(function (evt) {
                inst.open(pane, !!slide);
                evt.stopPropagation();
            });
        return inst;
    }

    /**
    * Add a custom Close button for a pane
    *
    * @param {Object}           inst        Layout Instance object
    * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
    * @param {string}           pane        Name of the pane the button is for: 'north', 'south', etc.
    */
,   addClose: function (inst, selector, pane) {
        $.layout.buttons.get(inst, selector, pane, "close")
            .attr("title", inst.options[pane].tips.Close)
            .click(function (evt) {
                inst.close(pane);
                evt.stopPropagation();
            });
        return inst;
    }

    /**
    * Add a custom Pin button for a pane
    *
    * Four classes are added to the element, based on the paneClass for the associated pane...
    * Assuming the default paneClass and the pin is 'up', these classes are added for a west-pane pin:
    *  - ui-layout-pane-pin
    *  - ui-layout-pane-west-pin
    *  - ui-layout-pane-pin-up
    *  - ui-layout-pane-west-pin-up
    *
    * @param {Object}           inst        Layout Instance object
    * @param {(string|!Object)} selector    jQuery selector (or element) for button, eg: ".ui-layout-north .toggle-button"
    * @param {string}           pane        Name of the pane the pin is for: 'north', 'south', etc.
    */
,   addPin: function (inst, selector, pane) {
        var _   = $.layout.buttons
        ,   $E  = _.get(inst, selector, pane, "pin");
        if ($E.length) {
            var s = inst.state[pane];
            $E.click(function (evt) {
                _.setPinState(inst, $(this), pane, (s.isSliding || s.isClosed));
                if (s.isSliding || s.isClosed) inst.open( pane ); // change from sliding to open
                else inst.close( pane ); // slide-closed
                evt.stopPropagation();
            });
            // add up/down pin attributes and classes
            _.setPinState(inst, $E, pane, (!s.isClosed && !s.isSliding));
            // add this pin to the pane data so we can 'sync it' automatically
            // PANE.pins key is an array so we can store multiple pins for each pane
            s.pins.push( selector ); // just save the selector string
        }
        return inst;
    }

    /**
    * Change the class of the pin button to make it look 'up' or 'down'
    *
    * @see  addPin(), syncPins()
    *
    * @param {Object}           inst    Layout Instance object
    * @param {Array.<Object>}   $Pin    The pin-span element in a jQuery wrapper
    * @param {string}           pane    These are the params returned to callbacks by layout()
    * @param {boolean}          doPin   true = set the pin 'down', false = set it 'up'
    */
,   setPinState: function (inst, $Pin, pane, doPin) {
        var updown = $Pin.attr("pin");
        if (updown && doPin === (updown=="down")) return; // already in correct state
        var
            o       = inst.options[pane]
        ,   pin     = o.buttonClass +"-pin"
        ,   side    = pin +"-"+ pane
        ,   UP      = pin +"-up "+  side +"-up"
        ,   DN      = pin +"-down "+side +"-down"
        ;
        $Pin
            .attr("pin", doPin ? "down" : "up") // logic
            .attr("title", doPin ? o.tips.Unpin : o.tips.Pin)
            .removeClass( doPin ? UP : DN ) 
            .addClass( doPin ? DN : UP ) 
        ;
    }

    /**
    * INTERNAL function to sync 'pin buttons' when pane is opened or closed
    * Unpinned means the pane is 'sliding' - ie, over-top of the adjacent panes
    *
    * @see  open(), close()
    *
    * @param {Object}           inst    Layout Instance object
    * @param {string}   pane    These are the params returned to callbacks by layout()
    * @param {boolean}  doPin   True means set the pin 'down', False means 'up'
    */
,   syncPinBtns: function (inst, pane, doPin) {
        // REAL METHOD IS _INSIDE_ LAYOUT - THIS IS HERE JUST FOR REFERENCE
        $.each(inst.state[pane].pins, function (i, selector) {
            $.layout.buttons.setPinState(inst, $(selector), pane, doPin);
        });
    }


,   _load: function (inst) {
        var _   = $.layout.buttons;
        // ADD Button methods to Layout Instance
        // Note: sel = jQuery Selector string
        $.extend( inst, {
            bindButton:     function (sel, action, pane) { return _.bind(inst, sel, action, pane); }
        //  DEPRECATED METHODS
        ,   addToggleBtn:   function (sel, pane, slide) { return _.addToggle(inst, sel, pane, slide); }
        ,   addOpenBtn:     function (sel, pane, slide) { return _.addOpen(inst, sel, pane, slide); }
        ,   addCloseBtn:    function (sel, pane) { return _.addClose(inst, sel, pane); }
        ,   addPinBtn:      function (sel, pane) { return _.addPin(inst, sel, pane); }
        });

        // init state array to hold pin-buttons
        for (var i=0; i<4; i++) {
            var pane = $.layout.config.borderPanes[i];
            inst.state[pane].pins = [];
        }

        // auto-init buttons onLoad if option is enabled
        if ( inst.options.autoBindCustomButtons )
            _.init(inst);
    }

,   _unload: function (inst) {
        // TODO: unbind all buttons???
    }

};

// add initialization method to Layout's onLoad array of functions
$.layout.onLoad.push(  $.layout.buttons._load );
//$.layout.onUnload.push( $.layout.buttons._unload );



/**
 * jquery.layout.browserZoom 1.0
 * $Date: 2011-12-29 08:00:00 (Thu, 29 Dec 2011) $
 *
 * Copyright (c) 2012 
 *   Kevin Dalman (http://allpro.net)
 *
 * Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
 * and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.
 *
 * @requires: UI Layout 1.3.0.rc30.1 or higher
 *
 * @see: http://groups.google.com/group/jquery-ui-layout
 *
 * TODO: Extend logic to handle other problematic zooming in browsers
 * TODO: Add hotkey/mousewheel bindings to _instantly_ respond to these zoom event
 */

// tell Layout that the plugin is available
$.layout.plugins.browserZoom = true;

$.layout.defaults.browserZoomCheckInterval = 1000;
$.layout.optionsMap.layout.push("browserZoomCheckInterval");

/*
 *  browserZoom methods
 */
$.layout.browserZoom = {

    _init: function (inst) {
        // abort if browser does not need this check
        if ($.layout.browserZoom.ratio() !== false)
            $.layout.browserZoom._setTimer(inst);
    }

,   _setTimer: function (inst) {
        // abort if layout destroyed or browser does not need this check
        if (inst.destroyed) return;
        var o   = inst.options
        ,   s   = inst.state
        //  don't need check if inst has parentLayout, but check occassionally in case parent destroyed!
        //  MINIMUM 100ms interval, for performance
        ,   ms  = inst.hasParentLayout ?  5000 : Math.max( o.browserZoomCheckInterval, 100 )
        ;
        // set the timer
        setTimeout(function(){
            if (inst.destroyed || !o.resizeWithWindow) return;
            var d = $.layout.browserZoom.ratio();
            if (d !== s.browserZoom) {
                s.browserZoom = d;
                inst.resizeAll();
            }
            // set a NEW timeout
            $.layout.browserZoom._setTimer(inst);
        }
        ,   ms );
    }

,   ratio: function () {
        var w   = window
        ,   s   = screen
        ,   d   = document
        ,   dE  = d.documentElement || d.body
        ,   b   = $.layout.browser
        ,   v   = b.version
        ,   r, sW, cW
        ;
        // we can ignore all browsers that fire window.resize event onZoom
        if ((b.msie && v > 8)
        ||  !b.msie
        ) return false; // don't need to track zoom

        if (s.deviceXDPI && s.systemXDPI) // syntax compiler hack
            return calc(s.deviceXDPI, s.systemXDPI);
        // everything below is just for future reference!
        if (b.webkit && (r = d.body.getBoundingClientRect))
            return calc((r.left - r.right), d.body.offsetWidth);
        if (b.webkit && (sW = w.outerWidth))
            return calc(sW, w.innerWidth);
        if ((sW = s.width) && (cW = dE.clientWidth))
            return calc(sW, cW);
        return false; // no match, so cannot - or don't need to - track zoom

        function calc (x,y) { return (parseInt(x,10) / parseInt(y,10) * 100).toFixed(); }
    }

};
// add initialization method to Layout's onLoad array of functions
$.layout.onReady.push( $.layout.browserZoom._init );


})( jQuery );
(function() {
  var vexFactory;

  vexFactory = function($) {
    var animationEndSupport, vex;
    animationEndSupport = false;
    $(function() {
      var s;
      s = (document.body || document.documentElement).style;
      animationEndSupport = s.animation !== void 0 || s.WebkitAnimation !== void 0 || s.MozAnimation !== void 0 || s.MsAnimation !== void 0 || s.OAnimation !== void 0;
      return $(window).bind('keyup.vex', function(event) {
        if (event.keyCode === 27) {
          return vex.closeByEscape();
        }
      });
    });
    return vex = {
      globalID: 1,
      animationEndEvent: 'animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend',
      baseClassNames: {
        vex: 'vex',
        content: 'vex-content',
        overlay: 'vex-overlay',
        close: 'vex-close',
        closing: 'vex-closing',
        open: 'vex-open'
      },
      defaultOptions: {
        content: '',
        showCloseButton: true,
        escapeButtonCloses: true,
        overlayClosesOnClick: true,
        appendLocation: 'body',
        className: '',
        css: {},
        overlayClassName: '',
        overlayCSS: {},
        contentClassName: '',
        contentCSS: {},
        closeClassName: '',
        closeCSS: {}
      },
      open: function(options) {
        options = $.extend({}, vex.defaultOptions, options);
        options.id = vex.globalID;
        vex.globalID += 1;
        options.$vex = $('<div>').addClass(vex.baseClassNames.vex).addClass(options.className).css(options.css).data({
          vex: options
        });
        options.$vexOverlay = $('<div>').addClass(vex.baseClassNames.overlay).addClass(options.overlayClassName).css(options.overlayCSS).data({
          vex: options
        });
        if (options.overlayClosesOnClick) {
          options.$vexOverlay.bind('click.vex', function(e) {
            if (e.target !== this) {
              return;
            }
            return vex.close($(this).data().vex.id);
          });
        }
        options.$vex.append(options.$vexOverlay);
        options.$vexContent = $('<div>').addClass(vex.baseClassNames.content).addClass(options.contentClassName).css(options.contentCSS).append(options.content).data({
          vex: options
        });
        options.$vex.append(options.$vexContent);
        if (options.showCloseButton) {
          options.$closeButton = $('<div>').addClass(vex.baseClassNames.close).addClass(options.closeClassName).css(options.closeCSS).data({
            vex: options
          }).bind('click.vex', function() {
            return vex.close($(this).data().vex.id);
          });
          options.$vexContent.append(options.$closeButton);
        }
        $(options.appendLocation).append(options.$vex);
        vex.setupBodyClassName(options.$vex);
        if (options.afterOpen) {
          options.afterOpen(options.$vexContent, options);
        }
        setTimeout((function() {
          return options.$vexContent.trigger('vexOpen', options);
        }), 0);
        return options.$vexContent;
      },
      getAllVexes: function() {
        return $("." + vex.baseClassNames.vex + ":not(\"." + vex.baseClassNames.closing + "\") ." + vex.baseClassNames.content);
      },
      getVexByID: function(id) {
        return vex.getAllVexes().filter(function() {
          return $(this).data().vex.id === id;
        });
      },
      close: function(id) {
        var $lastVex;
        if (!id) {
          $lastVex = vex.getAllVexes().last();
          if (!$lastVex.length) {
            return false;
          }
          id = $lastVex.data().vex.id;
        }
        return vex.closeByID(id);
      },
      closeAll: function() {
        var ids;
        ids = vex.getAllVexes().map(function() {
          return $(this).data().vex.id;
        }).toArray();
        if (!(ids != null ? ids.length : void 0)) {
          return false;
        }
        $.each(ids.reverse(), function(index, id) {
          return vex.closeByID(id);
        });
        return true;
      },
      closeByID: function(id) {
        var $vex, $vexContent, beforeClose, close, options;
        $vexContent = vex.getVexByID(id);
        if (!$vexContent.length) {
          return;
        }
        $vex = $vexContent.data().vex.$vex;
        options = $.extend({}, $vexContent.data().vex);
        beforeClose = function() {
          if (options.beforeClose) {
            return options.beforeClose($vexContent, options);
          }
        };
        close = function() {
          $vexContent.trigger('vexClose', options);
          $vex.remove();
          if (options.afterClose) {
            return options.afterClose($vexContent, options);
          }
        };
        if (animationEndSupport) {
          beforeClose();
          $vex.unbind(vex.animationEndEvent).bind(vex.animationEndEvent, function() {
            return close();
          }).addClass(vex.baseClassNames.closing);
        } else {
          beforeClose();
          close();
        }
        return true;
      },
      closeByEscape: function() {
        var $lastVex, id, ids;
        ids = vex.getAllVexes().map(function() {
          return $(this).data().vex.id;
        }).toArray();
        if (!(ids != null ? ids.length : void 0)) {
          return false;
        }
        id = Math.max.apply(Math, ids);
        $lastVex = vex.getVexByID(id);
        if ($lastVex.data().vex.escapeButtonCloses !== true) {
          return false;
        }
        return vex.closeByID(id);
      },
      setupBodyClassName: function($vex) {
        return $vex.bind('vexOpen.vex', function() {
          return $('body').addClass(vex.baseClassNames.open);
        }).bind('vexClose.vex', function() {
          if (!vex.getAllVexes().length) {
            return $('body').removeClass(vex.baseClassNames.open);
          }
        });
      },
      hideLoading: function() {
        return $('.vex-loading-spinner').remove();
      },
      showLoading: function() {
        vex.hideLoading();
        return $('body').append("<div class=\"vex-loading-spinner " + vex.defaultOptions.className + "\"></div>");
      }
    };
  };

  if (typeof define === 'function' && define.amd) {
    define(['jquery'], vexFactory);
  } else if (typeof exports === 'object') {
    module.exports = vexFactory(require('jquery'));
  } else {
    window.vex = vexFactory(jQuery);
  }

}).call(this);

(function() {
  var vexDialogFactory;

  vexDialogFactory = function($, vex) {

    var $formToObject, dialog;
    if (vex == null) {
      return $.error('Vex is required to use vex.dialog');
    }

    $formToObject = function($form) {
      var object;
      object = {};
      $.each($form.serializeArray(), function() {
        if (object[this.name]) {
          if (!object[this.name].push) {
            object[this.name] = [object[this.name]];
          }
          return object[this.name].push(this.value || '');
        } else {
          return object[this.name] = this.value || '';
        }
      });
      return object;
    };

    dialog = {};
    dialog.buttons = {
      YES: {
        text: 'OK',
        type: 'submit',
        className: 'vex-dialog-button-primary'
      },
      NO: {
        text: 'Cancel',
        type: 'button',
        className: 'vex-dialog-button-secondary',
        click: function($vexContent, event) {
          $vexContent.data().vex.value = false;
          return vex.close($vexContent.data().vex.id);
        }
      }
    };

    dialog.defaultOptions = {
      callback: function(value) {},
      afterOpen: function() {},
      message: 'Message',
      input: "<input name=\"vex\" type=\"hidden\" value=\"_vex-empty-value\" />",
      value: false,
      buttons: [dialog.buttons.YES, dialog.buttons.NO],
      showCloseButton: true,
      onSubmit: function(event) {
        var $form, $vexContent;
        $form = $(this);
        $vexContent = $form.parent();
        event.preventDefault();
        event.stopPropagation();
        $vexContent.data().vex.value = dialog.getFormValueOnSubmit($formToObject($form));
        return vex.close($vexContent.data().vex.id);
      },
      focusFirstInput: true
    };

    dialog.defaultAlertOptions = {
      message: 'Alert',
      buttons: [dialog.buttons.YES]
    };

    dialog.defaultConfirmOptions = {
      message: 'Confirm'
    };

    dialog.open = function(options) {
      var $vexContent;
      options = $.extend({}, vex.defaultOptions, dialog.defaultOptions, options);
      options.content = dialog.buildDialogForm(options);
      options.beforeClose = function($vexContent) {
        return options.callback($vexContent.data().vex.value);
      };
      $vexContent = vex.open(options);
      if (options.focusFirstInput) {
        $vexContent.find('input[type="text"], input[type="submit"]').first().focus();
      }
      return $vexContent;
    };

    dialog.alert = function(options) {
      if (typeof options === 'string') {
        options = {
          message: options
        };
      }
      options = $.extend({}, dialog.defaultAlertOptions, options);
      return dialog.open(options);
    };

    dialog.confirm = function(options) {
      if (typeof options === 'string') {
        return $.error('dialog.confirm(options) requires options.callback.');
      }
      options = $.extend({}, dialog.defaultConfirmOptions, options);
      return dialog.open(options);
    };

    dialog.prompt = function(options) {
      var defaultPromptOptions;
      if (typeof options === 'string') {
        return $.error('dialog.prompt(options) requires options.callback.');
      }
      defaultPromptOptions = {
        message: "<label for=\"vex\">" + (options.label || 'Prompt:') + "</label>",
        input: "<input name=\"vex\" type=\"text\" class=\"vex-dialog-prompt-input\" placeholder=\"" + (options.placeholder || '') + "\"  value=\"" + (options.value || '') + "\" />"
      };
      options = $.extend({}, defaultPromptOptions, options);
      return dialog.open(options);
    };

    dialog.buildDialogForm = function(options) {

      var $form, $input, $message,$title;
      /* icon-exclamation-sign */
      var titleTmpl = '<div class="vex-dialog-title"><i class="{0}"></i>{1}</div>'.replace( '{0}',!options['iconCls'] ? '' : options['iconCls'] )
                                                                                  .replace( '{1}',!options['title'] ? '' : options['title'] );

      $form = $('<form class="vex-dialog-form" />');
      $title = $( titleTmpl );
      $message = $('<div class="vex-dialog-message" />');
      $input = $('<div class="vex-dialog-input" />');

      if( options['title'] ){ $form.append( $title ); }

      $form.append($message.append(options.message)).append($input.append(options.input)).append(dialog.buttonsToDOM(options.buttons)).bind('submit.vex', options.onSubmit);
      return $form;
    };

    dialog.getFormValueOnSubmit = function(formData) {
      if (formData.vex) {
        if (formData.vex === '_vex-empty-value') {
          return true;
        }
        return formData.vex;
      } else {
        return formData;
      }
    };

    dialog.buttonsToDOM = function(buttons) {

      var $buttons;
      $buttons = $('<div class="vex-dialog-buttons" />');
      $.each(buttons, function(index, button) {
        return $buttons.append($("<input type=\"" + button.type + "\" />").val(button.text).addClass(button.className + ' vex-dialog-button ' + (index === 0 ? 'vex-first ' : '') + (index === buttons.length - 1 ? 'vex-last ' : '')).bind('click.vex', function(e) {
          if (button.click) {
            return button.click($(this).parents("." + vex.baseClassNames.content), e);
          }
        }));
      });
      return $buttons;
    };
    
    return dialog;

  };

  if (typeof define === 'function' && define.amd) {
    define(['jquery', 'vex'], vexDialogFactory);
  } else if (typeof exports === 'object') {
    module.exports = vexDialogFactory(require('jquery'), require('vex'));
  } else {
    window.vex.dialog = vexDialogFactory(window.jQuery, window.vex);
  }

}).call(this);

/**
 *  ebaui的核心文件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $ ){

    var uuid = 0;

    //  [Javascript Char Codes (Key Codes)](http://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes)
    var keycodes = {

        //  主键盘区的功能键
        backspace  : 8,
        tab        : 9,
        enter      : 13,
        shift      : 16,
        ctrl       : 17,
        alt        : 18,
        caps_lock  : 20,
        escape     : 27,
        
        //  主键盘区的功能键
        f1         : 112,
        f2         : 113,
        f3         : 114,
        f4         : 115,
        f5         : 116,
        f6         : 117,
        f7         : 118,
        f8         : 119,
        f9         : 120,
        f10        : 121,
        f11        : 122,
        f12        : 124,
        
        //  主键盘区的数字键
        number     : [48,49,50,51,52,53,54,55,56,57],

        //  主键盘上的'='符号
        equalSign:187,
        //  主键盘上的','符号
        comma:188,
        //  主键盘上的'-'符号
        dash:189,

        //  小键盘上功能键
        pause_break: 19,
        page_up    : 33,
        page_down  : 34,
        end        : 35,
        home       : 36,
        left_arrow : 37,
        up_arrow   : 38,
        right_arrow: 39,
        down_arrow : 40,
        insert     : 45,
        del        : 46,

        //  小键盘上的数字键
        numpad     : [96,97,98,99,100,101,102,103,104,105],

        /**
         *  判断键盘输入是否是数字
         *  @public
         *  @static
         *  @method     isNumber
         *  @memberof   ebaui.keycodes
         */
        isNumber:function( code ){

            if( typeof code !== 'number' ){
                return false;
            }
            
            /* 输入的值在数字键盘区域 */
            var inNumPad = ( 96 <= code && code <= 105 );
            /* 输入的值在主键盘区域 */
            var inMainPad = ( 48 <= code && code <= 57 );

            return (inNumPad || inMainPad);

        }

    };

    /** 
     *  ebaui 全局命名空间
     *  @namespace  ebaui
     */
    var ebaui = {
        
        /**
         *  键盘键位的key值
         *  @public
         *  @static
         *  @member     {Object}    keycodes
         *  @memberof   ebaui
         */
        keycodes       : keycodes,

        escape:function( str ){

            var re = /[&<>"']/g;
            var map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#x27;'
            };

            if (str == null){ 
                return ''; 
            }
            return ('' + str).replace(re, function(match) {
                return map[match];
            });

        },

        unescape:function( str ){
            var re = /(&amp;|&lt;|&gt;|&quot;|&#x27;)/g;
            var map = {
                '&amp;' : '&',
                '&lt;'  : '<',
                '&gt;'  : '>',
                '&quot;': '"',
                '&#x27;': "'"
            };

            if (str == null){ 
                return ''; 
            }
            return ('' + str).replace(re, function(match) {
                return map[match];
            });
        },

        /** 
         *  将javascript对象序列化成JSON字符串
         *  @public
         *  @static
         *  @method     toJSON
         *  @memberof   ebaui
         *  @param      {Object}    val     -   要进行JSON序列化的对象
         */
        toJSON : function( val ){

            if( !val ){ return ''; }

            return JSON.stringify( val );

        },

        /** 
         *  将JSON字符串反序列化成javascript对象
         *  @public
         *  @static
         *  @method     fromJSON
         *  @memberof   ebaui
         *  @param      {String}    json    -   JSON字符串
         */
        fromJSON : function( json ){

            if( !json ){ return null; }

            return JSON.parse( json );

        },



        /** 
         *  生成guid
         *  @public
         *  @static
         *  @method     guid
         *  @memberof   ebaui
         *  @return     {String}    guid
         */
        guid : function(){
            return 'eba-ui-' + ( ++uuid );
        },

        /** 
         *  根据控件ID获取控件对象
         *  @public
         *  @static
         *  @method     getById
         *  @memberof   ebaui
         *  @param      {String}    id              -   控件ID
         *  @param      {String}    [contextId]     -   控件上下文容器ID
         *  @return     {Object}
         */
        getById : function( id,contextId ){
            return ebaui.get( '#' + id,contextId );
        },

        /** 
         *  根据css选择器获取控件对象
         *  @public
         *  @static
         *  @method     get
         *  @memberof   ebaui
         *  @param      {String}    cssSelector   -   控件css选择器
         *  @param      {String}    [context]     -   控件上下文容器css选择器
         *  @return     {Object}
         */
        get : function( cssSelector,context ){
            var $dom = $( cssSelector,context );
            return $dom.data('model');
        },

        /** 
         *  加载PC端HTML模板信息，并且自动初始化每一个UI控件
         *  @public
         *  @static
         *  @method     parseUi
         *  @memberof   ebaui.web
         *  @param      {String}    上下文CSS选择器
         */
        parseUi : function( context ){
            this.web.parseUi( context );
        }

    };

    window.ebaui = ebaui;

    $( function(){ 

        ebaui.parseUi();

        var trigger = function( handle ){
            var fn = window[handle];
            if( fn && typeof fn == 'function' ){
                fn();
            }
        };

        trigger( 'initPage' );

        $( window ).on( 'load',function( eventArgs ){
            trigger( 'loadPage' );
        });

        $( window ).on( 'unload',function( eventArgs ){
            trigger( 'unloadPage' );
        } );

    } );

})( jQuery );

/**
 *  ebaui.web
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ){

    var namespace = {
        
        /** 
         *  项目引用eba.ui框架的时候，自动算出ebaui.js前面的URL路径
         *  @public
         *  @static
         *  @member     {String}    templates
         *  @memberof   ebaui.web
         */
        urlRoot : '',

        formControls : [],

        controls : [],

        /** 
         *  HTML模板
         *  @public
         *  @static
         *  @member     {String}    templateString
         *  @memberof   ebaui.web
         */
        templateString : '',

        /** 
         *  HTML模板的URL地址
         *  @public
         *  @static
         *  @member     {String}    templates
         *  @memberof   ebaui.web
         */
        templateUrl : '',

        /** 
         *  
         *  @public
         *  @static
         *  @method     _loadRemoteTemplates
         *  @memberof   ebaui.web
         *  @param      {Function}  success     - HTML模板加载成功的回调
         *  @param      {Function}  error       - HTML模板加载失败的回调
         */
        _loadRemoteTemplates:function(success,error){

            var me = this;
            var templatesUrl = me.templateUrl;
            if( !me.urlRoot ){

                var RE = /(.*)\/(ebaui\.js|ebaui(-\d\.\d\.\d)?\.js|ebaui(-\d\.\d\.\d)?\.min\.js)(.*)$/;
                var scripts = document.getElementsByTagName('script');
                for( var i = 0 ,l = scripts.length;i < l;i++ ){
                    var scriptSrc = scripts[i].src;
                    if( RE.test( scriptSrc ) ){
                        var matched = RE.exec( scriptSrc );
                        var prefix = matched[1];
                        if( prefix.substring( prefix.length - 1,prefix.length ) != '/' ){
                            prefix += '/';
                        }
                        me.urlRoot = prefix;
                        break;
                    }
                }

            }

            if( !me.templateUrl ){
                templatesUrl = me.urlRoot + 'ebaui.templates.html';
            }

            if( templatesUrl ){

                $.ajax({
                    type    : 'GET',
                    dataType: 'html',
                    url     : templatesUrl,
                    async   : false,
                    success : function( serverData ){
                        success( serverData );
                    }
                });

            }else{

                ebaui.log( 'loadTemplates error' );
                if(typeof error === 'function' ){
                    error();
                }

            }

        },

        /** 
         *  
         *  @public
         *  @static
         *  @method     _loadLocalTemplates
         *  @memberof   ebaui.web
         *  @param      {Function}  success     - HTML模板加载成功的回调
         *  @param      {Function}  error       - HTML模板加载失败的回调
         */
        _loadLocalTemplates:function(success,error){
            success( this.templateString );
        },

        /** 
         *  加载WEB控件的HTML模板
         *  @public
         *  @static
         *  @method     loadTemplates
         *  @memberof   ebaui.web
         *  @param      {Function}  successFn     - HTML模板加载成功的回调
         *  @param      {Function}  errorFn       - HTML模板加载失败的回调
         */
        loadTemplates : function( successFn,errorFn ){
            var me = this;
            if( !me.templateString ){
                me._loadRemoteTemplates( successFn,errorFn );
            }else{
                me._loadLocalTemplates( successFn,errorFn );
            }
        },

        /** 
         *  注册成为一个UI控件
         *  @public
         *  @static
         *  @method     registerControl
         *  @memberof   ebaui.web
         *  @param      {String}    name        - 控件名
         */
        registerControl : function( name ){
            if( !name ){ return; }
            this.controls.push( name.toLocaleLowerCase() );
        },

        /** 
         *  注册成为一个Form表单UI控件
         *  @public
         *  @static
         *  @method     registerControl
         *  @memberof   ebaui.web
         *  @param      {String}    name        - 控件名
         */
        registerFormControl:function( name ){
            if( !name ){ return; }
            name = name.toLocaleLowerCase();
            this.controls.push( name );
            this.formControls.push( name );
        },

        /** 
         *  自动初始化所有WEB控件。其实所有的控件最后都有一个对应的jquery插件方法，初始化的时候就是调用这个插件方法去实例化一个控件。
         *  @public
         *  @static
         *  @method     parseControls
         *  @memberof   ebaui.web
         */
        parseControls : function( context ){

            var controls = this.controls;
            for( var i = 0,l = controls.length; i<l; i++ ){

                var control = controls[i];
                var jqSelector = '[data-role="' + control + '"]';
                var $elements = $( jqSelector,context );
                if( $elements.size() > 0 && $elements[control]){
                    $elements[control]();
                }

            }

        },

        /** 
         *  加载PC端HTML模板信息，并且自动初始化每一个UI控件
         *  @public
         *  @static
         *  @method     parseUi
         *  @memberof   ebaui.web
         *  @param      {String}    上下文CSS选择器
         */
        parseUi : function( context ){

            var self = this;
            var controlParser = self.parser;

            context  = context || document;

            self.loadTemplates( function( serverData ){

                var selector = '#ebaui-templates';
                var $dom = $(selector);
                if( $dom.size() == 0 ){
                    $dom = $( '<div id="ebaui-templates" style="display:none;"></div>' ).appendTo(document.body);
                }

                $dom.html( serverData );
                self.parseControls( context );

            } );

        },

        /**
         *  ebaui前端框架执行的一系列浏览器特性检测以及BUG的结果
         *  @memberof   ebaui.web
         *  @member     {Object}    support
         */
        support : {},

        /**
         *  表单控件验证规则的构造器工厂，默认提供required,email,url等验证规则  <br />
         *  关于如何启用验证规则请参考 {@tutorial form_index}  <br />
         *  关于拓展当前控件规则请参考 {@tutorial extend_validationRules}  <br />
         *  @public
         *  @member     {Object}    validationRules
         *  @memberof   ebaui.web
         *  @property   {RequiredValidator}     required        -       required验证规则构造函数
         *  @property   {EmailValidator}        email           -       email地址验证规则构造函数
         *  @property   {UrlValidator}          url             -       url地址验证规则构造函数
         *  @property   {UrlValidator}          captcha         -       认证码验证规则构造函数
         */
        validationRules:{}
    };

    /** 
     *  PC端浏览器控件所属命名空间
     *  @namespace  ebaui.web
     */
    ebaui['web'] = namespace;

    /** 
     *  给指定的HTML元素设置遮罩
     *  @method     mask
     *  @memberof   ebaui
     *  @param      {Object}    selector                 -   必选，jquery 选择器
     *  @param      {String}    [label='']       -   可选，遮罩层的文本信息
     *  @param      {Number}    [delay=null]             -   可选，在HTML元素打上遮罩之前的延迟时间
     *  @param      {Object}    [context=null]           -   可选，jquery 选择器上下文
     */
    ebaui['mask'] = function( selector, label, delay, context ){
        label = ( !label ) ? '' : label;
        return $( selector,context ).mask(label, delay);
    };

    /** 
     *  取消指定HTML元素上的遮罩
     *  @method     unmask
     *  @memberof   ebaui
     *  @param      {Object}    selector           -   必选，jquery 选择器
     *  @param      {Object}    [context=null]     -   可选，jquery 选择器上下文
     */
    ebaui['unmask'] = function( selector, context ){
        return $( selector,context ).unmask();
    };

    /** 
     *  判断指定的HTML元素是否有遮罩
     *  @method     isMasked
     *  @memberof   ebaui
     *  @param      {Object}    selector           -   必选，jquery 选择器
     *  @param      {Object}    [context=null]     -   可选，jquery 选择器上下文
     */
    ebaui['isMasked'] = function( selector, context ){
        return $( selector,context ).isMasked();
    };

    /** 
     *  alert对话框
     *  @method     alert
     *  @memberof   ebaui
     *  @param      {String}        message                     -   alert的提示消息
     */
    ebaui['alert'] = function( msg ){
        vex.dialog.alert({
            title  : '提示',
            iconCls: 'icon-warning-sign',
            className: 'vex-theme-default',
            message: msg
        });
    };

    /** 
     *  confirm对话框
     *  @method     confirm
     *  @memberof   ebaui
     *  @param      {Object}        options                     -  配置对象
     *  @prop       {String}        options.message             -   confirm的提示消息
     *  @prop       {Function}      options.callback            -   点击确定或者取消按钮的回调函数
     *  @example    
     *      ebaui.confirm({
     *          message  : 'confirm',
     *          callback : function( value ){
     *              //  true or false
     *              console.log( value );
     *          }
     *      });
     */
    ebaui['confirm'] = function( opts ){
        var vexOpts = $.extend({}, {
            title    : '确认',
            iconCls  : 'icon-question-sign',
            className: 'vex-theme-default',
            buttons  : [vex.dialog.buttons.NO,vex.dialog.buttons.YES]
        }, opts);
        vex.dialog.confirm( vexOpts );
    };

    /** 
     *  prompt对话框
     *  @method     prompt
     *  @memberof   ebaui
     *  @param      {Object}        options                      -  配置对象
     *  @prop       {String}        options.message             -   prompt的提示消息
     *  @prop       {String}        options.placeholder         -   prompt的文本占位符
     *  @prop       {Function}      options.callback            -   点击确定或者取消按钮的回调函数
     *  @example    
     *      ebaui.prompt({
     *          message      : 'prompt',
     *          placeholder  : 'placeholder',
     *          callback     : function( value ){
     *              //  the value is what user has typed in the textbox
     *              console.log( value );
     *          }
     *      });
     */
    ebaui['prompt'] = function( opts ){
        opts = $.extend({}, {
            title    : '提示',
            className: 'vex-theme-default',
            buttons  : [vex.dialog.buttons.NO,vex.dialog.buttons.YES]
        }, opts);
        vex.dialog.prompt( opts );
    };

    /** 
     *  打开一个新的窗口
     *  @method     win
     *  @memberof   ebaui
     *  @param      {Object}        options                   -   配置对象
     *  @prop       {String}        options.title             -   窗口的标题
     *  @prop       {String}        options.url               -   窗口的url地址，优先使用
     *  @prop       {String}        options.iconCls           -   窗口的icon
     *  @prop       {String}        options.content           -   作为窗口的静态内容，如果url为空，则采用content作为窗口内容
     *  @prop       {Number}        options.width             -   窗口的宽度
     *  @prop       {Number}        options.height            -   窗口的高度
     *  @prop       {Function}      options.beforeclose       -   关闭窗口前的事件处理程序
     *  @prop       {Function}      options.afterclose        -   关闭窗口后的事件处理程序
     *  @example    
     *      ebaui.win({
     *          url    : 'http://www.baidu.com',
     *          title  : 'baidu'
     *      });
     */
    ebaui['win'] = function( opts ){

        if( !opts ){ return;}
        if( !opts['url'] || opts['content'] ){ return; }

        var winContent = '';
        var isIframe = (opts['url']) ? true : false;
        if( isIframe ){
            winContent = '';
        }else{
            winContent = $( opts['content'] ).html();
        }

        var html = '';
        var wrapper = '<div class="vex-dialog-form" style="height:100%;"><div class="vex-dialog-title"><i class="{0}"></i>{1}</div>{2}<div class="vex-close"></div></div>'
                      .replace('{0}',opts['iconCls'])
                      .replace('{1}',opts['title']);

        if( isIframe ){
            html = '<iframe src="{0}" style="width:100%;" frameborder="0" scrolling="no"></iframe>'.replace('{0}',opts['url']);
            opts['content'] = wrapper.replace( '{2}',html );

        }else{
            html = $( opts['content'] ).html();
            opts['content'] = wrapper.replace( '{2}',html );
        }

        var defaults = {
            title               : '',
            content             : '',
            width               : 800,
            height              : 600,
            className           : 'vex-theme-default',
            showCloseButton     : true,
            overlayClosesOnClick: false,
            
            beforeclose         : $.noop,
            afterclose          : $.noop
        };

        opts = $.extend(defaults,opts);

        var $vexContent = vex.open(opts);
        var $vex = $vexContent.parent();

        $vexContent.css({
            'border'          : '1px #eee solid',
            'width'           : opts['width'],
            'height'          : opts['height']
        });

        $vex.css({
            'padding-top'   : '50px',
            'padding-bottom': '0'
        });

        if( isIframe ){
            titleH = $('.vex-dialog-title',$vexContent).outerHeight();
            $( 'iframe',$vexContent ).css( 'height',$vexContent.height() - titleH );
        }

    };

    /** 
     *  文档请参考 http://api.jquery.com/jQuery.ajax/
     *  @method     ajax
     *  @memberof   ebaui
     */
    ebaui['ajax'] = jQuery.ajax;

    /** 
     *  文档请参考 http://api.jquery.com/jQuery.get/
     *  @method     httpGet
     *  @memberof   ebaui
     */
    ebaui['httpGet'] = jQuery.get;

    /** 
     *  http://api.jquery.com/jQuery.post/
     *  @method     httpPost
     *  @memberof   ebaui
     */
    ebaui['httpPost'] = jQuery.post;

})( jQuery,ebaui );
/**
 *  ebaui.web.support，ebaui前端框架执行的一系列浏览器特性检测以及BUG的结果
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,support ){

    support['placeholder'] = ( "placeholder" in document.createElement( "input" ) );

})( jQuery,ebaui.web.support );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  Email地址验证规则
     *  @public
     *  @class      EmailValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['email'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','email'] }"/&gt;
     */
    function EmailValidator ( params,msg ) {

        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];

    };

    EmailValidator.prototype = {

        name      : 'email',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a valid email address.'
         *  @member     {String}    message
         *  @memberof   EmailValidator
         */
        message   : 'Please enter a valid email address.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method      validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   EmailValidator
         */
        validate  : function( value ){
            return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
        }

    };

    rules['email'] = EmailValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  Required验证规则
     *  @public
     *  @class      RequiredValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['required'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','rng'] }"/&gt;
     */
    function RequiredValidator ( params,msg ) {
        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];
    };

    RequiredValidator.prototype = {

        name      : 'required',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'This field is required.'
         *  @member     {String}    message
         *  @memberof   RequiredValidator
         */
        message   : 'This field is required.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method      validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   RequiredValidator
         */
        validate  : function( value ){

            var toString = Object.prototype.toString;
            var t = toString.call( value );

            if( t == '[object String]' || t == '[object Array]' ){
                return value.length > 0;
            }else if( t == '[object Boolean]' || value === true || value === false ){
                return true;
            }
            
            return ( value ) ? true : false;
            
        }

    };

    rules['required'] = RequiredValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  Url地址验证规则
     *  @public
     *  @class      UrlValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['url'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','url'] }"/&gt;
     */
    function UrlValidator ( params,msg ) {
        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];
    };

    UrlValidator.prototype = {

        name      : 'url',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a valid URL.'
         *  @member     {String}    message
         *  @memberof   UrlValidator
         */
        message   : 'Please enter a valid URL.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method      validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   UrlValidator
         */
        validate  : function( value ){
            return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
        }

    };

    rules['url'] = UrlValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  控件文本值的长度验证规则，默认规则是[0,无穷大]
     *  @public
     *  @class      LengthValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['len[0,100]'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','len[0,100]'] }"/&gt;
     */
    function LengthValidator ( params,msg ) {

        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];

    };

    LengthValidator.prototype = {

        name      : 'len',

        parameters: [0],

        _parameterInvalidException:'Max length must be less than min length, please set a valid validator parameters.',

        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a value between {0} and {1}.'
         *  @member     {String}    _originalMessage
         *  @memberof   LengthValidator
         */
        _originalMessage : 'Please enter a value between {0} and {1}.',

        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a value between {0} and {1}.'
         *  @member     {String}    message
         *  @memberof   LengthValidator
         */
        message   : 'Please enter a value between {0} and {1}.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method      validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   LengthValidator
         */
        validate  : function( value ){
            
            var me = this;
            //  once I thought if you assign this validator, but you don't assign it's range 
            //  that means this validator is invalid itself
            if( me.parameters.length == 0 ){
                return true;
            }

            var isValid = false;
            var len     = me.parameters.length;
            var max     = 0;
            var min     = me.parameters[0];

            if( len > 1 ){
                max = me.parameters[1];
            }

            if( min > max ){
                throw me._parameterInvalidException;
            }

            if( !value ){
                isValid = false;
            }else{
                var valueStr = value.toString();

                if( len > 1 && min != max ){
                    isValid = (valueStr.length > min) && (valueStr.length < max);
                }else if( len > 1 && min == max ){
                    isValid = valueStr.length == min;
                }else{
                    isValid = (valueStr.length > min);
                }
            }

            me.message = me._originalMessage.replace('{0}',min).replace('{1}',len > 1 ? max : '' );

            return isValid;

        }

    };

    rules['len'] = LengthValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  控件值为Number类型的值范围
     *  @public
     *  @class      RangeValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['rng'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','rng'] }"/&gt;
     */
    function RangeValidator ( params,msg ) {
        var me              = this;
        me.message          = msg || '';
        me._originalMessage = msg || '';
        me.parameters       = params || [];
    };

    RangeValidator.prototype = {

        name      : 'rng',

        parameters: [0],

        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a value between {0} ~ {1}.'
         *  @member     {String}    _originalMessage
         *  @memberof   RangeValidator
         */
        _originalMessage : 'Please enter a value between {0} ~ {1}.',

        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a value between {0} ~ {1}.'
         *  @member     {String}    message
         *  @memberof   RangeValidator
         */
        message   : 'Please enter a value between {0} ~ {1}.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method      validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   RangeValidator
         */
        validate  : function( value ){

            var me = this;
            var value = parseFloat( value );
            var isValid = false;
            var len = me.parameters.length;
            var max = 0;
            var min = me.parameters[0];

            if( len > 1 ){
                max = me.parameters[1];
            }

            //  construct message
            me.message = me._originalMessage.replace('{0}',min);
            me.message = me.message.replace('{1}',len > 1 ? max : '' );

            //  if value is not a valid number such as int or float
            //  then return false
            var isNumbericRE = /^\d+(\.\d+)?$/i;
            if( isNumbericRE.test( value.toString() ) ){
                return isValid;
            }

            //  once I thought if you assign me validator, but you don't assign it's range 
            //  that means me validator is invalid itself
            if( me.parameters.length == 0 ){
                return true;
            }

            isValid = value > min;
            if( len > 1 ){
                max = me.parameters[1];
                isValid = isValid && (value < max);
            }

            return isValid;

        }

    };

    //  register validator
    rules['rng'] = RangeValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  身份证号码验证规则
     *  @public
     *  @class      IdentityValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['id'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','id'] }"/&gt;
     */
    function IdentityValidator ( params,msg ) {

        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];

    };

    IdentityValidator.prototype = {

        /**
         *  用于计算身份证校验码的系数
         *  @private
         *  @instance
         *  @member         {Array}    _factors
         *  @memberof       IdentityValidator
         */
        _factors  : [7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2],

        /**
         *  身份证校验码算法过程，余数对应的校验码码表
         *  @private
         *  @instance
         *  @member         {Array}    _checkcode
         *  @memberof       IdentityValidator
         */
        _checkcode: ['1','0','X','9','8','7','6','5','4','3','2'],

        name      : 'id',

        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default        'Please enter a valid id number.'
         *  @member         {String}    message
         *  @memberof       IdentityValidator
         */
        message   : 'Please enter a valid id number.',
        
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method         validate
         *  @param          {Object}    value      -      要进行验证的值
         *  @memberof       IdentityValidator
         */
        validate  : function( value ){
            
            /*  @see {http://zhidao.baidu.com/question/202372140.html|javascript 正则判断是否是身份证 正则判断是否是手机号码 正则判断是否是汉字 并且大于3小于20.}   */
            var isValid = /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/.test( value );
            if( !isValid ){ return false; }

            var idString = value.toString();
            if( idString.length == 18 ){

                /*
                 *  @see {http://baike.baidu.com/view/5112521.htm|身份证校验码}
                 *  1、将前面的身份证号码17位数分别乘以不同的系数。第i位对应的数为[2^(18-i)]mod11。从第一位到第十七位的系数分别为：7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2 ；
                 *  2、将这17位数字和系数相乘的结果相加；
                 *  3、用加出来和除以11，看余数是多少？；
                 *  4、余数只可能有0 1 2 3 4 5 6 7 8 9 10这11个数字。其分别对应的最后一位身份证的号码为1 0 X 9 8 7 6 5 4 3 2；
                 *  5、通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的x。如果余数是10，身份证的最后一位号码就是2；
                 */
                var mod = 0,sum = 0;
                for( var i=0;i<17;i++ ){ sum += parseInt( idString[i] ) * this._factors[i]; }
                mod = sum % 11;
                isValid = isValid && ( this._checkcode[mod] == idString[17] );

            }

            return isValid;

        }

    };

    rules['id'] = IdentityValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  Email地址验证规则
     *  @public
     *  @class      ZipValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['zip'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','zip'] }"/&gt;
     */
    function ZipValidator ( params,msg ) {
        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];
    };

    ZipValidator.prototype = {

        name      : 'zip',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a valid postal code.'
         *  @member     {String}    message
         *  @memberof   ZipValidator
         */
        message   : 'Please enter a valid postal code.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method     validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   ZipValidator
         */
        validate  : function( value ){

            if( !value ){ return false; }

            return /^[1-9]\d{5}$/.test( value );

        }

    };

    rules['zip'] = ZipValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  电话号码验证规则
     *  @public
     *  @class      TelephoneValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['tel'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','tel'] }"/&gt;
     */
    function TelephoneValidator ( params,msg ) {
        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];
    };

    TelephoneValidator.prototype = {

        name      : 'tel',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a valid telephone number.'
         *  @member     {String}    message
         *  @memberof   TelephoneValidator
         */
        message   : 'Please enter a valid telephone number.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method     validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   TelephoneValidator
         */
        validate  : function( value ){
            if( !value ){ return false; }
            /* http://www.cnblogs.com/cxy521/archive/2008/06/05/1214624.html */
            return /^(([0\+]\d{2,3}-)?(0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/.test( value );
        }

    };

    rules['tel'] = TelephoneValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  只允许中文字符的验证规则
     *  @public
     *  @class      OnlyCNValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['cn'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['cn','digit'] }"/&gt;
     */
    function OnlyCNValidator ( params,msg ) {
        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];
    };

    OnlyCNValidator.prototype = {

        name      : 'cn',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please only enter Chinese characters.'
         *  @member     {String}    message
         *  @memberof   OnlyCNValidator
         */
        message   : 'Please only enter Chinese characters.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method     validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   OnlyCNValidator
         */
        validate  : function( value ){
            if( !value ){ return false; }
            /* /[^\x00-\xff]+/ GBK中匹配 */
            /* /[\u4e00-\u9fa5]+/ UTF8中匹配 */
            return /[\u4e00-\u9fa5]+/.test( value ) || /[^\x00-\xff]+/.test( value );
        }

    };

    rules['cn'] = OnlyCNValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  只允许输入整数的验证规则
     *  @public
     *  @class      DigitValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['digit'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['cn','digit'] }"/&gt;
     */
    function DigitValidator ( params,msg ) {

        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];

    };

    DigitValidator.prototype = {

        name      : 'digit',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please only enter digit characters.'
         *  @member     {String}    message
         *  @memberof   DigitValidator
         */
        message   : 'Please only enter digit characters.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method     validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   DigitValidator
         */
        validate  : function( value ){
            if( value == null || value == undefined ){ return false; }
            return /\d+/.test( value.toString() );
        }

    };

    rules['digit'] = DigitValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  手机号码验证规则
     *  @public
     *  @class      MobileValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      &lt;input data-role="button" data-options="{ validators:['mobi'] }"/&gt;
     *      &lt;input data-role="button" data-options="{ validators:['required','mobi'] }"/&gt;
     */
    function MobileValidator ( params,msg ) {

        var me        = this;
        me.message    = msg || '';
        me.parameters = params || [];

    };

    MobileValidator.prototype = {

        name      : 'tel',
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    'Please enter a valid telephone number.'
         *  @member     {String}    message
         *  @memberof   MobileValidator
         */
        message   : 'Please enter a valid mobilephone number.',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method     validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   MobileValidator
         */
        validate  : function( value ){
            if( !value ){ return false; }
            /* http://www.cnblogs.com/cxy521/archive/2008/06/05/1214624.html */
            /* http://www.cnblogs.com/bluestorm/archive/2013/05/22/3092898.html */
            return /^(?:13\d|15[89]|18[019])-?\d{5}(\d{3}|\*{3})$/.test( value );
        }

    };

    rules['mobi'] = MobileValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  ebaui.validators
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,rules ){

    /**
     *  发送请求，把控件值发送到服务端进行验证，validator的每个参数都是字符串类型，使用$作为分隔符。
     *  其中，url，pass参数以及token参数是必须指定的。
     *  url指定服务端地址
     *  ，token指定控件的值要以什么样的参数名发送到服务端。
     *  ，pass参数是一个方法，实现根据服务端返回值，判断控件值是否合法。该方法有两个参数：value serverData
     *  @public
     *  @class      RemoteValidator
     *  @param      {Array}    params     -     传递给验证器的外部参数
     *  @example
     *      function captchaPass( value,serverData ){ 
     *          if( !serverData || serverData['result'] == null || serverData['result'] == undefined ){ return false; }
     *          return parseInt( serverData['result'] ) == 1;
     *      };
     *      &lt;input data-role="button" data-options="{ validators:['remote[\'url$http://192.168.102.159:8080/cas/captcha\',\'token$verify\',\'pass$captchaPass\']'] }"/&gt;
     */
    function RemoteValidator ( params,msg ) {

        var me        = this;
        me.message    = msg || '';

        if( !params || !params.length ){
            throw me._parameterInvalidException;
        }

        me.parameters = params;
        /* 解析参数，生成_ajaxConfig */
        for (var i = 0; i < params.length; i++) {

            var ajaxConfig   = me._ajaxConfig;
            var paramItem    = params[i];
            var keyValuePair = paramItem.split('$');

            for (var j = 0,l = keyValuePair.length; j < l; j++) {

                var pair  = keyValuePair[j];
                var key   = keyValuePair[0];
                var value = keyValuePair[1];

                switch( key ){

                    case 'url':
                        ajaxConfig['url'] = value;
                        break;
                    case 'dataType':
                        ajaxConfig['dataType'] = value;
                        break;
                    case 'token':
                        me._token = value;
                        ajaxConfig['data'][value] = '';
                        break;
                    case 'pass':
                        me._pass = eval( value );
                        break;
                    default:
                        ajaxConfig['data'][key] = value;
                        break;

                }

            };

        };

    };

    RemoteValidator.prototype = {

        name      : 'remote',

        /* 请求服务端进行验证的时候，控件值对应的参数名，e.g. http://aa.com?token=value */
        _token : '',

        /* ajax请求的配置 */
        _ajaxConfig : {
            url     : '',
            async   : false,
            dataType: 'json',
            /* 要提交到服务器的参数 */
            data    : {}
        },

        _isTmpl : function( str ){ return /<%=value%>/i.test( str ); },

        _pass:function( value,serverData ){ return false; },

        _parameterInvalidException:'Please set a valid validator parameters.',

        /* [ 'url:xxxx','' ] */
        parameters: [],
        /**
         *  错误提示信息
         *  @public
         *  @instance
         *  @default    ''
         *  @member     {String}    message
         *  @memberof   RemoteValidator
         */
        message   : '',
        /**
         *  执行验证
         *  @public
         *  @instance
         *  @method     validate
         *  @param      {Object}    value      -      要进行验证的值
         *  @memberof   RemoteValidator
         */
        validate  : function( value ){

            var self     = this;
            var _isValid = false;

            var extraAjaxConfig = {

                statusCode : {
                    404 : function( serverData,textStatus,jqXHR ){ _isValid = false; }
                },

                success : function( serverData ){
                    
                    if( typeof self._pass === 'function' ){
                        _isValid = self._pass( value,serverData );
                    }else{
                        _isValid = false;
                    }

                },

                error : function( jqXHR ){ self._isValid = false; }

            };

            /* 把占位符替换成控件的值 */
            var dataToServer = self._ajaxConfig.data;
            dataToServer[self._token] = value;
            dataToServer['t'] = (new Date).getTime();

            var conf = $.extend( {},self._ajaxConfig,extraAjaxConfig );
            $.ajax( conf );
            return _isValid;

        }

    };

    rules['remote'] = RemoteValidator;

})( jQuery,ebaui['web']['validationRules'] );
/**
 *  定义了ebaui所有控件的基类control类
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $ ){

    var ArrayProto     = Array.prototype;
    var slice          = ArrayProto.slice;
    var nativeForEach  = ArrayProto.forEach;
    
    var ObjectProto    = Object.prototype;
    var toString       = ObjectProto.toString;
    

    /**
     *  驼峰命名
     *  Button      -> button
     *  ButtonEdit  -> buttonEdit
     */
    ebaui.control = function( name, base, prototype ){

        var fullName, constructor, basePrototype, proxiedPrototype = {},namespace = name.split( "." )[ 0 ]; ;

        name = name.split( "." )[ 1 ];
        fullName = namespace + "-" + name;

        if ( !prototype ) {
            prototype = base;
            base = ebaui.Control;
        }

        ebaui[ namespace ] = ebaui[ namespace ] || {};

        basePrototype = new base();
        // we need to make the options hash a property directly on the new instance
        // otherwise we'll modify the options hash on the prototype that we're
        // inheriting from
        basePrototype.options = ebaui.control.extend( {}, basePrototype.options );

        $.each( prototype, function( prop, value ) {
            if ( !$.isFunction( value ) ) {
                proxiedPrototype[ prop ] = value;
                return;
            }
            proxiedPrototype[ prop ] = (function() {
                var _super = function() {
                        return base.prototype[ prop ].apply( this, arguments );
                    },
                    _superApply = function( args ) {
                        return base.prototype[ prop ].apply( this, args );
                    };
                return function() {
                    var __super = this._super,
                        __superApply = this._superApply,
                        returnValue;

                    this._super = _super;
                    this._superApply = _superApply;
                    
                    returnValue = value.apply( this, arguments );

                    this._super = __super;
                    this._superApply = __superApply;

                    return returnValue;
                };
            })();
        });

        constructor = ebaui[ namespace ][ name ] = function( options, element ) {

            // allow instantiation without "new" keyword
            if ( !this._createControl ) {
                return new constructor( options, element );
            }

            // allow instantiation without initializing for simple inheritance
            // must use "new" keyword (the code above always passes args)
            if ( arguments.length ) {
                this._createControl( options, element );
            }

        };

        constructor.prototype = ebaui.control.extend( basePrototype, proxiedPrototype, {
            constructor    : constructor,

            _namespace      : namespace,
            _controlName    : name,
            _controlFullName: fullName

        } );

        ebaui.control.bridge( name, constructor );

        return constructor;

    };

    ebaui.control.bridge = function( name, constructor ){
        
        //  var fullName = constructor.prototype.controlFullName || name;
        //  实际上，$.fn['ctrl']这个实际上应该是一个方法，所以name应该首先toLowerCase()
        name = name.toLocaleLowerCase();

        $.fn[ name ] = function( options ) {

            return this.each(function( idx,el ) {

                var $el = $( el );
                if( !$el.attr( 'data-parsed' ) || $el.attr( 'data-parsed' ) != 'true' ){
                    //  $el.data( 'model', new constructor( options, el ) );
                    new constructor( options, el );
                }

            });

        };

    };

    ebaui.control.extend = function( target ) {
        var input = slice.call( arguments, 1 ),
            inputIndex = 0,
            inputLength = input.length,
            key,
            value;
        for ( ; inputIndex < inputLength; inputIndex++ ) {
            for ( key in input[ inputIndex ] ) {
                value = input[ inputIndex ][ key ];
                if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
                    // Clone objects
                    if ( $.isPlainObject( value ) ) {
                        target[ key ] = $.isPlainObject( target[ key ] ) ?
                            ebaui.control.extend( {}, target[ key ], value ) :
                            // Don't extend strings, arrays, etc. with objects
                            ebaui.control.extend( {}, value );
                    // Copy everything else by reference
                    } else {
                        target[ key ] = value;
                    }
                }
            }
        }
        return target;
    };

    /** 
     *  ebaui控件基类
     *  @class      Control 
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    function Control( /* options,element */ ){  };

    Control.prototype = {

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   Control
         *  @member     {Object}    options
         */
        options : {
            id      : '',
            enabled : true,
            visible : true,
            focused : false,
            
            width   : 0,
            height  : 0,
            top     : 0,
            left    : 0,
            
            position: ''
        },

        /**
         *  控件ID
         *  @private
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    _controlID
         */
        _controlID : undefined,

        /**
         *  
         *  @private
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    _namespace
         */
        _namespace : '',

        /**
         *  
         *  @private
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    _controlName
         */
        _controlName : '',

        /**
         *  
         *  @private
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    _controlFullName
         */
        _controlFullName : '',

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   Control
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '',

        /**
         *  CSS长度单位的正则表达式匹配
         *  @private
         *  @instance
         *  @memberof   Control
         *  @member     {RegExp}    _cssUnitRE
         */
        _cssUnitRE:/^\d+(%|in|cm|mm|em|ex|pt|pc|px)?$/,

        /**
         *  更新UI的宽度
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _updateStyleWidth
         */
        _updateStyleWidth : function(){

            var me    = this;
            var $root = me._$root;
            if( !$root ){ return; }

            var width = me.width();
            var isNum = me.isNumber( width );

            if( isNum && width <= 0 ){
                return;
            }

            if( isNum && width > 0 ){
                 $root.width( width );
                 return;
            }

            var result = me._cssUnitRE.exec( width );
            if( result[1] ){
                //  if one css unit has been assigned
                $root.css( 'width',width );
            }else{
                //  default css unit is px
                $root.css( 'width',width + 'px' );
            }

        },

        /**
         *  更新UI的高度
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _updateStyleHeight
         */
        _updateStyleHeight : function(){

            var me     = this;
            var $root = me._$root;
            if( !$root ){ return; }

            var height = me.height();
            var isNum  = me.isNumber( height );

            if( isNum && height <= 0 ){
                return;
            }

            if( isNum && height > 0 ){
                $root.height( height );
                return;
            }

            var result = me._cssUnitRE.exec( height );
            if( result[1] ){
                //  if one css unit has been assigned
                $root.css( 'height',height );
            }else{
                //  default css unit is px
                $root.css( 'height',height + 'px' );
            }

        },

        /**
         *  更新UI的位置top
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _updateStyleTop
         */
        _updateStyleTop : function(){ 
            var me = this;
            var $root = me._$root;
            if( !$root ){ return; }

            var top = me.top();
            if( !isNaN( top ) && top != 0 ){
                $root.css( 'top',top + 'px' ); 
            }
        },

        /**
         *  更新UI的位置left
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _updateStyleLeft
         */
        _updateStyleLeft : function(){
            var me = this;
            var $root = me._$root;
            if( !$root ){ return; }

            var left = me.left();
            if( !isNaN( left ) && left != 0 ){
                $root.css( 'left',left + 'px' ); 
            }
        },

        /**
         *  更新UI的position属性
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _updateStylePosition
         */
        _updateStylePosition:function(){

            var me = this;
            var $root = me._$root;
            if( !$root ){ return; }

            var position = me.position();
            if(position){
                /* position !== '' */
                $root.css( 'position',position ); 
            }else{
                $root.css( 'position',null ); 
            }

        },

        /**
         *  更新UI的title属性
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _updateStyleTitle
         */
        _updateStyleTitle:function(){
            var me = this;
            var $root = me._$root;
            if( !$root ){ return; }

            var title = me.title();
            if(title){ $root.attr( 'title',title ); }
        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _setupEvents
         */
        _setupEvents : $.noop,

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _initControl
         */
        _initControl : $.noop,

        /**
         *  获取焦点
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _focus
         */
        _focus : $.noop,

        /**
         *  失去焦点
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _blur
         */
        _blur : $.noop,

        /**
         *  更新控件enabled的UI样式
         *  @private
         *  @instance
         *  @memberof   Control
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:$.noop,

        /**
         *  设置或者移除据聚焦样式或者失焦样式
         *  @private
         *  @instance
         *  @memberof   Control
         *  @method     _updateStyleFocused
         */
        _updateStyleFocused:$.noop,

        /**
         *  更新控件visible的UI样式
         *  @private
         *  @instance
         *  @memberof    ebaui.web.Control
         *  @method     _updateStyleVisible
         */
        _updateStyleVisible:function() {
            var me = this;
            if( !me._$root ){ return; }
            var op = me.visible() ? 'show' : 'hide';
            me._$root[op]();
        },

        /**
         *  把HTML占位符转换成为控件自身的HTML结构
         *  ，在这一个过程中，会使用style="width:XXpx;height:XXpx;"的初始化控件本身的width以及height属性
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _parseUi
         *  @param      {Object}    element HTML占位符
         */
        _parseUi : function( element ){

            /*
                创建控件顺序——获取初始化参数，初始化，绑定事件，输出控件样式
                _parseDataOptions
                _parseAttrOptions
                _parseUi
                _initControl
                _setupEvents
                _render

                self._$root.data( 'model',self );
            */
            var me = this;
            // replace html with control template
            if( !me._rootHtmlTmpl ){ return null; }

            var template = $( me._rootHtmlTmpl ).html(),
                $el = $( element ),
                $html = $( template );
            $el.replaceWith( $html );
            //  如果是Form表单控件，一般会有name属性
            //  反之没有
            $html.attr( { 'data-name'  : me.name ? me.name() : '','data-parsed': 'true' } );

            if( me.id() !== '' ){
                $html.attr( 'id',me.id() );
            }

            return $html;

        },

        /**
         *  获取w3c中，html标签本身就支持的属性配置<br />
         *  ebaui框架中，html标签本身就支持的属性直接编写在html标签内，而不会放在data-option里面进行配置
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _parseAttrOptions
         *  @param      {Object}    element HTML占位符
         */
        _parseAttrOptions : function( element ){

            /*
                创建控件顺序——获取初始化参数，初始化，绑定事件，输出控件样式
                _parseDataOptions
                _parseAttrOptions
                _parseUi
                _initControl
                _setupEvents
                _render

                self._$root.data( 'model',self );
            */

            var $el   = $(element);
            var id    = $el.attr( 'id' );
            var name  = $el.attr( 'name' );
            var title = $el.attr( 'title' );

            var options      = {
                'id'   : id ? id : '',
                'name' : name ? name : '',
                'title': title ? title : '',
            };

            return options;
        },

        /**
         *  更新UI显示
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   Control
         *  @method     _render
         */
        _render : function(){

            /*
                创建控件顺序——获取初始化参数，初始化，绑定事件，输出控件样式
                _parseDataOptions
                _parseAttrOptions
                _parseUi
                _initControl
                _setupEvents
                _render

                self._$root.data( 'model',self );
            */

            var me = this;
            me._updateStyleWidth();
            me._updateStyleHeight();
            me._updateStylePosition();
            me._updateStyleTop();
            me._updateStyleLeft();
            me._updateStyleEnabled();
            me._updateStyleVisible();
            me._updateStyleTitle();
        },

        /**
         *  创建控件——获取初始化参数，初始化，绑定事件，输出控件样式
         *  @private
         *  @instance
         *  @memberof   Control
         *  @method     _createControl
         */
        _createControl:function( options, element ){

            var self        = this;
            var finalOpts   = $.extend( {}, self.options, self._parseDataOptions( element ), self._parseAttrOptions( element ) );

            if( options ){
                finalOpts = $.extend( finalOpts,options );
            }

            self.options    = finalOpts;

            self._controlID = ebaui.guid();
            self._$root     = self._parseUi( element );

            self._initControl();
            self._setupEvents();
            self._render();
            
            self._$root.data( 'model',self );
            
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   Control
         *  @method     _setOptions
         */
        _setOptions: function( options ) {
            var key;

            for ( key in options ) {
                this._setOption( key, options[ key ] );
            }
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   Control
         *  @method     _getOption
         *  @param      {String}    key     - option key
         */
        _getOption: function( key ){
            return this.options[key];
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   Control
         *  @method     _setOption
         *  @param      {String}    key     - option key
         *  @param      {Object}    value   - option key
         */
        _setOption: function( key, value ) {
            this.options[ key ] = value;
        },

        /**
         *  把html标签定义的data-options字符串转换成javascript对象
         *  @private
         *  @instance
         *  @memberof   Control
         *  @method     _parseDataOptions
         *  @param      {Object}    element
         */
        _parseDataOptions:function( element ){

            /*
                创建控件顺序——获取初始化参数，初始化，绑定事件，输出控件样式
                _parseDataOptions
                _parseAttrOptions
                _parseUi
                _initControl
                _setupEvents
                _render

                self._$root.data( 'model',self );
            */

            var $el     = $( element );
            var options = {};
            
            if( $el.size() == 0 ){ return options; }

            var s = $.trim( $el.attr('data-options') );
            if ( s ){

                var first = s.substring(0,1);
                var last  = s.substring(s.length-1);

                if (first != '{') {  s = '{' + s; }
                if (last != '}') { s = s + '}'; }

                options = ( new Function( 'return ' + s ) )();

            }

            return options;

        },

        /**
         *  获取控件类所属命名空间
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    namespace
         *  @example    <caption>get</caption>
         *      console.log( ctrl.namespace() );
         */
        namespace:function() {
            return this._namespace;
        },

        /**
         *  获取控件名称
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    controlName
         *  @example    <caption>get</caption>
         *      console.log( ctrl.controlName() );
         */
        controlName:function() {
            return this._controlName;
        },

        /**
         *  获取包含命名空间在内的控件全名
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    controlFullName
         *  @example    <caption>get</caption>
         *      console.log( ctrl.controlFullName() );
         */
        controlFullName:function() {
            return this._controlFullName;
        },

        /**
         *  获取控件html标签的ID
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    id
         *  @example    <caption>get</caption>
         *      console.log( ctrl.id() );
         */
        id : function(){
            return this.options['id'];
        },

        /**
         *  获取或者设置控件是否可用
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {Boolean}   enabled
         *  @default    true
         *  @example    <caption>get</caption>
         *      //  true
         *      console.log( ctrl.enabled() );
         *  @example    <caption>set</caption>
         *      //  disable control
         *      ctrl.enabled( false )
         */
        enabled : function( val ){

            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['enabled'];
            }
            me._setOption( 'enabled',val );
            me._updateStyleEnabled();

        },

        /**
         *  获取或者设置控件是否可见
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {String}   title
         *  @default    ''
         *  @example    <caption>get</caption>
         *      console.log( ctrl.title() );
         *  @example    <caption>set</caption>
         *      ctrl.title( 'pls type user name' )
         */
        title : function( val ){
            var me = this;
            if( !me.isString( val ) ){ 
                return me.options['title']; 
            }
            me.options['title'] = val;
        },

        /**
         *  获取或者设置控件是否可见
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {Boolean}   visible
         *  @default    true
         *  @example    <caption>get</caption>
         *      //  true
         *      console.log( ctrl.visible() );
         *  @example    <caption>set</caption>
         *      //  hide
         *      ctrl.visible( false )
         */
        visible : function( val ){
            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['visible'];
            }
            me._setOption( 'visible',val );
            me._updateStyleVisible();
        },

        /**
         *  控件是否可以获取焦点
         *  @public
         *  @instance
         *  @virtual
         *  @readonly
         *  @memberof   Control
         *  @member     {Boolean}   focusable
         *  @default    false
         *  @example    <caption>get</caption>
         *      //  false
         *      console.log( ctrl.focusable() );
         */
        focusable:function() { return false },

        /**
         *  获取或者设置控件是否已经得到焦点
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {Boolean}   focused
         *  @default    false
         *  @example    <caption>get</caption>
         *      //  true
         *      console.log( ctrl.focused() );
         *  @example    <caption>set</caption>
         *      //  true
         *      ctrl.focused( false );
         */
        focused : function( val ){

            var me = this;
            if( me.isBoolean( val ) ){

                me._setOption( 'focused',val );

                if( val ){
                    me._focus();
                }else{
                    me._blur();
                }

                me._updateStyleFocused();
                
            }

            return me.options['focused'];
        },

        /**
         *  获取或者设置控件宽度
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {Number}    width
         *  @default    null
         *  @example    <caption>get</caption>
         *      //  100
         *      console.log( ctrl.width() );
         *  @example    <caption>set</caption>
         *      ctrl.width( 100 );
         */
        width : function( val ){

            var me = this;
            if( me.isNumber( val ) ){
                me.options['width'] = val;
                me._updateStyleWidth();
            }else{
                return me.options['width'];
            }

        },

        /**
         *  获取或者设置控件高度
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {Number}    height
         *  @default    null
         *  @example    <caption>get</caption>
         *      //  100
         *      console.log( ctrl.height() );
         *  @example    <caption>set</caption>
         *      ctrl.height( 100 );
         */
        height : function( val ){

            var me = this;
            if( me.isNumber( val ) ){
                me.options['height'] = val;
                me._updateStyleHeight();
            }else{
                return me.options['height'];
            }

        },

        /**
         *  获取或者设置控件的位置top
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {Number}    top
         *  @default    null
         *  @example    <caption>get</caption>
         *      //  100
         *      console.log( ctrl.top() );
         *  @example    <caption>set</caption>
         *      ctrl.top( 100 );
         */
        top : function( val ) {
            var me = this;
            if( me.isNumber( val ) ){
                me.options['top'] = val;
                me._updateStyleTop();
            }else{
                return me.options['top'];
            }
        },

        /**
         *  获取或者设置控件的位置left
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {Number}    left
         *  @default    null
         *  @example    <caption>get</caption>
         *      //  100
         *      console.log( ctrl.left() );
         *  @example    <caption>set</caption>
         *      ctrl.left( 100 );
         */
        left : function( val ) {
            var me = this;
            if( me.isNumber( val ) ){
                me.options['left'] = val;
                me._updateStyleLeft();
            }else{
                return me.options['left'];
            }
        },

        /**
         *  position设置
         *  @public
         *  @instance
         *  @memberof   Control
         *  @member     {String}    position
         *  @default    'static'
         *  @example    <caption>get</caption>
         *      //  'static'
         *      console.log( ctrl.position() );
         *  @example    <caption>set</caption>
         *      ctrl.position( 'relative' );
         */
        position : function( val ){
            var me = this;
            if( !val ){ return me.options['position']; }

            if( /absolute|fixed|relative|static|inherit|\s*/.test( val ) ){
                me.options['position'] = $.trim(val);
                me._updateStylePosition();
            }

        },

        /**
         *  获取控件ID
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {String}    controlID
         *  @example    <caption>get</caption>
         *      console.log( ctrl.controlID() );
         */
        controlID : function(){
            return this._controlID;
        },

        /**
         *  获取控件关联的HTML DOM对象的jQuery包装
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   Control
         *  @member     {Object}    uiElement
         *  @example    <caption>get</caption>
         *      console.log( ctrl.uiElement() );
         */
        uiElement : function(){
            return this._$root;
        },

        keys:function( obj ){

            var me = this;
            if ( !me.isObject(obj) ){
                throw new TypeError('Invalid object');
            }

            var keys = [];
            for (var key in obj) {
                if( obj.hasOwnProperty( key ) ){
                    keys.push(key);
                }
            }

            return keys;

        },

        /**
         *  编译HTML模板
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     compileTmpl
         *  @arg        tmpl
         *  @arg        data
         *  @example
         *      console.log( ctrl.compileTmpl( '' ) );
         */
        compileTmpl:function( text, data ){

            var render;
            var noMatch = /(.)^/;
            var settings = {
                evaluate    : /<%([\s\S]+?)%>/g,
                interpolate : /<%=([\s\S]+?)%>/g,
                escape      : /<%-([\s\S]+?)%>/g
            };
            var escapes = {
                "'":      "'",
                '\\':     '\\',
                '\r':     'r',
                '\n':     'n',
                '\t':     't',
                '\u2028': 'u2028',
                '\u2029': 'u2029'
            };
            var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

            // Combine delimiters into one regular expression via alternation.
            var matcher = new RegExp([
              (settings.escape || noMatch).source,
              (settings.interpolate || noMatch).source,
              (settings.evaluate || noMatch).source
            ].join('|') + '|$', 'g');

            // Compile the template source, escaping string literals appropriately.
            var index = 0;
            var source = "__p+='";
            text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
              source += text.slice(index, offset)
                .replace(escaper, function(match) { return '\\' + escapes[match]; });

              if (escape) {
                source += "'+\n((__t=(" + escape + "))==null?'':ebaui.escape(__t))+\n'";
              }
              if (interpolate) {
                source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
              }
              if (evaluate) {
                source += "';\n" + evaluate + "\n__p+='";
              }
              index = offset + match.length;
              return match;
            });
            source += "';\n";

            // If a variable is not specified, place data values in local scope.
            if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

            source = "var __t,__p='',__j=Array.prototype.join," +
              "print=function(){__p+=__j.call(arguments,'');};\n" +
              source + "return __p;\n";

            try {
              render = new Function(settings.variable || 'obj', source);
            } catch (e) {
              e.source = source;
              throw e;
            }

            if (data){
                return render(data);
            }
            
            var template = function(data) {
              return render.call(this, data);
            };

            // Provide the compiled function source as a convenience for precompilation.
            template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

            return template;

        },

        /**
         *  forEach
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isNull
         *  @arg        obj
         *  @arg        iterator
         *  @arg        context
         *  @example
         *      console.log( ctrl.isNull( null ) );
         */
        each:function( obj, iterator, context ){

            var me = this;
            if (obj == null) return;
            if (nativeForEach && obj.forEach === nativeForEach) {
              obj.forEach(iterator, context);
            } else if (obj.length === +obj.length) {
              for (var i = 0, length = obj.length; i < length; i++) {
                if (iterator.call(context, obj[i], i, obj) === breaker) return;
              }
            } else {
              var keys = me.keys(obj);
              for (var i = 0, length = keys.length; i < length; i++) {
                if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
              }
            }

        },

        /**
         *  检查一个变量是否是空的。
         *  遇到以下情形，我们认为这个变量是空的：
         *  "" (an empty string)
         *  ，0 (0 as an integer)
         *  ，0.0 (0 as a float)
         *  ，null
         *  ，undefined
         *  ，false
         *  ，[](an empty array)
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isEmpty
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isEmpty( '' ) );
         */
        isEmpty : function( val ){

            if( val === null || val === undefined ){
                return true;
            }
            var me = this;
            //  false
            if( me.isBoolean( val ) ){ return val; }
            //  empty string && array
            if( me.isString( val ) || me.isArray( val ) ){ return val.length == 0; }
            //  0 (0 as an integer) || 0.0 (0 as a float)
            if( me.isNumber( val ) && !val ){ return true; }

            return true;

        },

        /**
         *  判断一个变量是否是null值
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isNull
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isNull( null ) );
         */
        isNull : function(obj){ return (obj === null || obj === undefined); },

        /**
         *  判断一个变量是否是RegExp类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isRegExp
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isRegExp() );
         */
        isRegExp:function(obj){ return toString.call(obj) == '[object RegExp]'; },

        /**
         *  判断一个变量是否是Date类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isDate
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isDate() );
         */
        isDate:function(obj){ return toString.call(obj) == '[object Date]'; },

        /**
         *  判断一个变量是否是Object类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isObject
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isObject() );
         */
        isObject:function( obj ) { return obj === Object(obj); },

        /**
         *  判断一个变量是否是Function类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isFunc
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isFunc() );
         */
        isFunc:function( obj ){ return toString.call(obj) == '[object Function]'; },

        /**
         *  判断一个变量是否是String类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isString
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isString() );
         */
        isString:function(obj){ return toString.call(obj) == '[object String]'; },

        /**
         *  判断一个变量是否是数值类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isNumber
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isNumber() );
         */
        isNumber:function(obj){ return toString.call(obj) == '[object Number]'; },

        /**
         *  判断一个变量是否是Array类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isArray
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isArray() );
         */
        isArray:function(obj){ return toString.call(obj) == '[object Array]'; },

        /**
         *  判断一个变量是否是Boolean类型
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isBoolean
         *  @arg        obj
         *  @return     {Boolean}
         *  @example
         *      console.log( ctrl.isBoolean() );
         */
        isBoolean:function( obj ){ return obj === true || obj === false || toString.call(obj) == '[object Boolean]'; },

        /**
         *  判断是否使用远程数据源
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     isUsingRemoteData
         *  @param      {Object|Array}          dataSource              - 如果dataSource是一个数组对象，则认为采用本地数据作为数据源；反之，如果dataSource包含了url属性，data属性（可选），怎认为是使用远程数据源
         *  @property   {String}                dataSource.url          - 服务端URL
         *  @property   {Object|Function}       dataSource.data         - 向服务器发起AJAX请求的时候，要发送给服务器的URL参数
         */
        isUsingRemoteData:function( dataSource ){
            if( !dataSource ){
                throw 'dataSource can not be null!';
            }

            var me = this;
            if( me.isArray( dataSource ) ){
                return false;
            }else if( me.isObject( dataSource ) && 'url' in dataSource ){
                return true;
            }

            return false;
        },

        /**
         *  移除所有事件监听，注销控件
         *  @public
         *  @instance
         *  @memberof   Control
         *  @method     destroy
         *  @example    
         *      ctrl.destroy();
         *  @todo       暂时还没有任何相关实现
         */
        destroy:function(){}
        
    };

    // exported
    ebaui.Control = Control;

})( jQuery );
/**
 *  ebaui.web.Dialog
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ){

    ebaui.web.registerControl( 'Dialog' );

    /** 
     *  控件全名 e.g. ebaui.web.Dialog
     *  控件描述
     *  @class      Dialog 
     *  @memberof   ebaui.web
     *  @extends    Control
     *  @tutorial   dialog_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      &lt;input data-role="dialog" data-options="{ width:800,height:600,beforeclose:onbefore,afterclose:onafter }"/&gt;
     */
    ebaui.control( 'web.Dialog',{

        _vexDialogId : null,

        /**
         *  内部变量，用来保存vex dialog的配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Dialog
         *  @member     {Object}    _vexOptions
         */
        _vexOptions:{
            className           : 'vex-theme-default',
            showCloseButton     : true,
            overlayClosesOnClick: false
        },

        /**
         *  把HTML占位符转换成为控件自身的HTML结构
         *  ，在这一个过程中，会使用style="width:XXpx;height:XXpx;"的初始化控件本身的width以及height属性
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Dialog
         *  @method     _parseUi
         *  @param      {Object}    element HTML占位符
         */
        _parseUi : function( element ){
            //  update options
            var $html = $( element );
            this._vexOptions['content'] = $html.html();
            return $html;
        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Dialog
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            var $root = me._$root;
            var opts = me._vexOptions;

            opts = $.extend(vex.defaultOptions,me._vexOptions,opts);

            opts['afterOpen'] = function( options ){
                ebaui.web.parseUi( options.$vexContent );
            };

            me._vexOptions = opts;
            opts['width']  = me.options['width'];
            opts['height'] = me.options['height'];

            if( me.options['title'] ){
                opts['title'] = me.options['title'];
            }

            opts.content = '<div style="width:100%;height:100%;">' + opts.content + '</div>';

            if( me.options['beforeclose'] ){
                var beforefn = me.options['beforeclose'];
                opts['beforeClose'] = function(){
                    beforefn( me,{} );
                }
            }

            if( me.options['afterclose'] ){
                var afterfn = me.options['afterclose'];
                opts['afterClose'] = function(){
                    afterfn( me,{} );
                }
            }

        },

        /**
         *  打开窗口
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Dialog
         *  @method     open
         */
        open:function(){

            var me   = this;
            var opts = me._vexOptions;

            var $vexContent = vex.open(opts);
            var $vex = $vexContent.parent();
            me._vexDialogId = $vex.data().vex.id;

            $vexContent.css({
                'padding'         : '5px',
                'border'          : '1px #eee solid',
                'background-color': '#ddd',
                'width'           : opts['width'],
                'height'          : opts['height']
            });

            $vex.css({
                'padding-top'   : '50px',
                'padding-bottom': '0'
            });


        },

        /**
         *  关闭窗口
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Dialog
         *  @method     close
         */
        close:function(){
            vex.close(this._vexDialogId);
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Dialog
         *  @member     {Object}    options
         */
        options : {

            width      : 800,
            height     : 600,

            /**
             *  控件的值发生改变的时候触发
             *  @event      ebaui.web.Dialog#beforeClose
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            beforeclose: null,

            /**
             *  控件的值发生改变的时候触发
             *  @event      ebaui.web.Dialog#afterclose
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            afterclose : null

        }

    } );

})( jQuery,ebaui );

/**
 *  web.FormElement，所有表单控件的基类
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    /** 
     *  ebaui.web.FormElement
     *  表单控件的基类
     *  @class      FormElement
     *  @extends    Control
     *  @memberof   ebaui.web
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.FormElement',{

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @virtual
         *  @memberof   ebaui.web.FormElement
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '',

        /**
         *  控件当前验证状态
         *  @private
         *  @instance
         *  @default    ebaui.web.validationStates.none
         *  @memberof   ebaui.web.FormElement
         *  @member     {Number}    _currVaidationState
         */
        _currVaidationState:0,

        /**
         *  控件验证状态
         *  @private
         *  @instance
         *  @virtual
         *  @memberof   ebaui.web.FormElement
         *  @member     {Object}    _validationStates
         */
        _validationStates : {
            none   : 0,
            /** 验证成功 */
            success: 1,
            /** 提醒 */
            info   : 2,
            /** 错误 */
            error  : 3,
            /** 警告 */
            warning: 4,
            /** 忙碌 */
            busy   : 5
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _updateStyleReadonly
         */
        _updateStyleReadonly : $.noop,

        /**
         *  控件在所处的各个不同得validationState下对应的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @member     {Object}    _stateClass
         */
        _stateClass : ['','eba-success','eba-light','eba-error','eba-warning','eba-loading'],

        /**
         *  控件在所处的各个不同得validationState下对应的UI的icon类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @member     {Object}    _stateIconCls
         */
        _stateIconCls : {
            'eba-success': 'icon-ok',
            'eba-light'  : 'icon-lightbulb',
            'eba-error'  : 'icon-remove-circle',
            'eba-warning': 'icon-warning-sign',
            'eba-loading': 'icon-spinner icon-spin'
        },

        /**
         *  控件验证错误信息
         *  @private
         *  @instance
         *  @readonly
         *  @default    {}
         *  @memberof   ebaui.web.FormElement
         *  @member     {Object}    _errorCollection
         *  @example
         *      //  { required : 'this field is required...' }
         *      console.log( ctrl._errorCollection );
         */
        _errorCollection    : {},

        /**
         *  表单控件是否通过验证
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @member     {Boolean}   _isValid
         */
        _isValid  : true,

        /**
         *  初始化设置控件的validators
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _initValidators
         */
        _initValidators:function(){

            var me = this;
            var opts = me.options['validators'];
            if( opts ){
                me._validators = me._parseValidators( opts );
            }

        },

        /**
         *  将控件配置的验证规则，转化为相应的Javascript Validator对象
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _parseValidator
         */
        _parseValidator : function( rule ){

            if( !rule ){ return; }

            var result = /([a-z_]+)(.*)/i.exec( rule );
            var name = result[1];
            var param = eval(result[2]);

            var constructor = ebaui['web']['validationRules'][name];
            if( !constructor ){ return null; }
            var validator = new constructor( param );
            return validator;

        },

        /**
         *  将控件配置的验证规则，转化为相应的Javascript Validator对象
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _parseValidators
         */
        _parseValidators : function( rules ){

            var me = this;
            if( !rules || !me.isArray( rules ) ){ return []; }

            var returnValue = [];
            for( var i = 0,l = rules.length; i<l; i++ ){
                var validator = me._parseValidator( rules[i] );
                if( validator ){ returnValue.push( validator ); }
            }

            return returnValue;

        },

        /**
         *  显示控件的各个验证状态样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _doRenderStyleTip
         */
        _doRenderStyleTip:function( rootCls,tips ){

            var me      = this;
            if( me.isEmpty( tips ) ){
                tips = '';
            }

            var $root   = me._$root;
            var iconCls = me._stateIconCls[rootCls];
            var $border = $( '[class*="border"]',$root );
            var $icon   = $border.next('i[class^="icon"]');

            //  remove old validation class
            var states   = me._validationStates;
            var stateCls = me._stateClass;
            for( var item in states ){ $root.removeClass( stateCls[states[item]] ); }
            if( !$root.hasClass( rootCls ) ){ $root.addClass( rootCls ); }

            if( $icon.size() == 0 ){
                var html = '<i class="{0}" title="{1}"></i>'.replace('{0}',iconCls).replace('{1}',tips);
                $border.after( html );
            }else{

                $icon.attr( {
                    'class' : iconCls,
                    'title' : tips
                } );

            }

        },

        /**
         *  清除控件验证状态信息
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _renderStyleNoneTip
         *  @param      {String}  tips          - tooltips消息
         */
        _clearValidationTips:function ( tips ) {

            var me    = this;
            var $root = me._$root;
            var cls   = me._stateClass;
            for (var i = 0,l = cls.length; i < l; i++) {

                var rootCls = cls[i];
                if( rootCls ){
                    var iconCls = rootCls + 'icon';
                    $root.removeClass(rootCls);
                    $( 'span.' + iconCls,$root ).remove();
                }

            }

        },

        /**
         *  显示控件验证状态以及相应得消息
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _renderStyleTips
         *  @param      {Number}  state         - 控件验证状态
         *  @param      {String}  tips          - tooltips消息
         */
        _renderStyleTips:function( state,tips ) {

            var me       = this;
            var rootCls  = '';
            var stateCls = me._stateClass;
            var states   = me._validationStates;

            switch( state ){
                case states.success : 
                    rootCls = stateCls[states.success];
                    break;
                case states.info : 
                    rootCls = stateCls[states.info];
                    break;
                case states.error : 
                    rootCls = stateCls[states.error];
                    break;
                case states.warning : 
                    rootCls = stateCls[states.warning];
                    break;
                case states.busy : 
                    rootCls = stateCls[states.busy];
                    break;
                default:
                    break;
            }

            if( !rootCls ){
                me._clearValidationTips( tips ); return;
            }

            me._doRenderStyleTip( rootCls,tips );
        },

        /**
         *  更新验证后的样式信息
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _updateStyleValidationResult
         */
        _updateStyleValidationResult:function(){

            var me = this;
            if( me.isValid() ){
                me.success( '' );
            }else{
                me.error( me.errorTips() );
            }

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _render
         */
        _render : function(){
            var me = this;
            me._super();
            me._updateStyleReadonly();
        },

        /**
         *  重置控件，清空验证状态，控件值，恢复到控件原始状态
         *  @public
         *  @virtual
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     reset
         */
        reset     : $.noop,

        /**
         *  获取或者设置控件验证状态信息
         *  @public
         *  @instance
         *  @default    ebaui.web.validationStates.none
         *  @memberof   ebaui.web.FormElement
         *  @method     tips
         *  @param      {Number}    state         - 控件验证状态
         *  @param      {String}    tips          - tooltips消息
         *  @example    <caption>get</caption>
         *      //  0,1,2,3,4
         *      //  详细的枚举值请查看ebaui.web.validationStates
         *      console.log( ctrl.tips() );
         *  @example    <caption>set</caption>
         *      //  设置info样式
         *      var states = ebaui.web.validationStates;
         *      ctrl.tips( states.info,'info' )
         *      //  清除tips以及其样式
         *      var states = ebaui.web.validationStates;
         *      ctrl.tips( states.none )
         */
        tips:function ( state,tips ) {

            var me = this;
            if( !me.isNumber( state ) ){ return me._currVaidationState; }

            if( !me.isString( tips ) ){
                tips = '';
            }

            if( -1 < state && state < 6 ){
                me._currVaidationState = state;
                me._renderStyleTips( state,tips );
            }

        },

        /**
         *  清除所有状态以及状态信息
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     clearTips
         *  @example
         *      ctrl.clearTips()
         */
        clearTips:function () { 
            var me = this;
            me.tips( me._validationStates.none ); 
        },

        /**
         *  设置控件验证成功状态以及信息
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     success
         *  @param      {String}    tips          - tooltips消息
         *  @example
         *      ctrl.success( 'info' )
         */
        success:function( tips ) {
            var me = this;
            me.tips( me._validationStates.success,tips );
        },

        /**
         *  设置控件提醒状态以及提醒信息
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     info
         *  @param      {String}    tips          - tooltips消息
         *  @example
         *      ctrl.info('info' )
         */
        info:function( tips ) {
            var me = this;
            me.tips( me._validationStates.info,tips );
        },

        /**
         *  设置控件警告状态以及警告信息
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     warning
         *  @param      {String}    tips          - tooltips消息
         *  @example
         *      ctrl.warning( 'info' )
         */
        warning : function ( tips ) {
            var me = this;
            me.tips( me._validationStates.warning,tips );
        },

        /**
         *  设置控件验证错误状态以及错误信息
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     error
         *  @param      {String}    tips          - tooltips消息
         *  @example
         *      ctrl.error( 'info' )
         */
        error:function ( tips ) {
            var me = this;
            me.tips( me._validationStates.error,tips );
        },

        /**
         *  设置当前控件的状态为忙碌，在控件后面添加一个菊花转
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     busy
         *  @param      {String}    tips          - tooltips消息
         *  @example
         *      ctrl.busy( 'i am busy now' )
         */
        busy:function( tips ){
            var me = this;
            me.tips( me._validationStates.busy,tips );
        },

        /**
         *  获取控件验证完成之后产生的错误信息字符串
         *  @private
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.FormElement
         *  @default    ''
         *  @member     {String}    errorTips
         *  @example    <caption>get</caption>
         *      //  tips == '用户名不能为空'
         *      var tips = ctrl.errorTips();
         */
        errorTips:function(){

            // gen error tips
            var me = this;
            var tips = '';
            var keys = me.keys( me._errorCollection );

            for( var i = 0,l = keys.length; i<l; i++ ){
                tips += me._errorCollection[keys[i]];
                if( i < l -1 ){
                    tips += '\n';
                }
            }

            return tips;

        },

        /**
         *  是否在控件的值发生改变的时候就触发验证
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @member     {Boolean}     validateOnChange
         *  @default    false
         *  @example    <caption>get</caption>
         *      //  { text : '' ,value : '' };
         *      console.log( ctrl.validateOnChange() );
         *  @example    <caption>set</caption>
         *      ctrl.validateOnChange( true );
         *  @todo   在现有控件里实现
         */
        validateOnChange:function( val ) {
            
            var me = this;
            if( me.isBoolean( val ) ){
                me._setOptions({ validateOnChange: val });
            }else{
                return me.options['validateOnChange'];
            }

        },

        _validators : [],

        /**
         *  表单控件验证规则
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.FormElement
         *  @member     {Array}     validators
         *  @example
         *      //  [
         *      //      { name : 'required',parameters : {},message : '',validate : function( value,parameters ){} }
         *      //  ]
         *      console.log( ctrl.validators );
         */
        validators: function(){
            return this._validators;
        },

        /**
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     _indexOfValidator
         *  @param      {String}        rule
         */
        _indexOfValidator:function( rule ){

            if( !rule ){ return -1; }
            var me         = this;
            var index      = -1;
            var validators = me._validators;
            for (var i = 0,l = validators.length; i < l; i++) {
                if(validators[i]['name'] === rule){
                    index = i;break;
                }
            }

            return index;

        },

        /**
         *  判断指定的验证规则是否已经存在
         *  ，合法的rule参数应该是cn,digit,email等
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     hasValidator
         *  @param      {String}        rule
         */
        hasValidator : function( rule ){
            return ( this._indexOfValidator( rule ) > -1 );
        },

        /**
         *  添加新的验证规则
         *  ，合法的rule参数应该是cn,digit,email等
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     addValidator
         *  @param      {String}        rule
         */
        addValidator : function( rule ){

            if( !rule ){ return; }
            var me = this;
            var validator = me._parseValidator( rule );
            /* we do not have me kind of validator OR validator already exist, then return */
            if( !validator || me.hasValidator( validator['name'] ) ){ 
                return; 
            }
            me._validators.push(validator);

        },

        /**
         *  移除一条表单验证规则
         *  ，合法的rule参数应该是cn,digit,email等
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     removeValidator
         *  @param      {String}        rule
         */
        removeValidator : function( rule ){
            var me = this;
            var index = me._indexOfValidator( rule );
            if( index == -1 ){ return; }
            me._validators.splice( index,1 );
        },

        /**
         *  获取或者设置控件数据
         *  @public
         *  @instance
         *  @virtual
         *  @memberof   ebaui.web.FormElement
         *  @member     {Object}        data
         */
        data: $.noop,

        /**
         *  获取表单控件对应的name的值。name是用来提交到服务器时使用的表单域名称。同时name也是通过form.data( object )初始化表单各个控件值时候，object的属性名。通过name，关联控件和object的属性值
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.FormElement
         *  @member     {String}    name
         *  @default    ''
         *  @example    <caption>get</caption>
         *      var name = ctrl.name();
         *  @example    <caption>set</caption>
         *      ctrl.name( 'inputname' );
         */
        name : function(){
            return this.options['name'];
        },
        
        /**
         *  获取或者设置表单控件是否只读
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @member     {Boolean}   readonly
         *  @default    false
         *  @example    <caption>get</caption>
         *      var readonly = ctrl.readonly();
         *  @example    <caption>set</caption>
         *      ctrl.readonly( true );
         *      ctrl.readonly( false );
         */
        readonly  : function( val ){
            var me = this;
            if( me.isBoolean( val ) ){
                me._setOptions({ readonly: val });
                me._updateStyleReadonly();
            }else{
                return me.options['readonly'];
            }
        },

        /**
         *  获取或者设置表单控件是否允许按下enter键的时候，聚焦到下一个控件
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @member     {Boolean}   enterAsTab
         *  @default    false
         *  @example    <caption>get</caption>
         *      var enterAsTab = ctrl.enterAsTab();
         *  @example    <caption>set</caption>
         *      ctrl.enterAsTab( true );
         */
        enterAsTab:function( val ) {
            var me = this;
            if( me.isBoolean( val ) ){
                me._setOptions({ enterAsTab: val });
            }else{
                return me.options['enterAsTab'];
            }

        },

        /**
         *  获取控件值是否已经通过验证
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.FormElement
         *  @default    true
         *  @member     {Boolean}   isValid
         *  @example    <caption>get</caption>
         *      //  isValid == true
         *      var isValid = ctrl.isValid();
         */
        isValid : function(){
            return this._isValid;
        },

        /**
         *  验证控件，返回控件值的验证结果
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @method     validate
         *  @returns    {Boolean}
         */
        validate : function(){

            var me = this;
            var validators = me.validators();

            if( validators.length == 0  ){ return true; }

            /* display busy status */
            me.busy();

            /* starting validation */
            var errorMsg  = me._errorCollection;
            var value   = me.value();
            var first   = validators[0];
            var isValid = first.validate( value,first.parameters );
            
            if( !isValid ){
                errorMsg[first.name] = first.message;
            }

            for( var i = 1,l = validators.length;i<l;i++ ){
                var validator = validators[i];
                isValid = isValid && validator.validate( value,validator.parameters );
                if( !isValid ){
                    errorMsg[validator.name] = validator.message;
                }
            }

            /* 控件所有验证规则的验证结果 */
            me._isValid = isValid;
            /* 更新控件的错误提示样式 */
            if( isValid ){ 
                me.success( '' );
            }else{ 
                me.error( me.errorTips() ); 
            }

            return isValid;
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FormElement
         *  @member     {Object}    options
         */
        options : {

            name            : '',
            value           : '',
            readonly        : false,
            
            //  validation config
            validateOnChange: false,
            validation      : '',
            messages        : '',
            enterAsTab      : false

        }

    });


})( jQuery,ebaui );
/**
 *  定义了ebaui.web.TextBox控件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    var supportHolder = ebaui.web.support['placeholder'];

    ebaui.web.registerFormControl( 'TextBox',true );

    /** 
     *  ebaui.web.TextBox
     *  文本域
     *  @class      ebaui.web.TextBox 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   textbox_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.TextBox', ebaui.web.FormElement, {

        /**
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Object}    _domSelector
         */
        _domSelector:{
            'formInput'  : '.eba-textbox-input',
            'placeholder': '.eba-placeholder-lable',
            'icon'       : '>i'
        },

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-textbox',

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Object}    _cssClass
         */
        _cssClass : {
            disabled: 'eba-disabled',
            focused : 'eba-textbox-focus',
            readonly: 'eba-readonly'
        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self                   = this;
            var $root                  = self._$root;
            var $input                 = self._$formInput;
            
            var formInputDomSelector   = self._domSelector.formInput;
            var placeholderDomSelector = self._domSelector.placeholder;

            $root.bind('keydown', formInputDomSelector, function(event) {

                switch( event.which ){
                    case ebaui.keycodes.enter:
                        self.options['onenter']( self,event );
                        break;
                    default:
                        self.options['onkeydown']( self,event );
                        break;
                }

            });

            $root.bind('keyup', formInputDomSelector, function(event) {
                /* Act on the event */
                return self.options['onkeyup']( self,event );
            });

            $root.on( 'change',formInputDomSelector,function( event ){
                //  更新控件的值
                self.options['value'] = $input.val();
                self.options['onchange']( self,{} );

                //  值发生改变的时候，触发控件验证
                if( self.validateOnChange() ){
                    self.validate();
                }
            } );

            $root.on( 'focus',formInputDomSelector,function(evt){

                self._setOption( 'focused',true );
                self._updateStyleFocused();

                return self.options['onfocus']( self,evt );

            } );

            $root.on( 'blur',formInputDomSelector,function(evt){

                self._setOption( 'focused',false );
                self._updateStyleFocused();

                return self.options['onblur']( self,evt );

            } );

            /*  
                when your browser is IE7 ~ IE9, we create a label for textbox as placeholder 
                when you click on this label
                remove this label then focus in the input
            */
            $root.on( 'click',placeholderDomSelector,function( event ){
                $( this ).hide();
                self._$formInput.focus();
            } );

            self._super();

        },

        /**
         *  聚焦
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     focus
         */
        _focus : function(){

            var me = this;
            if( me.enabled() && !me.readonly() ){
                me._updateStyleFocused();
            }
            me._$formInput.focus();

        },

        /**
         *  失焦
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _blur
         */
        _blur : function(){

            var me = this;
            if( me.enabled() ){
                me._updateStyleFocused();
            }
            me._$formInput.blur();

        },

        /**
         *  设置或者移除据聚焦样式或者失焦样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _updateStyleFocused
         */
        _updateStyleFocused:function() {

            var me      = this;
            var focused = me.focused();
            var ro      = me.readonly();
            var enabled = me.enabled();

            if( focused ){
                me._$root.addClass( me._cssClass['focused'] );
                if( enabled && !ro ){ me._hidePlaceHolder(); }
            }else{
                me._$root.removeClass( me._cssClass['focused'] );
                if( enabled ){ me._showPlaceHolder(); }
            }

        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _showPlaceHolder
         */
        _showPlaceHolder:function(){

            var me = this;
            if( !supportHolder ){
                var val = $.trim( me._$formInput.val() );
                if( !val ){
                    $( me._domSelector.placeholder,me._$root ).show();
                }
            }

        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _hidePlaceHolder
         */
        _hidePlaceHolder:function(){

            var me = this;
            if(!supportHolder){ 
                $( me._domSelector.placeholder,me._$root ).hide(); 
            }
            
        },

        /**
         *  更新placeholder的文本
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _updateStylePlaceHolder
         */
        _updateStylePlaceHolder : function () {

            var me = this;
            var placeholder = me.placeHolder();
            if( supportHolder ){ 
                me._$formInput.attr( 'placeholder',placeholder );
                return; 
            }

            var $label = $( me._domSelector.placeholder,me._$root );
            if( $label.size() > 0 ){
                /* udpate placebolder text */
                $label.text( placeholder );
            }else{
                /* create placeholder */
                $label = $( '<label for="" class="eba-placeholder-lable"></label>' ).text(placeholder);
                me._$formInput.after( $label );
            }

        },

        /**
         *  更新控件enable的UI样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:function(){
            
            var me = this;
            if( me.enabled() ){
                me._$root.removeClass( me._cssClass['disabled'] );
                me._$formInput.attr( 'disabled',null );
            }else{
                me._$formInput.attr('disabled','disabled');
                me._$root.removeClass( me._cssClass['focused'] );
                me._$root.addClass( me._cssClass['disabled'] );
            }

        },

        /**
         *  更新控件readonly的UI样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _updateStyleReadonly
         */
        _updateStyleReadonly:function(){

            var me = this;
            var ro = me.readonly();
            if( !me.enabled() ){ return; }

            if( ro ){
                me._$root.addClass( me._cssClass['readonly'] );
                me._$formInput.attr( 'readonly','readonly' );
            }else{
                me._$root.removeClass( me._cssClass['readonly'] );
                me._$formInput.attr( 'readonly',null );
            }

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            //  dom shortcuts
            me._$formInput = $( me._domSelector.formInput,me._$root );

            //  validators
            me._initValidators();
            
            var name = me.name();
            if( name ){ me._$formInput.attr( 'name',name ); }

            me._updateStylePlaceHolder();
        },

        _updateAttrMaxLen:function(){
            var me = this;
            var maxLength = me.maxLength();
            me._$formInput.attr( 'maxlength', ( maxLength > 0 ) ? maxLength : null );
        },

        _updateAttrValue:function(){
            var me = this;
            var value = me.value();
            if( !me.isEmpty( value ) ){
                me._$formInput.val( value );
                me._hidePlaceHolder();
            }
        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _render
         */
        _render : function(){
            var me = this;
            me._updateAttrMaxLen();
            me._updateAttrValue();
            me._updateStyleIcon();
            me._super();
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     _updateStyleIcon
         */
        _updateStyleIcon : function(){

            var me = this;
            var icon = me.iconCls();
            if( !icon ){
                /* if icon is null or empty, then remove icon dom */
                $( '[class$="border"]',me._$root ).removeClass('eba-textbox-icon');
                $( 'eba-textbox-icon i',me._$root ).remove();
            }else{
                $( '[class$="border"]',me._$root ).addClass('eba-textbox-icon');
                var $iconLabel = $( 'eba-textbox-icon i',me._$root );
                if( !$iconLabel.size() ){
                    /* create icon label dom */
                    var html = '<i class="{0}"></i>'.replace('{0}',icon);
                    $( html ).insertBefore( me._$formInput );
                }else{
                    /* update icon class */
                    $iconLabel.attr('class',icon);
                }
            }

        },

        /**
         *  获取或者设置button的icon图标CSS样式类
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {String}    TextBox
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  iconCls == 'icon-add'
         *      var iconCls = ctrl.iconCls();
         *  @example    <caption>set</caption>
         *      ctrl.iconCls( 'icon-add' );
         */
        iconCls : function( val ){

            var me = this;
            if( me.isString( val ) && $.trim( val ) != '' ){
                me.options['iconCls'] = val;
                me._updateStyleIcon();
            }else{
                return me.options['iconCls'];
            }

        },

        /**
         *  获取或者设置文本域输入文本的最大长度，默认值是-1，不做任何限制
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Number}    maxLength
         *  @default    -1
         *  @example    <caption>get</caption>
         *      //  max == -1
         *      var max = ctrl.maxLength();
         *  @example    <caption>set</caption>
         *      ctrl.maxLength( 100 );
         */
        maxLength : function( val ){

            var me = this;
            if( !me.isNumber( val ) ){
                return me.options['maxLength'];
            }
            
            var old = me._maxlength;
            /* max值小于等于0，表示input可输入的文本长度不做限制；否则，根据适当情况，考虑截断字符串 */
            if( 0 < val && val < old ){
                var text = me.value();
                me.value( text.substr( 0,val ) );
            }

            me.options['maxLength'] = val;
            me._$formInput.attr( 'maxlength',( val > 0 ) ? val : null );

        },

        /**
         *  控件是否可以获取焦点
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.TextBox
         *  @member     {Boolean}   focusable
         *  @example    <caption>get</caption>
         *      //  false
         *      console.log( ctrl.focusable() );
         */
        focusable:function() { return true; },

        /**
         *  获取或者设置文本占位符
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {String}    placeHolder
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  holder == ''
         *      var holder = ctrl.placeHolder();
         *  @example    <caption>set</caption>
         *      ctrl.placeHolder( 'your text value' );
         */
        placeHolder : function( val ){

            var me = this;
            var prop = 'placeHolder';
            if( !me.isString( val ) ){
                return me.options[prop];
            }
            me.options[prop] = val;
            me._updateStylePlaceHolder();

        },

        /**
         *  获取或者设置表单控件值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Object}    _valueAccessor
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( 'your text value' );
         */
        _valueAccessor:function( val ){

            var me = this;
            /* get */
            if( !me.isString( val ) ){ return me.options['value']; }
            /* set */
            /* max值小于等于0，表示input可输入的文本长度不做限制；否则，根据适当情况，考虑截断字符串 */
            var max = me.maxLength();
            if( max > 0 && ( val.length > max ) ){
                val = val.substr( 0,max );
            }
            me.options['value'] = val;
            me._$formInput.val( val );
            if( !val ){ 
                me._showPlaceHolder(); 
            }else{ 
                me._hidePlaceHolder(); 
            }
            /* 控件的值发生改变的时候触发onchange事件 */
            me.options['onchange']( me,{} );
        },

        /**
         *  获取或者设置表单控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Object}    value
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( 'your text value' );
         */
        value : function( val ){ return this._valueAccessor(val); },

        /**
         *  获取或者设置控件数据
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Object}        data
         *  @example    <caption>get</caption>
         *      //  { text : '' ,value : '' };
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      var pair = { text : '' ,value : '' };
         *      ctrl.data( pair );
         */
        data: function( val ){ return this._valueAccessor(val); },

        /**
         *  重置控件，清空验证状态，控件值，恢复到控件原始状态
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @method     reset
         *  @example
         *      ctrl.reset();
         */
        reset : function(){
            var me = this;
            me.value('');
            me.errors   = {};
            me._isValid = true;
            me.clearTips();
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  css 属性top
            top     : 0,
            //  css 属性left
            left    : 0,
            //  default width
            width : 150,
            //  default height
            height : 30,
            //  定义按钮的icon样式
            iconCls : '',
            //  文本占位符
            placeHolder: '请输入...',
            //  获取或者设置文本域输入文本的最大长度，默认值是-1，不做任何限制
            maxLength  : -1,
            /**
             *  键盘按下时发生
             *  @event  ebaui.web.TextBox#onkeydown
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onkeydown    : $.noop,

            /**
             *  键盘释放时发生
             *  @event  ebaui.web.TextBox#onkeyup
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onkeyup      : $.noop,

            /**
             *  回车时发生
             *  @event  ebaui.web.TextBox#onenter
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onenter      : $.noop,

            /**
             *  控件获取焦点的时候触发
             *  @event  ebaui.web.TextBox#onfocus
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onfocus      : $.noop,

            /**
             *  控件失去焦点的时候触发
             *  @event  ebaui.web.TextBox#onblur
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onblur      : $.noop,

            /**
             *  控件的值发生改变的时候触发
             *  @event      ebaui.web.TextBox#onchange
             *  @tutorial   textbox_onchange
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop,
            enterAsTab : true

        }

    });

})( jQuery,ebaui );


/**
 *  定义了ebaui.web.ButtonEdit控件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'ButtonEdit',true );
    
    /** 
     *  ebaui.web.ButtonEdit
     *  按钮输入框
     *  @class      ButtonEdit
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   buttonedit_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      //  readonly
     *      //  data-options={ onbtnclick : function( sender,eventArgs ){},onclsclick : function( sender,eventArgs ){} } 
     *      &lt;input data-role="buttonedit" id="" name="" data-options="{}"/&gt;&lt;/input/&gt;
     */
    ebaui.control( 'web.ButtonEdit',ebaui.web.TextBox, {

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBox
         *  @member     {Object}    _domSelector
         */
        _domSelector:{
            'formInput'  : '.eba-buttonedit-input',
            'placeholder': '.eba-placeholder-lable',
            'icon'       : '.eba-label-icon',
            'btnClose'   : '.eba-buttonedit-close',
            'btnToggle'  : '.eba-buttonedit-button'
        },

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-buttonedit',

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {Object}    _cssClass
         */
        _cssClass : {
            disabled: 'eba-buttonedit-disabled',
            focused : 'eba-buttonedit-focus',
            readonly: 'eba-readonly'
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _updateStyleReadonly
         */
        _updateStyleReadonly:function() {

            var me = this;
            var ro = me.readonly();
            var showClose = me.showClose();

            me._super();

            if( !ro ){ 
                me._$btnToggle.show(); 
            }else{ 
                me._$btnToggle.hide(); 
            }

            if( !ro && showClose ){
                me._$btnClose.show();
                me._$btnClose.css('display','inline-block');
            }

        },
        
        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self   = this,
                $root  = self._$root,
                $input = self._$formInput;

            var _domSelector = this._domSelector;

            $root.on( 'click',_domSelector.placeholder,function( event ){
                self.focused( true );
            } );

            /*  
                when your browser is IE7 ~ IE9, we create a label for textbox as placeholder 
                when you click on this label
                remove this label then focus in the input
            */
            $root.on( 'click',_domSelector.placeholder,function( event ){
                $( this ).hide();self._$formInput.focus();
            } );

            $root.on( 'click','.eba-buttonedit-button',function(evt){

                if( self.enabled() ){
                    self.options['onbtnclick']( self,evt );
                }

            } );

            $root.on( 'click',_domSelector.btnClose,function(evt){

                if( self.showClose() && self.enabled() ){
                    self.options['onclsclick']( self,evt );
                }

            } );

            //  如果不允许手工输入文本，返回false，阻止文字输入
            $root.bind('keydown', _domSelector.formInput, function(event) {

                if( self.allowInput() ){
                    self.options['onkeydown']( self,event );
                }else{
                    return false;
                }
                
            } );

            $root.bind('keyup', _domSelector.formInput, function(event) {

                //  更新控件的值
                self.text( $input.val() );

                switch( event.which ){
                    case ebaui.keycodes.enter:
                        self.options['onenter']( self,event );
                        break;
                    default:
                        self.options['onkeyup']( self,event );
                        break;
                }
                
            });

            $root.on( 'focus',_domSelector.formInput,function(evt){
                //self.focused( true );
                self._setOption( 'focused',true );
                self._updateStyleFocused();
            } );

            $root.on( 'blur',_domSelector.formInput,function(evt){
                //self.focused( false );
                self._setOption( 'focused',false );
                self._updateStyleFocused();
            } );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _initControl
         */
        _initControl : function(){
            var me = this;
            var $root = me._$root;
            var selectors = me._domSelector;
            me._$btnToggle = $(selectors.btnToggle,$root);
            me._$btnClose  = $(selectors.btnClose,$root);
            me._super();
        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _render
         */
        _render : function(){
            var me = this;
            var text = me.text();
            if( !me.isEmpty( text ) ){
                me._$formInput.val( text );
                me._hidePlaceHolder();
            }

            me._updateStyleWidth();
            me._updateStyleHeight();
            me._updateStyleTop();
            me._updateStyleLeft();

            me._updateStyleEnabled();
            me._updateStyleVisible();

            me._updateStyleReadonly();
        },

        /**
         *  获取或者设置是否显示关闭按钮
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {Boolean}   showClose
         *  @default    false
         *  @example    <caption>get</caption>
         *      //  showCloseBtn == true
         *      var showCloseBtn = buttonedit.showClose();
         *  @example    <caption>set</caption>
         *      buttonedit.showClose( true );
         *      buttonedit.showClose( false );
         */
        showClose : function( val ){

            var me = this;
            if( !me.isBoolean( val ) ){
                return me._getOption( 'showClose' );
            }
            me._setOption( 'showClose',val );

        },

        /**
         *  获取或者设置buttonedit文本值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {String}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      var text = buttonedit.text();
         *  @example    <caption>set</caption>
         *      buttonedit.text( 'your text value' );
         */
        text : function( val ){

            var me = this;
            if( !me.isString( val ) ){ 
                return me._getOption( 'text' ); 
            }

            me._setOption( 'text',val );
            me._$formInput.val( val );

            if( !val ){ 
                me._showPlaceHolder(); 
            }else{ 
                me._hidePlaceHolder(); 
            }

        },
        
        /**
         *  获取或者设置表单控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {Object}    value
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( true );
         *      ctrl.value( false );
         */
        value     : function( val ){
            var me = this;
            if( me.isNull( val ) ){ 
                return me.options['value']; 
            }
            me.options['value'] = val;
            /* 控件的值发生改变的时候触发onchange事件 */
            me.options['onchange']( me,{} );
        },

        /**
         *  获取或者设置控件数据
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {Object}        data
         *  @example    <caption>get</caption>
         *      //  { text : '' ,value : '' };
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      var pair = { text : '' ,value : '' };
         *      ctrl.data( pair );
         */
        data : function( val ){

            var me = this;
            var textField = me.textField();
            var valueField = me.valueField();
            
            if( val && ( textField in val ) && ( valueField in val ) ){
                me.text( val[textField] );
                me.value( val[valueField] );
            }else{
                var _data         = {};
                _data[textField]  = me.text();
                _data[valueField] = me.value();
                return _data;
            }

        },

        /**
         *  控件数据源对象字段中，用于作为控件值的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {String}      valueField
         *  @default    'value'
         *  @example    <caption>get</caption>
         *      var valueField = ctrl.valueField();
         *  @example    <caption>set</caption>
         *      ctrl.valueField( '' );
         */
        valueField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['valueField'];
            }
            me.options['valueField'] = val;
        },

        /**
         *  控件数据源对象字段中，用于作为控件文本的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {String}      textField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var textField = ctrl.textField();
         *  @example    <caption>set</caption>
         *      ctrl.textField( '' );
         */
        textField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['textField'];
            }
            me.options['textField'] = val;
        },

        /**
         *  获取或者设置是否允许手工输入文本
         *  @public
         *  @instance
         *  @tutorial   buttonedit_allowInput
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {Boolean}    allowInput
         *  @default    true
         *  @example    <caption>get</caption>
         *      var allowed = ctrl.allowInput();
         *  @example    <caption>set</caption>
         *      ctrl.allowInput( false );
         */
        allowInput:function( val ){
            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['allowInput'];
            }
            me.options['allowInput'] = val;
        },

        /**
         *  重置控件，清空验证状态，控件值，恢复到控件原始状态
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     reset
         *  @example
         *      buttonedit.reset();
         */
        reset :function(){
            var me = this;
            me.errors           = {};
            me._isValid         = true;
            me.options['text']  = '';
            me.options['value'] = '';
            me._render();
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @member     {Object}    options
         */
        options : {
             // css position property
             position   : 'absolute',
             //  default width
             width      : 150,
             //  default height
             height     : 21,
             //  是否允许手工输入文本
             allowInput : true,
             //  
             text       : '',
             //  
             value      : '',
             //  值字段
             valueField : 'value',
             //  文本字段
             textField  : 'text',
             //  文本占位符
             placeHolder: '请输入...',
             //  是否显示‘X’按钮
             showClose  : false,
             
             /**
             *  回车时发生
             *  @event  ebaui.web.ButtonEdit#onenter
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
             onenter      : $.noop,
             
             /**
             *  键盘按下时发生
             *  @event  ebaui.web.ButtonEdit#onkeydown
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
             onkeydown    : $.noop,
             
             /**
             *  键盘释放时发生
             *  @event  ebaui.web.ButtonEdit#onkeyup
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
             onkeyup      : $.noop,
             
             /**
             *  按钮点击时发生
             *  @event      ebaui.web.ButtonEdit#onbtnclick
             *  @tutorial   buttonedit_onbtnclick
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
             onbtnclick: $.noop,
             
             /**
             *  关闭按钮点击时发生
             *  @event      ebaui.web.ButtonEdit#onclsclick
             *  @tutorial   buttonedit_onclsclick
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
             onclsclick : $.noop,
             
             /**
             *  控件的值发生改变的时候触发
             *  @event      ebaui.web.ButtonEdit#onchange
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
             onchange : $.noop

        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Password控件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'Password',true );
    
    /** 
     *  ebaui.web.Password
     *  密码域
     *  @class      Password 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.TextBox
     *  @tutorial   password_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      //  other attributes : readonly="readonly"
     *      &lt;input id="" name="" data-role="password" data-options="{ }" /&gt;
     */
    ebaui.control( 'web.Password', ebaui.web.TextBox, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextArea
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-password',

        /**
         *  获取或者设置文本域输入文本的最大长度，默认值是-1，不做任何限制
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Password
         *  @member     {Number}    maxLength
         *  @default    -1
         *  @example    <caption>get</caption>
         *      //  max == -1
         *      var max = ctrl.maxLength();
         *  @example    <caption>set</caption>
         *      ctrl.maxLength( 100 );
         */
        maxLength : $.noop,

        /**
         *  获取或者设置控件数据
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Password
         *  @member     {Object}        data
         *  @example    <caption>get</caption>
         *      //  { text : '' ,value : '' };
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      var pair = { text : '' ,value : '' };
         *      ctrl.data( pair );
         */
        data: function( val ){

            var me = this;
            if( !me.isString( val ) ){
                return me.options['value'];
            }

            me.options['value'] = val;
            me._$formInput.val( val );
            if( !val ){ 
                me._showPlaceHolder(); 
            }else{ 
                me._hidePlaceHolder(); 
            }

            /* 控件的值发生改变的时候触发onchange事件 */
            me.options['onchange']( me,{} );

        },

        /**
         *  获取或者设置表单控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Password
         *  @member     {Object}    value
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( 'your text value' );
         */
        value : function( val ){

            var me = this;
            if( !me.isString( val ) ){
                return me.options['value'];
            }

            console.log( 'value' )
            console.log( val )
            
            me.options['value'] = val;
            me._$formInput.val( val );
            if( !val ){ 
                me._showPlaceHolder(); 
            }else{ 
                me._hidePlaceHolder(); 
            }

            /* 控件的值发生改变的时候触发onchange事件 */
            me.options['onchange']( me,{} );

        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Label控件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'Label',true );

    /**
     *  ebaui.web.Label
     *  标注控件
     *  @class      Label 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   label_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      //  readonly
     *      //  data-options={ hasBorder : false, textAlign : '',text : '' } 
     *      &lt;input data-role="label" data-options="{ textAlign : 'left',text : '' }" /&gt;
     */
    ebaui.control( 'web.Label',ebaui.web.FormElement,{

        /**
         *  允许的button的state
         *  @private
         *  @instance
         *  @virtual
         *  @memberof   ebaui.web.Button
         *  @member     {String}    _availableState
         */
        _availableState:/white|primary|info|success|warning|danger|\s+/i,

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-label',

        /**
         *  更新lable标签的边框
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @method     _updateStyleBorder
         */
        _updateStyleBorder:function(){

            var $root     = this._$root;
            if( this.hasBorder() ){
                $root.removeClass('eba-nobor').addClass('eba-bor');
            }else{
                $root.removeClass('eba-bor').addClass('eba-nobor');
            }

        },

        /**
         *  更新lable标签的文字对其方式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @method     _updateStyleAlign
         */
        _updateStyleAlign:function(){

            var $root     = this._$root;
            var align = this.textAlign();
            var alignment = {
                'left'  : function(){
                    if( !$root.hasClass('eba-txtl') ){
                        $root.removeClass('eba-txtr').removeClass('eba-txtc').addClass('eba-txtl');
                    }
                },
                'center': function(){
                    if( !$root.hasClass('eba-txtc') ){
                        $root.removeClass('eba-txtl').removeClass('eba-txtr').addClass('eba-txtc');
                    }
                },
                'right' : function(){
                    if( !$root.hasClass('eba-txtr') ){
                        $root.removeClass('eba-txtl').removeClass('eba-txtc').addClass('eba-txtr');
                    }
                }
            };

            alignment[align]();

        },

        _updateStyleStates:function(){
            var me = this;
            var $root = me._$root;
            var state = $.trim(me.options['state']).toLowerCase();
            if( state.length > 0 ){
                var cls = 'eba-label ' + 'label-' + state;
                $root.attr( 'class',cls );
            }
        },

        /**
         *  获取或者设置button的状态
         *  可选的值：
         *  
         *  white
         *  primary
         *  info
         *  success
         *  warning
         *  danger
         *  
         *  如果要取消着色，只要传入一个空字符串即可，即ctrl.state( '' )
         *  
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @member     {String}    state
         *  @default    ''
         *  @example    <caption>get</caption>
         *      var state = ctrl.state();
         *  @example    <caption>set</caption>
         *      ctrl.state( '' );
         */
        state:function( val ){
            var me = this;
            var opts = me.options;
            if( !me._availableState.test( val ) ){ return opts['state']; }

             opts['state'] = val;
             me._updateStyleStates();
        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @method     _render
         */
        _render : function(){
            var me = this;
            me._updateStyleBorder();
            me._updateStyleAlign();
            me._updateStyleStates();
            me._$root.text( me.text() );
            me._super();
        },
       
        /**
         *  获取或者设置是否显示label边框
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @member     {Boolean}   hasBorder
         *  @default    false
         *  @example    <caption>get</caption>
         *      //  hasBorder == true
         *      var hasBorder = ctrl.hasBorder();
         *  @example    <caption>set</caption>
         *      ctrl.hasBorder( true );
         *      ctrl.hasBorder( false );
         */
        hasBorder : function( val ){

            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['hasBorder'];
            }

            me.options['hasBorder'] = val;
            me._render();

        },

        /**
         *  获取或者设置label文本值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @member     {String}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  text == 'text'
         *      var text = ctrl.text();
         *  @example    <caption>set</caption>
         *      ctrl.text( 'label' );
         */
        text : function( val ){

            var me = this;
            if( !me.isString( val ) ){
                return me.options['text'];
            }
            me.options['text'] = val;
            me._render();

        },

        /**
         *  同text
         *  @see ebaui.web.Label.text
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @member     {Object}        data
         *  @example    <caption>get</caption>
         *      //  { text : '' ,value : '' };
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      var pair = { text : '' ,value : '' };
         *      ctrl.data( pair );
         */
        data: function( val ){

            if( val && ( 'text' in val ) && ( 'value' in val ) ){

                this.text( val['text'] );

            }else{

                var txt = this.text();
                return {
                    'text' : txt,
                    'value': txt
                };

            }

        },

        /**
         *  获取或者设置label文本对其方式，目前只支持'left','center','right'三种对齐方式
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @member     {String}    textAlign
         *  @default    'right'
         *  @example    <caption>get</caption>
         *      //  textAlign == 'right'
         *      var textAlign = ctrl.textAlign();
         *  @example    <caption>set</caption>
         *      ctrl.textAlign( 'left' );
         *      ctrl.textAlign( 'center' );
         *      ctrl.textAlign( 'right' );
         */
        textAlign : function( val ){

            var me = this;
            var re = /left|center|right/i;
            if( !re.test( val ) ){
                return me.options['textAlign'];
            }
            me.options['textAlign'] = val;
            me._render();

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Label
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  指定是否显示label边框
            hasBorder: false,
            //  文本对齐
            textAlign: 'right',
            //  label文本
            text     : ''
        }

    } );

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Button控件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {
    
    ebaui.web.registerControl( 'Button',false );

    /** 
     *  控件全名 e.g. ebaui.web.Button
     *  控件描述
     *  @class      Button 
     *  @memberof   ebaui.web
     *  @extends    Control
     *  @tutorial   button_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      //  data-options={ iconCls : '',iconPosition : '',isFlat: false, href : '', target:'', text:'', onclick:function( sender,eventArgs ){} } 
     *      &lt;input data-role="button" data-options="{ }"/&gt;
     */
    ebaui.control( 'web.Button', {

        /**
         *  允许的button的state
         *  @private
         *  @instance
         *  @virtual
         *  @memberof   ebaui.web.Button
         *  @member     {String}    _availableState
         */
        _availableState:/primary|info|success|warning|danger|inverse|link|\s+/i,

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @virtual
         *  @memberof   ebaui.web.Button
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-button',

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {Object}    _cssClass
         */
        _cssClass : {
            disabled: 'eba-button-disabled'
        },

        /**
         *  更新控件enabled的UI样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:function(){
            var me = this;
            var cls = me._cssClass['disabled'];
            var op = me.enabled() ? 'removeClass' : 'addClass';
            me._$root[op](cls);
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _updateUIText
         */
        _updateUIText:function(){
            var me = this;
            var txt  = me.text();
            if( txt ){ me._$btnText.text( txt ); }
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _updateUIHref
         */
        _updateUIHref:function(){
            var me   = this;
            var href = me.href();
            var attrVal = ( me.enabled() && href ) ? href : 'javascript:void(0);';
            me._$root.attr( 'href',attrVal );
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _updateUITarget
         */
        _updateUITarget:function(){
            var me = this;
            var target = me.target();
            me._$root.attr( 'target',target ? target : null );
        },

        _updateStyleStates:function(){
            var me = this;
            var $root = me._$root;
            var state = $.trim(me.options['state']).toLowerCase();
            var cls = 'eba-button-Default ' + 'eba-button-' + state;
            $root.attr( 'class',cls );
        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _updateStyleIcon
         */
        _updateStyleIcon:function () {

            var me = this;
            var $root    = me._$root;
            var iconCls  = me.iconCls();
            var iconPosition = me.iconPosition();
            var iconHtml = '<i class="{0}"></i>'.replace( '{0}',iconCls );
            
            $( 'i',$root ).remove();
            if( iconPosition !== 'left' ){
                $root.append( iconHtml );
            }else{
                $root.prepend( iconHtml );
            }

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _render
         */
        _render : function(){

            var me = this;

            me._updateUIText();
            me._updateStyleIcon();
            me._updateUIHref();
            me._updateUITarget();
            me._updateStyleStates();
            
            me._super();

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self = this;
            var $root = self._$root;

            $root.on( 'click',function( event ){

                if( self.enabled() && self.isFunc( self.options['onclick'] ) ){
                    event.preventDefault();
                    self.options['onclick']( self,event );
                }

            } );

            //  onenter
            $root.on( 'keydown',function( event ){

                var onenter = function ( self,event ) {
                    
                    if( self.enabled() && self.isFunc( self.options['onclick'] ) ){

                        event.preventDefault();
                        self.options['onclick']( self,event );

                    }

                };

                switch( event.which ){
                    case ebaui.keycodes.enter:
                        onenter( self,event );
                        break;
                    default:
                        break;
                }

            } );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _initControl
         */
        _initControl : function(){
            var me = this;
            me._$btnText = $( '.eba-button-text ', me._$root );

            var opts = me.options;
            if( !me._availableState.test( opts['state'] ) ){
                opts['state'] = '';
            }

        },

        /**
         *  聚焦
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _focus
         */
        _focus : function(){ 
            this._$root.focus(); 
        },

        /**
         *  失焦
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @method     _blur
         */
        _blur : function(){
            this._$root.blur(); 
        },

        /**
         *  获取或者设置button的状态
         *  可选的值：
         *  
         *  primary
         *  info
         *  success
         *  warning
         *  danger
         *  inverse
         *  link
         *  
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {String}    state
         *  @default    ''
         *  @example    <caption>get</caption>
         *      var state = ctrl.state();
         *  @example    <caption>set</caption>
         *      ctrl.state( '' );
         */
        state:function( val ){
            var me = this;
            var opts = me.options;
            if( !me._availableState.test( val ) ){ return opts['state']; }

             opts['state'] = val;
             me._updateStyleStates();
        },

        /**
         *  获取或者设置button文本值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {String}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  text == 'text'
         *      var text = ctrl.text();
         *  @example    <caption>set</caption>
         *      ctrl.text( 'label' );
         */
        text : function( val ){
            var me = this;
            if( !me.isString( val ) ){ return me.options['text']; }
            me.options['text'] = val;
            me._$btnText.text( val );
        },

        /**
         *  获取或者设置button超链接地址
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {String}    href
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  href == 'href'
         *      var href = ctrl.href();
         *  @example    <caption>set</caption>
         *      ctrl.href( 'http://xxx.com/xxx' );
         */
        href : function( val ){

            var me = this;
            if( me.isString( val ) && $.trim( val ) != '' ){
                me.options['href'] = val;
                me._updateUIHref();
            }else{
                return me.options['href'];
            }

        },

        /**
         *  获取或者设置在何处打开目标 URL
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {String}    target
         *  @default    '_blank'
         *  @example    <caption>get</caption>
         *      var target = ctrl.target();
         *  @example    <caption>set</caption>
         *      //  _blank _parent _self _top 
         *      ctrl.target( '_blank' );
         */
        target : function( val ){
            var me = this;
            var re = /_parent|_blank|_self|_top/i;
            if( !re.test(val) ){
                return me.options['target'];
            }
            me.options['target'] = val;
            me._updateUITarget();
        },

        /**
         *  控件是否可以获取焦点
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.Button
         *  @member     {Boolean}   focusable
         *  @default    false
         *  @example    <caption>get</caption>
         *      //  false
         *      console.log( ctrl.focusable() );
         */
        focusable:function() { return true; },

        /**
         *  获取或者设置表单控件是否允许按下enter键的时候，聚焦到下一个控件
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {Boolean}   enterAsTab
         *  @default    false
         *  @example    <caption>get</caption>
         *      var enterAsTab = ctrl.enterAsTab();
         *  @example    <caption>set</caption>
         *      ctrl.enterAsTab( true );
         */
        enterAsTab:function( val ) {

            var me = this;
            if( me.isBoolean( val ) ){
                me._setOptions({ enterAsTab: val });
            }else{
                return me.options['enterAsTab'];
            }

        },

        /**
         *  获取或者设置button的icon图标CSS样式类
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {String}    iconCls
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  iconCls == 'icon-add'
         *      var iconCls = ctrl.iconCls();
         *  @example    <caption>set</caption>
         *      ctrl.iconCls( 'icon-add' );
         */
        iconCls : function( val ){
            var me = this;
            if( !me.isString( val ) ){
                return me.options['iconCls'];
            }
            me.options['iconCls'] = val;
            me._updateStyleIcon();
        },

        /**
         *  获取或者设置button的icon图标位置，可选的值有：left right
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {String}    iconPosition
         *  @default    'left'
         *  @example    <caption>get</caption>
         *      //  position == 'left'
         *      var position = ctrl.iconPosition();
         *  @example    <caption>set</caption>
         *      ctrl.iconPosition( 'left' );
         *      ctrl.iconPosition( 'right' );
         */
        iconPosition : function( val ){

            var me = this;
            var re = /left|right/i;
            if( !re.test( val ) ){
                return me.options['iconPosition'];
            }
            me.options['iconPosition'] = val;
            me._updateStyleIcon();
            
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {Object}    options
         */
        options : {
            //  控件默认的状态
            state : '',
            //  default width
            width : 0,
            //  default height
            height : 0,
            //  按钮文本
            text        : '',
            //  超链接地址
            href        : '',
            //  超链接弹出方式
            target      : 'blank',
            //  定义按钮的icon样式
            iconCls     : '',
            //  left top right
            iconPosition: 'left',
            //  获取或者设置表单控件是否允许按下enter键的时候，聚焦到下一个控件
            enterAsTab : false,
            /**
             *  鼠标点击按钮时发生
             *  @event  ebaui.web.Button#onclick
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onclick    : $.noop,
            /**
             *  按下回车键时触发
             *  @event  ebaui.web.Button#onenter
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onenter    : $.noop
        }
    });

})( jQuery,ebaui );
/**
 *  ebaui.textarea.js
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'TextArea',true );

    /** 
     *  多行的文本输入控件
     *  @class      TextArea 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.TextBox
     *  @tutorial   textarea_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      //  other attributes : maxlength="100" readonly="readonly"
     *      &lt;textarea id="" name="" data-role="textarea"  placeholder="请输入备注" data-options="{  }"&gt;&lt;/textarea&gt;
     */
    ebaui.control( 'web.TextArea',ebaui.web.TextBox, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextArea
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-textarea',

        /**
         *  更新UI的宽度
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextArea
         *  @method     _updateStyleWidth
         *  @todo       等伟榕把样式整理好之后，就开始实现这个方法
         */
        _updateStyleWidth : function(){

            var me     = this;
            var $root  = me._$root;
            var $input = me._$formInput;
            var width  = me.width();

            $root.width( width );
            $input.width( width );

        },

        /**
         *  更新UI的高度
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextArea
         *  @method     _updateStyleHeight
         *  @todo       等伟榕把样式整理好之后，就开始实现这个方法
         */
        _updateStyleHeight : function(){

            var me     = this;
            var $root  = me._$root;
            var $input = me._$formInput;
            var height = me.height();

            $root.height( height );
            //  $input.parent.borderHeight + $input.paddingHeight = 4
            $input.height( height - 4 );

        },

        /**
         *  获取或者设置表单控件是否允许按下enter键的时候，聚焦到下一个控件
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.TextArea
         *  @member     {Boolean}   enterAsTab
         *  @default    false
         *  @example    <caption>get</caption>
         *      var enterAsTab = ctrl.enterAsTab();
         */
        enterAsTab:function() { return false; },

        options : {
            //  default width
            width : 150,
            //  default height
            height : 30,
            enterAsTab : false
        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Combo
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    /** 
     *  定义combobox combolist dateTimePicker的基类
     *  ebaui.web.Combo
     *  @class      Combo 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.ButtonEdit
     *  @tutorial   datetimepicker_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example    
     *      &lt;input value="2013-10-08 16:07" data-role="datetimepicker" data-options="{}"/&gt;
     */
    ebaui.control( 'web.Combo',ebaui.web.ButtonEdit, {

        /**
         *  下拉菜单的弹出框
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Combo
         *  @member     _panel
         */
        _panel : null,

        /**
         *  调整下拉菜单的位置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Combo
         *  @method     _reposition
         */
        _reposition:function(){

            var me     = this;
            var panel  = me._panel;
            var $popup = panel.uiElement();

            if( !panel.visible() ){ return; }

            var $root       = me._$root;
            var rootPos     = $root.position();
            var popupHeight = $popup.outerHeight();
            var scrollTop   = $(document).scrollTop();

            var top  = rootPos.top + $root.outerHeight();
            if( top + popupHeight > $(window).height() + scrollTop ){
                top = rootPos.top - popupHeight;
            }

            panel.move({
                'top' : top,
                'left': rootPos.left
            });

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Combo
         *  @method     _setupEvents
         */
        _setupEvents:function(){

            var me         = this;
            var panel      = me._panel;
            var $root      = me._$root;
            var $panelRoot = panel.uiElement();

            $panelRoot.on( 'click',function( event ){
                event.stopPropagation();
            } );

            /*
             *  downArrow button click
             */
            $root.on( 'click', '.eba-buttonedit-button', function( event ){
                event.stopPropagation();
                if( me.enabled() && !me.readonly() ){
                    panel.toggle();
                    me._reposition();
                }
            });

            /*
             *  在document上注册一个click事件，当触发这个事件的时候，会自动收起下拉菜单
             */
            $( document ).on('click',function( event ){
                panel.close();
            });

            /*
             *  windows的窗口位置改变的时候，下拉菜单的位置应该跟着移动
             */
            $( window ).resize(function(event) {
                me._reposition();
            });

        }

    } );

})( jQuery,ebaui );
/**
 *  
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'ListBox',true );

    /**
     *  列表控件
     *  ，单选DEMO请查看 {@tutorial listbox_index}
     *  ，多选DEMO请看{@tutorial listbox_multiselect}
     *  ，使用远程数据源的DEMO请看 {@tutorial listbox_remoteDataSource}
     *  @class      ListBox 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.ListBox',ebaui.web.FormElement, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-listbox',

        /**
         *  listbox列表项目的模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {String}    _rootHtmlTmpl
         */
        _itemHtmlTmpl : '#ebaui-template-listbox-item',

        /**
         *  是否使用remote数据源
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {Boolean}       _usingRemoteData
         *  @default    false
         */
        _usingRemoteData : false,

        /**
         *  已经编译好的ListBox项HTML模板，后续会重复使用
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     __compiledListItemTmpl
         */
        _compiledListItemTmpl : $.noop,

        /**
         *  显示listbox正在加载的样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     _loadMask
         *  @param      {Boolean}    loading
         */
        _loadMask:function(){

            var me = this;
            var html = me._compiledListItemTmpl( {
                'loading'      : true,
                'idField'      : '',
                'textField'    : '',
                'valueField'   : '',
                'selectedItems': [],
                'dataItems'    : []
            } );
            
            $( 'table.eba-listbox-items',me._$root ).html( html );
        },

        /**
         *  更新listbox列表项
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     _renderData
         *  @param      {Boolean}    loading
         */
        _renderData:function () {

            var me = this;
            var html = me._compiledListItemTmpl( {
                'loading'      : false,
                'idField'      : me.textField(),
                'textField'    : me.textField(),
                'valueField'   : me.valueField(),
                'selectedItems': me.selectedItems(),
                'dataItems'    : me.items()
            } );
            
            $( 'table.eba-listbox-items',me._$root ).html( html );

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     _render
         */
        _render : function(){
            var me = this;
            me._loadData( function( sender ){
                //  show loading style
                sender._loadMask();
            },function( sender ){
                //  show list items
                sender._renderData();
            } );
            me._super();
        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self         = this;
            var $root        = self._$root;

            $root.on( 'click','tr.eba-listbox-item',function ( event ) {

                event.stopPropagation();

                var $target  = $(this);
                var itemIdx  = parseInt( $target.attr( 'data-index' ) );

                /* ctrl + click then remove item */
                if( event.ctrlKey){
                    self.deselect( itemIdx );
                }else{
                    self.select( itemIdx );
                }

                self.options['onitemclick']( self,{} );

            } );

            $root.on( 'dblclick','tr.eba-listbox-item',function ( event ) {
                
                event.stopPropagation();
                self.options['onitemdbclick']( self,{} );

            } );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     _initControl
         */
        _initControl : function(){
            var me = this;
            me._usingRemoteData = me.isUsingRemoteData( me.options['dataSource'] );
            var itemTmpl = $.trim( $( me._itemHtmlTmpl ).html() );
            me._compiledListItemTmpl  = me.compileTmpl( itemTmpl );
        },

        /**
         *  控件是否可以获取焦点
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.ListBox
         *  @member     {Boolean}   focusable
         *  @example    <caption>get</caption>
         *      //  false
         *      console.log( ctrl.focusable() );
         */
        focusable:function() { return true; },

        /**
         *  获取文本值
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.ListBox
         *  @member     {Array}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  text == ''
         *      var text = buttonedit.text();
         */
        text : function(){
            var me = this;
            var toRet = [];
            var field = me.textField();
            var data = me.data();

            for (var i = 0,l = data.length; i < l; i++) {
                var item = data[i];
                toRet.push( item[field] )
            };

            return toRet;
        },
        
        /**
         *  获取或者设置表单控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {Object|Array}    value
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( [] );
         */
        value     : function( val ){

            if( !val ){

                var toRet = [];
                var field = this.valueField();
                var data = this.data();

                for (var i = 0,l = data.length; i < l; i++) {
                    var item = data[i];
                    toRet.push( item[field] )
                };

                return toRet;

            }

            var me = this;
            if( !me.isArray( val ) ){
                val = [ val ];
            }

            var toSelect = null;
            var field = me.valueField();
            var items = me.items();
            var multiSelect = me.multiSelect();
            //  todo update the data property
            if( !multiSelect ){
                //  如果是单选，那么只能选中第一个选项
                var i = 0,
                    l = items.length;

                for (; i < l; i++) {
                    var item = items[i];
                    if( item[field] == val[0] ){
                        break;
                    }
                };

                toSelect = items[i];

            }else{
                //  如果是多选
                toSelect = [];
                var forEach = me.each;

                forEach( items,function ( item ) {

                    forEach( val,function ( value ) {
                        
                        if( value == item[field] ){
                            toSelect.push( item );
                        }

                    } );

                } );

            }

            me.select( toSelect );

        },

        /**
         *  获取或者设置选中的项
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {Array}        data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( [] );
         */
        data: function( val ){

            var me = this;
            if( !val ){ return me.selectedItems(); }
            if( !me.isArray( val ) ){ val = [ val ]; }

            if( val.length == 0 ){
                me.deselectAll();
                return;
            }

            var toSelect = null;
            var field = me.valueField();
            var items = me.items();

            if( !me.multiSelect() ){
                //  如果是单选，那么只能选中第一个选项
                var i = 0,
                    l = items.length,
                    first = val[0];

                for (; i < l; i++) {
                    var item = items[i];
                    if( item[field] == first[field] ){
                        break;
                    }
                };

                toSelect = items[i];

            }else{
                //  如果是多选
                toSelect = [];
                var forEach = me.each;

                forEach( items,function ( item ) {

                    forEach( val,function ( value ) {
                        
                        if( value[field] == item[field] ){
                            toSelect.push( item );
                        }

                    } );

                } );

            }

            me.select( toSelect );

        },

        /**
         *  listBox项的集合
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {Array}  _items
         */
        _items : [],

        /**
         *  加载listbox的列表数据
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     _loadData
         *  @param      {Function}  beforeLoad
         *  @param      {Function}  afterLoad
         */
        _loadData:function( beforeFn,afterFn ) {

            var me       = this;
            var dataSource = me.dataSource();

            beforeFn = ( me.isFunc( beforeFn ) ) ? beforeFn : $.noop;
            afterFn = ( me.isFunc( afterFn ) ) ? afterFn : $.noop;

            if( me._usingRemoteData ){

                //  清空列表
                me._items = [];
                me._selectedItems = [];
                me._loadMask();

                var paramsToServer = {};

                if( me.isFunc( dataSource.data ) ){
                    paramsToServer = dataSource.data();
                }else{
                    $.extend(paramsToServer, dataSource.data);
                }

                beforeFn( me );

                $.ajax({

                    url       : dataSource.url,
                    data      : paramsToServer,
                    dataType  : 'json',
                    
                    error     : me.options['onloadfail'],
                    beforeSend: me.options['onpreload'],
                    success   : function ( serverData ) {
                        me._items = serverData;
                        afterFn( me );
                        me.options['onloadsucc']( me,serverData );
                    },
                    complete  : me.options['onloadcomplete']

                });

            }else{
                beforeFn( me );
                me._items = dataSource;
                afterFn( me );
            }

        },

        /**
         *  listBox项的集合
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.ListBox
         *  @member     {Array}  items
         */
        items : function () {
            return this._items;
        },

        /**
         *  选中的项
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {Array}  _selectedItems
         */
        _selectedItems: [],

        /**
         *  获取选中的项
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.ListBox
         *  @member     {Array}  selectedItems
         *  @example    <caption>get</caption>
         *      //  [{ text : '' ,value : '' }];
         *      var items = ctrl.selectedItems();
         *  @example    <caption>set</caption>
         *      ctrl.selectedItems( [] );
         */
        selectedItems:function() {
            return this._selectedItems;
        },

        /**
         *  添加列表项
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     add
         *  @param      {Object|Array}     items
         *  @example    
         *      ctrl.add( [] );
         *  @tutorial listbox_addItems
         */
        add : function ( items ) {

            if( !items ){ return; }

            var me = this;
            if( !me.isArray( items ) ){
                items = [ items ];
            }

            if( items.length > 0 ){
                me._items = me._items.concat( items );
                me._renderData();
            }

        },

        /**
         *  删除列表项
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     remove
         *  @param      {Object|Array}     items
         *  @example    
         *      ctrl.remove( [] );
         *  @tutorial listbox_removeItems
         */
        remove:function ( items ) {

            if( !items ){ return; }

            var me = this;
            if( !me.isArray( items ) ){
                items = [ items ];
            }

            if( items.length > 0 ){

                var idField = me.idField();
                for (var i = 0; i < items.length; i++) {

                    var item = items[i];
                    for (var j = 0; j < me._items.length; j++) {
                        var dataItem = me._items[j];

                        if( dataItem[idField] == item[idField] ){
                            me._items.splice( j,1 );
                            break;
                        }
                        
                    };

                };

                me._renderData();

            }

        },

        /**
         *  更新列表中的项目
         *  @public 
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     update
         *  @param      {Object|Array}     items
         *  @example    
         *      ctrl.update( [] );
         *  @tutorial listbox_updateItems
         */
        update:function ( items ) {

            if( !items ){ return; }

            var me = this;
            if( !me.isArray( items ) ){
                items = [ items ];
            }

            if( items.length > 0 ){

                var idField = me.idField();
                for (var i = 0; i < items.length; i++) {

                    var item = items[i];
                    for (var j = 0; j < me._items.length; j++) {
                        var dataItem = me._items[j];

                        if( dataItem[idField] == item[idField] ){
                            me._items[j] = item;
                            break;
                        }
                        
                    };

                };

                me._renderData();

            }

        },

        /**
         *  移动列表项
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     move
         *  @param      {Number}     source
         *  @param      {Number}     dist
         *  @example    
         *      ctrl.move( [] );
         *  @tutorial listbox_moveItems
         */
        move:function ( source,dist ) {

            var me = this;
            if( !me.isNumber( source ) || !me.isNumber( dist ) ){
                return;
            }

            var items = me._items;
            var temp = items[source]

            items[source] = items[dist];
            items[dist] = temp;

            me._renderData();

        },

        /**
         *  当前选中项目的index
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     _currItemIdx
         */
        _currItemIdx:-1,

        /**
         *  选中前一个项目
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     select
         *  @example    
         *      ctrl.selectPrev();
         */
        selectPrev:function(){

            var me = this;
            var currIdx = me._currItemIdx;
            var dataItems = me.items();

            if( !dataItems || dataItems.length == 0 ){ return; }
            if( currIdx - 1 < 0){ return; }

            --currIdx;
            me._currItemIdx = currIdx;
            me.select( currIdx );

            me.highlight( currIdx );

        },

        /**
         *  选中前一个项目
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     select
         *  @example    
         *      ctrl.selectNext();
         */
        selectNext:function(){

            var me = this;
            var currIdx = me._currItemIdx;
            var dataItems = me.items();

            if( !dataItems || dataItems.length == 0 ){ return; }
            if( currIdx + 1 >= dataItems.length){ return; }

            ++currIdx;
            me._currItemIdx = currIdx;
            me.select( currIdx );

            me.highlight( currIdx );

        },

        /**
         *  选中项目
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     select
         *  @param      {Object|Array|Number}     items    -   数据对象，数据对象数组，或者索引index
         *  @example    
         *      ctrl.select( [] );
         *  @tutorial listbox_selectItems
         */
        select:function ( items ) {

            var me = this;
            if( me.isNull( items ) ){ return; }

            var isNum = me.isNumber( items );
            var dataItems = me.items();
            if( isNum && !( items >= 0 && items < dataItems.length ) ){ return; }
            if( isNum ){
                /* 
                 *  如果参数是一个index选项，
                 *  并且这个index在合理的范围内 
                 */
                items = [ dataItems[items]  ];
            }

            if( !me.isArray( items ) ){ items = [ items ]; }
            if( !items.length ){ return; }

            var selectedItems = me._selectedItems;
            var idField = me.idField();

            if( me.multiSelect() ){

                for (var i = 0; i < items.length; i++) {

                    var data = items[i];
                    var alreadySelected = false;
                    for (var j = 0; j < selectedItems.length; j++) {

                        var selectedItem = selectedItems[j];
                        if( selectedItem[idField] == data[idField] ){
                            alreadySelected = true;
                            break;
                        }

                    };

                    if( !alreadySelected ){
                        selectedItems.push( data );
                    }

                };
                
            }else{
                selectedItems = [ items[0] ];
            }

            me._selectedItems = selectedItems;
            me._renderData();
            me.options['onchange']( me,{} );

        },

        /**
         *  取消选中项目
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     deselect
         *  @param      {Object|Array}     items    -   数据对象，数据对象数组
         *  @example    
         *      ctrl.deselect( [] );
         *  @tutorial listbox_selectItems
         */
        deselect : function( items ) {

            var me = this;
            if( me.isNull( items ) ){ return; }

            var isNum = me.isNumber( items );
            var dataItems = me.items();
            if( isNum && !(items >= 0 && items < dataItems.length) ){
                return;
            }

            if( isNum ){
                items = [ dataItems[items] ];
            }

            if( !me.isArray( items ) ){ items = [ items ]; }

            if( items.length == 0 ){ return; }

            var selectedItems = me._selectedItems;
            if( items.length <=0 || selectedItems.length <= 0 ){
                return;
            }

            var idField = me.idField();
            for (var i = 0; i < items.length; i++) {
                
                var toRm = items[i];
                for (var j = 0; j < selectedItems.length; j++) {

                    var selected = selectedItems[j];
                    if( selected[idField] == toRm[idField] ){
                        selectedItems.splice( j,1 );
                        break;
                    }

                };

            };
            
            me._currItemIdx = -1;
            me._renderData();
            me.options['onchange']( self,{} );

        },

        /**
         *  取消所有选中项目
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     deselectAll
         */
        deselectAll:function(){
            var me = this;
            me._currItemIdx = -1;
            me._selectedItems = [];
            me._renderData();
            me.options['onchange']( me,{} );
        },

        /**
         *  高亮listbox的某条数据，但是不选中
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @method     highlight
         *  @param      {Number|Object}     target    -   索引值或者数据对象
         *  @example    
         *      ctrl.select( [] );
         *  @tutorial listbox_selectItems
         */
        highlight : function( target ){

            var me = this;
            if( me.isNull( target ) ){ return; }

            var itemIndex = -1;
            if( me.isNumber( target ) ){

                if( target >= me._items.length ){
                    return;
                }

                itemIndex = target;

            }else{

                var field = me.idField();
                for (var i = 0; i < me._items.length; i++) {

                    var item = me._items[i];
                    if( target[field] && ( item[field] == target[field] ) ){
                        itemIndex = i;
                        break;
                    }

                };

            }

            var $root = me._$root;
            var hoverCls = 'eba-listbox-item-hover';
            $( '.eba-listbox-item-hover',$root ).removeClass(hoverCls);
            if( itemIndex > -1 ){
                $( '.eba-listbox-item:eq(' + itemIndex + ')',$root ).addClass(hoverCls);
            }

        },

        /**
         *  控件数据源对象的ID字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {String}      idField
         *  @default    'id'
         *  @example    <caption>get</caption>
         *      var idField = ctrl.idField();
         *  @example    <caption>set</caption>
         *      ctrl.idField( '' );
         */
        idField : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['idField'];
            }

            me.options['idField'] = val;

        },

        /**
         *  控件数据源对象字段中，用于作为控件值的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {String}      valueField
         *  @default    'value'
         *  @example    <caption>get</caption>
         *      var valueField = ctrl.valueField();
         *  @example    <caption>set</caption>
         *      ctrl.valueField( '' );
         */
        valueField : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['valueField'];
            }

            me.options['valueField'] = val;
            me._renderData();

        },

        /**
         *  控件数据源对象字段中，用于作为控件文本的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {String}      textField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var textField = ctrl.textField();
         *  @example    <caption>set</caption>
         *      ctrl.textField( '' );
         */
        textField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){ return me.options['textField']; }
            me.options['textField'] = val;
            me._renderData();
        },

        /**
         *  数据源，可以是URL地址或者是一个javascript数组对象作为数据源
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {String|Array}      dataSource
         *  @default    []
         *  @example    <caption>get</caption>
         *      var src = ctrl.dataSource();
         *  @example    <caption>set</caption>
         *      //  本地数据
         *      ctrl.dataSource( [] );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : {}
         *      } );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : function(){ 
         *              // your logic
         *              return {};
         *          }
         *      } );
         */
        dataSource : function( val ){

            var me = this;
            if( !val ){
                return me.options['dataSource'];
            }

            me.options['dataSource'] = val;
            me._usingRemoteData      = me.isUsingRemoteData( val );
            me._loadData(function( sender ){
                sender._loadMask();
            },function( sender ) {
                /* 重置控件的状态 */
                sender._currItemIdx   = -1;
                sender._selectedItems = [];
                /* 渲染数据 */
                sender._renderData();
            });

        },

        /**
         *  获取或者设置控件是否支持多选
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {Boolean}    multiSelect
         */
        multiSelect : function( val ) {

            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['multiSelect'];
            }
            me.options['multiSelect'] = val;

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ListBox
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  default width
            width : 150,
            //  default height
            height : 0,
            //  控件当前已经选中列表的文本值
            text : [],
            //  控件当前已经选中列表的值
            value: [],
            //  是否支持多选
            multiSelect : false,
            //  控件数据源对象的ID字段名
            idField  : 'id',
            //  值字段
            valueField : 'value',
            //  文本字段
            textField  : 'text',
            //  数据源，可以是URL地址或者是一个javascript数组对象作为数据源
            //  dataSource : []
            //  dataSource : { url ,data:{} || function(){ return {}; } }
            dataSource : {},
            /**
             *  控件的值发生改变的时候触发
             *  @event  ebaui.web.ListBox#onchange
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop,
            /**
             *  数据项点击时发生
             *  @event  ebaui.web.ListBox#onitemclick
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onitemclick : $.noop,
            /**
             *  数据项双击时发生
             *  @event  ebaui.web.ListBox#onitemdbclick
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onitemdbclick : $.noop,
            /**
             *  加载失败的时候触发
             *  @event  ebaui.web.ListBox#onloadfail
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onloadfail : $.noop,
            /**
             *  加载成功的时候触发
             *  @event  ebaui.web.ListBox#onloadsucc
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onloadsucc : $.noop,
            /**
             *  数据开始加载的时候触发
             *  @event  ebaui.web.ListBox#onpreload
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onpreload : $.noop,
            /**
             *  数据加载结束的时候触发，无论数据加载成功还是失败
             *  @event  ebaui.web.ListBox#onloadcomplete
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onloadcomplete : $.noop
        }

    });

})( jQuery,ebaui );
/**
 *  定义了TextBoxList控件以及其实现
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {
    
    ebaui.web.registerFormControl( 'TextBoxList',true );

    /** 
     *  ebaui.web.TextBoxList
     *  多选输入框
     *  @class      TextBoxList 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   textboxlist_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      
     *      valueField 默认值:value
     *      textField  默认值:text
     *      filterField默认值:text
     *
     *      data-options={ 
     *          value      : [0,1],
     *          valueField : 'value',
     *          textField  : 'text',
     *          filterField: 'text',
     *          filter     : function( item,value,filterField ){},
     *          dataSource : '' 
     *      } 
     *      
     *      &lt;input id="" name="" data-role="textboxlist" data-options="{ }"/&gt;
     */
    ebaui.control( 'web.TextBoxList',ebaui.web.FormElement, {

        /**
         *  下拉菜单包含的控件对象，Combobox中就是一个ListBox
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     _listbox
         */
        _listbox : null,

        /**
         *  下拉菜单的弹出框
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     _panel
         */
        _panel : null,

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Object}    _domSelector
         */
        _domSelector:{
            'formInput'   : '.eba-textboxlist-input',
            'selectedItem': 'li.eba-textboxlist-item',
            'btnRemoveItem'  : 'span.eba-textboxlist-close'
        },

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-textboxlist',

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Object}    _cssClass
         */
         _cssClass : {
            disabled: 'eba-disabled',
            focused : 'eba-textboxlist-focus',
            readonly: 'eba-readonly'
        },

        /**
         *  已经编译好的文本列表项HTML模板，后续会重复使用
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _compiledTextItemTmpl
         */
        _compiledTextItemTmpl : $.noop,

        /**
         *  是否使用remote数据源
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Boolean}       _usingRemoteData
         */
        _usingRemoteData : false,

        /**
         *  查询得到的数据集，用于下拉菜单的选项
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Array}     _dataItems
         */
        _dataItems : [],

        /**
         *  调整下拉菜单的位置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Combo
         *  @method     _reposition
         */
        _reposition:function(){

            var me        = this;
            var $popup    = me._panel._$root;

            if( !me._panel.visible() ){ return; }

            var $root     = me._$root;
            var rootPos = $root.position();
            var popupHeight = $popup.outerHeight();
            var scrollTop = $(document).scrollTop();

            var top  = rootPos.top + $root.outerHeight();
            if( top + popupHeight > $(window).height() + scrollTop ){
                top = rootPos.top - popupHeight;
            }

            me._panel.move({
                'top' : top,
                'left': rootPos.left
            });

        },

        /**
         *  创建下拉菜单
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _initPanel
         */
        _initPanel : function(){

            var me = this;
            var ctrlId = me.id();
            var $root = me._$root;
            var $popup = $( '<div data-options="{ visible:false }" style="display:none;"><input /></div>' ).appendTo( document.body );
            $popup.css({ 
                'position'  : 'absolute',
                'display'   : 'none'
            });

            $popup.panel({
                id      : 'panel-' + ctrlId,
                position: 'absolute'
            });

            $( 'input',$popup ).listbox({

                width     : me.width(),
                height    : 220,
                idField   : me.valueField(),
                textField : me.textField(),
                valueField: me.valueField(),
                dataSource: [],
                onitemclick:function( sender,event ){

                    /* 更新控件的数据 */
                    var selected = sender.selectedItems();
                    var clone = me.data();
                    if( !clone || clone.length == 0 ){
                        me.data( selected );
                    }else if( me._indexOf( selected )  == -1 ){
                        me.data( [].concat( clone,selected ) );
                    }

                    /* then clear text in the textbox */
                    me._$formInput.val('');
                    me._panel.close();

                }

            });

            me._listbox = ebaui.get( $( '[data-role="listbox"]',$popup ) );
            me._panel = ebaui.get( $popup );
        },

        /**
         *  更新已经选中的文本列表
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _updateStyleText
         */
        _updateStyleText:function(){

            var me = this;
            var html = me._compiledTextItemTmpl( { 
                'loading'      : false,
                'textField'    : me.textField(),
                'valueField'   : me.valueField(),
                'selectedItems': [],
                'dataItems'    : me.data()
            } );

            $( 'ul li.eba-textboxlist-item',me._$root ).remove();
            $( 'ul',me._$root ).prepend( html );

        },

        /**
         *  根据input文本域的值，更新当前下拉菜单的数据集
         *  输入正常字符，进行过滤
         *  如果使用远程数据，则发送AJAX请求去获取数据，然后把得到的数据赋值给this._dataItems变量；
         *  如果使用的是本地数据，则对dataSource进行filter操作，然后把结果值赋值给this._dataItems变量；
         *  清零this._currDataItemIndex
         *  UI加载并且显示this._dataItems
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _loadData
         */
        _loadData:function( inputValue,afterUpdate ){

            var self       = this;
            var dataSource = self.dataSource();

            if( !afterUpdate ){ afterUpdate = $.noop; }

            if( self._usingRemoteData ){

                var toServer = {};
                var url      = dataSource.url;
                if( self.isFunc( dataSource.data ) ){
                    toServer = dataSource.data();
                }else if( dataSource.data && self.isObject( dataSource.data ) ){
                    toServer = dataSource.data;
                }
                //  服务端要进行过滤的字段，以及对应的字段的值
                toServer[self.filterField()] = inputValue;
                $.getJSON( url,toServer ).done(function( serverData ){

                    //  显示加载中的样式
                    self._dataItems = serverData;
                    afterUpdate( self );

                });

            }else{

                /* if we have value to filtering */
                if(inputValue){
                    var dataItems = [];
                    var filter = self.options['filter'];
                    var filterField = self.filterField();
                    for (var i = 0,l = dataSource.length; i < l; i++) {
                        var item = dataSource[i];

                        if( filter( item,inputValue,filterField ) ){
                            dataItems.push( item );
                        }

                    };

                    self._dataItems = dataItems;
                }else{
                    self._dataItems = dataSource;
                }

                afterUpdate( self );

            }

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self        = this;
            var $root       = self._$root;
            var $input      = self._$formInput;
            var domSelector = self._domSelector;
            var panel       = self._panel;
            var listbox     = self._listbox;

            $root.on( 'click',domSelector.selectedItem,function( event ){
                var $this = $( this );
                $this.siblings( '.eba-textboxlist-item-selected' ).removeClass('eba-textboxlist-item-selected');
                $this.addClass('eba-textboxlist-item-selected');
            } );

            $root.on( 'click','ul',function( event ){
                $input.focus();
            } );

            /* 删除已经选中的对象 */
            $root.on( 'click',domSelector.btnRemoveItem,function( event ){
                var toRm = self._query( $( this ).attr( 'data-value' ) );
                self._remove( toRm );
            } );

            $root.on( 'keydown',domSelector.formInput,function( event ){
                //  用户定义的事件处理程序
                self.options['onkeydown']( self,event );
            });

            $root.on( 'keyup',domSelector.formInput,function( event ){

                var onDownArrow = function( self,event ) {
                    /* 键盘向下按键 */
                    listbox.selectNext();
                };

                var onUpArrow = function( self,event ) {
                    /* 键盘向上按键 */
                    listbox.selectPrev();
                };

                var onEnter = function( self,event ) {

                    if( !panel.visible() ){
                        /* 当前下拉菜单处于关闭状态，那么这个时候，如果有其他得onenter事件，触发onenter事件 */
                        self.options['onenter']( self,event );
                    }else{
                        /* 
                         *  下拉菜单处于展开的状态
                         *  listbox.data()返回一个数组对象
                         */
                        self._add( listbox.data()[0] );
                        /* 清空文本 */
                        $input.val('');
                        /* 重置_currPopupItemIndex索引 */
                        panel.close();
                    }
                    
                };

                var onBackspace = function( self,event ) {
                    var inputVal = $input.val();
                    /* 退格键 */
                    if( !inputVal ){

                        /* 
                         *  第一次按下退格键，首先高亮最后一个选项
                         *  再次按下退格键，删除最后一个选项
                         */
                        var $highlighted = $( '.eba-textboxlist-item-selected',$root );
                        if( $highlighted.size() == 0 ){
                            $( domSelector.selectedItem,$root ).last().addClass('eba-textboxlist-item-selected');
                        }else{
                            self._pop();
                        }

                    }else{
                        //  输入正常字符，进行过滤
                        //  如果使用远程数据，则发送AJAX请求去获取数据，然后把得到的数据赋值给this._dataItems变量；
                        //  如果使用的是本地数据，则对dataSource进行filter操作，然后把结果值赋值给this._dataItems变量；
                        //  清零this._currDataItemIndex
                        //  UI加载并且显示this._dataItems
                        self._loadData( inputVal,function( sender ){

                            listbox.dataSource( self.items() );
                            panel.open();
                            self._reposition();

                        } );

                    }
                };

                var defaultHandle = function( self,event ) {

                    //  输入正常字符，进行过滤
                    //  如果使用远程数据，则发送AJAX请求去获取数据，然后把得到的数据赋值给this._dataItems变量；
                    //  如果使用的是本地数据，则对dataSource进行filter操作，然后把结果值赋值给this._dataItems变量；
                    //  清零this._currDataItemIndex
                    //  UI加载并且显示this._dataItems
                    self._loadData( $input.val(),function(){

                        listbox.dataSource( self.items() );
                        panel.open();
                        self._reposition();

                    } );

                };

                switch( event.which ){
                    case ebaui.keycodes.down_arrow:
                        onDownArrow( self,event );
                        break;
                    case ebaui.keycodes.up_arrow:
                        onUpArrow( self,event );
                        break;
                    case ebaui.keycodes.enter:
                        onEnter( self,event );
                        break;
                    case ebaui.keycodes.backspace:
                        onBackspace( self,event );
                        break;
                    default:
                        defaultHandle( self,event );
                        break;
                };

                self.options['onkeyup']( self,event );
            });

            $root.on( 'focus',domSelector.formInput,function(evt){
                self._setOption( 'focused',true );
                if( self.enabled() && !self.readonly() ){
                    self.options['onfocus']( self,event );
                }
                self._updateStyleFocused();
            });

            $root.on( 'blur',domSelector.formInput,function(evt){
                self._setOption( 'focused',false );
                if( self.enabled() ){
                    self.options['onblur']( self,event );
                }
                self._updateStyleFocused();
            });

        },

        /**
         *  根据对象的值，在dataSource查找并且返回对象
         *  如果没有找到对象，则返回null值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _indexOf
         *  @arg        {Object}    targetVal   指定的对象的值
         *  @returns    {Object}
         */
        _query:function( targetVal ){

            var me = this;
            if( me.isNull( targetVal ) ){
                return null;
            }

            var dataItems = me.data();
            var field     = me.valueField();

            for (var i = dataItems.length - 1; i >= 0; i--) {

                var item = dataItems[i];
                if( item[field] == targetVal ){
                    return item;
                }

            }

            return null;
        },

        /**
         *  返回指定对象在当前已经选中的对象列表中的索引
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _indexOf
         *  @returns    {Number}
         */
        _indexOf : function( arg ){

            var me = this;
            if( me.isNull( arg ) ){ return -1; }

            var index     = -1;
            var dataItems = me.data();
            var field     = me.valueField();

            for (var i = dataItems.length - 1; i >= 0; i--) {

                var item = dataItems[i];
                if( item[field] == arg[field] ){
                    index = i;
                    break;
                }

            };

            return index;

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            var opts = me.options;
            me._$formInput = $( '.eba-textboxlist-input',me._$root );
            me._compiledTextItemTmpl  = me.compileTmpl( $( '#ebaui-template-textboxlist-item' ).html() );

            //  过滤字段,使用remote 数据源的时候，发起请求时input值对应的url参数得KEY
            //  该参数默认等同于textField参数
            if( opts['filterField'] ){ opts['filterField'] = opts['textField']; }

            //  which kind of dataSource are we using now ?
            //  Are we access data from remove server or just from a javascript array as dataSource ? 
            me._usingRemoteData = me.isUsingRemoteData( opts['dataSource'] );
            //  创建下拉菜单
            me._initPanel();
            //  加载数据
            me._loadData( undefined, function( sender ){

                me._listbox.dataSource( me.items() );
                var initVal = opts['value'];
                //  如果有设置combobox初始化的值，那么在popup窗口创建完成之后，就应该初始化已经选中的项目
                if( initVal ){
                    //  在下拉菜单的所有数据都加载完成之后，更新一次value属性。因为value属性的真正的值是从下拉菜单的数据集得到的。
                    me.value( initVal );
                    me._listbox.data( me.data() );
                }

            } );

        },

        /**
         *  下拉菜单数据
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.Combo
         *  @member     {Array}  items
         */
        items:function(){ return this._dataItems; },

        /**
         *  textboxlist 文本列表
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Array}     text
         *  @example    <caption>get</caption>
         *      //  [ '', '' ]
         *      var pair = ctrl.text();
         */
        text : function(){ return this.options['text']; },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _add
         *  @arg        {Object|Number}     要添加的对象或者对象的index
         */
        _add:function( arg ){

            var me = this;
            if( me.isNull( arg ) ){ return; }

            var isNum = me.isNumber( arg );
            var dataItems = me.items();
            if( dataItems.length == 0 ){ return; }

            if( isNum && !(arg >= 0 && arg < dataItems.length ) ){
                return;
            }

            if( isNum ){
                arg = dataItems[arg];
            }

            if( me._indexOf( arg ) == -1 ){
                var opts = me.options;
                var field = me.valueField();
                /* 没有这条数据，添加这条数据 */
                opts['data'].push(arg);
                opts['value'].push(arg[field]);
                /* update displayed text */
                me._updateStyleText();
                /* trigger change event */
                me.options['onchange']( me,{} );
            }

        },

        /**
         *  删除并且返回最后一个选中对象
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _pop
         */
        _pop:function(){
            var me = this;
            var opts = me.options;
            var data = opts['data'];

            /* 如果当前已选中项目列表是空的，直接返回 */
            if( me.isEmpty( data ) ){ return null; }

            var idx  = data.length - 1;
            var lastItem = data[idx];
            /* 删除数据 */
            opts['data'].splice(idx,1);
            opts['value'].splice(idx,1);
            /* update displayed text */
            me._updateStyleText();
            /* trigger change event */
            me.options['onchange']( me,{} );

            return lastItem;
        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @method     _remove
         *  @arg        {Object|Number}     要移除的对象或者对象的index
         */
        _remove:function( arg ){

            var me = this;
            if( me.isNull( arg ) ){ return; }

            var isNum = me.isNumber( arg );
            var dataItems = me.items();
            if( dataItems.length == 0 ){ return; }

            if( isNum && !(arg >= 0 && arg < dataItems.length ) ){
                return;
            }

            if( isNum ){
                arg = dataItems[arg];
            }

            var idx = me._indexOf( arg );
            if( idx != -1 ){
                /* 当前控件有选中的这个对象 */
                var opts = me.options;
                /* 删除数据 */
                opts['data'].splice(idx,1);
                opts['value'].splice(idx,1);
                /* update displayed text */
                me._updateStyleText();
                /* trigger change event */
                me.options['onchange']( me,{} );
            }

        },

        _updateValue : function( val,isEqual ){

            var me = this;
            if( !me.isArray( val ) ){ val = [ val ]; }
            
            var neoData    = [];
            var neoValue   = [];
            var neoText    = [];
            var textField  = me.textField();
            var valueField = me.valueField();
            var dataItems  = me.items();

            /* first we should filter out existed value */
            me.each(val,function(valueItem){

                for (var i = 0, l = dataItems.length; i < l; i++) {
                    var dataItem = dataItems[i];

                    if( isEqual(dataItem,valueItem,valueField) ){

                        var text = dataItem[textField];
                        var value = dataItem[valueField];

                        var toInsert = {};
                        toInsert[textField] = text;
                        toInsert[valueField] = value;

                        neoData.push(dataItem);
                        neoText.push(text);
                        neoValue.push(value);

                        break;
                    }
                };

            } );
            /* update controls value */
            me.options['data'] = neoData;
            me.options['text'] = neoText;
            me.options['value'] = neoValue;
            /* update displayed text */
            me._updateStyleText();
            /* trigger change event */
            me.options['onchange']( me,{} );

        },

        /**
         *  textboxlist value
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Array}     value
         *  @example    <caption>get</caption>
         *      //  [ '', '' ]
         *      var value = ctrl.value();
         */
        value : function( val ){

            var me = this;
            if( !val ){
                return me.options['value'];
            }

            me._updateValue( val,function( dataItem,valueItem,valueField ){
                return (dataItem[valueField] == valueItem);
            } );
        },

        /**
         *  控件数据，当前控件选中的数据，包含文本还有对应的值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Array}     data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( pair );
         */
        data: function( val ){

            var me = this;
            if( !val ){
                return me.options['data'];
            }

            me._updateValue( val,function( dataItem,valueItem,valueField ){
                return (dataItem[valueField] == valueItem[valueField]);
            } );

        },

        /**
         *  控件数据源对象字段中，用于筛选的对象字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {String}      filterField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var filterField = ctrl.filterField();
         *  @example    <caption>set</caption>
         *      ctrl.filterField( '' );
         */
        filterField : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['filterField'];
            }
            me.options['filterField'] = val;

        },

        /**
         *  控件数据源对象字段中，用于作为控件值的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {String}      valueField
         *  @default    'value'
         *  @example    <caption>get</caption>
         *      var valueField = ctrl.valueField();
         *  @example    <caption>set</caption>
         *      ctrl.valueField( '' );
         */
        valueField : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['valueField'];
            }
            me.options['valueField'] = val;

        },

        /**
         *  控件数据源对象字段中，用于作为控件文本的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {String}      textField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var textField = ctrl.textField();
         *  @example    <caption>set</caption>
         *      ctrl.textField( '' );
         */
        textField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['textField'];
            }
            me.options['textField'] = val;
        },

        /**
         *  下拉菜单选项的数据源，可以是远程数据源URL配置对象或者是一个javascript数组对象作为数据源
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Object|Array}          dataSource
         *  @property   {String}                dataSource.url          - 服务端URL
         *  @property   {Object|Function}       dataSource.data         - 向服务器发起AJAX请求的时候，要发送给服务器的URL参数
         *  @tutorial   texboxlist_local
         *  @tutorial   texboxlist_remote
         *  @example    <caption>get</caption>
         *      var src = ctrl.dataSource();
         *  @example    <caption>set</caption>
         *      //  本地数据
         *      ctrl.dataSource( [] );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : {}
         *      } );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : function(){ 
         *              // your logic
         *              return {};
         *          }
         *      } );
         */
        dataSource : function( val ){

            var me = this;
            if( !val ){
                return me.options['dataSource'];
            }

            me.options['dataSource'] = val;
            me._usingRemoteData = me.isUsingRemoteData( val );

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  default width
            width : 250,
            //  default height
            height : 24,
            //  控件当前已经选中列表的文本值
            text : [],
            //  控件当前已经选中列表的值
            value: [],
            //  值字段
            valueField : 'value',
            //  文本字段
            textField  : 'text',
            //  过滤字段,使用remote 数据源的时候，发起请求时input值对应的url参数得KEY
            //  该参数默认等同于textField参数
            filterField : '',
            //  使用本地array数据，作为数据过滤的函数
            filter : function( item,value,filterField ){
                return item[filterField].indexOf( value ) > -1;
            },
            //  下拉菜单选项的数据源，可以是URL地址或者是一个javascript数组对象作为数据源
            //  dataSource : []
            //  dataSource : { url ,data:{} || function(){ return {}; } }
            dataSource : '',

            /**
             *  键盘按下时发生
             *  @event  ebaui.web.TextBoxList#onkeydown
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onkeydown    : $.noop,

            /**
             *  键盘释放时发生
             *  @event  ebaui.web.TextBoxList#onkeyup
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onkeyup      : $.noop,

            /**
             *  回车时发生
             *  @event  ebaui.web.TextBoxList#onenter
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onenter      : $.noop,

            /**
             *  控件获取焦点的时候触发
             *  @event  ebaui.web.TextBoxList#onfocus
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onfocus      : $.noop,

            /**
             *  控件失去焦点的时候触发
             *  @event  ebaui.web.TextBoxList#onblur
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onblur      : $.noop,

            /**
             *  控件的值发生改变的时候触发
             *  @event  ebaui.web.TextBoxList#onchange
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop

        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.MiniGrid
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {
    
     /** 
     *  ebaui.web.MiniGrid
     *  控件描述
     *  @class      MiniGrid 
     *  @memberof   ebaui.web
     *  @extends    Control
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example    ''
     */
    ebaui.control( 'web.MiniGrid', {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-minigrid',

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @member     {String}    _rootHtmlTmpl
         */
        _headerHtmlTmpl : '#ebaui-template-minigrid-header',

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @member     {String}    _rootHtmlTmpl
         */
        _itemHtmlTmpl : '#ebaui-template-minigrid-item',

        /**
         *  已经编译好的ListBox项HTML模板，后续会重复使用
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     _compiledHeaderTmpl
         */
        _compiledHeaderTmpl : $.noop,

        /**
         *  已经编译好的ListBox项HTML模板，后续会重复使用
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     _compiledItemTmpl
         */
        _compiledItemTmpl : $.noop,

        _updateStyleHeight : function(){

            var me      = this;
            var height  = me.height();
            var isNum   = me.isNumber( height );
            
            var $root   = me._$root;
            var $border = $('.eba-listbox-border',$root);
            var $view   = $('.eba-listbox-view',$root);

            if( isNum ){
                if( height > 0 ){ 
                    $view.height( height );
                }
            }else if( height ){
                var result = me._cssUnitRE.exec( height );
                if( result[1] ){
                    //  if one css unit has been assigned
                    $view.css( 'height',height );
                }else{
                    //  default css unit is px
                    $view.css( 'height',height + 'px' );
                }
            }

        },

        _updateStyleWidth:function(){

            var me      = this;
            var width   = me.width();
            var isNum   = me.isNumber( width );
            
            var $root   = me._$root;
            var $border = $('.eba-listbox-border',$root);
            var $view   = $('.eba-listbox-view',$root);

            if( isNum ){
                if( width > 0 ){ $view.width( width ); }
            }else if( width ){
                var result = me._cssUnitRE.exec( width );
                if( result[1] ){
                    //  if one css unit has been assigned
                    $view.css( 'width',width );
                }else{
                    //  default css unit is px
                    $view.css( 'width',width + 'px' );
                }
            }

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self  = this;
            var $root = self._$root;

            /* because of event delegation,so I stop event bubbling here */
            $root.on( 'click',function( event ){ 
                event.stopPropagation();
            } );

            $root.on( 'change',':checkbox',function( event ){

                event.stopPropagation();

                var $this       = $(this);
                var value       = $this.val();
                var selectedCls = 'eba-listbox-item-selected';
                if( value === 'selectall' && $this.is(':checked') ){
                    //  in case of select all
                    $( ':checkbox[value!="selectall"]',$root ).each(function( index,el ){
                        el.checked = true;
                    });

                    $( '.eba-listbox-view tr[data-index!=""]',$root ).addClass(selectedCls);

                    if( self.isFunc( self.options['onSelectAll'] ) ){
                        self.options['onSelectAll']( self,{} );
                    }

                }else if( value === 'selectall' && !$this.is(':checked') ){
                    //  in case of deselect all
                    self.resetSelection();
                    $( '.eba-listbox-view .' + selectedCls,$root ).removeClass(selectedCls);
                    self.options['onSelectAll']( self,{} );
                }else if( value !== 'selectall' && $this.is(':checked') ){

                    $this.parent().parent().addClass(selectedCls);
                    if( self.isFunc( self.options['onSelectRow'] ) ){
                        self.options['onSelectRow']( self,{} );
                    }

                }else if( value !== 'selectall' && !$this.is(':checked') ){
                    $this.parent().parent().removeClass(selectedCls);
                    self.options['onSelectRow']( self,{} );
                }

            } );

        },

        /**
         *  判断是否使用本地数据源还是使用remote数据源
         *  ，因为我直接整合jqgrid的配置，并没有做过多的修改
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     _isRemoteDataSource
         */
        _isRemoteDataSource:function(){
            var me = this;
            var dataSource = me.options['data'];
            var url = $.trim( me.options['url'] );

            /*
             *  优先加载远程数据，然后才是本地数据
             */
            if( url ){ return true; }

            if( dataSource && me.isArray( dataSource ) ){
                return false;
            }
            
            //  at last, it comes to an empty array as a local dataSource
            me.options['data'] = [];
            return false;
        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            var headerTmpl = $.trim( $( me._headerHtmlTmpl ).html() );
            me._compiledHeaderTmpl = me.compileTmpl( headerTmpl );

            var itemHtmlTmpl = $.trim( $( me._itemHtmlTmpl ).html() );
            me._compiledItemTmpl = me.compileTmpl( itemHtmlTmpl );

            me._usingRemoteData = me._isRemoteDataSource();

        },

        _usingRemoteData  : false,

        _loadRemoteData : function( callback ){

            var me = this;
            var opts = me.options;
            var dataSource = opts['url'];
            var postData = opts['postData'];
            var parameters = {};
            if( postData ){
                for( var i = 0,l = postData.length;i<l;i++ ){
                    $.extend( parameters,postData[i] );
                }
            }

            $.getJSON(dataSource, parameters, function(serverData) {
                callback( serverData );
            });

        },

        _loadData:function( callback ){

            var self = this;
            if( self._usingRemoteData ){
                self._loadRemoteData( function( serverData ){
                    self._items = serverData;
                    callback();
                    self.options['loadComplete']( self,{} );
                } );
            }else{
                self._items = self.options.data;
                callback();
                self.options['loadComplete']( self,{} );
            }

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     _render
         */
        _render : function(){

            var self = this;
            var $root = this._$root;

            self._loadData( function(){

                var headerHtml = self._compiledHeaderTmpl({
                    'headers' : self.options['colModel']
                });

                var itemsHtml = self._compiledItemTmpl({
                    'headers'  : self.options['colModel'],
                    'rows'     : self.items(),
                    'autowidth': self.options['autowidth']
                });

                if( self.options['autowidth'] ){
                    $( '.eba-listbox-headerInner',$root ).html( headerHtml );
                    $( '.eba-listbox-items',$root ).html( itemsHtml );
                }else{
                    $( '.eba-listbox-items',$root ).html( headerHtml + itemsHtml );
                }

                self._updateStyleWidth();
                self._updateStyleHeight();

            } );

        },

        //  本地数据源
        _items : [],

        /**
         *  当前MiniGrid的数据源
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @member     items
         */
        items : function(){ return this._items; },

        /**
         *  当前MiniGrid的已经选中的项目
         *  @private
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @member     selectedItems
         */
        selectedItems : function(){

            var me = this;
            if( me._items.length <=0 ){
                return [];
            }

            var idx   = [];
            var $root = me._$root;
            $( ':checked',$root ).each( function( index,el ){
                var $this = $( el );
                var value = $this.val();
                if( el.checked && value !== "selectall" ){
                    idx.push( parseInt( value ) );
                }
            } );

            var selected = [];
            for( var i = 0,l = idx.length; i < l; i++ ){
                var index = idx[i];
                selected.push( me._items[index] );
            }
            return selected;

        },

        /**
         *  清空选中的项。如果有指定的数据行，则清空指定数据行的选中状态；
         *  否则，清空所有选中的数据行。
         *  @public
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     resetSelection
         *  @param      {String}        rowId
         */
        resetSelection : function( rowId ){

            var $root            = this._$root;
            var $checkboxes      = $( ':checkbox',$root );
            var $checked         = $( ':checked',$root );
            var checkedItemCount = $checked.size();
            var allChecked       = checkedItemCount == this._items.length;
            var resetAll         = !this.isNumber( rowId );

            if( checkedItemCount == 0 ){
                return ;
            }

            if( !resetAll && allChecked ){
                //  in case of checked all
                $checkboxes.get( 0 ).checked = false;
                $checkboxes.get( rowId + 1 ).checked = false;
            }else if( !resetAll && !allChecked ){
                //  in case of reset one row
                $checkboxes.get( rowId + 1 ).checked = false;
            }else{
                //  in case of reset all
                $( '.eba-listbox-item-selected',$root ).removeClass('eba-listbox-item-selected');
                $checked.each( function( index,el ){
                    el.checked = false;
                } );
            }

        },

        /**
         *  选中指定的数据行
         *  @public
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     setSelection
         *  @param      {String}        rowId
         */
        setSelection : function( rowId ){

            var me = this;
            var selector = ':checkbox[value="{0}"]'.replace( '{0}',rowId );
            var $tr = $( 'tr[data-index="{0}"]'.replace( '{0}',rowId ),me._$root );

            if(  $tr.size() > 0 ){
                $tr.find(':checkbox').get(0).checked = true;
                $tr.addClass('eba-listbox-item-selected');
                if( me.isFunc( me.options['onSelectRow'] ) ){
                    me.options['onSelectRow']( me,{} );
                }
            }

        },

        //  { data : [] }
        /**
         *  更新grid的配置
         *  @public
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     setGridParam
         *  @param      {Object}        options
         */
        setGridParam : function( parameters ){
            if( !parameters ){ return; }
            this.options = $.extend( this.options,parameters );
        },

        /**
         *  使用grid配置重新加载grid
         *  @public
         *  @instance
         *  @memberof   ebaui.web.MiniGrid
         *  @method     reloadGrid
         */
        reloadGrid : function(){
            var me = this;
            //  
            me._usingRemoteData = me._isRemoteDataSource();
            //  re-render
            me._render();
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Button
         *  @member     {Object}    options
         */
        options : {
            //  
            autowidth : true,
            //  default width
            width : 400,
            //  default height
            height : 120,
            //  remote data source 
            url         : '',
            //  local data array
            data        : [],
            //  xml 
            //  xmlstring 
            //  json 
            //  jsonstring 
            //  local 
            //  javascript 
            //  function 
            //  clientSide
            datatype    : "local",
            //  使用远程数据的时候，随着url一起提交到服务器的数据
            postData    : [{}],
            //  控件数据源对象的ID字段名
            colModel    : [ 
                {name       :'id', label : 'ID', width : 150},
                {name       :'text', label : 'Text', width : 150} 
            ],
            //  是否允许多选
            multiselect : true,
            //  
            onSelectRow : $.noop,
            //  
            onSelectAll : $.noop,
            //
            loadComplete: $.noop
        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.ComboBox
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    /* 命名空间别名 */
    ebaui.web.registerFormControl( 'ComboBox',true );

    /** 
     *  ebaui.web.ComboBox
     *  ，DEMO请查看 {@tutorial combobox_index}
     *  ，使用远程数据源的DEMO请看 {@tutorial combobox_remoteDataSource}
     *  @class      ComboBox 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.Combo
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      
     *      valueField默认值:value
     *      valueField默认值:text
     *      filterField默认值:text
     *
     *      data-options={ 
     *          text       : '',
     *          value      : null,
     *          idField    : 'id',
     *          textField  : 'text',
     *          valueField : 'value',
     *          dataSource : '' ,
     *          onchange   : $.noop
     *      }
     *
     *      &lt;input id="" name="" value="aa" placeholder="" readonly="" data-role="combobox" data-options="{ }" /&gt;
     */
    ebaui.control( 'web.ComboBox',ebaui.web.Combo, {

        /**
         *  下拉菜单包含的控件对象，Combobox中就是一个ListBox
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     _listbox
         */
        _listbox : null,

        /**
         *  创建并且初始化下拉菜单
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _initPanel
         */
        _initPanel : function(){

            var me = this;
            var ctrlId = me.id();
            var $root = me._$root;
            var $popup = $( '<div data-options="{ visible:false }" style="display:none;"><input /></div>' ).appendTo( document.body );
            //  18是表单控件外围status的icon宽度
            $popup.panel({
                id      : 'panel-' + ctrlId,
                position: 'absolute',
                width   : me.width() - 22,
                height  : me.height()
            });

            $( 'input',$popup ).listbox({

                position  : null,
                width     : 0,
                height    : 0,
                idField   : me.idField(),
                textField : me.textField(),
                valueField: me.valueField(),
                dataSource: [],
                onitemclick:function( sender,event ){
                    //  更新控件的数据 
                    me.data( sender.selectedItems() );
                    //  如果是单选的情况，那么在选中其中的一个项目之后，就把下拉菜单收起来
                    me._panel.close();
                }

            });

            me._panel = ebaui.get( $popup );
            me._listbox = ebaui.get( $( '[data-role="listbox"]',$popup ) );
        },

        /**
         *  更新已经选中的文本列表
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _updateText
         */
        _updateStyleText:function(){

            var str = '';
            var text = this.text();
            for (var i = 0,l=text.length; i < l; i++) {
                var item = text[i];
                str += item;
                if( i < l -1 ){
                    str += ',';
                }
            }

            this._$formInput.val( str );

        },

        /**
         *  加载listbox的列表数据
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _loadRemoteData
         *  @param      {Object}    inputValue
         *  @param      {Function}  afterLoad
         */
        _loadRemoteData:function( inputValue,beforeLoad,afterLoad ){

            var self       = this;
            var dataSource = self.dataSource();

            if( !self.isFunc(beforeLoad) ){ beforeLoad = $.noop; }
            if( !self.isFunc(afterLoad) ){ afterLoad = $.noop; }

            //  清空下拉菜单旧的数据
            self._popupDataItems = [];
            var paramsToServer = {};

            if( self.isFunc( dataSource.data ) ){
                paramsToServer = dataSource.data();
            }

            if( inputValue && inputValue.length > 0 ){
                /*
                 *  如果是单选，那么允许你过滤下拉菜单数据
                 *  多选的情况下不允许过滤下拉菜单数据，因为这个时候限制了用户的输入
                 */
                paramsToServer[self.filterField()] = inputValue;
            }

            beforeLoad( self );

            $.ajax({
                url       : dataSource.url,
                data      : paramsToServer,
                dataType  : 'json',
                success   : function ( serverData ) {
                    self._popupDataItems = serverData;
                    afterLoad( self );
                }
            });

        },

        /**
         *  加载listbox的列表数据
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _loadLocalData
         *  @param      {Object}    inputValue
         *  @param      {Function}  afterLoad
         */
        _loadLocalData:function( inputValue,beforeLoad,afterLoad ){

            var self       = this;
            var field      = self.filterField();
            var filter     = self.options['filter'];
            var dataSource = self.dataSource();

            if( !self.isFunc(beforeLoad) ){ beforeLoad = $.noop; }
            if( !self.isFunc(afterLoad) ){ afterLoad = $.noop; }

            beforeLoad( self );

            if( inputValue && inputValue.length > 0 ){
                //  如果是单选，那么允许你过滤下拉菜单数据
                var dataItems = [];
                for (var i = 0; i < dataSource.length; i++) {
                    var item = dataSource[i]
                    if( filter( item,inputValue,field ) ){
                        dataItems.push( item );
                    }
                };

                self._popupDataItems = dataItems;

            }else{
                //  多选的情况下不允许过滤下拉菜单数据，因为这个时候限制了用户的输入
                self._popupDataItems = dataSource;
            }

            afterLoad( self );

        },

        /**
         *  加载listbox的列表数据
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _loadPopupData
         *  @param      {Function}  beforeLoad
         *  @param      {Function}  afterLoad
         */
        _loadPopupData:function( inputValue,beforeLoad,afterLoad ) {

            var me = this;
            if( me._usingRemoteData ){
                me._loadRemoteData( inputValue,beforeLoad,afterLoad );
            }else{
                me._loadLocalData( inputValue,beforeLoad,afterLoad );
            }

        },

        /**
         *  查找数据项是在下拉菜单数据源的索引值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _indexOf
         *  @param      {Object}    toCompare
         */
        _indexOf:function( toCompare,field,isEqual ){

            var me = this;
            if( me.isString( field ) ){
                field = this.idField();
            }

            if( !me.isFunc( isEqual ) ){
                isEqual = function( source,dist ){
                    return source[field]  == dist[field];
                };
            }

            var index = -1;
            for (var i = 0; i < me._popupDataItems.length; i++) {

                if( isEqual( toCompare,me._popupDataItems[i] ) ){
                    index = i;
                    break;
                }

            };

            return index;

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            //  初始化加载下拉菜单数据
            //  下拉菜单的数据应该是由combobox过滤以及筛选，然后赋值给下拉菜单控件
            //  我觉得，下载菜单的数据应该是在点击下来菜单的时候去加载数据
            var me   = this;
            var $root  = me._$root;

            $root.on( 'focus','.eba-buttonedit-input',function( event ){
                me._setOption( 'focused',true );
                me._updateStyleFocused();
            } );

            $root.on( 'blur','.eba-buttonedit-input',function( event ){
                me._setOption( 'focused',false );
                me._updateStyleFocused();
            } );

            //  when your browser is IE7 ~ IE9, we create a label for textbox as placeholder 
            //  when you click on this label
            //  remove this label then focus in the input
            $root.on( 'click','.eba-placeholder-lable',function( event ){
                $(this).hide();
                me._$formInput.focus();
            } );

            //  如果不允许手工输入文本，返回false，阻止文字输入
            $root.on( 'keydown','.eba-buttonedit-input',function( event ){
                
                var allowed = false;
                switch( event.which ){
                    case ebaui.keycodes.down_arrow:
                        allowed = true;
                        break;
                    case ebaui.keycodes.up_arrow:
                        allowed = true;
                        break;
                    case ebaui.keycodes.enter:
                        allowed = true;
                        break;
                };

                if( !allowed && !me.allowInput() ){
                    event.preventDefault();
                }

            } );

            $root.on( 'keyup','.eba-buttonedit-input',function( event ){

                if( !me.enabled() || me.readonly() ){
                    event.preventDefault();
                }

                var onDownArrow = function( self,event ) {
                    /* 键盘向下按键 */
                    self._listbox.selectNext();
                };

                var onUpArrow = function( self,event ) {
                    /* 键盘向上按键 */
                    self._listbox.selectPrev();
                };

                var onEnter = function( self,event ) {

                    if( !self._panel.visible() ){

                        /* 
                         *  当前下拉菜单处于关闭状态，
                         *  那么这个时候，
                         *  如果有其他得onenter事件，触发onenter事件 
                         */
                        self.options['onenter']( self,event );
                    }else{
                        /*
                         *  按下回车键选中下拉菜单的某一个项的时候，
                         *  下拉菜单的listbox控件也要选中这个项 
                         */
                         var listbox = self._listbox;
                         self.data( listbox.data() );
                         self._panel.close();
                    }

                };

                var defaultHandle = function( self,event ) {

                    var inputVal = self._$formInput.val();
                    self.text( inputVal );
                    /*
                     *  输入正常字符，进行过滤
                     *  如果使用远程数据，则发送AJAX请求去获取数据，然后把得到的数据赋值给this._dataItems变量； 
                     *  如果使用的是本地数据，则对dataSource进行filter操作，然后把结果值赋值给this._dataItems变量；
                     *  清零this._currDataItemIndex
                     *  UI加载并且显示this._dataItems
                     */
                    self._loadPopupData( inputVal,$.noop,function( sender ){

                        self._listbox.dataSource( self.items() );
                        self._panel.open();
                        self._reposition();

                    } );

                };

                switch( event.which ){
                    case ebaui.keycodes.down_arrow:
                        onDownArrow( me,event );
                        break;
                    case ebaui.keycodes.up_arrow:
                        onUpArrow( me,event );
                        break;
                    case ebaui.keycodes.enter:
                        onEnter( me,event );
                        break;
                    default:
                        defaultHandle( me,event );
                        break;
                };

            });

            me._super();

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @method     _initControl
         */
        _initControl : function(){

            //  调用父类的_initControl方法
            var me = this;
            me._super();
            me._$formInput = $( '.eba-buttonedit-input',me._$root );
            me._$root.addClass( 'eba-combobox eba-popupedit' );

            /*
             *  过滤字段,使用remote 数据源的时候，发起请求时input值对应的url参数得KEY
             *  该参数默认等同于textField参数
             */
            var opts = me.options;
            if( opts['filterField'] == '' ){
                opts['filterField'] = opts['textField'];
            }

            //  创建下拉菜单，并且进行初始化，设置数据源等
            me._initPanel();
            me._usingRemoteData = me.isUsingRemoteData( me.options['dataSource'] );
            //  加载数据
            me._loadPopupData( undefined, undefined, function( sender ){

                sender._listbox.dataSource( sender.items() );
                var initVal = sender.options['value'];
                //  如果有设置combobox初始化的值，那么在popup窗口创建完成之后，就应该初始化已经选中的项目
                if( initVal ){
                    //  在下拉菜单的所有数据都加载完成之后，更新一次value属性。因为value属性的真正的值是从下拉菜单的数据集得到的。
                    sender.value( initVal );
                    sender._listbox.data( sender.data() );
                }

            } );

        },

        /**
         *  下拉菜单数据
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.Combo
         *  @member     {Array}  items
         */
        items:function(){ return this._popupDataItems; },   

        /**
         *  获取文本值
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.ComboBox
         *  @member     {Array}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  text == ''
         *      var text = buttonedit.text();
         */
        text : function( val ){

            var me = this;
            if( !me.isString( val ) ){
                return me.options['text'];
            }

            var opts = me.options;
            opts['text'] = val;
            me._$formInput.val( val );

            if( me.isEmpty( opts['text'] ) ){ 
                me._showPlaceHolder();
            }else{ 
                me._hidePlaceHolder(); 
            }

        },

        /**
         *  获取或者设置表单控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     {Object}    value
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( {} );
         */
        value     : function( val ){

            var me = this;
            if( me.isNull( val ) ){
                return me.options['value'];
            }

            if( !me.isArray( val ) ){
                val = [ val ];
            }

            if( val.length == 0 ){
                me.data([]);
                return;
            }

            var data  = [];
            var field = me.valueField();
            var items = me._popupDataItems;

            //  单选的情况
            for (var i = 0; i < items.length; i++) {
                var dataItem = items[i];
                if( dataItem[field] == val[0] ){
                    data = [ dataItem ];
                    break;
                }
            };

            me.data( data );
        },

        _data: null,

        /**
         *  获取或者设置选中的项
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     {Object}        data
         *  @default    null
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( {} );
         */
        data: function( val ){

            var me = this;
            if( me.isNull( val ) ){
                return me._data;
            }

            if( !me.isArray( val ) ){ val = [ val ]; }

            var opts = me.options;
            if( val.length == 0 ){
                //  清空数据
                me._data = null;
            }else{
                //  单选
                me._data = val[0];

                var textField = me.textField();
                var valueField = me.valueField();

                opts['text'] = me._data[textField];
                opts['value'] = me._data[valueField];

                me._$formInput.val( opts['text'] );
                if( opts['text'] ){ me._hidePlaceHolder(); }else{ me._showPlaceHolder(); }
            }

            //  me._updateStyleText();
            opts['onchange']( self,{} );

        },

        /**
         *  控件数据源对象的ID字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     {String}      idField
         *  @default    'id'
         *  @example    <caption>get</caption>
         *      var idField = ctrl.idField();
         *  @example    <caption>set</caption>
         *      ctrl.idField( '' );
         */
        idField : function( val ) {

            var me = this;
            if( me.isNull( val ) ){
                return me.options['idField'];
            }

            me.options['idField'] = val.toString();
            //  同步更新popup的设置
            me._listbox.idField( val );
        },

        /**
         *  控件数据源对象字段中，用于作为控件文本的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     {String}      textField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var textField = ctrl.textField();
         *  @example    <caption>set</caption>
         *      ctrl.textField( '' );
         */
        textField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['textField'];
            }
            me.options['textField'] = val;
            //  同步更新popup的设置
            me._listbox.textField( val );
        },

        /**
         *  控件数据源对象字段中，用于作为控件值的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     {String}      valueField
         *  @default    'value'
         *  @example    <caption>get</caption>
         *      var valueField = ctrl.valueField();
         *  @example    <caption>set</caption>
         *      ctrl.valueField( '' );
         */
        valueField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['valueField'];
            }
            me.options['valueField'] = val;
            //  同步更新popup的设置
            me._listbox.valueField( val );
        },

        /**
         *  控件数据源对象字段中，用于筛选的对象字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     {String}      filterField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var filterField = ctrl.filterField();
         *  @example    <caption>set</caption>
         *      ctrl.filterField( '' );
         */
        filterField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['filterField'];
            }
            me.options['filterField'] = val;
        },

        /**
         *  获取或者设置是否允许手工输入文本
         *  ，原先的文字，如果不在列表内，清除。
         *  @public
         *  @instance
         *  @tutorial   combobox_allowInput
         *  @memberof   ebaui.web.ComboBox
         *  @member     {Boolean}    allowInput
         *  @default    true
         *  @example    <caption>get</caption>
         *      var allowed = ctrl.allowInput();
         *  @example    <caption>set</caption>
         *      ctrl.allowInput( false );
         */
        allowInput:function( val ){

            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['allowInput'];
            }

            me.options['allowInput'] = val;

            //  如果设置allowInput=false，原先的文字，如果不在列表内，就要清除。
            if( !val ){

                me._loadPopupData( '',$.noop,function(){

                    var text = me.text();
                    var exist = false;
                    var field = me.textField();
                    var dataItems = me._popupDataItems;
                    for (var i = 0; i < dataItems.length; i++) {
                        exist = dataItems[i][field] == text;
                        if( exist ){ break; }
                    }

                    if( !exist ){ me.text(''); }

                } );

            }

        },

        /**
         *  下拉菜单选项的数据源，可以是URL地址或者是一个javascript数组对象作为数据源
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Combo
         *  @member     {Object|Array}          dataSource
         *  @property   {String}                dataSource.url          - 服务端URL
         *  @property   {Object|Function}       dataSource.data         - 向服务器发起AJAX请求的时候，要发送给服务器的URL参数
         *  @example    <caption>get</caption>
         *      var src = ctrl.dataSource();
         *  @example    <caption>set</caption>
         *      //  本地数据
         *      ctrl.dataSource( [] );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : {}
         *      } );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : function(){ 
         *              // your logic
         *              return {};
         *          }
         *      } );
         */
        dataSource : function( val ){

            var me = this;
            if( !val ){
                return me.options['dataSource'];
            }

            me._usingRemoteData = me.isUsingRemoteData( me.options['dataSource'] );
            me.options['dataSource'] = val;
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboBox
         *  @member     {Object}    options
         */
        options:{
            // css position property
            position   : 'absolute',
            //  
            text       : '',
            //  
            value      : null,
            //  是否允许手工输入文本
            allowInput : true,
            //  文本占位符
            placeholder: '请选择...',
            //  控件数据源对象的ID字段名
            idField    : 'id',
            //  值字段
            valueField : 'value',
            //  文本字段
            textField  : 'text',
            //  过滤字段,使用remote 数据源的时候，发起请求时input值对应的url参数得KEY
            //  该参数默认等同于textField参数
            filterField: '',
            //  使用本地array数据，作为数据过滤的函数
            filter : function( item,value,filterField ){
                return item[filterField].indexOf( value ) > -1;
            }

        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.ComboList
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'ComboList',true );

    /** 
     *  ebaui.web.ComboList
     *  ，DEMO请查看 {@tutorial combolist_index}
     *  ，使用远程数据源的DEMO请看 {@tutorial combolist_remoteDataSource}
     *  ，手工更改数据源设置的DEMO请看{@tutorial combolist_setDataSource}
     *  @class      ComboList 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.Combo
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      
     *      valueField默认值:value
     *      valueField默认值:text
     *      filterField默认值:text
     *
     *      data-options={ 
     *
     *      }
     *
     *      &lt;input id="" name="" value="aa" placeholder="" readonly="" data-role="combolist" data-options="{ }" /&gt;
     */
    ebaui.control( 'web.ComboList',ebaui.web.Combo, {

        /**
         *  下拉菜单包含的控件对象，Combobox中就是一个ListBox
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @member     _listbox
         */
        _listbox : null,

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:function() {

            var me     = this;
            var $root  = me._$root;
            var $input = me._$formInput;

            if( me.enabled() ){
                $root.removeClass( me._cssClass['disabled'] );
            }else{
                $root.removeClass( me._cssClass['focused'] );
                $root.addClass( me._cssClass['disabled'] );
            }

            //  input 始终禁用
            $input.attr('disabled','disabled');

        },

        /**
         *  更新已经选中的文本列表
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @method     _updateText
         */
        _updateText:function( textArray ){

            var str = '';
            var me = this;
            if( me.isEmpty(textArray) ){
                me._$formInput.val( '' );
                me._showPlaceHolder();
                return;
            }

            for (var i = 0,l=textArray.length; i < l; i++) {
                var item = textArray[i];
                str += item;
                if( i < l -1 ){
                    str += ';';
                }
            }

            me._$formInput.val( str );
            if( me.isEmpty(str) ){
                me._showPlaceHolder();
            }else{
                me._hidePlaceHolder();
            }

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            //  初始化加载下拉菜单数据
            //  下拉菜单的数据应该是由combobox过滤以及筛选，然后赋值给下拉菜单控件
            //  我觉得，下载菜单的数据应该是在点击下来菜单的时候去加载数据
            var me   = this;
            var $root  = me._$root;

            $root.on( 'focus','.eba-buttonedit-input',function( event ){
                me._setOption( 'focused',true );
                me._updateStyleFocused();
            } );

            $root.on( 'blur','.eba-buttonedit-input',function( event ){
                me._setOption( 'focused',false );
                me._updateStyleFocused();
            } );

            //  when your browser is IE7 ~ IE9, we create a label for textbox as placeholder 
            //  when you click on this label
            //  remove this label then focus in the input
            $root.on( 'click','.eba-placeholder-lable',function( event ){
                $(this).hide();
                me._$formInput.focus();
            } );

            me._super();

        },

        /**
         *  初始化内部控件MiniGrid的配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @method     _initMiniGrid
         */
        _initMiniGrid:function(){

            var me = this;
            //  format for iniVal is 'aa,bb,cc'
            var initVal    = me.options['value'];
            var textField  = me.textField();
            var valueField = me.valueField();

            var onSelectRowHandle = function( sender ){
                var selectedItems = sender.selectedItems();
                me.data( selectedItems,true );
            };

            var onSelectAllHandle = function( sender ){
                var selectedItems = sender.selectedItems();
                me.data( selectedItems,true );
            };

            var loadCompleteHandle = function( sender ){

                if( initVal ){

                    var gridData = sender.items();
                    var selectedVal = initVal.toString().split( ',' );

                    $.each( selectedVal,function( i,val ){

                        $.each( gridData,function( idx,item ){

                            if( item[valueField] == val ){
                                sender.setSelection( idx );
                            }

                        } );

                    } );

                }

            };

            var gridOpts = me.options['grid'];

            //  init grid options
            gridOpts['onSelectRow']  = onSelectRowHandle;
            gridOpts['onSelectAll']  = onSelectAllHandle;
            gridOpts['loadComplete'] = loadCompleteHandle;

            $.each(gridOpts['colModel'], function(index, model) {
                 if( !model['width'] ){
                    model['width'] = 150;
                 }
            });

            if( me.isEmpty( gridOpts['width'] ) ){
                gridOpts['width'] = 400;
            }

            if( me.isEmpty( gridOpts['height'] ) ){
                gridOpts['height'] = 120;
            }

        },

        /**
         *  创建下拉菜单
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @method     _initPanel
         */
        _initPanel : function(){
            var me     = this;
            var ctrlId = me.id();
            var $root  = me._$root;

            var $popup = $( '<div data-options="{ visible:false }" style="display:none;"><input /></div>' ).appendTo( document.body );
            //  18是表单控件外围status的icon宽度
            $popup.panel({
                id      : 'panel-' + ctrlId,
                position: 'absolute',
                width   : me.width() - 22,
                height  : me.height()
            });

            $( 'input',$popup ).minigrid( me.options['grid'] );

            me._panel   = ebaui.get( $popup );
            me._listbox = ebaui.get( $( '[data-role="minigrid"]',$popup ) );
        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @method     _initControl
         */
        _initControl : function(){
            var me = this;
            //  调用父类的_initControl方法
            me._super();
            me._$root.addClass( 'eba-combobox eba-popupedit' ).attr( 'data-role','combolist' );
            //  init minigrid config
            me._initMiniGrid();
            //  创建下拉菜单，并且进行初始化，设置数据源等
            me._initPanel();
        },

        /**
         *  下拉菜单选项的数据源，可以是远程数据源URL配置对象或者是一个javascript数组对象作为数据源
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TextBoxList
         *  @member     {Object|Array}          dataSource
         *  @property   {String}                dataSource.url          - 服务端URL
         *  @property   {Object|Function}       dataSource.data         - 向服务器发起AJAX请求的时候，要发送给服务器的URL参数
         *  @tutorial   texboxlist_local
         *  @tutorial   texboxlist_remote
         *  @example    <caption>get</caption>
         *      var src = ctrl.dataSource();
         *  @example    <caption>set</caption>
         *      //  本地数据
         *      ctrl.dataSource( [] );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : {}
         *      } );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : function(){ 
         *              // your logic
         *              return {};
         *          }
         *      } );
         */
        dataSource : function( val ){

            var me = this;
            if( !val ){ return me.options['grid']; }

            //  infact me.options['grid'] equals me._listbox.options
            var gridConf = me._listbox.options;
            if( me.isArray( val ) ){
                gridConf['data'] = val;
                gridConf['url'] = '';
            }else{
                gridConf['data'] = undefined;
                gridConf['url'] = val['url'];
                if( val['postData'] ){
                    gridConf['postData'] = val['postData'];
                }
            }

            //  reload grid data
            me._listbox.reloadGrid();

        },

        /**
         *  获取文本值
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.ComboList
         *  @member     {Array}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      //  text == ['','']
         *      var text = ctrl.text();
         */
        text : function( val ){
            return this.options['text'];
        },
        
        /**
         *  获取或者设置表单控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @member     {Object}    value
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( [] );
         */
        value     : function( val ){

            var me = this;
            if( !val ){
                return me.options['value'];
            }

            if( !me.isArray( val ) ){
                val = [ val ];
            }

            if( val.length == 0 ){
                //  reset all data
                me._data = [];
                me.options['text'] = [];
                me.options['value'] = [];
                //  reset mini grid election
                me._listbox.resetSelection();
                //  reset text display
                me._updateText( [] );
                return;
            }

            var gridRowIds = [];
            var valueArray = [];
            var textArray  = [];
            var textField  = me.textField();
            var valueField = me.valueField();
            var gridData   = me._listbox.items();

            $.each(val, function(j, valueItem) {

                $.each(gridData, function(rowId, dataItem) {

                    /* iterate through array or object */
                    if( dataItem[valueField] == valueItem ){
                        /* by this way ,I can get values that real exist */
                        valueArray.push( dataItem[valueField] );
                        textArray.push( dataItem[textField] );

                        gridRowIds.push( rowId );
                    }

                });

            });

            //  update text property
            me.options['text'] = textArray;
            //  update control value 
            me.options['value'] = valueArray;
            //  update minigrid selection
            me._listbox.resetSelection();
            for (var i = 0; i < gridRowIds.length; i++) {
                me._listbox.setSelection( gridRowIds[i] );
            };
            //  update text display
            me._updateText( textArray );
            //  trigger onchange event
            me.options['onchange']( self,{} );
        },

        _data: null,

        /**
         *  获取或者设置选中的项
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @member     {Object}        data
         *  @default    null
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( [{ name : value },{ name : value }] );
         */
        data: function( val,doNotUpdateGrid ){

            var me = this;
            if( !val ){
                return me._data;
            }

            if( !me.isArray( val ) ){
                val = [ val ];
            }

            if( val.length == 0 ){
                //  清空数据
                me._data = [];
                me.options['text'] = [];
                me.options['value'] = [];
                //  reset mini grid election
                me._listbox.resetSelection();
                //  
                me._updateText( [] );
                return ;
            }

            //  单选
            self._data = [];
            var gridRowIds = [];
            var textArray  = [];
            var valueArray = [];
            var textField  = me.textField();
            var valueField = me.valueField();
            var gridData = me._listbox.items();

            $.each(gridData, function(rowId, dataItem) {
                 
                $.each(val, function(j, valueItem) {

                    if( dataItem[valueField] == valueItem[valueField] ){

                        textArray.push( dataItem[textField] );
                        valueArray.push( dataItem[valueField] );

                        var item = {};
                        item[textField] = dataItem[textField];
                        item[valueField] = valueItem[valueField];
                        self._data.push( item );

                        gridRowIds.push( rowId );

                    }

                });

            });
            var opts = me.options;
            //  update control's text and value
            opts['text'] = textArray;
            opts['value'] = valueArray;
            //  update minigrid selection
            if( !doNotUpdateGrid ){
                me._listbox.resetSelection();
                for (var i = 0; i < gridRowIds.length; i++) {
                    me._listbox.setSelection( gridRowIds[i] );
                };
            }
            //  update control's display
            me._updateText( textArray );
            //  trigger onchange event
            opts['onchange']( self,{} );

        },

        /**
         *  控件数据源对象的ID字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @member     {String}      idField
         *  @default    'id'
         *  @example    <caption>get</caption>
         *      var idField = ctrl.idField();
         *  @example    <caption>set</caption>
         *      ctrl.idField( '' );
         */
        idField : function( val ) {
            var me = this;
            if( me.isEmpty(val) ){
                return me.options['idField'];
            }

            me.options['idField'] = val.toString();
            //  同步更新popup的设置
            me._listbox.idField( val );
        },

        /**
         *  控件数据源对象字段中，用于作为控件文本的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @member     {String}      textField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var textField = ctrl.textField();
         *  @example    <caption>set</caption>
         *      ctrl.textField( '' );
         */
        textField : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['textField'];
            }
            me.options['textField'] = val;
            //  同步更新popup的设置
            me._listbox.textField( val );

        },

        /**
         *  控件数据源对象字段中，用于作为控件值的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @member     {String}      valueField
         *  @default    'value'
         *  @example    <caption>get</caption>
         *      var valueField = ctrl.valueField();
         *  @example    <caption>set</caption>
         *      ctrl.valueField( '' );
         */
        valueField : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['valueField'];
            }
            me.options['valueField'] = val;
            //  同步更新popup的设置
            me._listbox.valueField( val );

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ComboList
         *  @member     {Object}    options
         */
        options:{
            // css position property
            position   : 'absolute',
            //  
            text : [],
            //  
            value : [],
            //  文本占位符
            placeholder: '请选择...',
            //  数据源的ID属性字段
            idField    : 'id',
            //  值字段
            textField  : 'text',
            //  值字段
            valueField : 'value',
            //  内嵌的grid的配置
            grid : {
                //  
                autowidth : true,
                //  default width
                width : 400,
                //  default height
                height : 120,
                //  
                url         : '',
                //  local data array
                data        : [],
                //  xml 
                //  xmlstring 
                //  json 
                //  jsonstring 
                //  local 
                //  javascript 
                //  function 
                //  clientSide
                datatype    : "local",
                //  使用远程数据的时候，随着url一起提交到服务器的数据
                postData    : [{}],
                //  控件数据源对象的ID字段名
                colModel    : [ 
                    {name       :'id', label : 'ID', width : 150},
                    {name       :'text', label : 'Text', width : 150} 
                ],
                //  是否允许多选
                multiselect : true,
                //  
                onSelectRow : $.noop,
                //  
                onSelectAll : $.noop,
                //
                loadComplete: $.noop
            },

            /**
             *  控件的值发生改变的时候触发
             *  @event      ebaui.web.ComboList#onchange
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop

        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Calendar，依赖moment.js库
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'Calendar',false );

    /**
     *  控件全名 e.g. ebaui.web.Calendar
     *  控件描述
     *  @class      Calendar 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   calendar_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      &lt;input data-role="calendar" data-options="{}"/&gt;
     */
    ebaui.control( 'web.Calendar',ebaui.web.FormElement, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-calendar',

        /**
         *  已经编译好的日历Week文本HTML模板
         *  ，'日', '一', '二', '三', '四', '五', '六'
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _compiledHeaderTextTmpl
         */
        _compiledHeaderTextTmpl : $.noop,

        /**
         *  已经编译好的日历Week的HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _compiledCalendarWeekTmpl
         */
        _compiledCalendarWeekTmpl : $.noop,

        /**
         *  已经编译好的日历菜单的HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _compiledCalendarMenuTmpl
         */
        _compiledCalendarMenuTmpl : $.noop,

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Object}    _cssClass
         */
        _cssClass : {
            disabled: 'eba-calendar-disabled',
            selected: 'eba-calendar-selected'
        },

        /**
         *  当前显示的年份
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {String}    _currYear
         */
        _currYear : new Date().getFullYear(),

        /**
         *  当前显示的月份
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Number}    _currMonth
         */
        _currMonth : new Date().getMonth(),

        /**
         *  当前标题的格式，比如是xxxx年xx月或者是Sep 2013之类的
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {String}    _titleDisplayFormat
         */
        _titleDisplayFormat : 'MMM YYYY',

        /**
         *  通过代码设置calendar.value属性的时候，如果传入错误的日期，抛出的异常提示信息
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {String}    _formatInvalidException
         */
        _formatInvalidException : 'The date is invalid, please input a valid date!',

        /**
         *  日期文本
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Array}    _weeks
         */
        _weeks:['S','M','T','W','T','F','S'],

        /**
         *  月份文本
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Array}    _months
         */
        _months:['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],

        /**
         *  更新控件enabled的UI样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:function(){

            var me = this;
            var $root = me._$root;
            var cls = me._cssClass;
            if( me.enabled() ){
                $root.removeClass( cls['disabled'] );
            }else{
                $root.addClass( cls['disabled'] );
            }

        },

        /**
         *  显示或者隐藏  年份月份选择  界面
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _toggleMenu
         */
        _toggleMenu:function(){

            var $root        = this._$root;
            var toggleKey    = '__toggled__';
            var viewSelector = '.eba-calendar-view';
            var menuSelector = '[data-role="menu"]';
            
            if( !$root.data( toggleKey ) ){
                $( viewSelector,$root ).hide();
                $( menuSelector,$root ).show();
                $root.data( toggleKey,true );
            }else{
                $( viewSelector,$root ).show();
                $( menuSelector,$root ).hide();
                $root.data( toggleKey,false );
            }

        },

        /**
         *  初始化  主视图  标题  相关事件，比如'>' '>>'等符号的点击事件
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _setupTitleEvents
         */
        _setupTitleEvents:function(){

            var self   = this;
            var $root  = self._$root;

            $root.on( 'click','.eba-calendar-title',function( event ){

                 if( self.enabled() ){
                    /*
                     *  2013年08月
                     *  当前选中的  年月  点击事件触发
                     *  切换到选择年份，月份的视图界面
                     */
                    self._toggleMenu();
                 }

            } );

            $root.on( 'click','.eba-calendar-monthNext',function( event ){

                if( self.enabled() ){
                    /*  主视图 下月份  按钮点击事件触发 */
                    ++self._currMonth;
                    self._renderTitle( self._currYear,self._currMonth );
                    self._renderWeeks( self.value(),self._currYear,self._currMonth );
                }

            } );

            $root.on( 'click','.eba-calendar-monthPrev',function( event ){

                if( self.enabled() ){
                    /* 主视图 上月份  按钮点击事件触发 */
                    --self._currMonth;
                    self._renderTitle( self._currYear,self._currMonth );
                    self._renderWeeks( self.value(),self._currYear,self._currMonth );
                }

            } );

            $root.on( 'click','.eba-calendar-yearNext',function( event ){

                if( self.enabled() ){
                    /* 
                     *  主视图 下一年  按钮点击事件触发
                     *  主视图 下月份  按钮点击事件触发 
                     */
                    ++self._currYear;
                    self._renderTitle( self._currYear,self._currMonth );
                    self._renderWeeks( self.value(),self._currYear,self._currMonth );
                }

            } );

            $root.on( 'click','.eba-calendar-yearPrev',function( event ){

                if( self.enabled() ){
                    /* 
                     *  主视图 上一年  按钮点击事件触发
                     *  主视图 下月份  按钮点击事件触发
                     */
                    --self._currYear;
                    self._renderTitle( self._currYear,self._currMonth );
                    self._renderWeeks( self.value(),self._currYear,self._currMonth );
                }

            } );

        },

        /**
         *  初始化  主视图  日期  相关事件，比如 日期的点击事件
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _setupTitleEvents
         */
        _setupWeeksEvents:function(){

            var me    = this;
            var $root = me._$root;
            $root.on( 'click','.eba-calendar-date',function( event ){

                //  日历控件上的日期点击事件触发
                if( me.enabled() ){

                    var $this = $( this ),
                        m = new moment( $this.attr( 'data-value' ),'YYYY-M-D' ),
                        inCurrentMonth = !$this.hasClass('eba-calendar-othermonth');

                    if( inCurrentMonth ){

                        var selected = m.toDate();
                        var date = me.value();
                        date.setFullYear( selected.getFullYear() );
                        date.setMonth( selected.getMonth() );
                        date.setDate( selected.getDate() );

                        var domSelector = '.' + me._cssClass['selected'];
                        $( domSelector,$root ).removeClass( me._cssClass['selected'] );
                        $this.addClass( me._cssClass['selected'] );

                        //  触发value的onchange事件
                        me.options['onchange']( me,event );
                        //  触发onclick事件
                        me.options['onclick']( me,event );
                    }

                }

            } );

        },

        /**
         *  初始化  年份月份选择  界面  相关事件
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _setupTitleEvents
         */
        _setupMenuEvents:function(){

            var me   = this;
            var $root  = this._$root;

            $root.on( 'click','.eba-calendar-menu-prevYear',function( event ){

                if( me.enabled() ){
                    var $year = $( '.eba-calendar-menu-year',$root ).first();
                    var initYear = parseInt( $year.attr( 'data-value' ) ) - 10;
                    var menuYears = me._getMenuYears( initYear );
                    
                    me._renderMenu( menuYears,me._currYear,me._currMonth );
                }

            } );

            $root.on( 'click','.eba-calendar-menu-nextYear',function( event ){

                if( me.enabled() ){

                    var $year = $( '.eba-calendar-menu-year',$root ).last();
                    var initYear = parseInt( $year.attr( 'data-value' ) ) + 1;
                    var menuYears = me._getMenuYears( initYear );

                    me._renderMenu( menuYears,me._currYear,me._currMonth );
                }

            } );

            $root.on( 'click','.eba-calendar-menu-month',function( event ){

                if( me.enabled() ){
                    //  menu界面的月份点击的时候触发
                    $( '.eba-calendar-menu-month',$root ).filter( '.eba-calendar-menu-selected' ).removeClass('eba-calendar-menu-selected');
                    $( this ).addClass('eba-calendar-menu-selected');
                }

            } );

            $root.on( 'click','.eba-calendar-menu-year',function( event ){

                if( me.enabled() ){
                    //  menu界面的月份点击的时候触发
                    $( '.eba-calendar-menu-year',$root ).filter( '.eba-calendar-menu-selected' ).removeClass('eba-calendar-menu-selected');
                    $( this ).addClass('eba-calendar-menu-selected');
                }

            } );

            $root.on( 'click','.eba-calendar-okButton',function( event ){

                if( me.enabled() ){
                    //  menu界面的月份点击的时候触发
                    var $selectedMonth = $( '.eba-calendar-menu-month',$root ).filter( '.eba-calendar-menu-selected' );
                    me._currMonth = parseInt( $selectedMonth.attr( 'data-value' ) );

                    var $selectedYear = $( '.eba-calendar-menu-year',$root ).filter( '.eba-calendar-menu-selected' );
                    me._currYear = parseInt( $selectedYear.attr( 'data-value' ) );

                    var date = me.value();
                    date.setFullYear( me._currYear );
                    date.setMonth( me._currMonth );

                    me._renderTitle( me._currYear,me._currMonth );
                    me._renderWeeks( date,me._currYear,me._currMonth );
                    me._toggleMenu();

                }

            } );

            $root.on( 'click','.eba-calendar-cancelButton',function( event ){
                
                if( me.enabled() ){
                    me._toggleMenu();
                    var menuYears = me._getMenuYears( me._currYear );
                    me._renderMenu( menuYears,me._currYear,me._currMonth );
                }

            } );

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _setupEvents
         */
        _setupEvents : function(){
            var me = this;
            me._setupTitleEvents();
            me._setupWeeksEvents();
            me._setupMenuEvents();
        },

        /**
         *  初始化控件，声明内部变量
         *  ，在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            //  调用父类的方法
            me._super();

            //  预编译以后要用到的HTML模板
            var weekTmpl = $.trim( $( '#ebaui-template-calendar-week' ).html() );
            me._compiledCalendarWeekTmpl = me.compileTmpl( weekTmpl );

            var headerTextTmpl = $.trim( $( '#ebaui-template-calendar-weeksheader' ).html() );
            me._compiledHeaderTextTmpl = me.compileTmpl( headerTextTmpl );

            var menuTmpl = $.trim( $( '#ebaui-template-calendar-menu' ).html() );
            me._compiledCalendarMenuTmpl = me.compileTmpl( menuTmpl );

            //  设置初始化的值
            var initVal = me.options['value'];
            var m = new moment( initVal );
            if( !m.isValid() ){
                initVal = new Date;
            }else{
                initVal = m.toDate();
            }

            me._currYear = initVal.getFullYear();
            me._currMonth = initVal.getMonth();

            me.value( initVal );

        },

        /**
         *  获取当前年份，以及之后十年的年份
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Calendar
         *  @method         _getMenuYears
         *  @param          {Number}    year
         *  @returns        {Array}     [year]
         */
        _getMenuYears:function( year ){
            year = parseInt( year );
            var max = year + 10;
            var range = [];
            for (var i = year; i < max; i++) {
                range.push( i );
            };
            return range;
        },

        /**
         *  get weeks data
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Calendar
         *  @method         _getWeeks
         *  @param          {Number}    year
         *  @param          {Number}    month   0 ~ 11
         *  @returns        {Array}     [year,month,date]
         */
        _getWeeks:function( year, month ){

            var dates = [];
            var lastDay = new Date(year, month + 1, 0).getDate();
            for(var i=1; i<=lastDay; i++) {
                dates.push([year,month,i]);
            }

            //  分组group date by week
            var weeks = [], week = [];
            while(dates.length > 0){
                var date = dates.shift();
                week.push(date);
                //  getDay() 方法可返回表示星期的某一天的数字。，返回值是 0（周日） 到 6（周六） 之间的一个整数。
                //  判断是否是星期天
                if (new Date(date[0],date[1],date[2]).getDay() == 6){
                    weeks.push(week);
                    week = [];
                }
            }

            if (week.length){
                weeks.push(week);
            }
            
            var firstWeek = weeks[0];
            if (firstWeek.length < 7){

                while(firstWeek.length < 7){
                    var firstDate = firstWeek[0];
                    var date = new Date(firstDate[0],firstDate[1],firstDate[2]-1)
                    firstWeek.unshift([date.getFullYear(), date.getMonth(), date.getDate()]);
                }

            } else {

                var firstDate = firstWeek[0];
                var week = [];
                for(var i=1; i<=7; i++){
                    var date = new Date(firstDate[0], firstDate[1], firstDate[2]-i);
                    week.unshift([date.getFullYear(), date.getMonth(), date.getDate()]);
                }
                weeks.unshift(week);

            }
            
            var lastWeek = weeks[weeks.length-1];
            while(lastWeek.length < 7){
                var lastDate = lastWeek[lastWeek.length-1];
                var date = new Date(lastDate[0], lastDate[1], lastDate[2]+1);
                lastWeek.push([date.getFullYear(), date.getMonth(), date.getDate()]);
            }

            if (weeks.length < 6){
                var lastDate = lastWeek[lastWeek.length-1];
                var week = [];
                for(var i=1; i<=7; i++){
                    var date = new Date(lastDate[0], lastDate[1], lastDate[2]+i);
                    week.push([date.getFullYear(), date.getMonth(), date.getDate()]);
                }

                weeks.push(week);
            }
            
            return weeks;

        },

        /**
         *  输出calendar标题部分，比如2013年09月
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Calendar
         *  @method         _renderTitle
         *  @param          {Number}    year
         *  @param          {Number}    month   0 ~ 11
         */
        _renderTitle : function( year,month ){

            var me = this;
            var date = new Date( year,month,1 );
            var m = new moment( date );
            var title = m.format( me._titleDisplayFormat );
            $( '.eba-calendar-title',me._$root ).text( title );

        },

        /**
         *  输出calendar日期的表头
         *  ，['日', '一', '二', '三', '四', '五', '六']
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Calendar
         *  @method         _renderWeeksHeader
         */
        _renderWeeksHeader : function(){

            var me = this;
            var html = me._compiledHeaderTextTmpl( {
                text : me._weeks
            } );

            $( '[data-role="weeksHeader"]',me._$root ).html( html );

        },

        /**
         *  输出calendar的日期
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Calendar
         *  @method         _renderWeeks
         *  @param          {Date}      date，当前选中日期
         *  @param          {Number}    year，当前年份
         *  @param          {Number}    month，当前月份
         */
        _renderWeeks : function( date,year,month ){

            var me = this;
            var $root = me._$root;
            var weeks = me._getWeeks( year,month );
            var output = me._compiledCalendarWeekTmpl({

                year : year,
                month: month,
                value: [ date.getFullYear(),date.getMonth(),date.getDate() ],
                weeks: weeks

            });

            $( '.eba-calendar-days',$root ).remove();
            $( '[data-role="footer"]',$root ).before( output );

        },

        /**
         *  输出calendar的菜单
         *  ，包含月份，年份可以选择
         *  ，['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Calendar
         *  @method         _renderMenu
         *  @param          {Array}     menuYears，当前选中年份往后推算10年的年份范围
         *  @param          {Number}    year，当前年份
         *  @param          {Number}    month，当前月份
         */
        _renderMenu : function( menuYears,year,month ){

            //  输出HTML
            var $root = this._$root;
            var today = [ year,month,1 ];

            if( !menuYears ){
                menuYears = this._getMenuYears( year );
            }

            var output = this._compiledCalendarMenuTmpl({
                value : today,
                years : menuYears,
                months: this._months
            });

            $( '[data-role="menu"]',$root ).html( output );

        },

        /**
         *  输出UI
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _render
         */
        _render : function(){

            var me = this;
            //  调用父类的方法
            me._super();
            me._renderWeeksHeader();

             //  输出HTML
            var selected  = me.value(),
                menuYears = me._getMenuYears( me._currYear );

            //  内容可变
            me._renderTitle( me._currYear,me._currMonth );
            me._renderWeeks( selected,me._currYear,me._currMonth );
            me._renderMenu( menuYears,me._currYear,me._currMonth );

        },

        /**
         *  访问和设置calendar的值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     _accessValue
         *  @example    <caption>get</caption>
         *      var pair = ctrl._accessValue();
         *  @example    <caption>set</caption>
         *      ctrl._accessValue( new Date );
         */
        _accessValue : function( val ){

            var me = this;
            if( !val ){
                return me.options['value'];
            }

            var m = new moment( val );
            if( m.isValid() ){

                var selected  = m.toDate();
                me.options['value'] = selected;

                //  update some internal variables
                me._currYear = selected.getFullYear();
                me._currMonth = selected.getMonth();

                //  update ui
                var menuYears = me._getMenuYears( me._currYear );
                me._renderTitle( me._currYear,me._currMonth );
                me._renderWeeks( selected,me._currYear,me._currMonth );
                me._renderMenu( menuYears,me._currYear,me._currMonth );

                //  trigger 'onchange' event
                me.options['onchange']( me,event );
            }else{
                throw me._formatInvalidException;
            }

        },

        /**
         *  访问和设置calendar的值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Date}        data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( new Date );
         */
        data: function( val ){ return this._accessValue( val ); },

        /**
         *  访问和设置calendar的值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Date}     value
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( new Date );
         */
        value : function( val ){ return this._accessValue( val ); },

        /**
         *  重置控件，清空验证状态，控件值，恢复到控件原始状态
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @method     reset
         */
        reset     : function(){
            var me              = this;
            me.errors           = {};
            me.options['value'] = new Date;
            me._isValid         = true;
            me._render();
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  default width
            width : 220,
            //  default height
            height : 169,
            //  日历控件的值
            value : new Date,
            /**
             *  点击日历控件上的日期时触发
             *  @event  ebaui.web.Calendar#onclick
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onclick : $.noop,
            /**
             *  控件的值发生改变的时候触发
             *  @event      ebaui.web.Calendar#onchange
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop
        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Calendar，依赖[Moment.js](http://momentjs.com/)库
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'TimeSpinner',true );

    /**
     *  控件全名 e.g. ebaui.web.TimeSpinner
     *  控件描述
     *  @class      TimeSpinner 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   timespinner_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example    
     *      &lt;input data-role="timespinner" id="" name="" value="" data-options="{}"/&gt;
     */
    ebaui.control( 'web.TimeSpinner',ebaui.web.FormElement, {

        /**
         *  当期获得焦点的INPUT控件index
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Number}    _currInput
         */
        _currInput : 0,

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-timespinner',

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Object}    _cssClass
         */
        _cssClass : {
            disabled: 'eba-disabled',
            focused : 'eba-buttonedit-focus',
            readonly: 'eba-readonly'
        },

        /**
         *  各个不同时间单位的最大值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Object}    _max
         */
        _max : {
            'hour'  : 23,
            'minute': 59,
            'second': 59
        },

        /**
         *  各个不同时间单位的最小值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Object}    _min
         */
        _min : {
            'hour'  : 0,
            'minute': 0,
            'second': 0
        },

        /**
         *  获取焦点
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _focus
         */
        _focus : function(){
            var me = this;
            $( 'input',me._$root ).eq( me._currInput ).focus();
        },

        /**
         *  失去焦点
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _blur
         */
        _blur : function(){
            var me = this;
            $( 'input',me._$root ).eq( me._currInput ).blur();
        },

        /**
         *  更新UI的宽度
         *  @private
         *  @instance
         *  @tutorial   timespinner_width
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _updateStyleWidth
         */
        _updateStyleWidth : function(){
            var me = this;
            me._$root.width( me.width() );
            me._updateUiInput();
        },

        /**
         *  设置或者移除据聚焦样式或者失焦样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _updateStyleFocused
         */
        _updateStyleFocused:function() {

            var me    = this;
            var $root = me._$root;
            var cls   = me._cssClass;
            if( me.focused() ){
                $root.addClass( cls['focused'] );
            }else{
                $root.removeClass( cls['focused'] );
            }

        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:function() {

            var me    = this;
            var $root = me._$root;
            var cls   = me._cssClass;
            if( me.enabled() ){
                $( 'input',$root ).attr('disabled',null);
                $root.removeClass( cls['disabled'] );
            }else{
                $( 'input',$root ).attr('disabled','disabled');
                $root.removeClass( cls['focused'] )
                     .addClass( cls['disabled'] );
            }

        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _updateStyleEnabled
         */
        _updateStyleReadonly:function() {

            var me    = this;
            var $root = me._$root;
            var cls   = me._cssClass;
            if( me.readonly() ){
                $root.addClass( cls['readonly'] );
                $( '.eba-buttonedit-buttons',$root ).hide();
                $( 'input',$root ).attr('readonly','readonly');
            }else{
                $root.removeClass( cls['readonly'] );
                $( 'input',$root ).attr('readonly',null);
                $( '.eba-buttonedit-buttons',$root ).show();
            }

        },

        /**
         *  更新在不同的timeFormat格式下，UI界面显示要有所不同
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _updateStyleEnabled
         */
        _updateUiInput:function(){

            var me         = this;
            var $root      = me._$root;
            var format     = me.timeFormat();
            var vv         = format.split( ':' );
            var totalWidth = $root.width() - $( '.eba-buttonedit-button',$root ).width();
            var width      = totalWidth;

            var hourSelector = '[data-pos="hour"]';
            var minuSelector = '[data-pos="minute"]';
            var secoSelector = '[data-pos="second"]';
            //  calculate width
            switch( vv.length ){
                case 1 : 
                    $( hourSelector,$root ).width( width );
                    $( minuSelector,$root ).parent().hide();
                    $( secoSelector,$root ).parent().hide();
                    break;
                case 2 : 
                    width = totalWidth * 0.4;
                    $( hourSelector,$root ).width( width );
                    $( minuSelector,$root ).width( width );
                    $( secoSelector,$root ).parent().hide();
                    break;
                case 3 : 
                    width = totalWidth * 0.3;
                    $( hourSelector,$root ).width( width );
                    $( minuSelector,$root ).width( width );
                    $( secoSelector,$root ).width( width );
                    break;
            }

        },

        /**
         *  更新UI显示
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _render
         */
        _render : function(){

            var me    = this;
            var value = me.value();
            if( value ){
                var vv = value.split( ':' );
                var $inputs = $( 'input',me._$root );
                for (var i = 0,l = $inputs.size(); i < l; i++) {
                    $inputs.eq( i ).val( vv[i] );
                };
            }

            me._super();
        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self    = this,
                $root   = self._$root,
                $input  = self._$formInput;

            var max = self._max;
            var min = self._min;

            var updateTime = function( increase,event ){

                var $focusedInput = $( 'input',$root ).eq( self._currInput ),
                    pos = $focusedInput.attr( 'data-pos' ),
                    step = self[pos + 'Step'](),
                    value = parseInt( $focusedInput.val() );

                var circular = self.circular();

                if( increase && !circular ){
                    value = ( value + step <  max[pos] ) ? ( value  + step ) : max[pos];
                }else if( !increase && !circular ){
                    value = ( value - step >  min[pos] ) ? ( value - step ) : min[pos];
                }

                //  递增或者递减支持循环
                if( increase && circular ){
                    value = ( value + step <  max[pos] ) ? ( value  + step ) : ( value + step - max[pos] );
                }else if( !increase && circular ){
                    value = ( value - step >  min[pos] ) ? ( value - step ) : ( max[pos] - Math.abs( value - step - min[pos] ) );
                }

                $focusedInput.val( value );
                self.options['onchange']( self,event );

            };

            $root.on( 'keydown','input',function( event ){

                var keycodeValid = event.which == ebaui.keycodes.down_arrow
                                || event.which == ebaui.keycodes.up_arrow
                                || event.which == ebaui.keycodes.enter
                                || event.which == ebaui.keycodes.backspace
                                || event.which == ebaui.keycodes.tab
                                || ebaui.keycodes.isNumber( event.which );

                return keycodeValid;

            } );

            $root.on( 'keyup','input',function( event ){

                var $target = $( this );
                var $inputs = $( 'input',this._$root );
                var isEnter = event.which == ebaui.keycodes.enter;
                var index   = $inputs.index( $target );
                var len     = self.timeFormat().split(':').length;
                var canGoToNext = len > 1 && ( index < len -1 );

                if( isEnter && canGoToNext ){

                    $inputs.eq( index + 1 ).focus();

                }else if( !isEnter && canGoToNext ){

                    //  如果这个input已经填满两位数，那么直接跳转到下一个input
                    var inputVal = $target.val().toString();
                    if( inputVal.length  == 2 ){
                        $inputs.eq( index + 1 ).focus();
                    }else if( inputVal.length > 2 ){
                        inputVal = inputVal.substr( 0,2 );
                        $target.val( inputVal );
                        $inputs.eq( index + 1 ).focus();
                    }

                }else{

                    //  当前已经是最后一个input的时候，如果输入超过两位数，那么直接截断
                    var inputVal = $target.val().toString();
                    if( inputVal.length > 2 ){
                        inputVal = inputVal.substr( 0,2 );
                        $target.val( inputVal );
                    }

                }

            } );

            $root.on( 'focus','input',function( event ){

                var idx = parseInt( $( this ).data( 'idx' ) );
                self._currInput = idx;
                self._setOption( 'focused',true );
                self._updateStyleFocused();
            } );

            $root.on( 'blur','input',function( event ){
                self._setOption( 'focused',false );
                self._updateStyleFocused();
            } );

            $root.on( 'click','.eba-buttonedit-up',function( event ){
                updateTime( true,event );
                self.options['onspinup']( self,event );
            } );

            $root.on( 'click','.eba-buttonedit-down',function( event ){
                updateTime( false,event );
                self.options['onspindown']( self,event );
            } );

        },

        /**
         *  使用moment.js库，对时间进行格式化
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _padding
         *  @param      {String}    time
         *  @param      {String}    time
         */
        _padding : function ( time,format ) {

            var now = new Date;
            format  =  format ? format : 'HH:mm:ss';

            if( time ){

                time        = time.toString();
                var vv      = time.split( ':' );
                var hours   = parseInt( vv[0] ? vv[0] : 0 );
                var minutes = parseInt( vv[1] ? vv[1] : 0 );
                var seconds = parseInt( vv[2] ? vv[2] : 0 );

                now.setHours( vv[0] );
                now.setMinutes( vv[1] );
                now.setSeconds( vv[2] );

            }else{
                time = now;
            }

            var formatter = new moment( time,format );
            if( formatter.isValid() ){
                return formatter.format( format );
            }
            
            formatter = new moment();
            return formatter.format( format );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _initControl
         */
        _initControl : function(){
            var me = this;
            me._$border    = $('.eba-buttonedit-border',me._$root);
            /* validators */
            me._initValidators();
            /* init value */
            var formatedVal = me._padding( me.value(),me.timeFormat() );
            me.options['value'] = formatedVal;
        },

        /**
         *  控件是否可以获取焦点
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Boolean}   focusable
         *  @example    <caption>get</caption>
         *      //  false
         *      console.log( ctrl.focusable() );
         */
        focusable:function() { return true; },

        /**
         *  时间格式化字符串,HH:mm或者HH:mm:ss
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @default    'HH:mm'
         *  @member     {String}        timeFormat
         *  @example    <caption>get</caption>
         *      var format = ctrl.timeFormat();
         *  @example    <caption>set</caption>
         *      ctrl.timeFormat( 'HH:mm:ss' );
         */
        timeFormat : function( val ){
            var me = this;
            if( !val ){
                return me.options['timeFormat'];
            }
            me.options['timeFormat'] = val.toString();
            me._updateUiInput();
        },

        /**
         *  获取或者设置timeSpinner值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {String}        _accessValue
         *  @example    <caption>get</caption>
         *      var value = ctrl._accessValue();
         *  @example    <caption>set</caption>
         *      ctrl._accessValue( '19:20' );
         */
        _accessValue : function( val ){

            var me = this;
            if( !val ){
                return me.options['value'];
            }

            var formatedVal = me._padding( val,me.timeFormat() );
            //  update value
            me.options['value'] = formatedVal;
            //  update ui
            var value  = me.value();
            if( value ){
                var vv = value.split( ':' );
                var $inputs = $( 'input',me._$root );
                for (var i = 0,l = $inputs.size(); i < l; i++) {
                    $inputs.eq( i ).val( vv[i] );
                };
            }
            //  trigger 'onchange' event
            me.options['onchange']( me,{} );
        },

        /**
         *  获取或者设置timeSpinner值,同value属性一致
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {String}        data
         *  @example    <caption>get</caption>
         *      var data = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( '19:20' );
         */
        data: function( val ){ return this._accessValue( val ); },

        /**
         *  获取或者设置timeSpinner值,同value属性一致
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {String}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      var text = ctrl.text();
         *  @example    <caption>set</caption>
         *      ctrl.text( '19:20' );
         */
        text : function( val ){ return this._accessValue( val ); },

        /**
         *  获取或者设置timeSpinner值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {String}     value
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( '19:20' );
         */
        value : function( val ){ return this._accessValue( val ); },

        /**
         *  获取或者设置是否允许循环调整时间
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Boolean}     circular
         *  @default    false   
         *  @tutorial   timespinner_circular
         *  @example    <caption>get</caption>
         *      var value = ctrl.circular();
         *  @example    <caption>set</caption>
         *      ctrl.circular( true );
         */
        circular : function( val ){
            var me = this;
            if( !me.isBoolean( val ) ){ return me.options['circular']; }
            me.options['circular'] = val;
        },

        /**
         *  获取或者设置微调步进
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @method     _accessStep
         *
         *  @example    <caption>get</caption>
         *      var value = ctrl._accessStep();
         *  @example    <caption>set</caption>
         *      ctrl._accessStep( true );
         */
        _accessStep : function( val,which ){
            var me = this;
            if( !me.isNumber( val ) ){
                return me.options[which];
            }
            me.options[which] = val;
        },

        /**
         *  获取或者设置小时微调步进
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Number}     hourStep
         *  @default    1
         *  @tutorial   timespinner_steps
         *  @example    <caption>get</caption>
         *      var value = ctrl.hourStep();
         *  @example    <caption>set</caption>
         *      ctrl.hourStep( 2 );
         */
        hourStep : function( val ){ 
            return this._accessStep( val,'hourStep' ); 
        },

        /**
         *  获取或者设置分钟微调步进
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Number}     minuteStep
         *  @default    10
         *  @tutorial   timespinner_steps
         *  @example    <caption>get</caption>
         *      var value = ctrl.minuteStep();
         *  @example    <caption>set</caption>
         *      ctrl.minuteStep( 20 );
         */
        minuteStep : function( val ){ 
            return this._accessStep( val,'minuteStep' ); 
        },

        /**
         *  获取或者设置秒微调步进
         *  @public
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Number}     secondStep
         *  @default    10
         *  @tutorial   timespinner_steps
         *  @example    <caption>get</caption>
         *      var value = ctrl.secondStep();
         *  @example    <caption>set</caption>
         *      ctrl.secondStep( 20 );
         */
        secondStep : function( val ){ 
            return this._accessStep( val,'secondStep' ); 
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.TimeSpinner
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  default width
            width : 150,
            //  default height
            height : 21,
            //  default timeSpinner value is now
            value : '',
            //  是否允许循环调整时间
            circular : false,
            //  小时微调步进
            hourStep : 1,
            //  分钟微调步进
            minuteStep  : 10,
            //  秒微调步进
            secondStep : 10,
            //  时间格式化字符串HH:mm或者HH:mm:ss
            timeFormat : 'HH:mm',
            /**
             *  增加数值的时候触发
             *  @tutorial   timespinner_events
             *  @event  ebaui.web.TimeSpinner#onspinup
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onspinup : $.noop,
            /**
             *  减少数值的时候触发
             *  @tutorial   timespinner_events
             *  @event  ebaui.web.TimeSpinner#onspindown
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onspindown : $.noop,
            /**
             *  控件的值发生改变的时候触发
             *  @tutorial   timespinner_events
             *  @event      ebaui.web.TimeSpinner#onchange
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop
        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.DateTimePicker，依赖[Moment.js](http://momentjs.com/)库
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'DateTimePicker',true );

    /** 
     *  ebaui.web.DateTimePicker
     *  @class      DateTimePicker 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.Combo
     *  @tutorial   datetimepicker_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example    
     *      &lt;input value="2013-10-08 16:07" data-role="datetimepicker" data-options="{}"/&gt;
     */
    ebaui.control( 'web.DateTimePicker',ebaui.web.Combo, {

        /**
         *  DateTimePicker复合控件内的Calendar控件
         *  @private
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {ebaui.web.Calendar}    _calendar
         */
        _calendar : undefined,

        /**
         *  DateTimePicker复合控件内的TimeSpinner控件
         *  @private
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {ebaui.web.TimeSpinner}    _timeSpinner
         */
        _timeSpinner : undefined,

        /**
         *  calendar主视图要显示的按钮，对象格式
         *  {
         *      'text'   : '',
         *      'visible': false,
         *      'onclick': function( sender,event ){  }
         *  }
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Calendar
         *  @member     {Object}    _buttons
         */
        _buttons:{

            'today' : {
                'text'   : 'today',
                'visible': true,
                'onclick': function( sender,event ){

                        event.stopPropagation();

                        var date = new Date;
                        var showSpinner = sender.showTimeSpinner();
                        if( showSpinner ){
                            /*
                             *  sender is an instance of DateTimePicker
                             *  time is a string in the format : 'xx:xx';
                             *  如果当期控件有显示timeSpinner，当前时间应该更新成timeSpinner的值
                             *  var time = sender._timeSpinner.value().split( ':' );
                             */
                            var time = showSpinner ? sender._timeSpinner.value() : '00:00:00';
                            time.split( ':' );
                            if( time.length > 0 ){
                                date.setHours(time[0]);
                                date.setMinutes(time[1]);
                            }
                            
                            if( time.length == 3 ){
                                date.setSeconds(time[2]);
                            }

                        }

                        /*
                         *  更新DateTimePicker的控件值，以及其显示
                         */
                        sender.value( date );
                        sender._panel.close();
                    }
            },

            'ok':{
                'text'   : 'ok',
                'visible': true,
                'onclick': function( sender,event ){

                    event.stopPropagation();

                    /*
                     *  sender is an instance of DateTimePicker
                     */
                    var pickedDate = sender._calendar.value(),
                        date = new moment( pickedDate );

                    var time = sender.showTimeSpinner() ? sender._timeSpinner.value() : '00:00:00';
                    var dateTimeString = date.format( 'YYYY-MM-DD' ) + ' ' + time;

                    /*
                     *  更新DateTimePicker的控件值，以及其显示
                     */
                    sender.value( dateTimeString );
                    sender._panel.close();
                }
            },

            'clear':{
                'text'   : 'clear',
                'visible': false,
                'onclick': function( sender,event ){

                    event.stopPropagation();

                    var opts = sender.options;
                    /*
                     *  sender is an instance of DateTimePicker
                     *  is setting opts['value'] = null right ?
                     */
                    opts['value'] = null;
                    /*
                     *  once the control's value changed, then trigger the 'onchange' event
                     */
                    opts['onchange']( sender,event );
                    /*
                     *  clean ui display
                     */
                    sender._$formInput.val('');
                    sender._panel.close();
                }
            }

        },

        /**
         *  创建下拉菜单
         *  @private
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @method     _initPanel
         */
        _initPanel : function(){
            var me     = this;
            var ctrlId = me.id();
            var $root  = me._$root;

            var $popup = $( '<div data-options="{ visible:false }" style="display:none;"><input /></div>' ).appendTo( document.body );

            $popup.panel({
                id      : 'panel-' + ctrlId,
                position: 'absolute'
            });

            $( 'input',$popup ).calendar({
                'width'   : 260,
                'height'  : 0,
                'position': ''
            });

            /*
             *  判断是否显示加载并且显示底部的timeSpinner
             */
            var showSpinner = me.showTimeSpinner();
            if( showSpinner ){
                $( '[data-role="calendar-timespinner"]',$popup ).timespinner({
                    'width'   : 120,
                    'height'  : 0,
                    'position': ''
                });
                me._timeSpinner =  ebaui.get( $( '[data-role="timespinner"]',$popup ) );
            }

            /*
             *  判断是否显示加载并且显示底部的buttons
             */
            var visibleBtns = 0;
            var keys        = [ 'today','ok','clear' ];
            var buttons     = me._buttons;
            for (var i = 0,l = keys.length; i < l; i++) {
                var btn = buttons[keys[i]];
                if( btn['visible'] ){
                    ++visibleBtns;
                }
            }

            if( showSpinner || visibleBtns > 0 ){
                $( 'tr[data-role="footer"]',$popup ).show();
            }

            me._panel    = ebaui.get( $popup );
            me._calendar = ebaui.get( $( '[data-role="calendar"]',$popup ) );
        },

        /**
         *  输出calendar底部的buttons
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Calendar
         *  @method         _renderButtons
         *  @param          {Boolean}    needSplitter
         */
        _renderButtons : function( needSplitter ){

            var self    = this;
            var buttons = self._buttons;
            var $root   = self._panel.uiElement();

            var html = ['<input class="today" style="display:none;"/>',
                        '<span class="eba-calendar-footerSpace"></span>',
                        '<input class="ok" style="display:none;"/>',
                        '<span class="eba-calendar-footerSpace"></span>',
                        '<input class="clear" style="display:none;"/>'].join('');

            $( '[data-role="buttonGroup"]',$root ).html( html );

            var keys = [ 'today','ok','clear' ];
            for (var i = 0,l = keys.length; i < l; i++) {

                var key = keys[i];
                var btn = buttons[key];
                var selector = '[data-role="buttonGroup"] .' + key;

                var handle = ( function( button ){

                    return function( sender,eventArgs ){
                        button['onclick']( self,eventArgs );
                    };

                } )( btn );

                $( selector,$root ).button({
                    width  : 30,
                    text   : btn["text"],
                    visible: btn['visible'],
                    onclick: handle
                });

            };

        },

        /**
         *  更新控件enabled的UI样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:function(){

            var me = this;
            var en = me.enabled();
            me._calendar.enabled( en );
            if( me.showTimeSpinner() ){
                me._timeSpinner.enabled( en );
            }
            if( !en ){
                me._panel.close();
            }

            me._super();

        },

        /**
         *  更新UI的DateTime显示，显示的是格式化后的日期字符串
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _updateUIDateTime
         */
        _updateUIDateTime:function( datetime ){

            //  render the formatted datetime string
            var me = this;
            var m = new moment( datetime );
            if( datetime && m.isValid() ){
                var str = m.format( me.dateTimeFormat() );
                me._$formInput.val( str );
            }

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.ButtonEdit
         *  @method     _render
         */
        _render : function(){
            var me = this;
            //  call base._render()
            me._super();
            //  render the buttons
            me._renderButtons( !me.showTimeSpinner() );
            //  render the formatted datetime string
            me._updateUIDateTime( me.value() );
        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @method     _initControl
         */
        _initControl : function(){

            //  调用父类的方法
            var me = this;
            me._super();

            //  父类声明以下属性
            //  me._$root
            //  me._$formInput
            me._$root.addClass( 'eba-datepicker eba-popupedit' );

            //  create popup and subcontrols
            me._initPanel();

            //  init datetimepicker's value
            var initVal = me.value();
            var m = new moment( initVal );
            if( initVal && m.isValid() ){

                var date = m.toDate();
                me.options['value'] = date;
                //  init subcontrols' value
                me._calendar.value( date );
                if( showTimeSpinner ){
                    me._timeSpinner.value( m.format( 'HH:mm' ) );
                }

            }

            //   init buttons' visiblity
            var btns = me._buttons;
            btns['today'].visible = me.showTodayButton();
            btns['ok'].visible    = me.showOkeyButton();
            btns['clear'].visible = me.showClearButton();
            
        },

        /**
         *  通过代码设置calendar.value属性的时候，如果传入错误的日期，抛出的异常提示信息
         *  @private
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {String}    _formatInvalidException
         */
        _formatInvalidException : 'The date is invalid, please input a valid date!',

        /**
         *  访问和设置DateTimePicker的值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @method     _accessValue
         *  @example    <caption>get</caption>
         *      var pair = ctrl._accessValue();
         *  @example    <caption>set</caption>
         *      ctrl._accessValue( new Date );
         */
        _accessValue : function( val ){

            var me = this;
            if( me.isNull( val ) ){ return me.options['value']; }

            var m = new moment( val );
            if( m.isValid() ){
                var opts     =  me.options;
                var datetime = m.toDate();
                //  update ui display
                me._updateUIDateTime( datetime );
                //  update control's value
                opts['value'] =  datetime;
                //  trigger the 'onchange' event
                opts['onchange']( me,event );
            }else{
                throw me._formatInvalidException;
            }

        },

        /**
         *  访问和设置DateTimePicker的值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {Date}        data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( new Date );
         */
        data: function( val ){ return this._accessValue( val ); },

        /**
         *  访问和设置DateTimePicker的值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {Date}     value
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( new Date );
         */
        value : function( val ){ return this._accessValue( val ); },

        /**
         *  重置控件，清空验证状态，控件值，恢复到控件原始状态
         *  @public
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @method     reset
         */
        reset     : function(){
            
            var me = this;
            me.errors   = {};
            me._isValid = true;
            
            var now      = new Date;
            var spinner  = me._timeSpinner;
            var calendar = me._calendar;
            var time = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();

            me.options['value'] = now;

            calendar.reset();
            spinner.reset();

            calendar.value( now );
            spinner.value( time );

        },

        /**
         *  显示“Today”按钮
         *  @public
         *  @instance
         *  @default    true
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {Boolean}     showTodayButton
         *  @example    <caption>get</caption>
         *      var value = ctrl.showTodayButton();
         *  @example    <caption>set</caption>
         *      ctrl.showTodayButton( false );
         */
        showTodayButton : function( val ){

            var me   = this;
            var opts =  me.options;
            if( !me.isBoolean( val ) ){
                return opts['showTodayButton'];
            }

            opts['showTodayButton'] = val;

        },

        /**
         *  显示清空按钮
         *  @public
         *  @instance
         *  @default    false
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {Boolean}     showClearButton
         *  @example    <caption>get</caption>
         *      var value = ctrl.showClearButton();
         *  @example    <caption>set</caption>
         *      ctrl.showClearButton( true );
         */
        showClearButton : function( val ){

            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['showClearButton'];
            }

            me.options['showClearButton'] = val;

        },

        /**
         *  显示OKey按钮
         *  @public
         *  @instance
         *  @default    true
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {Boolean}     showOkeyButton
         *  @example    <caption>get</caption>
         *      var value = ctrl.showOkeyButton();
         *  @example    <caption>set</caption>
         *      ctrl.showOkeyButton( false );
         */
        showOkeyButton : function( val ){

            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['showOkeyButton'];
            }

            me.options['showOkeyButton'] = val;

        },

        /**
         *  显示TimeSpinner控件
         *  @public
         *  @instance
         *  @default    false
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {Boolean}     showTimeSpinner
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         */
        showTimeSpinner:function( val ){
            
            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['showTimeSpinner'];
            }

            me.options['showTimeSpinner'] = val;

        },

        /**
         *  日期时间格式化字符串
         *  @public
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @default    'YYYY-MM-DD HH:mm'
         *  @member     {String}        dateTimeFormat
         *  @example    <caption>get</caption>
         *      var format = ctrl.dateTimeFormat();
         *  @example    <caption>set</caption>
         *      ctrl.dateTimeFormat( 'HH:mm' );
         */
        dateTimeFormat : function( val ){

            var me = this;
            if( !val ){
                return me.options['dateTimeFormat'];
            }

            me.options['dateTimeFormat'] = val.toString();

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.DateTimePicker
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //
            value : undefined,
            //  日期时间格式化字符串
            dateTimeFormat : 'YYYY-MM-DD HH:mm',
            //  显示TimeSpinner控件
            showTimeSpinner:false,
            //  显示清空按钮
            showClearButton:false,
            //  显示“Today”按钮
            showTodayButton:true,
            //  显示OKey按钮
            showOkeyButton:true
        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Calendar，依赖[Moment.js](http://momentjs.com/)库
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'Spinner',true );

    /**
     *  控件全名 e.g. ebaui.web.Spinner
     *  控件描述
     *  @class      Spinner 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   spinner_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example    
     *      &lt;input data-role="spinner" id="" name="" value="" data-options="{}"/&gt;
     */
    ebaui.control( 'web.Spinner',ebaui.web.FormElement, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-spinner',

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {Object}    _cssClass
         */
        _cssClass : {
            disabled: 'eba-disabled',
            focused : 'eba-buttonedit-focus',
            readonly: 'eba-readonly'
        },

        /**
         *  获取焦点
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _focus
         */
        _focus : function(){
            var me = this;
            $( 'input',me._$root ).eq( me._currInput ).focus();
        },

        /**
         *  失去焦点
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _blur
         */
        _blur : function(){
            var me = this;
            $( 'input',me._$root ).eq( me._currInput ).blur();
        },

        /**
         *  设置或者移除据聚焦样式或者失焦样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _updateStyleFocused
         */
        _updateStyleFocused:function() {
            var me = this;
            if( me.focused() ){
                me._$root.addClass( me._cssClass['focused'] );
            }else{
                me._$root.removeClass( me._cssClass['focused'] );
            }

        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _updateStyleEnabled
         */
        _updateStyleEnabled:function() {
            var me = this;
            var $root     = me._$root;
            if( me.enabled() ){
                $( 'input',$root ).attr('disabled',null);
                $root.removeClass( me._cssClass['disabled'] );
            }else{
                $( 'input',$root ).attr('disabled','disabled');
                $root.removeClass( me._cssClass['focused'] )
                     .addClass( me._cssClass['disabled'] );
            }

        },

        /**
         *  
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _updateStyleEnabled
         */
        _updateStyleReadonly:function() {
            var me = this;
            var $root = me._$root;
            if( me.readonly() ){
                $root.addClass( me._cssClass['readonly'] );
                $( '.eba-buttonedit-buttons',$root ).hide();
                $( 'input',$root ).attr('readonly','readonly');
            }else{
                $root.removeClass( me._cssClass['readonly'] );
                $( 'input',$root ).attr('readonly',null);
                $( '.eba-buttonedit-buttons',$root ).show();
            }

        },

        /**
         *  
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _fixNumber
         */
        _fixNumber:function( ctrlVal ){
            var me = this;
            if( me.isNull( ctrlVal ) ){ ctrlVal = me.value(); }
            var decimalPlaces = me.decimalPlaces();
            var fixedNumberStr = decimalPlaces < 0 ? ctrlVal.toString() :  ctrlVal.toFixed( decimalPlaces );
            return fixedNumberStr;
        },

        /**
         *  更新UI显示
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _render
         */
        _render : function(){
            var me = this;
            me._$formInput.val( me._fixNumber() );
            me._super();
        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self    = this,
                $root   = self._$root,
                $input  = self._$formInput;

            $root.on( 'keyup','input',function( event ){

                if( event.which == ebaui.keycodes.up_arrow ){
                    //  increase
                    self.stepUp();
                }else if( event.which == ebaui.keycodes.down_arrow ){
                    //  decrease
                    self.stepDown();
                }

            } );

            $root.on( 'change','input',function( event ){
                var val = $input.val();
                self.value( val );
            } );

            $root.on( 'focus','input',function( event ){
                self._setOption( 'focused',true );
                self._updateStyleFocused();
            } );

            $root.on( 'blur','input',function( event ){
                self._setOption( 'focused',false );
                self._updateStyleFocused();
            } );

            $root.on( 'click','.eba-buttonedit-up',function( event ){
                self.stepUp();
                self.options['onspinup']( self,event );
            } );

            $root.on( 'click','.eba-buttonedit-down',function( event ){
                self.stepDown();
                self.options['onspindown']( self,event );
            } );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            me._$formInput = $( 'input',me._$root );
            me._$border    = $('.eba-buttonedit-border',me._$root);
            
            //  validators
            me._initValidators();

            //  check init value
            //  if init value is invalid then set it to 0
            var initVal = me.options['value'];
            if( !me.isNumber( initVal ) ){
                initVal = 0;
            }

            var fixed = me._fixNumber( initVal );
            me.options['value'] = parseFloat( fixed );
        },

        /**
         *  控件是否可以获取焦点
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.Spinner
         *  @member     {Boolean}   focusable
         *  @example    <caption>get</caption>
         *      //  false
         *      console.log( ctrl.focusable() );
         */
        focusable:function() { return true; },

        /**
         *  获取或者设置spinner值
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {String}        _accessValue
         *  @example    <caption>get</caption>
         *      var value = ctrl._accessValue();
         *  @example    <caption>set</caption>
         *      ctrl._accessValue( '19:20' );
         */
        _accessValue : function( val ){

            var me = this;
            if( me.isNull( val ) ){
                return me.options['value'];
            }

            val = parseFloat( val );
            if( isNaN( val ) ){ val = 0; }

            var me = this;
            var max = me.max();
            var min = me.min();

            if( val < min ){ val = min; }
            if( val > max ){ val = max; }

            var fixedNumberStr = me._fixNumber( val );
            //  格式化数据
            val = parseFloat( fixedNumberStr );
            //  update value 
            me.options['value'] = val;
            //  display value
            me._$formInput.val( fixedNumberStr );
            //  trigger 'onchange' event
            me.options['onchange']( me,{} );
        },

        /**
         *  获取或者设置spinner值,同value属性一致
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {String}        data
         *  @example    <caption>get</caption>
         *      var data = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( '19:20' );
         */
        data: function( val ){ return this._accessValue( val ); },

        /**
         *  获取或者设置spinner值,同value属性一致
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {String}    text
         *  @default    ''
         *  @example    <caption>get</caption>
         *      var text = ctrl.text();
         *  @example    <caption>set</caption>
         *      ctrl.text( '19:20' );
         */
        text : function( val ){ return this._accessValue( val ); },

        /**
         *  获取或者设置spinner值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {String}     value
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( '19:20' );
         */
        value : function( val ){ return this._accessValue( val ); },

        /**
         *  获取或者设置秒微调步进
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {Number}     step
         *  @default    1
         *  @tutorial   timespinner_steps
         *  @example    <caption>get</caption>
         *      var value = ctrl.step();
         *  @example    <caption>set</caption>
         *      ctrl.step( 20 );
         */
        step:function( val ){ 

            var me = this;
            if( !me.isNumber( val ) ){
                return me.options['step'];
            }

            me.options['step'] = val;

        },

        /**
         *  
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     stepUp
         *  @example    
         *      ctrl.stepUp();
         */
        stepUp:function(){

            var step      = this.step();
            var max       = this.max();
            var currValue = this.value();
            currValue = ( ( currValue + step ) > max ) ? max : ( currValue + step );
            this.value( currValue );

        },

        /**
         *  
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @method     stepDown
         *  @example    
         *      ctrl.stepDown();
         */
        stepDown:function(){

            var me        = this;
            var step      = me.step();
            var min       = me.min();
            var currValue = me.value();
            currValue = ( ( currValue - step ) < min ) ? min : ( currValue - step );
            me.value( currValue );

        },

        /**
         *  获取或者设置秒微调步进
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {Number}     min
         *  @default    0
         *  @tutorial   timespinner_steps
         *  @example    <caption>get</caption>
         *      var value = ctrl.min();
         *  @example    <caption>set</caption>
         *      ctrl.min( 20 );
         */
        min:function( val ){ 

            var me = this;
            if( !me.isNumber( val ) ){
                return me.options['min'];
            }

            me.options['min'] = val;

        },

        /**
         *  获取或者设置秒微调步进
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {Number}     max
         *  @default    100
         *  @tutorial   timespinner_steps
         *  @example    <caption>get</caption>
         *      var value = ctrl.max();
         *  @example    <caption>set</caption>
         *      ctrl.max( 20 );
         */
        max:function( val ){ 

            var me = this;
            if( !me.isNumber( val ) ){
                return me.options['max'];
            }

            me.options['max'] = val;

        },

        /**
         *  保留的小数点位数。默认值是-1，表示不作任何限制
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {Number}     decimalPlaces
         *  @default    0
         *  @example    <caption>get</caption>
         *      var decimalPlaces = ctrl.decimalPlaces();
         *  @example    <caption>set</caption>
         *      ctrl.decimalPlaces( 20 );
         */
        decimalPlaces : function( val ){
            var me = this;
            if( !me.isNumber( val ) ){ 
                return me.options['decimalPlaces']; 
            }
            me.options['decimalPlaces'] = val;
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Spinner
         *  @member     {Object}    options
         */
        options : {

            //  保留的小数点位数。默认值是-1，表示不作任何限制
            decimalPlaces:-1,
            //  default width
            width : 150,
            //  default height
            height : 21,
            //  default timeSpinner value is now
            value : 0,
            //  微调步进
            step : 1,
            //  min value 
            min : 0,
            //  max value 
            max : 100,
            /**
             *  增加数值的时候触发
             *  @tutorial   timespinner_events
             *  @event  ebaui.web.Spinner#onspinup
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onspinup : $.noop,
            /**
             *  减少数值的时候触发
             *  @tutorial   timespinner_events
             *  @event  ebaui.web.Spinner#onspindown
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onspindown : $.noop,
            /**
             *  控件的值发生改变的时候触发
             *  @tutorial   timespinner_events
             *  @event      ebaui.web.Spinner#onchange
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop
        }

    });

})( jQuery,ebaui );
/**
 *  依赖于SWFUpload
 *  @see http://demo.swfupload.org/Documentation/
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerControl( 'FileUploader',true );

    /** 
     *  控件全名 e.g. ebaui.web.FileUploader
     *  控件描述
     *  @class      FileUploader 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   fileuploader_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      &lt;input data-role="fileuploader" data-options="{ }"/&gt;
     */
    ebaui.control( 'web.FileUploader',ebaui.web.FormElement, {

        /**
         *  内部上传控件实例
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @member     {SWFUpload}    _uploader
         */
        _uploader:null,

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-fileuploader',

        /**
         *  uploadUrl是必须有值的属性，如果该属性为空，抛出此异常
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @member     {String}    _uploadUrlEmptyException
         */
        _uploadUrlEmptyException:'the uploadUrl property can not be null or empty!',

        /**
         *  更新UI的按钮文本
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @method     _updateUIButtonText
         */
        _updateUIButtonText:function(){
            $( '.eba-buttonedit-button',this._$root ).text( this.buttonText() );
        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @method     _render
         */
        _render : function(){
            var me = this;
            me._super();
            me._updateUIButtonText();
        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @method     _initControl
         */
        _initControl : function(){

            var self      = this;
            var uploadUrl = self.uploadUrl();

            if( !uploadUrl ){
                throw self._uploadUrlEmptyException;
            }

            self._$formInput = $( 'input',self._$root );

            var btnID     = self.controlID()+'$span';
            var $root     = self._$root;
            var offset    = $root.offset();
            var $flashEl  = $( '<div><span id="' + btnID + '""></span></div>' )
                                               .css({ 'position' : 'absolute','top' : offset.top,'left' : offset.left,'width' : $root.width(),'height' : $root.height() })
                                               .appendTo( document.body );

            var flashUrl = ebaui.web.urlRoot + 'lib/SWFUpload/Flash/swfupload.swf';

            var customer = {

                post_params          : self.extraParams(),
                file_post_name       : self.filePostName(),

                file_types           : self.fileType(),
                file_size_limit      : self.fileSizeLimit(),
                file_queue_limit     : 0,
                file_upload_limit    : 0,

                button_width         : '100%',
                button_height        : '100%',
                button_placeholder_id: btnID,
                
                upload_url           : self.uploadUrl()

            };

/**
//  fileinfo 对象属性列表

var fileinfo = {

    averageSpeed: 0,
    creationdate: Thu Aug 22 2013 09:35:25 GMT+0800 (China Standard Time),
    currentSpeed: 0,
    filestatus: -1,
    id: "SWFUpload_0_0",
    index: 0,
    modificationdate: Thu Aug 22 2013 08:38:53 GMT+0800 (China Standard Time),
    movingAverageSpeed: 0,
    name: "bg-scrollbar-thumb-y.png",
    percentUploaded: 0,
    post: Object,
    size: 2567,
    sizeUploaded: 0,
    timeElapsed: 0,
    timeRemaining: 0,
    type: ".png"

}

*/

            var evtHandles={

                upload_start_handler : function( fileinfo ){

                    //   disable the swfupload
                    self._uploader.setButtonDisabled( true );

                    self.options['onuploadstart']( self,{
                        'file' : fileinfo
                    } );

                },

                upload_progress_handler : function( fileinfo,complete,total ){

                    self.options['onuploadprogress']( self,{
                        'file'         : fileinfo,
                        'bytesComplete': complete,
                        'totalBytes'   : total
                    } );

                },

                upload_error_handler : function( fileinfo,errorCode,message ){

                    //   enable the swfupload
                    self._uploader.setButtonDisabled( false );

                    self.options['onuploaderror']( self,{
                        'file'    : fileinfo,
                        'errorMsg': message
                    } );

                },

                upload_success_handler : function( fileinfo,data,response){
                    
                    //   enable the swfupload
                    self._uploader.setButtonDisabled( false );
                    self.options['onuploadsucc']( self,{
                        'file'          : fileinfo,
                        'serverData'    : data,
                        'serverResponse': response
                    } );

                },

                upload_complete_handler : function(fileinfo){

                    self.options['onuploadcomplete']( self,{
                        'file' : fileinfo
                    } );

                },

                file_dialog_start_handler:function () {
                    //  clear queue
                    self._uploader.cancelQueue();
                },

                file_queued_handler : function( fileinfo ){
                    //  display file path
                    self._$formInput.val( fileinfo.name );
                },

                file_queue_error_handler : function( fileinfo,errorCode,message ){

                    switch( errorCode ){

                        case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
                            //  File is too big
                            break;

                        case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
                            //  Cannot upload Zero Byte files
                            break;

                        case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
                            //  Invalid File Type
                            break;

                        case SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED:
                            //  You have selected too many file
                            break;

                    }

                },

                file_dialog_complete_handler : function( fileSelectedCount,fileQueuedCount,fileQueueLength ){
                    //  todo
                    var stats = self._uploader.getStats();
                    if( self.uploadOnSelect() ){
                        //  upload files
                        self._uploader.startUpload();
                    }

                }

            };

            //  event handlers
            var defaults = {

                flash_url               : flashUrl,

                use_query_string        : false,
                requeue_on_error        : true,
                http_success            : [201, 202],
                assume_success_timeout  : 0,
                file_types_description  : "",
                
                debug                   : false,
                debug_handler           : $.noop,
                
                prevent_swf_caching     : false,
                preserve_relative_urls  : false,
                
                //  button text && style setting
                button_text             : '',
                button_image_url        : '',
                button_text             : '',
                button_text_style       : '',
                button_text_left_padding: 3,
                button_text_top_padding : 2,
                button_action           : SWFUpload.BUTTON_ACTION.SELECT_FILES,
                button_disabled         : false,
                button_cursor           : SWFUpload.CURSOR.HAND,
                button_window_mode      : SWFUpload.WINDOW_MODE.TRANSPARENT

                /*

                //  events

                swfupload_loaded_handler    : swfupload_loaded_function,
                file_dialog_start_handler   : file_dialog_start_function,
                file_queued_handler         : file_queued_function,
                file_queue_error_handler    : file_queue_error_function,
                file_dialog_complete_handler: file_dialog_complete_function


                */

            };

            var settings = $.extend( defaults,customer,evtHandles );
            self._uploader = new SWFUpload( settings );

        },

        /**
         *  开始上传文件
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @method     startUpload
         *  @param      {Object}    file
         */
        startUpload:function ( file ){
            var uploader = this._uploader;
            if( uploader ){
                uploader.startUpload( file );
            }
        },

        /**
         *  添加POST提交的参数
         *  @public
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @method     addPostParam
         *  @param      {String}    name
         *  @param      {String}    value
         */
        addPostParam:function (name, value) {

            var uploader = this._uploader;
            if( uploader && name && value ){
                uploader.addPostParam( name,value );
            }

        },

        /**
         *  服务端上传文件处理地址
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @member     {String}    uploadUrl
         */
        uploadUrl : function ( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['uploadUrl'];
            }
            me.options['uploadUrl'] = val;
        },

        /**
         *  按钮的文本
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @member     {String}    buttonText
         */
        buttonText : function ( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['buttonText'];
            }

            var uploader = me._uploader;
            me.options['buttonText'] = val;
            me._updateUIButtonText();
            if( uploader ){
                uploader.setButtonText( val );
            }
        },

        /**
         *  文件选择后即上传
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @member     {Boolean}    uploadOnSelect
         */
        uploadOnSelect : function( val ){
            var me = this;
            if( !me.isBoolean( val ) ){
                return me.options['uploadOnSelect'];
            }
            me.options['uploadOnSelect']  = val;
        },

        /**
         *  允许上传的文件类型,使用";"分割，默认只允许上传图片
         *  @private
         *  @instance
         *  @default    '*.jpg;*.gif;*.png'
         *  @memberof   ebaui.web.FileUploader
         *  @member     {String}    fileType
         */
        fileType : function ( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['fileType'];
            }

            var uploader = me._uploader;
            me.options['fileType'] = val;
            if( uploader ){
                uploader.setFileTypes( val );
            }
        },

        /**
         *  上传文件大小限制，默认文件大小上限是10MB
         *  @private
         *  @instance
         *  @default    '10MB'
         *  @memberof   ebaui.web.FileUploader
         *  @member     {String}    fileSizeLimit
         */
        fileSizeLimit : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['fileSizeLimit'];
            }

            //  This applies to all future files that are queued. 
            //  The file_size_limit parameter will accept a unit. 
            //  Valid units are B, KB, MB, and GB. The default unit is KB.
            var uploader = me._uploader;
            me.options['fileSizeLimit'] = val;
            if( uploader ){
                uploader.setFileSizeLimit( val );
            }

        },

        /**
         *  文件提交到服务端的时候，post的key值，比如在asp.net你可以使用Request.Files[filePostName]进行访问
         *  @private
         *  @instance
         *  @default    'ebauiUploadedFiles'
         *  @memberof   ebaui.web.FileUploader
         *  @member     {String}    fileSizeLimit
         */
        filePostName : function( val ) {

            var me = this;
            if( !me.isString( val ) ){
                return me.options['filePostName'];
            }

            var uploader = me._uploader;
            me.options['filePostName'] = val;
            if( uploader ){
                uploader.setFilePostName( val );
            }

        },

        /**
         *  通过POST额外上传到服务器的参数
         *  @private
         *  @instance
         *  @default    {}
         *  @memberof   ebaui.web.FileUploader
         *  @member     {Object}    extraParams
         */
        extraParams : function( val ) {

            var me = this;
            if( !me.isObject( val ) ){
                return me.options['extraParams'];
            }

            //  This applies to all future files that are queued. 
            //  The file_size_limit parameter will accept a unit. 
            //  Valid units are B, KB, MB, and GB. The default unit is KB.
            var uploader = me._uploader;
            var old = me.options['extraParams'];

            if( uploader && old ){
                for( var name in old ){
                    uploader.removePostParam( name );
                }
            }

            if( uploader && val ){
                for( var name in val ){
                    uploader.addPostParam( name,val[name] );
                }
            }

            me.options['extraParams'] = val;

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.FileUploader
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  default width
            width : 150,
            //  default height
            height : 21,
            //  按钮的文本
            buttonText : '浏览...',
            //  允许上传的文件类型
            fileType : '*.jpg;*.gif;*.png',
            //  上传文件大小限制
            fileSizeLimit:'10MB',
            //  文件提交到服务端的时候，post的key值，比如在asp.net你可以使用Request.Files[filePostName]进行访问
            filePostName : 'ebauiUploadedFiles',
            //  服务端上传文件处理地址
            uploadUrl:'',
            //  文件选择后即上传
            uploadOnSelect : false,
            //  通过POST额外上传到服务器的参数
            extraParams:{},
            /**
             *  开始上传文件的时候触发
             *  。此事件处理程序中，如果返回true，文件真正开始上传
             *  ；如果返回false，则文件上传失败，同时触发onuploaderror事件
             *  @event  ebaui.web.FileUploader#onuploadstart
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             *  @prop   {Object}    eventArgs.file
             */
            onuploadstart : $.noop,
            /**
             *  文件正在上传的过程中不断触发
             *  @event  ebaui.web.FileUploader#onuploadprogress
             *  @param  {Object}    file       - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             *  @prop   {Object}    eventArgs.file
             *  @prop   {Object}    eventArgs.bytesComplete
             *  @prop   {Object}    eventArgs.totalBytes
             */
            onuploadprogress : $.noop,
            /**
             *  文件上传失败触发
             *  @event  ebaui.web.FileUploader#onuploaderror
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             *  @prop   {Object}    eventArgs.file
             *  @prop   {Object}    eventArgs.errorMsg
             */
            onuploaderror : $.noop,
            /**
             *  文件上传成功触发
             *  @event  ebaui.web.FileUploader#onuploadsucc
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             *  @prop   {Object}    eventArgs.file
             *  @prop   {Object}    eventArgs.serverData
             *  @prop   {Object}    eventArgs.serverResponse
             */
            onuploadsucc: $.noop,
            /**
             *  不论文件上传成功还是失败，这个事件都会触发
             *  @event  ebaui.web.FileUploader#onuploadcomplete
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             *  @prop   {Object}    eventArgs.file
             */
            onuploadcomplete: $.noop

        }

    });

})( jQuery,ebaui );
/**
 *  ebaui控件的代码模板，定义了控件需要实现的虚方法，防止控件重定义虚方法虚属性，提高控件开发速度
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerControl( 'Checkbox',true );

    /** 
     *  ebaui.web.Checkbox
     *  @class      Checkbox 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   checkbox_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.Checkbox',ebaui.web.FormElement, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-checkbox',

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @method     _render
         */
        _render : function(){
            var me = this;
            me._updateStyleChecked();
            me._updateUILabel();
            me._super();
        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @method     _setupEvents
         */
        _setupEvents : function(){
            var me   = this;
            var $root = me._$root;
            $root.on( 'change','input',function( event ){
                me.options['checked'] = this.checked;
                me.options['onchange']( me,event );
            } );
        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @method     _initControl
         */
        _initControl : function(){
            var me = this;
            me._$formInput = $( 'input',me._$root );
            //  设置input的name属性
            var name = me.name();
            if( name ){me._$formInput.attr( 'name',name );}

            //  控件的可用性
            me._$formInput.attr( 'id',me.controlID() );
            $( 'label',me._$root ).attr( 'for',me.controlID() );
        },

        /**
         *  更新UI界面的label文本
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @method     _updateUILabel
         */
        _updateUILabel:function(){ $( 'label',this._$root ).text( this.text() ); },

        /**
         *  更新checkbox的选中样式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @method     _updateStyleChecked
         */
        _updateStyleChecked : function(){
            var me = this;
            me._$formInput.get(0).checked = me.checked(); 
        },

        /**
         *  重置控件，清空验证状态，控件值，恢复到控件原始状态
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @method     reset
         *  @example
         *      ctrl.reset();
         */
        reset : function(){
            var me = this;
            me.checked( false );
            me.errors   = {};
            me._isValid = true;
            me.clearTips();
        },


        /**
         *  获取或者设置checkbox控件的文本
         *  @public
         *  @instance
         *  @default    ''
         *  @memberof   ebaui.web.Checkbox
         *  @member     {String}        text
         *  @example    <caption>get</caption>
         *      var pair = ctrl.text();
         *  @example    <caption>set</caption>
         *      ctrl.text( 'label' );
         */
        text:function( val ){
            var me = this;
            if( !me.isString( val ) ){
                return me.options['text'];
            }
            me.options['text'] = val;
            me._updateUILabel();
        },

        /**
         *  获取或者设置控件的所有值
         *  { 'text' : '','value' : null,'checked' : false }
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @member     {Object}        data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data(  { 'text' : '','value' : null,'checked' : false } );
         */
        data: function( val ){
            var me = this;
            if( me.isNull(val) ){
                return me.options['checked'];
            }

            var text = val[me.textField()];
            if( text ){ me.text( text ); }

            var value = val[me.valueField()];
            if( !me.isNull(val) ){
                me.value( value );
            }

            if( me.isBoolean( val['checked'] ) ){
                me.checked( val['checked'] );
            }
        },

        /**
         *  获取或者设置checkbox是否选中，同checked
         *  @public
         *  @instance
         *  @default    ''
         *  @memberof   ebaui.web.Checkbox
         *  @member     {Object}     value
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( 'value' );
         */
        value : function( val ){
            var me = this;
            if( me.isNull(val) ){ return me.options['value']; }
            me.options['value'] = val;
        },

        /**
         *  获取或者设置checkbox是否选中
         *  @public
         *  @instance
         *  @readonly
         *  @default    false
         *  @memberof   ebaui.web.Checkbox
         *  @member     {Boolean}     checked
         *  @example    <caption>get</caption>
         *      var pair = ctrl.checked();
         *  @example    <caption>set</caption>
         *      ctrl.checked( true );
         */
        checked : function( val ){
            var me = this;
            if( !me.isBoolean( val ) ){ return me.options['checked']; }
            me.options['checked'] = val;
            me._updateStyleChecked();
        },

        /**
         *  控件数据源对象字段中，用于作为控件值的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @member     {String}      valueField
         *  @default    'value'
         *  @example    <caption>get</caption>
         *      var valueField = ctrl.valueField();
         *  @example    <caption>set</caption>
         *      ctrl.valueField( '' );
         */
        valueField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){ return me.options['valueField']; }
            me.options['valueField'] = val;
        },

        /**
         *  控件数据源对象字段中，用于作为控件文本的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @member     {String}      textField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var textField = ctrl.textField();
         *  @example    <caption>set</caption>
         *      ctrl.textField( '' );
         */
        textField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){ return me.options['textField']; }
            me.options['textField'] = val;
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Checkbox
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  checkbox控件的文本
            text   : '',
            //  checkbox控件的值
            value  : true,
            //  值字段
            valueField : 'value',
            //  文本字段
            textField  : 'text',
            //  checkbox是否选中
            checked: false,

            /**
             *  控件的值发生改变的时候触发
             *  @event      ebaui.web.Checkbox#onchange
             *  @param      {Object}    sender      - 事件发送对象
             *  @param      {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop
        }

    });

})( jQuery,ebaui );
/**
 *  ebaui控件的代码模板，定义了控件需要实现的虚方法，防止控件重定义虚方法虚属性，提高控件开发速度
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    //  import packages
    ebaui.web.registerControl( 'CheckboxList',true );

    /** 
     *  ebaui.web.CheckboxList
     *  ，本地数据源DEMO请参考{@tutorial checkboxlist_index}
     *  ，远程数据源DEMO请参考{@tutorial checkboxlist_remoteDataSource}
     *  @class      CheckboxList 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.CheckboxList',ebaui.web.FormElement, {

        /**
         *  是否使用remote数据源
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {Boolean}       _usingRemoteData
         */
        _usingRemoteData : false,

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-checkboxlist',

        /**
         *  已经编译好的checkbox模板，使用underscore模板引擎，后续会重复使用
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @method     _compiledListItemTmpl
         */
        _compiledListItemTmpl : $.noop,

        /**
         *  显示checkbox列表
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @method     _renderListItem
         */
        _renderListItem:function () {

            var me = this;
            var dataItems = me._dataItems;
            if( me.isEmpty( dataItems ) ){ return; }

            var html = me._compiledListItemTmpl({
                'controlID' : me.controlID(),
                'textField' : me.textField(),
                'valueField': me.valueField(),
                'dataItems' : dataItems
            });

            $( 'tr',me._$root ).html( html );

        },

        /**
         *  checkboxlist数据源
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {Array}     _dataItems
         */
        _dataItems : [],

        /**
         *  加载数据源，加载成功后填充本地数据源_dataItems
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @method     _loadData
         */
        _loadData:function( afterLoad ){

            var self       = this;
            var dataSource = self.dataSource();

            if( !afterLoad ){ afterLoad = $.noop; }

            if( self._usingRemoteData ){
                //  use remote data source 
                var toServer = {};
                var url      = dataSource.url;

                if( self.isFunc( dataSource.data ) ){
                    toServer = dataSource.data();
                }else if( dataSource.data && self.isObject( dataSource.data ) ){
                    toServer = dataSource.data;
                }

                $.getJSON( url,toServer ).done(function( serverData ){
                    //  显示加载中的样式
                    self._dataItems = serverData;
                    afterLoad();
                });

            }else{
                //  use local data source 
                self._dataItems = dataSource;
                afterLoad();
            }

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @method     _render
         */
        _render : function(){

            var self = this;
            self._super();
            /* load data then render checkboxlist */
            self._loadData( function(){

                /*
                 *  首次输出UI界面的时候，应该检查初始值，看看是否有设置已经选中的项目
                 *  如果有，那么应该在初始化的时候，自动勾选
                 */
                var checkedVal = self.options['value'];
                var dataItems  = self._dataItems;
                var valueField = self.valueField();

                if( checkedVal && checkedVal.length > 0 ){
                    for (var j = 0,max = checkedVal.length; j < max; j++) {
                        for (var i = 0,l = dataItems.length; i < l; i++) {
                            var dataItem = dataItems[i];
                            dataItem['checked'] = ( dataItem[valueField] == checkedVal[i] ) ? 'true' : false;
                        };
                    };
                    
                }

                self._renderListItem();

            } );

        },

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self   = this;
            var $root  = self._$root;
            $root.on( 'change','input',function( event ){
                self.options['onchange']( self,event );
            } );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @method     _initControl
         */
        _initControl : function(){
            var me = this;
            var checkboxItemTmpl = $.trim( $( '#ebaui-template-checkboxlist-item' ).html() );
            me._compiledListItemTmpl = me.compileTmpl( checkboxItemTmpl );
            me._usingRemoteData = me.isUsingRemoteData( me.options['dataSource'] );
        },

        /**
         *  获取或者设置checkboxlist的选中项
         *  ，参数格式示例：[{ text : '',value : '' }]
         *  @public
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {Array}        data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( [] );
         */
        data: function( val ){

            var me = this;
            if( !me.isArray( val ) ){
                var toRet      = [];
                var ctrlVal    = me.value();
                var dataItems  = me._dataItems;
                var valueField = me.valueField();
                var textField  = me.textField();

                for (var i = 0,l = ctrlVal.length; i < l; i++) {

                    for (var j = 0,max=dataItems.length; j < max; j++) {
                        var dataItem = dataItems[j];
                        if( dataItem[valueField] == ctrlVal[i] ){

                            toRet.push( {
                                'text' : dataItem[textField],
                                'value': ctrlVal[i]
                            } );

                        }
                    }

                }

                return toRet;
            }

            /* update checkboxes's value */
            me.value( val );

        },

        /**
         *  获取或者设置checkboxlist的选中项
         *  @public
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {Array}     value
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( [1,2,3] );
         */
        value : function( val ){

            var me = this;
            //  get value
            if( !me.isArray( val ) ){
                var checkedItems = [];
                $( 'input:checked',me._$root ).each(function( idx,el ){
                    checkedItems.push( $( el ).val() );
                });
                return checkedItems;
            }

            //  update checkboxes checked property
            for (var i = 0,l = val.length; i < l; i++) {
                var selector = 'input[value="]' + val[i] + '"]';
                var $checkbox = $( selector,this._$root );
                if( $checkbox.size() > 0 ){
                    $checkbox.get(0).checked=true;
                }
            };

            //  trigger onchange event
            me.options['onchange']( me,{} );

        },

        /**
         *  控件数据源对象字段中，用于作为控件值的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {String}      valueField
         *  @default    'value'
         *  @example    <caption>get</caption>
         *      var valueField = ctrl.valueField();
         *  @example    <caption>set</caption>
         *      ctrl.valueField( '' );
         */
        valueField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['valueField'];
            }
            me.options['valueField'] = val;
        },

        /**
         *  控件数据源对象字段中，用于作为控件文本的字段名
         *  @public
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {String}      textField
         *  @default    'text'
         *  @example    <caption>get</caption>
         *      var textField = ctrl.textField();
         *  @example    <caption>set</caption>
         *      ctrl.textField( '' );
         */
        textField : function( val ) {
            var me = this;
            if( !me.isString( val ) ){
                return me.options['textField'];
            }
            me.options['textField'] = val;

        },

        /**
         *  checkboxlist选项的数据源，可以是远程数据源URL配置对象或者是一个javascript数组对象作为数据源
         *  @public
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {Object|Array}          dataSource
         *  @property   {String}                dataSource.url          - 服务端URL
         *  @property   {Object|Function}       dataSource.data         - 向服务器发起AJAX请求的时候，要发送给服务器的URL参数
         *  @tutorial   texboxlist_local
         *  @tutorial   texboxlist_remote
         *  @example    <caption>get</caption>
         *      var src = ctrl.dataSource();
         *  @example    <caption>set</caption>
         *      //  本地数据
         *      ctrl.dataSource( [] );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : {}
         *      } );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : function(){ 
         *              // your logic
         *              return {};
         *          }
         *      } );
         */
        dataSource : function( val ){

            var me = this;
            if( !val ){
                return me.options['dataSource'];
            }

            me._usingRemoteData = me.isUsingRemoteData( val );
            me.options['dataSource'] = val;

            me._loadData(function(){
                me._renderListItem();
            });

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.CheckboxList
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  控件当前已经选中列表的文本值
            text : [],
            //  控件当前已经选中列表的值
            value: [],
            //  值字段
            valueField : 'value',
            //  文本字段
            textField  : 'text',
            //  下拉菜单选项的数据源，可以是URL地址或者是一个javascript数组对象作为数据源
            //  dataSource : []
            //  dataSource : { url ,data:{} || function(){ return {}; } }
            dataSource : '',

            /**
             *  控件的值发生改变的时候触发
             *  @event  ebaui.web.CheckboxList#onchange
             *  @param  {Object}    sender      - 事件发送对象
             *  @param  {Object}    eventArgs   - 事件参数
             */
            onchange : $.noop
        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Captcha控件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'Captcha',true );

    /** 
     *  ebaui.web.Captcha
     *  ，验证码控件
     *  ，远程服务器返回一个JSON对象，格式为
     *  ：{ image : '', code : '' }
     *  @class      Captcha 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.TextBox
     *  @tutorial   captcha_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.Captcha', ebaui.web.TextBox, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-captcha',

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @method     _setupEvents
         */
        _setupEvents : function(){

            var self   = this;
            var $root  = self._$root;
            var $input = self._$formInput;
            
            $root.on( 'click','[data-role="btn-reload"]',function( event ){
                self.refresh();
            } );

            $root.on( 'focus','.eba-textbox-input',function(evt){
                self._setOption( 'focused',true );
                self._updateStyleFocused();
            } );

            $root.on( 'blur','.eba-textbox-input',function(evt){
                self._setOption( 'focused',false );
                self._updateStyleFocused();
            } );

            $root.on( 'change','.eba-textbox-input',function(evt){
                if( self.validateOnChange() ){
                    self.validate();
                }
            } );

            /*
             *  when your browser is IE7 ~ IE9, we create a label for textbox as placeholder 
             *  when you click on this label
             *  remove this label then focus in the input
             */
            $root.on( 'click','.eba-placeholder-lable',function( event ){
                $(this).hide();
                self._$formInput.focus();
            } );

            self._super();

        },

        /**
         *  数据源格式错误
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @member     {String}    _dataSourceInvalidException
         */
        _serverDataInvalidException:'captcha code server response is invalid!!',

        /**
         *  数据源格式错误
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @member     {String}    _dataSourceInvalidException
         */
        _dataSourceInvalidException:'the dataSource format is invalid, only remote dataSource supported!',
        
        /**
         *  加载验证码图片以及图片的字符串
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @method     _loadCaptcha
         */
        _loadCaptcha:function(){

            var self       = this;
            var dataSource = self.options['dataSource'];
            var isRemote   = self.isUsingRemoteData( dataSource );

            if( !isRemote ){
                throw self._dataSourceInvalidException;
            }

            var remoteUrl      = dataSource.url;
            var postData = {};
            if( self.isFunc( dataSource.data ) ){
                postData = dataSource.data();
            }else{
                $.extend(postData, dataSource.data);
            }
            postData['t'] = ( new Date ).getTime().toString() + parseInt( Math.random() * 1000 ).toString();
            remoteUrl += '?' + $.param( postData );
            self._$captchaImg.attr( 'src',remoteUrl );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            me._super();

            me._$captchaImg = $( '.eba-code-img',me._$root );
            me._$btnReload  = me._$captchaImg.parent();

            var opts = me.options;
            /* init validation url, by defualts, it is the same with dataSource */
            if( !opts['validationUrl'] ){
                opts['validationUrl'] = opts['dataSource']['url'];
            }

            /* 
             *  if validateOnServer and you did not config remote validation rule 
             *  then add remote validation rule automatically
             */
            me._addRemoteValidator( opts['validateOnServer'] );

            /* load captcha code image from remote server */
            me._loadCaptcha();

        },

        /**
         *  刷新验证码
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @method     refresh
         *  @example
         *      ctrl.refresh();
         */
        refresh:function(){ this._loadCaptcha(); },

        /**
         *  获取表单控件值
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.Captcha
         *  @member     {String}    data
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.data();
         */
        data : function(){ return this._$formInput.val(); },

        /**
         *  获取表单控件值
         *  @public
         *  @instance
         *  @readonly
         *  @memberof   ebaui.web.Captcha
         *  @member     {String}    value
         *  @default    null
         *  @example    <caption>get</caption>
         *      var value = ctrl.value();
         */
        value : function(){ return this._$formInput.val(); },

        /**
         *  远程数据源
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @member     {Object}                dataSource
         *  @property   {String}                dataSource.url          - 服务端URL
         *  @property   {Object|Function}       dataSource.data         - 向服务器发起AJAX请求的时候，要发送给服务器的URL参数
         *  @example    <caption>get</caption>
         *      var src = ctrl.dataSource();
         *  @example    <caption>set</caption>
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : {}
         *      } );
         *
         *      //  服务端数据
         *      ctrl.dataSource( {
         *          url : 'http://xx.xx/xx?xx=xx',
         *          data : function(){ 
         *              // your logic
         *              return {};
         *          }
         *      } );
         */
        dataSource : function( val ){
            if( !val ){
                return this.options['dataSource'];
            }

            this.options['dataSource'] = val;
        },

        _addRemoteValidator:function( validateOnServer ){

            var me = this;
            /* init remote validator */
            if( validateOnServer && !me.hasValidator('remote') ){

                window['captchaPass'] = function( value, serverData ){
                    if( !serverData ){ return false; }
                    if( serverData['result'] == null || serverData['result'] == undefined ){ return false; }
                    return parseInt( serverData['result'] ) == 1;
                };

                var rule = 'remote[\'url${0}\',\'token${1}\',\'pass$captchaPass\']'.replace('{0}',me.validationUrl()).replace('{1}',me.queryKey());
                me.addValidator( rule );

            }else if ( !validateOnServer ){
                me.removeValidator( 'remote' );
            }

        },

        /**
         *  开启服务端验证
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @member     {Boolean}                validateOnServer
         *  @default    false
         *  @example    <caption>get</caption>
         *      var src = ctrl.validateOnServer();
         *  @example    <caption>set</caption>
         *      ctrl.validateOnServer( true );
         */
        validateOnServer:function( val ){
            var me = this;
            if( !me.isBoolean( val ) ){ 
                return me.options['validateOnServer']; 
            }
            me.options['validateOnServer'] = val;
            me._addRemoteValidator( val );
        },

        /**
         *  验证码的服务端验证地址，默认和dataSource里面配置的url一样
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @member     {String}                validationUrl
         *  @example    <caption>get</caption>
         *      var src = ctrl.validationUrl();
         *  @example    <caption>set</caption>
         *      ctrl.validationUrl( 'http://' );
         */
        validationUrl : function ( val ) {
            var me = this;
            var re = /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
            if( !re.test( val ) ){
                return me.options['validationUrl'];
            }
            me.options['validationUrl'] = val;
        },

        /**
         *  控件进行验证的时候，要提交到验证服务器的url query parameter key
         *  @public
         *  @instance
         *  @default    'verify'
         *  @memberof   ebaui.web.Captcha
         *  @member     {String}                queryKey
         *  @example    <caption>get</caption>
         *      var src = ctrl.queryKey();
         *  @example    <caption>set</caption>
         *      ctrl.queryKey( '' );
         */
        queryKey : function( val ){
            var me = this;
            if( me.isEmpty( val ) ){
                return me.options['queryKey'];
            }
            me.options['queryKey'] = val;
        },

        /**
         *  重置控件，清空验证状态，控件值，恢复到控件原始状态
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @method     reset
         *  @example
         *      ctrl.reset();
         */
        reset : function(){
            var me = this;
            me.errors   = {};
            me._isValid = true;
            me._$formInput.val('');
            me.clearTips();
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Captcha
         *  @member     {Object}    options
         */
        options : {
            // css position property
            position   : 'absolute',
            //  top
            top     : 0,
            //  left
            left    : 0,
            //  default width
            width : 250,
            //  default height
            height : 21,
            //  开启服务端验证
            validateOnServer:false,
            //  是否在控件的值发生改变的时候就触发验证
            validateOnChange:false,
            //  文本占位符
            placeholder: '请输入...',
            //  验证码的服务端验证地址
            //  ，默认和dataSource里面配置的url一样
            validationUrl : '',
            //  控件进行验证的时候，要提交到验证服务器的url query parameter key
            queryKey : 'verify',
            //  下拉菜单选项的数据源，可以是URL地址或者是一个javascript数组对象作为数据源
            //  dataSource : []
            //  dataSource : { url ,data:{} || function(){ return {}; } }
            dataSource : ''
        }

    });

})( jQuery,ebaui );

/**
 *  ebaui控件的代码模板，定义了控件需要实现的虚方法，防止控件重定义虚方法虚属性，提高控件开发速度
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    //  import packages
    ebaui.web.registerControl( 'RadioButtonList',true );

    /** 
     *  ebaui.web.RadioButtonList
     *  ，本地数据源DEMO请参考{@tutorial radiobuttonlist_index}
     *  ，远程数据源DEMO请参考{@tutorial radiobuttonlist_remoteDataSource}
     *  @class      RadioButtonList 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.CheckboxList
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.RadioButtonList',ebaui.web.CheckboxList, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof    ebaui.web.RadioButtonList
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-radiobuttonlist',

        /**
         *  显示checkbox列表
         *  @private
         *  @instance
         *  @memberof    ebaui.web.RadioButtonList
         *  @method     _renderListItem
         */
        _renderListItem:function () {

            var me = this;
            var dataItems = me._dataItems;
            if( !dataItems || dataItems.length == 0 ){ return ; }

            var html = me._compiledListItemTmpl({
                
                'name'      : me.name(),
                'controlID' : me.controlID(),
                'textField' : me.textField(),
                'valueField': me.valueField(),
                'dataItems' : dataItems

            });

            $( 'tr',me._$root ).html( html );

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof    ebaui.web.RadioButtonList
         *  @method     _render
         */
        _render : function(){

            var self = this;
            //  
            self._super();
            //  load data then render checkboxlist
            self._loadData( function(){

                //  首次输出UI界面的时候，应该检查初始值，看看是否有设置已经选中的项目
                //  如果有，那么应该在初始化的时候，自动勾选
                self._renderListItem();
                var checkedVal = self.options['value'];
                if( checkedVal ){

                    var $radio = $( 'input[value="' + checkedVal +'"]',this._$root );
                    if( $radio.size() > 0 ){
                        $radio.get(0).checked = true;
                    }
                    
                }

            } );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof    ebaui.web.RadioButtonList
         *  @method     _initControl
         */
        _initControl : function(){

            var me = this;
            //  ensure control name != ''
            if( !me.name() ){
                me.options['name'] = me.controlName() + me.controlID();
            }

            var checkboxItemTmpl = $.trim( $( '#ebaui-template-radiobuttonlist-item' ).html() );
            me._compiledListItemTmpl = me.compileTmpl( checkboxItemTmpl );
            me._usingRemoteData = me.isUsingRemoteData( me.options['dataSource'] );

        },

        /**
         *  获取或者设置RadioButtonList的选中项
         *  ，参数格式示例：[{ text : '',value : '' }]
         *  @public
         *  @instance
         *  @memberof    ebaui.web.RadioButtonList
         *  @member     {Number}        data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( 2 );
         */
        data: function( val ){

            var me = this;
            if( !me.isArray( val ) ){

                var toRet      = null;
                var ctrlVal    = me.value();
                var dataItems  = me._dataItems;
                var valueField = me.valueField();
                var textField  = me.textField();

                for (var j = 0,max=dataItems.length; j < max; j++) {
                    var dataItem = dataItems[j];
                    if( dataItem[valueField] == ctrlVal ){
                        toRet = dataItem;
                    }
                }

                return toRet;
                
            }

            //  update checkboxes's value
            me.value( val );
        },

        /**
         *  获取或者设置RadioButtonList的选中项
         *  @public
         *  @instance
         *  @memberof    ebaui.web.RadioButtonList
         *  @member     {Number}     value
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         *  @example    <caption>set</caption>
         *      ctrl.value( 2 );
         */
        value : function( val ){

            var me = this;
            //  get value
            if( !me.isNumber( val ) ){
                var checkedItem = null;

                $( 'input:checked',me._$root ).each(function( idx,el ){
                    checkedItem = $( el ).val();
                });

                return checkedItem;
            }

            //  update checkboxes checked property
            var selector = 'input[value="]' + val + '"]';
            var $radio = $( selector,me._$root );
            if( $radio.size() > 0 ){
                $radio.get(0).checked=true;
            }

            //  trigger onchange event
            me.options['onchange']( me,{} );

        }

    });

})( jQuery,ebaui );
/**
 *  ebaui控件的代码模板，定义了控件需要实现的虚方法，防止控件重定义虚方法虚属性，提高控件开发速度
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerFormControl( 'Hidden',true );

    /** 
     *  ebaui.web.Hidden
     *  控件描述
     *  @class      Hidden 
     *  @memberof   ebaui.web
     *  @extends    ebaui.web.FormElement
     *  @tutorial   hidden_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *      &lt;input id="hidden1" name="hidden1" data-role="hidden" value="" /&gt;
     */
    ebaui.control( 'web.Hidden',ebaui.web.FormElement, {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof   Control
         *  @member     {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-hidden',

        /**
         *  获取或者设置控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Hidden
         *  @member     {Object}     value
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         */
        _accessValue:function( val ){
            if( !val ){ 
                return this.options['value']; 
            }
            this.options['value'] = val;
        },

        /**
         *  获取或者设置控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Hidden
         *  @member     {Object}        data
         *  @example    <caption>get</caption>
         *      var pair = ctrl.data();
         *  @example    <caption>set</caption>
         *      ctrl.data( {} );
         */
        data: function( val ){ return this._accessValue( val ); },

        /**
         *  获取或者设置控件值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Hidden
         *  @member     {Object}     value
         *  @example    <caption>get</caption>
         *      var pair = ctrl.value();
         */
        value : function( val ){ return this._accessValue( val ); },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Hidden
         *  @member     {Object}    options
         */
        options : {
            width : 0,
            height: 0,

            value : null
        }

    });

})( jQuery,ebaui );
/**
 *  定义了ebaui.web.Form
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerControl( 'Form',false );

    /** 
     *  ebaui.web.Form
     *  能批量对多个控件进行赋值、取值、重置、验证、获取错误信息等，节省大量针对单独控件的操作代码。<br />
     *  @class      Form 
     *  @memberof   ebaui.web
     *  @tutorial   form_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.Form', {

        /**
         *  所有form表单控件类。在form控件初始化的时候，会自动加载当前DOM上下文中的这个集合内的控件到作为表单的一个字段
         *  @private
         *  @readonly
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {Array}     _formelements
         */
        _formelements : function(){
            return ebaui.web.formControls;
        },

        /**
         *  表单是否通过验证
         *  @private
         *  @instance
         *  @memberof ebaui.web.Form
         *  @member {Boolean}   _isValid
         */
        _isValid  : true,

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof ebaui.web.Form
         *  @member {Object}    options
         */
        options : {

            fields       : [],

            action       : '',
            name         : '',
            method       : '',
            acceptCharset: '',
            enctype      : ''

        },

        /**
         *  遍历form控件内所有的表单控件
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     _forEach
         *  @param      {Function}  iterator - 迭代器
         */
        _forEach:function( iterator ){

            var fields = this.fields();
            for( var i = 0,l = fields.length;i<l;i++ ){
                iterator( fields[i] );
            }

        },

        /**
         *  更新UI显示
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     _render
         */
        _render : function(){

            if( this.visible() ){
                this._$root.show();
            }else{
                this._$root.hide();
            }

        },

        /**
         *  把HTML占位符转换成为控件自身的HTML结构
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     _parseUi
         *  @param      {Object}    element HTML占位符
         */
        _parseUi : function( element ){
            return $( element );
        },

        /**
         *  获取w3c中，html标签本身就支持的属性配置<br />
         *  ebaui框架中，html标签本身就支持的属性直接编写在html标签内，而不会放在data-option里面进行配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     _parseAttrOptions
         *  @param      {Object}    element HTML占位符
         */
        _parseAttrOptions : function( element ){

            var $el               = $( element );
            var options           = {};
            options.fields        = [];
            
            //  about submition
            options.action        = $el.attr('action') || '';
            options.name          = $el.attr('name') || 'ebaui-form';
            options.method        = $el.attr('method') || 'GET';
            options.acceptCharset = $el.attr('accept-charset') || '';
            options.enctype       = $el.attr('enctype') || 'application/x-www-form-urlencoded';

            return options;

        },

        _setupEvents : function(){

            var self    = this,
                $root   = this._$root;

            $root.on( 'keyup',function( event ){

                var $target = $( event.target ).parents( '[data-ns="ebaui.web"]',$root ).eq(0);
                var ctrl    = ebaui.get( $target );
                var isEnter = event.which == ebaui.keycodes.enter;

                if( ctrl && ctrl.focusable() && ctrl.enterAsTab() && isEnter ){
                    var next = ctrl.__nextTab__;
                    if( next ){ next.focused( true ); }
                }

            } );

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     _initControl
         */
        _initControl : function(){

            //  get fields
            var me       = this;
            var formId   = me.id();
            var controls = me._formelements();

            if( formId ){
                me._$root.attr( 'id',formId );
            }

            function onenter( sender,event ) {
                var next = sender.__nextTab__;
                if( next ){ next.focused( true ); }
            };

            var $doms = $( '[data-ns="ebaui.web"]',me._$root );
            var len   = $doms.size();

            $doms.each(function( index,el ){

                var m = ebaui.get( el );
                if( m && m.data ){
                    me.options['fields'].push( m );
                    //  设置当前控件的按下tab之后的下一个要聚焦的控件
                    for (var j = index + 1; j < len; j++) {

                        var next = ebaui.get( $doms.eq( j ) );
                        if( next && next.focusable() ){
                            m.__nextTab__ = next;
                            break;
                        }

                    };
                }

            });

        },

        /**
         *  获取或者设置表单名字
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {String}    name
         *  @example    <caption>get</caption>
         *      var name = form.name();
         *  @example    <caption>set</caption>
         *      form.name( yourformName );
         */
        name : function( val ){
            var me = this;
            if( me.isEmpty( val ) ){ return me.options['name']; }
            me.options['name'] = val;
        },

        /**
         *  获取form表单内的控件集合
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {Array}     fields
         *  @example    <caption>get</caption>
         *      // get controls of a form instance
         *      var controls = form.fields();
         */
        fields  : function(){
            return this.options['fields'];
        },

        /**
         *  获取form表单内的控件集合
         *  @public
         *  @readonly
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {Array}     elements
         *  @example    <caption>get</caption>
         *      // get controls of a form instance
         *      var controls = form.elements();
         */
        elements:function(){ return this.options['fields']; },

        /**
         *  获取或者设置form表单数据，支持使用JSON字符串
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {Object}    data
         *  @tutorial   form_data
         *  @example    <caption>get</caption>
         *      // 获取form表单数据
         *      var data = form.data();
         *  @example    <caption>set</caption>
         *      // 设置form表单数据
         *      form.data({ name : 'hou',password : '123' });
         */
        data    : function( data ){

            if( !data ){

                //  get data
                var formData = {};
                this._forEach( function( field ){

                    if( !field['data'] ){
                        return;
                    }

                    var name       = field.name();
                    var data        = field.data();
                    formData[name] = data;

                } );

                return formData;

            }else{

                //  set data
                var formData = data;
                if( me.isString( data ) ){
                    //  JSON string
                    formData = ebaui.fromJSON( data );
                }

                this._forEach( function( field ){
                    var name  = field.name();
                    var fieldData = formData[name];
                    if( fieldData ){
                        field.data( fieldData );
                    }
                } );

            }

        },

        /**
         *  获取或者设置表单的各个控件的值
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {Object}    value
         *  @tutorial   form_data
         *  @example    <caption>get</caption>
         *      // 获取form表单数据
         *      var value = form.value();
         *  @example    <caption>set</caption>
         *      // 设置form表单数据
         *      form.value({ name : 'hou',password : '123' });
         */
        value:function( formValue ){

            if( !formValue ){

                //  get data
                var formVal = {};
                this._forEach( function( field ){

                    if( !field['value'] ){
                        return;
                    }

                    var name = field.name();
                    if( !name ){ return; }

                    var val = field.value();
                    if( !field['checked'] ){
                        formVal[name] = val;
                        return;
                    }

                    if( field['checked'] && field['checked']() ){
                        formVal[name] = val;
                        return;
                    }

                } );

                return formVal;

            }else{

                if( me.isString( formValue ) ){
                    //  JSON string
                    formValue = ebaui.fromJSON( formValue );
                }

                this._forEach( function( field ){
                    var name = field.name();
                    var val  = formValue[name];
                    if( val ){
                        field.value( val );
                    }
                } );

            }

        },

        /**
         *  获取或者设置表单数据提交地址
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {String}    action
         *  @example    <caption>get</caption>
         *      var action = form.action();
         *  @example    <caption>set</caption>
         *      form.action( url );
         */
        action:function( val ){

            var me = this;
            if( me.isString( val ) && $.trim( val ) != '' ){
                me.options['action'] = val;
            }else{
                return me.options['action'];
            }

        },

        /**
         *  获取或者设置表单数据提交方法，可能的值为："GET"或者"POST"
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {String}    method
         *  @example    <caption>get</caption>
         *      var action = form.method();
         *  @example    <caption>set</caption>
         *      form.method( method );
         */
        method : function( val ){

            var me = this;
            if( me.isString( val ) && $.trim( val ) != '' ){
                me.options['method'] = val.toUpperCase();
            }else{
                return me.options['method'];
            }

        },

        /**
         *  <pre>
         *  服务器处理表单数据所接受的字符集。
         *  常用的字符集有：
         *      UTF-8 - Unicode 字符编码
         *      ISO-8859-1 - 拉丁字母表的字符编码
         *  </pre>
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {String}    acceptCharset
         *  @example    <caption>get</caption>
         *      var charset = form.acceptCharset();
         *  @example    <caption>set</caption>
         *      form.acceptCharset( charset );
         */
        acceptCharset : function( val ){

            var me = this;
            if( me.isString( val ) && $.trim( val ) != '' ){
                me.options['acceptCharset'] = val;
            }else{
                return me.options['acceptCharset'];
            }
            
        },

        /**
         *  <pre>
         *  规定表单数据在发送到服务器之前应该如何编码
         *  常用的值有：
         *  
         *  application/x-www-form-urlencoded
         *      在发送前编码所有字符（默认
         *  multipart/form-data 
         *      不对字符编码。
         *      在使用包含文件上传控件的表单时，必须使用该值。
         *  text/plain  
         *      空格转换为 "+" 加号，但不对特殊字符编码。
         *  </pre>
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @member     {String}    enctype
         *  @example    <caption>get</caption>
         *      var enctype = form.enctype();
         *  @example    <caption>set</caption>
         *      form.enctype( MIME_type );
         */
        enctype : function( val ){

            var me = this;
            if( me.isString( val ) && $.trim( val ) != '' ){
                me.options['enctype'] = val;
            }else{
                return me.options['enctype'];
            }

        },

        /**
         *  验证表单
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     validate
         *  @tutorial   form_data
         *  @return     {Boolean}
         */
        validate: function(){

            var fields = this.fields();
            if( fields.length == 0 ){ return true; }

            var l = fields.length,isValid = false;
            isValid = fields[0].validate();

            if( l > 1 ){

                for( var i = 1 ;i < l; i++ ){
                    //var field = fields[i];
                    //var isFieldValid = field.validate();
                    isValid = ( fields[i].validate() ) && isValid;
                }

            }

            this._isValid = isValid;
            return isValid;

        },

        /**
         *  重置表单
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     reset
         *  @tutorial   form_data
         *  @example
         *      form.reset();
         */
        reset   : function(){
            this._forEach( function( field ){
                if( field['reset'] ){
                    field.reset();
                }
            } );
        },

        /**
         *  提交表单
         *  @public
         *  @instance
         *  @memberof   ebaui.web.Form
         *  @method     submit
         *  @tutorial   form_submit
         *  @param      {Object}    [settings]              -   更详细的文档，请参考{@link http://api.jquery.com/jQuery.ajax/|jQuery.ajax()}
         *  @prop       {Object}    settings.data           -   要提交到服务器的额外的数据
         *  @prop       {String}    settings.dataType       -   服务端响应的数据格式，默认是自动判断(xml, json, script, or html)
         *  @prop       {Function}  settings.success        -   表单提交成功后的回调函数
         *  @prop       {Function}  settings.error          -   表单提交失败的回调函数
         *  @prop       {Function}  settings.beforeSend     -   表单提交之前触发的回调函数
         *  @prop       {Function}  settings.complete       -   无论表单是否提交成功，总是触发这个回调函数
         */
        submit:function( settings ){

            var me       = this;
            var action   = me.action();
            var isGET    = me.method() === 'GET';
            var toSubmit = me.value();

            //  data,dataType,success
            if( settings && settings.data ){
                toSubmit = $.extend( toSubmit,settings.data );
                delete settings.data;
            }

            var method = isGET ? 'GET' : 'POST';
            var ajaxConf = $.extend({
                type: method,
                url : action,
                data: toSubmit
            }, settings);

            $.ajax(ajaxConf);

        }

    } );

    /**
     *  获取ebaui.web.Form对象实例
     *  @public
     *  @static
     *  @memberof   ebaui.web
     *  @method     getForm
     *  @param      {String}    selector    -   表单的CSS选择器
     *  @param      {String}    [context]   -   上下文对象
     *  @return     form对象实例
     */
    ebaui.web.getForm = function( selector,context ){

        var $dom = $( selector,context );

        if( $dom.data('model') ){
            return $dom.data( 'model' );
        }

        $dom.form();
        return $dom.data( 'model' );

    };

})( jQuery,ebaui );
/**
 *  
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerControl( 'Panel' );

    /** 
     *  控件全名 e.g. ebaui.web.Panel
     *  控件描述
     *  @class      Panel 
     *  @memberof   ebaui.web
     *  @extends    Control
     *  @tutorial   DEMO页
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.Panel', {

        /**
         *  把HTML占位符转换成为控件自身的HTML结构
         *  ，在这一个过程中，会使用style="width:XXpx;height:XXpx;"的初始化控件本身的width以及height属性
         *  @private
         *  @virtual
         *  @instance
         *  @memberof   ebaui.web.Panel
         *  @method     _parseUi
         *  @param      {Object}    element HTML占位符
         */
        _parseUi : function( element ){ return $( element ); },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Panel
         *  @method         _initControl
         */
        _initControl : function(){
            var me = this;
            var id = me.id();
            if( id ){ me._$root.attr( 'id', id ); }
        },

        /**
         *  显示或者关闭panel
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Panel
         *  @method         toggle
         */
        toggle:function(){
            var me = this;
            var isVisible = me.visible();
            me.visible( !isVisible );
        },

        /**
         *  显示panel
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Panel
         *  @method         open
         */
        open:function(){
            this.visible( true );
        },

        /**
         *  关闭panel
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Panel
         *  @method         close
         */
        close:function(){
            this.visible( false );
        },

        /**
         *  移动panel
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Panel
         *  @method         move
         *  @arg            {Object}    pos - new position { top left }
         */
        move:function( pos ){

            if( !pos ){ return; }

            var me = this;
            var opts = me.options;

            if( pos['top'] !== null ){
                opts['top'] = pos['top'];
            }

            if( pos['left'] !== null ){
                opts['left'] = pos['left'];
            }

            me._$root.css({
                'top' : opts['top'],
                'left': opts['left']
            });

        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Panel
         *  @member         {Object}    options
         */
        options : {
            // css position property
            position   : 'relative',
            //  panel's init width
            width   : 0,
            //  panel's init height
            height  : 0
        }

    });

})( jQuery,ebaui );
/**
 *  ebaui.uilayout组件
 *  @file _mapToDefaultSection
 *  @dependencies
 *      jquery-ui           http://jqueryui.com/
 *
 *          ui.core.js
 *          ui.draggable.js     – to enable resizing capability
 *          effects.core        – for open/close animation effects
 *          effects.slide.js    – for 'slide' effect
 *          effects.drop.js     – for 'drop' effect
 *          effects.scale.js    – for 'scale' effect
 *
 *      jquery UI Layout    http://layout.jquery-dev.net/index.cfm
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    ebaui.web.registerControl( 'UiLayout' );

    /** 
     *  ebaui.web.UiLayout
     *  ，相应的DEMO请查看/build/demo/layout_index.html这个文件
     *  ，自动化生成的DOC会有JS异常
     *  @class      UiLayout 
     *  @memberof   ebaui.web
     *  @extends    Control
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     *  @example
     *          <body data-role="uilayout">
     *              <div data-role="layout-east"></div>
     *              <div data-role="layout-west"></div>
     *              <div data-role="layout-north"></div>
     *              <div data-role="layout-south"></div>
     *              <div data-role="layout-center"></div>
     *          </body>
     */
    ebaui.control( 'web.UiLayout', {

        /**
         *  jQuery UI Layout插件实例
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @member     {Object}     _layoutPlugin
         */
        _layoutPlugin:null,

        /**
         *  配置名映射规则
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @member     {Object}     _mapRules
         */
        _mapRules:{

            fx:{
                name : 'fxName',
                open : 'fxSettings_open',
                close: 'fxSettings_close'
            },

            button:{
                cls : 'buttonClass'
            },

            content:{
                ignoreSelector: 'contentIgnoreSelector',
                selector      : 'contentSelector'
            },

            toggler:{
                hideOnSlide : 'hideTogglerOnSlide',
                open :{ 
                    tip   : 'togglerTip_open',
                    length: 'togglerLength_open',
                    align : 'togglerAlign_open' 
                },
                close:{ 
                    tip   : 'togglerTip_closed',
                    length: 'togglerLength_closed',
                    align : 'togglerAlign_closed' 
                }
            },

            spacing:{
                open : 'spacing_open',
                close: 'spacing_closed'
            }

        },

        /**
         *  rulenames 指定需要重命名的属性集
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _doRealMap
         *  @param      {String}    target      -   north/south/west/east/center
         *  @param      {Array}     rulenames  -    要进行映射的配置节
         *  @param      {Object}    origin      -   原始配置对象
         *  @return     {Object}
         */
        _doRealMap : function ( target,rulenames,origin ) {

            var me = this;
            var config = {};
            var dest = {};

            for (var i = 0,l = rulenames.length; i < l; i++) {
                var name = rulenames[i];
                var rules = me._mapRules[name];

                //  name应该是fx或者toggler等
                //  判断原配置对象是否有配置对应的值
                if( origin[name] ){

                    //  对配置对象的每个属性进行映射
                    for( var rule in rules ){

                        var hasValForRule = ( origin[name][rule] !== null || origin[name][rule] !== undefined );
                        if( !me.isString( rules[rule] ) && hasValForRule ){

                            /*  
                             *  主要这边是有三级的配置对象。
                             *  确实，配置对象的深度过大也是很头疼的问题。
                             *  然后把最深处的配置对象扁平化，成为只包含一级的配置对象
                             *  _mapRules:{
                             *      toggler:{
                             *          hideOnSlide : 'hideTogglerOnSlide',
                             *          open :{ 
                             *              tip: 'togglerTip_open',
                             *              length: 'togglerLength_open',
                             *              align:'togglerAlign_open' 
                             *          }
                             *      }
                             *  }
                             */
                            var subrules = rules[rule];
                            for( var key in subrules ){
                                dest[subrules[key]] = origin[name][rule][key];
                            }

                        }else if( hasValForRule ){
                            //  save property and value
                            dest[rules[rule]] = origin[name][rule];
                        }

                    }

                    delete origin[name];
                }

            }

            $.extend( dest,origin );

            config[target] = dest;

            return config;
        },

        /**
         *  映射ui layout的整体默认配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _mapToDefaultSection
         *  @return     {Object}
         */
        _mapToDefaultSection:function( settings ){

            /*
             *  about the applyDefaultStyles cconfig
             *  When applyDefaultStyles is enabled, the layout will apply basic styles directly to resizers & buttons. This is intended for quick mock-ups, so that you can 'see' your layout immediately.
             *  to read more, @see http://layout.jquery-dev.net/documentation.cfm#Option_applyDefaultStyles
             */
            var config = {
                name              : 'defaults',
                applyDefaultStyles: false,
                defaults: {
                    size   :  "auto",
                    minSize:  50
                }
            };

            //  指定需要重命名的属性集
            var rulenames = [
                'fx',
                'button',
                'content'
            ];

            for (var i = 0,l = rulenames.length; i < l; i++) {

                var name = rulenames[i];
                var rules = this._mapRules[name];

                for( var rule in rules ){

                    if( settings[name] ){
                        //  propertye name after mapping
                        var mapedProp = rules[rule];
                        //  property value
                        var propVal   = settings[name][rule];
                        //  save property and value
                        config['defaults'][mapedProp] = propVal;
                    }

                }

            };

            if( settings['panes'] && settings['panes']['cls'] ){
                config['defaults']['paneClass'] = settings['panes']['cls'];
            }

            return config;
        },

        /**
         *  映射ui layout的主题内容pane的配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _mapToDefaultSection
         *  @return     {Object}
         */
        _mapToCenterSection:function( settings ){

            if( !settings['panes'] || !settings['panes']['center'] ){
                return {};
            }
            
            var config = { center : {} };
            var before = settings['panes']['center'];
            for( var item in before ){
                if( item != 'toggler' ){
                    config['center'][item] = before[item];
                }
            }

            return config;
        },

        /**
         *  映射ui layout的east pane的配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _mapToEastSection
         *  @return     {Object}
         */
        _mapToEastSection:function( settings ){
            if( !settings['panes'] || !settings['panes']['east'] ){
                return {};
            }
            return this._doRealMap( 'east',['fx','toggler','spacing'],settings['panes']['east'] );
        },

        /**
         *  映射ui layout的west pane的配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _mapToWestSection
         *  @return     {Object}
         */
        _mapToWestSection:function( settings ){
            if( !settings['panes'] || !settings['panes']['west'] ){
                return {};
            }
            return this._doRealMap( 'west',['fx','toggler','spacing'],settings['panes']['west'] );
        },

        /**
         *  映射ui layout的north pane的配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _mapToNorthSection
         *  @return     {Object}
         */
        _mapToNorthSection:function( settings ){
            if( !settings['panes'] || !settings['panes']['north'] ){
                return {};
            }

            return this._doRealMap( 'north',['fx','toggler','spacing'],settings['panes']['north'] );
        },

        /**
         *  映射ui layout的south pane的配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _mapToSouthSection
         *  @return     {Object}
         */
        _mapToSouthSection:function( settings ){
            if( !settings['panes'] || !settings['panes']['south'] ){
                return {};
            }
            return this._doRealMap( 'south',['fx','toggler','spacing'],settings['panes']['south'] );
        },

        /**
         *  把ebaui.web.UiLayout自定义的JS配置类格式，转换成为jqUILayout插件所使用的JS配置格式
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _map
         *  @return     {Object}
         */
        _map:function( settings ){

            var me = this;
            var defaults = me._mapToDefaultSection( settings );
            var north    = me._mapToNorthSection( settings );
            var south    = me._mapToSouthSection( settings );
            var west     = me._mapToWestSection( settings );
            var east     = me._mapToEastSection( settings );
            var center   = me._mapToCenterSection( settings );

            var uiLayoutConfig = $.extend( {},defaults,north,south,west,east,center );

            return uiLayoutConfig;
        },

        _getPanesConf : function(){

            var self        = this;
            var $root       = self._$root;
            var defualts    = self.options['layout']['panes'];
            var $westPane   = $( '[data-role="layout-west"]',$root );
            var $eastPane   = $( '[data-role="layout-east"]',$root );
            var $northPane  = $( '[data-role="layout-north"]',$root );
            var $southPane  = $( '[data-role="layout-south"]',$root );
            var $centerPane = $( '[data-role="layout-center"]',$root );

            if( $westPane.size() > 0 ){
                var westPaneConf = self._parseDataOptions( $westPane );
                $.extend(defualts['west'],westPaneConf);
            }

            if( $eastPane.size() > 0 ){
                var eastPaneConf = self._parseDataOptions( $eastPane );
                $.extend(defualts['east'],eastPaneConf);
            }

            if( $northPane.size() > 0 ){
                var northPaneConf = self._parseDataOptions( $northPane );
                $.extend(defualts['north'],northPaneConf);
            }

            if( $southPane.size() > 0 ){
                var southPaneConf = self._parseDataOptions( $southPane );
                $.extend(defualts['south'],southPaneConf);
            }

            if( $centerPane.size() > 0 ){
                var centerPaneConf = self._parseDataOptions( $centerPane );
                $.extend(defualts['center'],centerPaneConf);
            }

            return defualts;
        },

        /**
         *  把HTML占位符转换成为控件自身的HTML结构
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _parseUi
         */
        _parseUi : function( element ){ return $( element ); },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     _initControl
         */
        _initControl : function(){

            //  get plugin config then init layout plugin
            var panesConfig   = this._getPanesConf();
            var config = $.extend(this.options['layout']['panes'], panesConfig);
            var layoutConfig = this._map( this.options['layout'] );

            this._layoutPlugin = this._$root.layout( layoutConfig ); 

        },

        /**
         *  A hash containing the dimensions of all the elements, including the layout container. Dimensions include borders and padding for: top, bottom, left, right, plus outerWidth, outerHeight, innerWidth, innerHeight.
         *  <br />获取当前uilayout的状态，包含uilayout容器的innerWidth，paddingLeft
         *  ，以及所有panes的top， bottom， left， right，outerWidth， outerHeight， innerWidth， innerHeight
         *  ，参数可选的值有container north east south west center
         *  ，默认返回uilayout所有的状态
         *  @public
         *  @instance
         *  @memberof       ebaui.web.UiLayout
         *  @member         {Object}    state
         */
        state : function( pane ){
            if( this._layoutPlugin ){

                if( /north|east|south|west|center|container/i.test( pane ) ){
                    return this._layoutPlugin.state[pane];
                }else{
                    return this._layoutPlugin.state;
                }

            }
        },

        /**
         *  pane objects( panes.north, panes.south, etc ).Each pane-element is in a jQuery wrapper.If a pane does not exist in the layout - for example no south-pane - then panes.south == false - instead of being a jQuery element.
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @member     {Object}     panes
         */
        panes : function(){

            if( this._layoutPlugin ){
                return this._layoutPlugin.panes;
            }

        },

        /**
         *  get pane object
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     getPane
         *  @param      {String}    pane  -  north/south/west/east/center
         */
        getPane : function( pane ){

            if( this._layoutPlugin ){
                if( /north|east|south|west|center/i.test( pane ) ){
                    return this._layoutPlugin.panes[pane];
                }
            }

        },

        /**
         *  显示或者隐藏指定区域
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     togglePane
         *  @param      {String}    pane  -  north/south/west/east/center
         */
        togglePane:function( pane ){

            var me = this;
            if( !me.isString( pane ) ){
                return ;
            }

            if( me._layoutPlugin ){
                return me._layoutPlugin.toggle( pane );
            }

        },

        /**
         *  展开指定区域
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     openPane
         *  @param      {String}    pane  -  north/south/west/east/center
         */
        openPane:function( pane ){

            var me = this;
            if( !me.isString( pane ) ){
                return ;
            }

            if( me._layoutPlugin ){
                return me._layoutPlugin.open( pane );
            }

        },

        /**
         *  缩起指定区域
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     closePane
         *  @param      {String}    pane  -  north/south/west/east/center
         */
        closePane:function( pane ){

            var me = this;
            if( !me.isString( pane ) ){
                return ;
            }

            if( me._layoutPlugin ){
                return me._layoutPlugin.close( pane );
            }
        },

        /**
         *  显示指定区域
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     showPane
         *  @param      {String}    pane  -  north/south/west/east/center
         */
        showPane:function( pane ){

            var me = this;
            if( !me.isString( pane ) ){
                return ;
            }

            if( me._layoutPlugin ){
                return me._layoutPlugin.show( pane );
            }
        },

        /**
         *  隐藏指定区域
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     hidePane
         *  @param      {String}    pane  -  north/south/west/east/center
         */
        hidePane:function( pane ){

            var me = this;
            if( !me.isString( pane ) ){
                return ;
            }

            if( me._layoutPlugin ){
                return me._layoutPlugin.hide( pane );
            }
        },

        /**
         *  对于north 和 south 这两个pane更新其outerHeight
         *  ，对于east 和 west 则更新outerWidth
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     sizePane
         *  @param      {String}    pane            -  north/south/west/east/center
         *  @param      {Number}    sizeInPixels    -  sizeInPixels
         */
        sizePane : function( pane, sizeInPixels ){

            var me = this;
            if( me._layoutPlugin ){

                if( /north|east|south|west|center/i.test( pane ) ){
                    return me._layoutPlugin.sizePane( pane,sizeInPixels );
                }

            }

        },

        /**
         *  重新调整所有的pane，以便所有的pane能够适应容器元素的大小
         *  @public
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @method     resizeAllPanes
         *  @param      {String}    pane  -  north/south/west/east/center
         */
        resizeAllPanes:function(){
            var me = this;
            if( me._layoutPlugin ){
                return me._layoutPlugin.resizeAll();
            }
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.UiLayout
         *  @member     {Object}    options
         */
        options : {

            //  默认配置
            layout:{

                    size                  : "auto"
                ,   minSize               : 0
                ,   maxSize               : 0

                /*
                 *  spacing的配置
                 *  参考文档：http://layout.jquery-dev.net/documentation.cfm#Option_paneSelector
                 *  
                 *  HTML结构：
                 *  pane
                 *      ->  spacing
                 *          ->  toggler
                 */

                /*
                 *  toggler的配置
                 *  关于toggler的更多信息，请参考文档：http://layout.jquery-dev.net/documentation.cfm#toggler
                 *
                 *  map to the following config 
                 *
                 *  togglerClass:           "toggler"   // default = 'ui-layout-toggler'
                 *  togglerLength_open:     35          // WIDTH of toggler on north/south edges - HEIGHT on east/west edges
                 *  togglerLength_closed:   35          // "100%" OR -1 = full height
                 *  togglerTip_open:        "Close This Pane"
                 *  togglerTip_closed:      "Open This Pane"
                 *  hideTogglerOnSlide:     true        // hide the toggler when pane is 'slid open'
                 *  togglerAlign_open:      "center"
                 *  togglerAlign_closed:    "center"
                 *      "left", "center", "right", "top", "middle", "bottom"
                 */

                /*
                 *  panes的配置
                 *  关于content的更多信息，请参考文档：
                 *      http://layout.jquery-dev.net/documentation.cfm#Option_paneSelector
                 *      http://layout.jquery-dev.net/documentation.cfm#Panes
                 *      http://layout.jquery-dev.net/documentation.cfm#Callback_Functions
                 *      http://layout.jquery-dev.net/documentation.cfm#Option_paneSelector
                 *
                 *  map to the following config 
                 *
                 *  paneClass:              "ui-layout-pane"      // default = 'ui-layout-pane'
                 *  paneSelector: ".ui-layout-PANE"
                 *  
                 *  $(document).ready(function() {
                 *     $("body").layout({
                 *        // using custom 'ID' paneSelectors
                 *        north__paneSelector:  "#north"
                 *     ,  west__paneSelector:   "#west"
                 *     ,  center__paneSelector: "#center"
                 *     });   
                 *  });
                 */
                ,   panes : {

                    cls      : 'ui-layout-pane',
                    west     : {

                        size        : 'auto',
                        initClosed  : false,
                        closable    : true,
                        slidable    : true,
                        resizable   : true,
                        paneSelector: '[data-role="layout-west"]',
                        spacing     :{ open : 5,close : 5 },
                        toggler       : { 
                            cls  : 'ui-layout-toggler',
                            hideOnSlide:     true,
                            open :{ align:'center',tip: 'Close This Pane',length: 35 }, 
                            close :{ align:'center',tip: 'Open This Pane',length: 35 } 
                        }

                    },
                    east     : {

                        size        : 'auto',
                        initClosed  : false,
                        closable    : true,
                        slidable    : true,
                        resizable   : true,
                        paneSelector: '[data-role="layout-east"]',
                        spacing     :{ open : 5,close : 5 },
                        toggler       : { 
                            cls  : 'ui-layout-toggler',
                            hideOnSlide:     true,
                            open :{ align:'center',tip: 'Close This Pane',length: 35 }, 
                            close :{ align:'center',tip: 'Open This Pane',length: 35 } 
                        }

                    },
                    north    : {

                        size        : 'auto',
                        initClosed    : false,
                        closable      : true,
                        slidable      : true,
                        resizable     : true,
                        paneSelector  : '[data-role="layout-north"]',
                        spacing:{ open : 5,close : 5 },
                        toggler       : { 
                            cls  : 'ui-layout-toggler',
                            hideOnSlide:     true,
                            open :{ align:'center',tip: 'Close This Pane',length: 35 }, 
                            close :{ align:'center',tip: 'Open This Pane',length: 35 } 
                        }

                    },
                    south    : {

                        size        : 'auto',
                        initClosed  : false,
                        closable    : true,
                        slidable    : true,
                        resizable   : true,
                        paneSelector: '[data-role="layout-south"]',
                        spacing     :{ open : 5,close : 5 },
                        toggler       : {  
                            cls  : 'ui-layout-toggler',
                            hideOnSlide:     true,
                            open :{ align:'center',tip: 'Close This Pane',length: 35 }, 
                            close :{ align:'center',tip: 'Open This Pane',length: 35 } 
                        }

                    },
                    center   : { 
                        initClosed  : false,
                        closable    : true,
                        slidable    : true,
                        resizable   : true,
                        paneSelector: '[data-role="layout-center"]'

                    }

                }

                /*
                 *  content的配置
                 *  关于content的更多信息，请参考文档：http://layout.jquery-dev.net/documentation.cfm#Option_contentSelector
                 *
                 *  map to the following config 
                 *
                 *  contentSelector:        ".content"  // inner div to auto-size so only it scrolls, not the entire pane!
                 *  contentIgnoreSelector:  "span"      // 'paneSelector' for content to 'ignore' when measuring room for content
                 *  
                 */
                ,   content : {
                    // 'paneSelector' for content to 'ignore' when measuring room for content
                    ignoreSelector: 'span',
                    // inner div to auto-size so only it scrolls, not the entire pane!
                    selector      : '[data-role="content"]'
                }

                /*
                 *  custom buttons的配置
                 *  关于toggler的更多信息，请参考文档：http://layout.jquery-dev.net/documentation.cfm#Option_buttonClass
                 *  示例：outerLayout.addToggleBtn( "#tbarToggleNorth", "north" );
                 *
                 *  map to the following config 
                 *
                 *  buttonClass:            "button"    // default = 'ui-layout-button'
                 *  
                 */
                ,   button:{
                    cls : 'ui-layout-button'
                }

                /*
                 *  特效的配置
                 *  
                 *  map to the following config 
                 *
                 *  fxName:                 "slide"     // none, slide, drop, scale
                 *  fxSpeed_open:           400     normal
                 *  fxSpeed_close:          400     normal
                 *  fxSettings_open:        { easing: "easeInQuint" }
                 *  fxSettings_close:       { easing: "easeOutQuint" }
                 *  
                 */
                ,   fx:{
                    name : 'slide',
                    open : { easing: "easeInQuint", duration : 400 },
                    close: { easing: "easeOutQuint", duration : 400 }
                }

                /*
                 *  resizer的配置
                 *  
                 *  map to the following config 
                 *
                 *  resizerClass:           "resizer"   // default = 'ui-layout-resizer'
                 *  resizerTip:             "Resize This Pane"
                 */
                ,   resizer : {
                    cls : 'ui-layout-resizer',
                    tip : 'Resize This Pane'
                }

                ,   paneEvents:{

                    onhide_start  :  $.noop,
                    onhide_end    :  $.noop,
                    
                    onshow_start  :  $.noop,
                    onshow_end    :  $.noop,
                    
                    onopen_start  :  $.noop,
                    onopen_end    :  $.noop,
                    
                    onclose_start :  $.noop,
                    onclose_end   :  $.noop,
                    
                    onresize_start:  $.noop,
                    onresize_end  :  $.noop

                }

            }

        }

    });

})( jQuery,ebaui );
/**
 *  
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ) {

    /** 
     *  Tab
     *  @class      Tab
     *  @param      {Object}    options     -   控件配置参数
     */
    function Tab(options){ this._init( options ); };

    Tab.prototype = {

        /**
         *  控件要用到的UI的CSS样式类
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Object}    _cssClass
         */
        _cssClass : { actived: 'eba-tab-active' },

        /**
         *  dom对象引用
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Object}    _$header
         */
        _$header : null,

        /**
         *  dom对象引用
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Object}    _$header
         */
        _$content : null,

        _headerHtmlTmpl : '#ebaui-template-tabs-header',

        _contentHtmlTmpl : '#ebaui-template-tabs-content',

        /**
         *  预编译的tab项静态模板
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Function}    _compiledHeaderTmpl
         */
        _compiledHeaderTmpl:$.noop,

        /**
         *  预编译的tab项静态模板
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Function}    _compiledContentTmpl
         */
        _compiledContentTmpl:$.noop,

        /**
         *  tab的header dom对象
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Object}    headerDom
         */
        headerDom:function(){
            return this._$header;
        },

        /**
         *  tab的content dom对象
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Object}    contentDom
         */
        contentDom:function(){
            return this._$content;
        },

        _updateStyleTitle:function(){
            var me = this;
            $( '.eba-tab-text',me._$header ).text( me.options['title'] );
        },

        /**
         *  tab的标题
         *  @public
         *  @instance
         *  @memberof       Tab
         *  @member         {String}    title
         */
        title  : function( val ){
            var me = this;
            if( !val ){ return me.options['title']; }
            me.options['title'] = val;
            me._updateStyleTitle();
        },

        /**
         *  tab内容的URL
         *  @public
         *  @instance
         *  @memberof       Tab
         *  @member         {String}    url
         */
        url    : function( val ){
            var me = this;
            if( !val ){ return me.options['url']; }
            me.options['url'] = val;
            me.refresh();
        },

        _updateStyleIcon:function(){
            var me = this;
            var iconCls = me.options['iconCls'];
            var cls = 'eba-tab-icon ';
            if( iconCls ){ cls += iconCls; }
            $( '.eba-tab-icon',me._$header ).attr('class',cls);
        },

        _updateStyleClosable: function () {
            var me        = this;
            var closable  = me.closable();
            var $root     = me.headerDom();
            var $btnClose = $('span',$root).last();

            if( !closable && $btnClose.size() > 0 ){
                $btnClose.remove();
                return;
            }

            if( closable && $btnClose.size() == 0 ){
                $root.append('<span class="eba-tab-close"></span>');
                return;
            }
        },

        /**
         *  获取或者设置tab是否可以关闭
         *  @public
         *  @instance
         *  @memberof       Tab
         *  @member         {String}    closable
         */
        closable :function( val ){
            var me = this;
            if( val == null ){ return me.options['closable']; }
            me.options['closable'] = val;
            me._updateStyleClosable();
        },

        /**
         *  tab的icon
         *  @public
         *  @instance
         *  @memberof       Tab
         *  @member         {String}    iconCls
         */
        iconCls: function( val ){
            var me = this;
            if( !val ){ return currIconCls; }
            me.options['iconCls'] = val;
            me._updateStyleIcon();
        },

        /**
         *  tab是否激活
         *  @public
         *  @instance
         *  @default        false
         *  @memberof       Tab
         *  @member         {Boolean}    isActived
         */
        isActived: function( val ){

            var me = this;
            if( me.isClosed() ){ return; }
            if( typeof val !== 'boolean' ){ return me.options['isActived']; }

            me.options['isActived'] = val;
            if( val ){
                me._$header.addClass('eba-tab-active');
                me._$content.show();
            }else{
                me._$header.removeClass('eba-tab-active');
                me._$content.hide();
            }

        },

        /**
         *  刷新tab页面的内容
         *  ，tab参数如果是一个int对象,那么直接将参数作为索引查找tab
         *  ，tab参数如果是一个string对象，那么默认按照tab的title属性进行查找
         *  ，tab参数如果是一个function对象，那么会在查找的过程中，使用指定的函数作为判等条件
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         refreshTab
         *  @param          {Number|String|Function}        tab
         */
        refresh:function(){
            var me = this;
            if( me.isClosed() ){ return; }

            var timestamp = ( new Date ).getTime();
            var url = me.options['url'];
            url += ( url.indexOf( '?' ) == -1 ) ? ( '?t=' + timestamp ) : ( '&t=' + timestamp );
            $( 'iframe',me._$content ).attr( 'src',url );
        },

        _closed : false,

        isClosed:function(){ return this._closed; },
        /**
         *  关闭选项卡
         *  @public
         *  @instance
         *  @memberof       Tab
         *  @method         close
         */
        close:function(){
            var me = this;
            //  unbind event handlers
            $( 'iframe',me._$content ).off( 'load' );
            //  mark，表示这个tab已经关闭了
            me._closed = true;
            //  remove dom from dom tree
            me._$header.remove();
            me._$content.remove();
            //  release dom reference
            delete me._$header;
            delete me._$content;

        },

        /**
         *  初始化
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @member         {Object}    options
         */
        options : {
            isActived: false,
            iconCls  : '',
            title    : '',
            url      : '',
            closable : true
        },

        /**
         *  初始化
         *  @private
         *  @instance
         *  @memberof       Tab
         *  @method         _init
         */
        _init:function (options) {

            var me = this;
            var opts = $.extend({},me.options,options);

            me.options = opts;

            //  create dom
            var headerTmpl = $( me._headerHtmlTmpl ).html();
            var contentTmpl = $( me._contentHtmlTmpl ).html();

            me._$header = $( headerTmpl );
            me._$content = $( contentTmpl );

            //  init title and iframe src
            me._updateStyleTitle();
            me._updateStyleClosable();
            me._updateStyleIcon();

            me.refresh();
        }

    };

    ebaui.web.registerControl( 'Tabs' );

    /** 
     *  ebaui.web.Tabs
     *  @class      ebaui.web.Tabs 
     *  @memberof   ebaui.web
     *  @extends    基类
     *  @tutorial   tab_index
     *  @param      {Object}    options     -   控件配置参数
     *  @param      {Object}    element     -   dom对象
     */
    ebaui.control( 'web.Tabs', {

        /**
         *  控件HTML模板
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs 
         *  @member         {String}    _rootHtmlTmpl
         */
        _rootHtmlTmpl : '#ebaui-template-tabs',

        /**
         *  预编译的tab项静态模板
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs 
         *  @member         {Function}    _compiledTabTmpl
         */
        _compiledTabTmpl:$.noop,

        /**
         *  初始化DOM事件处理程序
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         _setupEvents
         */
        _setupEvents:function(){

            var self = this;
            var $root = this._$root;

            $root.on( 'click','.eba-tab',function( event ){

                var tabIndex = $( '.eba-tab',$root ).index( this );
                if( tabIndex == -1 ){ return; }
                self.activateTab( tabIndex );

            } );

            $root.on( 'click','.eba-tab-close',function( event ){
                //  close tab
                var tabIndex = $( '.eba-tab',$root ).index( $( this ).parent() );
                if( tabIndex == -1 ){ return; }
                self.closeTab( tabIndex );

            } );

        },

        /**
         *  在tab初始化并且被添加到_tabs集合中的时候，验证tab的初始化配置信息是否正确
         *  ，其中，url是必须指定的参数
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         _validateTabConfig
         *  @param          {Tab}                           opts
         */
        _validateTabConfig:function( opts ){
            if( !opts || !opts['url'] ){ return false; }
            return true;
        },

        /**
         *  初始化homeTab的配置，如果homeTab的配置正确，那么就把homeTab添加到选项卡里
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         _initControl
         */
        _initHomeTab:function(){

            /* 默认添加homeTab */
            var homeTab        = this.options['home'];
            var isHomeTabValid = this._validateTabConfig( homeTab );

            if( isHomeTabValid ){
                homeTab['title']  = ( homeTab['title'] ) ? homeTab['title'] : homeTab['url'];
                this.addTab( homeTab );
            }

        },

        /**
         *  初始化控件，声明内部变量
         *  在初始化控件的时候，控件options对象已经初始化完成，html模板也已经转换完成。
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         _initControl
         */
        _initControl : function(){
            /* contentRegion是必选参数 */
            this._$contentRegion = $( this.options['contentRegion'] );

            /* 如果指定的contentRegion里面没有ul，那么初始化的时候append一个新的ul */
            /* 我们的content的html格式是<li><iframe src=""></iframe></li> */
            var ulSize = $( 'ul',this._$contentRegion ).size();
            if( ulSize == 0 ){
                this._$contentRegion.append('<ul></ul>');
            }

            /* 默认添加homeTab */
            this._initHomeTab();
        },

        /**
         *  私有变量，用来保存所有tab对象
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs 
         *  @member         {Array}         _tabs
         */
        _tabs : [],

        /**
         *  homeTab配置，homeTab是默认首页
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs 
         *  @member         {Object}         _homeTab
         */
        _homeTab : null,

        /**
         *  当前激活的tab选项卡的对应引用
         *  @private
         *  @instance
         *  @memberof       ebaui.web.Tabs 
         *  @member         {Tab}        _currentTab
         */
        _currentTab : null,

        /**
         *  设置或者获取当前激活的tab选项卡对象
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs 
         *  @member         {Tab}                           currentTab
         *  @example        <caption>get</caption>
         *      var tab = console.log( ctrl.currentTab() );
         *  @example        <caption>set</caption>
         *      console.log( ctrl.currentTab( {Number|String|Function} ) );
         */
        currentTab : function ( tab ) {

            var me = this;
            if( tab == null ){ return me._currentTab; }

            var tabInstance = me.getTab( tab );
            if( me._currentTab && !me._currentTab.isClosed() ){
                me._currentTab.isActived( false );
            }else{
                /*
                 *  当前tab已经关闭了，那么就移除其引用
                 */
                me._currentTab = null;
            }

            if( tabInstance ){
                tabInstance.isActived( true );
                me._currentTab = tabInstance;
            }

        },

        /**
         *  添加一个新的选项卡
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         addTab
         *  @param          {Tab}                           tab
         */
        addTab : function( tab ){

            if( !tab ){ return; }

            var me = this;
            var tabIndex = me.indexOf( tab['url'] );
            if( tabIndex == -1 ){

                //  declare tab's index in tabs collection
                tabIndex = me._tabs.length;
                //  new a Tab instance
                var instance = new Tab( tab );
                //  add a new tab
                me._tabs.push( instance );
                //  gen a new html fragment
                var html = me._compiledTabTmpl( tab );

                //  append tab to dom
                $( 'ul',me._$root ).append( instance.headerDom() );
                //  append tab content to dom
                $( 'ul',me._$contentRegion ).append( instance.contentDom() );

            }
            //  final activate me tab
            me.activateTab( tabIndex );

        },

        /**
         *  关闭选项卡
         *  ，tab参数如果是一个int对象,那么直接将参数作为索引查找tab
         *  ，tab参数如果是一个string对象，那么默认按照tab的url属性进行查找
         *  ，tab参数如果是一个function对象，那么会在查找的过程中，使用指定的函数作为判等条件
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         closeTab
         *  @param          {Number|String|Function}        tab
         */
        closeTab : function( tab ){

            var me = this;
            var tabIndex = me.indexOf( tab );
            if( tabIndex == -1 ){ return; }
            //  set currentTab
            var myTabs = me._tabs;
            var lastIndex = tabIndex === 0 ? 1 : ( tabIndex - 1 > 0 ? tabIndex - 1 : 0 );
            if( lastIndex > myTabs.length ){
                lastIndex = myTabs.length - 1;
            }

            var tabToClose = myTabs[tabIndex];
            var currTab = me.currentTab();
            if( currTab == tabToClose ){ me.activateTab( lastIndex ); }

            //  close tab and remove dom reference
            tabToClose.close();
            tabToClose = null;
            //  remove tab instance from tabs collection
            myTabs.splice( tabIndex,1 );
            me._tabs = myTabs;
        },

        /**
         *  关闭所有选项卡
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         closeAllTab
         */
        closeAllTab : function(){
            var me      = this;
            var keep    = [];
            var removal = []
            var myTabs  = me._tabs;
            //  iterate all tab instances
            for (var i = 0,l = myTabs.length; i < l; i++) {
                var item = myTabs[i];
                if( !item.closable() ){
                    keep.push( item );
                }else{
                    removal.push( item );
                }
            }

            for (var i = 0,l = removal.length; i < l; i++) {
                removal[i].close();
            };
            //  release old tab collection
            me._tabs = keep;
            if( keep.length > 0 ){ me.activateTab(0); }
        },

        /**
         *  关闭指定选项卡以外的所有选项卡
         *  ，but参数如果是一个int对象,那么直接but参数作为索引查找tab
         *  ，but参数如果是一个string对象，那么默认按照url属性进行查找
         *  ，but参数如果是一个function对象，那么会在查找的过程中，使用指定的函数作为判等条件
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         closeAllTab
         *  @param          {Number|String|Function}        but
         *  @example
         *      ctrl.closeOtherTabs(0);
         *      ctrl.closeOtherTabs('tabname');
         */
        closeOtherTabs:function( but ){

            var me = this;
            var tabIndex = me.indexOf( but );
            if( tabIndex == -1 ){ return; }

            //  first activate the excluded tab
            me.activateTab( tabIndex );

            //  close other tabs
            for (var i = 0,l = me._tabs.length; i < l; i++) {
                if( tabIndex != i ){
                    me._tabs[i].close();
                }
            }

            //  maintains internal status
            var excludeTab = me.getTab( tabIndex );
            me._tabs = [ excludeTab ];

        },

        /**
         *  获取选项卡对象
         *  ，tab参数如果是一个int对象,那么直接将参数作为索引查找tab
         *  ，tab参数如果是一个string对象，那么默认按照tab的url属性进行查找
         *  ，tab参数如果是一个function对象，那么会在查找的过程中，使用指定的函数作为判等条件
         *  ，如果没有找到tab的实例，返回null
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         getTab
         *  @param          {Number|String|Function}        tab
         *  @returns        {Tab}
         */
        getTab : function( tab ){
            var me = this;
            var tabIndex = me.indexOf( tab );
            if( tabIndex == -1 ){ return null; }
            return me._tabs[tabIndex];
        },

        /**
         *  获取选项卡对象的索引
         *  ，如果isEqual参数是一个合法的索引，那么直接返回
         *  ，isEqual参数如果是一个string对象，那么默认按照tab的url属性进行查找
         *  ，isEqual参数如果是一个function对象，那么会在查找的过程中，使用指定的函数作为判等条件
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         indexOf
         *  @param          {Number|String|Function}               isEqual or tab name
         *  @returns        {Number}
         */
        indexOf : function( isEqual ){

            var me = this;
            if( me.isNull( isEqual ) || me._tabs.length == 0 ){ 
                return -1; 
            }

            var tabIndex = -1;
            if( me.isNumber( isEqual ) ){

                tabIndex = parseInt( isEqual );
                if( isNaN( tabIndex ) || tabIndex < 0 || tabIndex >= me._tabs.length ){
                    tabIndex = -1;
                }
                return tabIndex;

            }

            var fn = null;
            if( me.isString( isEqual ) ){
                /* well, tab parameter is a instance of Tab class */
                fn = function( tab ){
                    return tab['url']() === isEqual; 
                };

            }else if( me.isFunc( isEqual ) ){
                fn = isEqual;
            }else{
                return -1;
            }

            var tabs = me._tabs;
            for (var i = 0,l = tabs.length; i < l; i++) {
                if( fn( tabs[i] ) ){
                    tabIndex = i;
                    break;
                }
            }

            return tabIndex;

        },

        /**
         *  激活指定的选项卡
         *  ，tab参数如果是一个int对象,那么直接将参数作为索引查找tab
         *  ，tab参数如果是一个string对象，那么默认按照tab的url属性进行查找
         *  ，tab参数如果是一个function对象，那么会在查找的过程中，使用指定的函数作为判等条件
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         activateTab
         *  @param          {Number|String|Function}        tab
         */
        activateTab : function( tab ){
            var me = this;
            var tabIndex = me.indexOf( tab );
            if( tabIndex === -1 ){ return; }
            me.currentTab( tabIndex );

        },

        /**
         *  刷新tab页面的内容
         *  ，tab参数如果是一个int对象,那么直接将参数作为索引查找tab
         *  ，tab参数如果是一个string对象，那么默认按照tab的url属性进行查找
         *  ，tab参数如果是一个function对象，那么会在查找的过程中，使用指定的函数作为判等条件
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs
         *  @method         refreshTab
         *  @param          {Number|String|Function}        tab
         */
        refreshTab : function( tab ){
            var me = this;
            /* if tab parameter was not been assigned, the current active tab will be refreshed */
            if( me.isNull( tab ) ){
                var currTab = me.currentTab();
                if( currTab ){
                    currTab.refresh();
                }
                return;
            }

            var tabInstance = me.getTab( tab );
            if( tabInstance ){
                tabInstance.refresh();
            }

        },

        /**
         *  调整tab内容区域的iframe的width以及height
         *  @public
         *  @instance
         *  @memberof       ebaui.web.Tabs 
         *  @method         resizeContent
         */
        resizeContent:function( size ){

            if( !size ){ return; }
            var me = this;
            if( me.isNull(size['width']) ){ return; }

            var $content = me._$contentRegion;
            var $ifm = $( 'iframe',$content );
            
            $ifm.width(size['width']);
            $ifm.height(size['height']);

        },

        /**
         *  jquery选择器
         *  ，用来指定tab内容的区域
         *  ，控件content内容将会输出在这个地方
         *  @public
         *  @instance
         *  @readonly
         *  @memberof       ebaui.web.Tabs 
         *  @member         {String}                        contentRegion
         */
        contentRegion:function(){ return this.options['contentRegion']; },

        /**
         *  默认首页，{ title:'',url:'' }，其中，url是必选项
         *  。如果没有指定title，则title默认为 Tab + tabIndex。
         *  @public
         *  @instance
         *  @readonly
         *  @memberof       ebaui.web.Tabs 
         *  @member         {Object}                        home
         */
        home:function( val ){
            if( !val ){ return this.options['home']; }
        },

        /**
         *  控件配置
         *  @private
         *  @instance
         *  @memberof   ebaui.web.Tabs
         *  @member     {Object}            options
         */
        options : {

            //  默认首页
            home:{ title:'',url:'',closable:false },

            //  jquery选择器，用来指定tab内容的区域, 控件输出的内容将会全部显示在这边
            contentRegion : '.eba-tabs-body'
        }

    });

})( jQuery,ebaui );
/**
 *  ebaui.lang.zh_CN.js,简体中文本地化文件
 *  @file 
 *  @author Monkey <knightuniverse@qq.com>
 */
;;(function( $,ebaui ){

    if( moment ){ moment.lang('zh-cn'); }

    var webctrls                                                   = ebaui['web'];
    var validationRules                                            = webctrls['validationRules'];
    
    validationRules['required'].prototype.message                  = '该输入项为必输项';
    validationRules['email'].prototype.message                     = '请输入有效的电子邮件地址';
    validationRules['url'].prototype.message                       = '请输入有效的URL地址';
    
    validationRules['len'].prototype._parameterInvalidException    = '请设置合法的最小文本长度和最大文本长度';
    validationRules['len'].prototype._originalMessage              = '字符串长度应该介于 {0} 和 {1} 之间';
    validationRules['len'].prototype.message                       = '字符串长度应该介于 {0} 和 {1} 之间';
    
    validationRules['remote'].prototype._parameterInvalidException = '请正确配置remote验证规则的参数，其中url和pass参数是必选项';
    
    webctrls.Calendar.prototype._titleDisplayFormat                = 'YYYY年MM月';
    webctrls.Calendar.prototype._formatInvalidException            = '日期格式异常，请输入正确格式的日期!';
    webctrls.Calendar.prototype._weeks                             = ['日', '一', '二', '三', '四', '五', '六'];
    webctrls.Calendar.prototype._months                            = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];
    
    webctrls.DateTimePicker.prototype._buttons.today.text          = '今天';
    webctrls.DateTimePicker.prototype._buttons.ok.text             = '确定';
    webctrls.DateTimePicker.prototype._buttons.clear.text          = '清除';
    webctrls.DateTimePicker.prototype._formatInvalidException      = '日期格式异常，请输入正确格式的日期!';
    
    webctrls.FileUploader.prototype._uploadUrlEmptyException       = 'uploadUrl属性不能为空！';
    
    vex.dialog.buttons.YES.text                                    = '确认';
    vex.dialog.buttons.NO.text                                     = '取消';

    /*var uiLayoutPanesConf = ebaui.web.UiLayout.prototype.options['layout']['panes'];
    var westToggler = uiLayoutPanesConf['west']['toggler'];
    westToggler['open']['tip'] = '关闭';
    westToggler['close']['tip'] = '打开';

    var eastToggler = uiLayoutPanesConf['east']['toggler'];
    eastToggler['open']['tip'] = '关闭';
    eastToggler['close']['tip'] = '打开';

    var northToggler = uiLayoutPanesConf['north']['toggler'];
    northToggler['open']['tip'] = '关闭';
    northToggler['close']['tip'] = '打开';

    var southToggler = uiLayoutPanesConf['south']['toggler'];
    southToggler['open']['tip'] = '关闭';
    southToggler['close']['tip'] = '打开';*/
    

})( jQuery,ebaui );
;(function($){
/**
 * jqGrid Chinese Translation for v4.2
 * henryyan 2011.11.30
 * http://www.wsria.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 * 
 * update 2011.11.30
 *		add double u3000 SPACE for search:odata to fix SEARCH box display err when narrow width from only use of eq/ne/cn/in/lt/gt operator under IE6/7
**/
$.jgrid = $.jgrid || {};
$.extend($.jgrid,{
	defaults : {
		recordtext: "{0} - {1}\u3000共 {2} 条",	// 共字前是全角空格
		emptyrecords: "无数据显示",
		loadtext: "读取中...",
		pgtext : " {0} 共 {1} 页"
	},
	search : {
		caption: "搜索...",
		Find: "查找",
		Reset: "重置",
		odata : [{oper:'eq', text:'等于\u3000\u3000'},{oper:'ne', text: '不等\u3000\u3000'}, { oper:'lt', text:'小于\u3000\u3000'},{ oper:'le', text: '小于等于'},{ oper:'gt', text:'大于\u3000\u3000'},{ oper:'ge', text:'大于等于'},
			{oper:'bw', text:'开始于'},{ oper:'bn', text:'不开始于'},{ oper:'in', text:'属于\u3000\u3000'},{ oper:'ni', text:'不属于'},{ oper:'ew', text:'结束于'},{ oper:'en', text:'不结束于'},{ oper:'cn', text:'包含\u3000\u3000'},{ oper:'nc', text:'不包含'},{ oper:'nu', text:'空值于\u3000\u3000'},{ oper:'nn', text:'非空值'}],
		groupOps: [	{ op: "AND", text: "所有" },	{ op: "OR",  text: "任一" }	]
	},
	edit : {
		addCaption: "添加记录",
		editCaption: "编辑记录",
		bSubmit: "提交",
		bCancel: "取消",
		bClose: "关闭",
		saveData: "数据已改变，是否保存？",
		bYes : "是",
		bNo : "否",
		bExit : "取消",
		msg: {
			required:"此字段必需",
			number:"请输入有效数字",
			minValue:"输值必须大于等于 ",
			maxValue:"输值必须小于等于 ",
			email: "这不是有效的e-mail地址",
			integer: "请输入有效整数",
			date: "请输入有效时间",
			url: "无效网址。前缀必须为 ('http://' 或 'https://')",
			nodefined : " 未定义！",
			novalue : " 需要返回值！",
			customarray : "自定义函数需要返回数组！",
			customfcheck : "Custom function should be present in case of custom checking!"
			
		}
	},
	view : {
		caption: "查看记录",
		bClose: "关闭"
	},
	del : {
		caption: "删除",
		msg: "删除所选记录？",
		bSubmit: "删除",
		bCancel: "取消"
	},
	nav : {
		edittext: "",
		edittitle: "编辑所选记录",
		addtext:"",
		addtitle: "添加新记录",
		deltext: "",
		deltitle: "删除所选记录",
		searchtext: "",
		searchtitle: "查找",
		refreshtext: "",
		refreshtitle: "刷新表格",
		alertcap: "注意",
		alerttext: "请选择记录",
		viewtext: "",
		viewtitle: "查看所选记录"
	},
	col : {
		caption: "选择列",
		bSubmit: "确定",
		bCancel: "取消"
	},
	errors : {
		errcap : "错误",
		nourl : "没有设置url",
		norecords: "没有要处理的记录",
		model : "colNames 和 colModel 长度不等！"
	},
	formatter : {
		integer : {thousandsSeparator: " ", defaultValue: '0'},
		number : {decimalSeparator:".", thousandsSeparator: " ", decimalPlaces: 2, defaultValue: '0.00'},
		currency : {decimalSeparator:".", thousandsSeparator: " ", decimalPlaces: 2, prefix: "", suffix:"", defaultValue: '0.00'},
		date : {
			dayNames:   [
				"Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat",
		         "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
			],
			monthNames: [
				"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
				"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
			],
			AmPm : ["am","pm","AM","PM"],
			S: function (j) {return j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th'},
			srcformat: 'Y-m-d',
			newformat: 'm-d-Y',
			parseRe : /[Tt\\\/:_;.,\t\s-]/,
			masks : {
				ISO8601Long:"Y-m-d H:i:s",
				ISO8601Short:"Y-m-d",
				ShortDate: "Y/j/n",
				LongDate: "l, F d, Y",
				FullDateTime: "l, F d, Y g:i:s A",
				MonthDay: "F d",
				ShortTime: "g:i A",
				LongTime: "g:i:s A",
				SortableDateTime: "Y-m-d\\TH:i:s",
				UniversalSortableDateTime: "Y-m-d H:i:sO",
				YearMonth: "F, Y"
			},
			reformatAfterEdit : false
		},
		baseLinkUrl: '',
		showAction: '',
		target: '',
		checkbox : {disabled:true},
		idName : 'id'
	}
});
})(jQuery);
